
headphone_3_single 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012094  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001821c  0801225c  0801225c  0002225c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a478  0802a478  00040748  2**0
                  CONTENTS
  4 .ARM          00000008  0802a478  0802a478  0003a478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a480  0802a480  00040748  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802a480  0802a480  0003a480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a484  0802a484  0003a484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000748  20000000  0802a488  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002e864  20000748  0802abd0  00040748  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2002efac  0802abd0  0004efac  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  00040748  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024b5e  00000000  00000000  0004077c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d94  00000000  00000000  000652da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017b8  00000000  00000000  0006a070  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001518  00000000  00000000  0006b828  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002824f  00000000  00000000  0006cd40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001814e  00000000  00000000  00094f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fafeb  00000000  00000000  000ad0dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00001ef7  00000000  00000000  001a80c8  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  000001c1  00000000  00000000  001a9fbf  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000020  00000000  00000000  001aa180  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00009744  00000000  00000000  001aa1a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000748 	.word	0x20000748
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08012244 	.word	0x08012244

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000074c 	.word	0x2000074c
 8000204:	08012244 	.word	0x08012244

08000208 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8000208:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800020a:	2b01      	cmp	r3, #1
	IT       LS
 800020c:	bf98      	it	ls
	BXLS     lr
 800020e:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000210:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000214:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000216:	089b      	lsrs	r3, r3, #2

08000218 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000218:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800021c:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000220:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000222:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 8000226:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000228:	4481      	add	r9, r0
	ADD      r2,r0,r2
 800022a:	4402      	add	r2, r0
	ADD      r12,r0,r12
 800022c:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 800022e:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 8000232:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000236:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000238:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 800023c:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000240:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 8000244:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000248:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 800024a:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 800024e:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 8000252:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 8000254:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000258:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 800025c:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000260:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 8000264:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 8000266:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000268:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 800026a:	d1d5      	bne.n	8000218 <arm_bitreversal_32_0>
	POP      {r4-r9}
 800026c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000270:	4770      	bx	lr

08000272 <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 8000272:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000274:	2b01      	cmp	r3, #1
	IT       LS
 8000276:	bf98      	it	ls
	BXLS     lr
 8000278:	4770      	bxls	lr
	PUSH     {r4-r9}
 800027a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800027e:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000280:	089b      	lsrs	r3, r3, #2

08000282 <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000282:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000286:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 800028a:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800028c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000290:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 8000294:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000298:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 800029c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 80002a0:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80002a4:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80002a8:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80002aa:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80002ae:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80002b2:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80002b6:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002ba:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80002bc:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002be:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80002c0:	d1df      	bne.n	8000282 <arm_bitreversal_16_0>
	POP      {r4-r9}
 80002c2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002c6:	4770      	bx	lr

080002c8 <CRC_Lock>:
 80002c8:	f8df 09cc 	ldr.w	r0, [pc, #2508]	; 8000c98 <.text_19>
 80002cc:	f240 4249 	movw	r2, #1097	; 0x449
 80002d0:	6801      	ldr	r1, [r0, #0]
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	0049      	lsls	r1, r1, #1
 80002d6:	6001      	str	r1, [r0, #0]
 80002d8:	f8df 0a60 	ldr.w	r0, [pc, #2656]	; 8000d3c <.text_21>
 80002dc:	6801      	ldr	r1, [r0, #0]
 80002de:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80002e2:	4291      	cmp	r1, r2
 80002e4:	d115      	bne.n	8000312 <CRC_Lock+0x4a>
 80002e6:	2001      	movs	r0, #1
 80002e8:	2200      	movs	r2, #0
 80002ea:	2100      	movs	r1, #0
 80002ec:	4310      	orrs	r0, r2
 80002ee:	4308      	orrs	r0, r1
 80002f0:	d01d      	beq.n	800032e <CRC_Lock+0x66>
 80002f2:	f8df 1a4c 	ldr.w	r1, [pc, #2636]	; 8000d40 <.text_22>
 80002f6:	2201      	movs	r2, #1
 80002f8:	608a      	str	r2, [r1, #8]
 80002fa:	6888      	ldr	r0, [r1, #8]
 80002fc:	2800      	cmp	r0, #0
 80002fe:	d1fc      	bne.n	80002fa <CRC_Lock+0x32>
 8000300:	f8df 2a40 	ldr.w	r2, [pc, #2624]	; 8000d44 <.text_23>
 8000304:	f8df 3b58 	ldr.w	r3, [pc, #2904]	; 8000e60 <.text_28>
 8000308:	600a      	str	r2, [r1, #0]
 800030a:	6809      	ldr	r1, [r1, #0]
 800030c:	4299      	cmp	r1, r3
 800030e:	d026      	beq.n	800035e <CRC_Lock+0x96>
 8000310:	e7fe      	b.n	8000310 <CRC_Lock+0x48>
 8000312:	2000      	movs	r0, #0
 8000314:	f240 4c51 	movw	ip, #1105	; 0x451
 8000318:	4561      	cmp	r1, ip
 800031a:	bf08      	it	eq
 800031c:	2201      	moveq	r2, #1
 800031e:	d0e4      	beq.n	80002ea <CRC_Lock+0x22>
 8000320:	2200      	movs	r2, #0
 8000322:	f240 4352 	movw	r3, #1106	; 0x452
 8000326:	4299      	cmp	r1, r3
 8000328:	d1df      	bne.n	80002ea <CRC_Lock+0x22>
 800032a:	2101      	movs	r1, #1
 800032c:	e7de      	b.n	80002ec <CRC_Lock+0x24>
 800032e:	f8df 0a18 	ldr.w	r0, [pc, #2584]	; 8000d48 <.text_24>
 8000332:	6801      	ldr	r1, [r0, #0]
 8000334:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000338:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800033c:	d10f      	bne.n	800035e <CRC_Lock+0x96>
 800033e:	f8df 1a0c 	ldr.w	r1, [pc, #2572]	; 8000d4c <.text_25>
 8000342:	2201      	movs	r2, #1
 8000344:	608a      	str	r2, [r1, #8]
 8000346:	6888      	ldr	r0, [r1, #8]
 8000348:	2800      	cmp	r0, #0
 800034a:	d1fc      	bne.n	8000346 <CRC_Lock+0x7e>
 800034c:	f8df 29f4 	ldr.w	r2, [pc, #2548]	; 8000d44 <.text_23>
 8000350:	f8df 3b0c 	ldr.w	r3, [pc, #2828]	; 8000e60 <.text_28>
 8000354:	600a      	str	r2, [r1, #0]
 8000356:	6809      	ldr	r1, [r1, #0]
 8000358:	4299      	cmp	r1, r3
 800035a:	d000      	beq.n	800035e <CRC_Lock+0x96>
 800035c:	e7fe      	b.n	800035c <CRC_Lock+0x94>
 800035e:	4770      	bx	lr

08000360 <_ai_platform_get_io_buffers>:
 8000360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000364:	b081      	sub	sp, #4
 8000366:	468b      	mov	fp, r1
 8000368:	6801      	ldr	r1, [r0, #0]
 800036a:	2600      	movs	r6, #0
 800036c:	46b0      	mov	r8, r6
 800036e:	f04f 0904 	mov.w	r9, #4
 8000372:	46b2      	mov	sl, r6
 8000374:	680f      	ldr	r7, [r1, #0]
 8000376:	8901      	ldrh	r1, [r0, #8]
 8000378:	b339      	cbz	r1, 80003ca <_ai_platform_get_io_buffers+0x6a>
 800037a:	4604      	mov	r4, r0
 800037c:	6862      	ldr	r2, [r4, #4]
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	1c76      	adds	r6, r6, #1
 8000382:	f108 0801 	add.w	r8, r8, #1
 8000386:	6851      	ldr	r1, [r2, #4]
 8000388:	6818      	ldr	r0, [r3, #0]
 800038a:	eb01 050a 	add.w	r5, r1, sl
 800038e:	f10a 0a14 	add.w	sl, sl, #20
 8000392:	f004 fadd 	bl	8004950 <ai_array_to_buffer_fmt>
 8000396:	6028      	str	r0, [r5, #0]
 8000398:	2201      	movs	r2, #1
 800039a:	80aa      	strh	r2, [r5, #4]
 800039c:	6938      	ldr	r0, [r7, #16]
 800039e:	80e8      	strh	r0, [r5, #6]
 80003a0:	68f9      	ldr	r1, [r7, #12]
 80003a2:	8129      	strh	r1, [r5, #8]
 80003a4:	68b8      	ldr	r0, [r7, #8]
 80003a6:	60e8      	str	r0, [r5, #12]
 80003a8:	683a      	ldr	r2, [r7, #0]
 80003aa:	6891      	ldr	r1, [r2, #8]
 80003ac:	6129      	str	r1, [r5, #16]
 80003ae:	8921      	ldrh	r1, [r4, #8]
 80003b0:	6820      	ldr	r0, [r4, #0]
 80003b2:	4588      	cmp	r8, r1
 80003b4:	f850 7009 	ldr.w	r7, [r0, r9]
 80003b8:	f109 0904 	add.w	r9, r9, #4
 80003bc:	d3de      	bcc.n	800037c <_ai_platform_get_io_buffers+0x1c>
 80003be:	b2b0      	uxth	r0, r6
 80003c0:	b118      	cbz	r0, 80003ca <_ai_platform_get_io_buffers+0x6a>
 80003c2:	6860      	ldr	r0, [r4, #4]
 80003c4:	6841      	ldr	r1, [r0, #4]
 80003c6:	f8cb 1000 	str.w	r1, [fp]
 80003ca:	b2b0      	uxth	r0, r6
 80003cc:	b001      	add	sp, #4
 80003ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080003d2 <_platform_network_state_setup>:
 80003d2:	b430      	push	{r4, r5}
 80003d4:	6914      	ldr	r4, [r2, #16]
 80003d6:	6a13      	ldr	r3, [r2, #32]
 80003d8:	435c      	muls	r4, r3
 80003da:	6084      	str	r4, [r0, #8]
 80003dc:	888d      	ldrh	r5, [r1, #4]
 80003de:	436c      	muls	r4, r5
 80003e0:	60c4      	str	r4, [r0, #12]
 80003e2:	6909      	ldr	r1, [r1, #16]
 80003e4:	68c3      	ldr	r3, [r0, #12]
 80003e6:	6041      	str	r1, [r0, #4]
 80003e8:	4419      	add	r1, r3
 80003ea:	6001      	str	r1, [r0, #0]
 80003ec:	6812      	ldr	r2, [r2, #0]
 80003ee:	6814      	ldr	r4, [r2, #0]
 80003f0:	00a5      	lsls	r5, r4, #2
 80003f2:	d407      	bmi.n	8000404 <_platform_network_state_setup+0x32>
 80003f4:	6894      	ldr	r4, [r2, #8]
 80003f6:	68d1      	ldr	r1, [r2, #12]
 80003f8:	6843      	ldr	r3, [r0, #4]
 80003fa:	1a64      	subs	r4, r4, r1
 80003fc:	1919      	adds	r1, r3, r4
 80003fe:	6091      	str	r1, [r2, #8]
 8000400:	6840      	ldr	r0, [r0, #4]
 8000402:	60d0      	str	r0, [r2, #12]
 8000404:	bc30      	pop	{r4, r5}
 8000406:	4770      	bx	lr

08000408 <_platform_network_state_update_input>:
 8000408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800040c:	4605      	mov	r5, r0
 800040e:	2600      	movs	r6, #0
 8000410:	6828      	ldr	r0, [r5, #0]
 8000412:	2704      	movs	r7, #4
 8000414:	46b0      	mov	r8, r6
 8000416:	6801      	ldr	r1, [r0, #0]
 8000418:	8928      	ldrh	r0, [r5, #8]
 800041a:	b340      	cbz	r0, 800046e <_platform_network_state_update_input+0x66>
 800041c:	686a      	ldr	r2, [r5, #4]
 800041e:	6813      	ldr	r3, [r2, #0]
 8000420:	680a      	ldr	r2, [r1, #0]
 8000422:	eb03 0408 	add.w	r4, r3, r8
 8000426:	6861      	ldr	r1, [r4, #4]
 8000428:	6813      	ldr	r3, [r2, #0]
 800042a:	6890      	ldr	r0, [r2, #8]
 800042c:	ea5f 0c83 	movs.w	ip, r3, lsl #2
 8000430:	d503      	bpl.n	800043a <_platform_network_state_update_input+0x32>
 8000432:	68a2      	ldr	r2, [r4, #8]
 8000434:	f010 fc5c 	bl	8010cf0 <__aeabi_memcpy>
 8000438:	e005      	b.n	8000446 <_platform_network_state_update_input+0x3e>
 800043a:	68d3      	ldr	r3, [r2, #12]
 800043c:	1ac0      	subs	r0, r0, r3
 800043e:	180b      	adds	r3, r1, r0
 8000440:	6093      	str	r3, [r2, #8]
 8000442:	6860      	ldr	r0, [r4, #4]
 8000444:	60d0      	str	r0, [r2, #12]
 8000446:	6861      	ldr	r1, [r4, #4]
 8000448:	68a0      	ldr	r0, [r4, #8]
 800044a:	4408      	add	r0, r1
 800044c:	6821      	ldr	r1, [r4, #0]
 800044e:	6060      	str	r0, [r4, #4]
 8000450:	4288      	cmp	r0, r1
 8000452:	d302      	bcc.n	800045a <_platform_network_state_update_input+0x52>
 8000454:	68e2      	ldr	r2, [r4, #12]
 8000456:	4252      	negs	r2, r2
 8000458:	1888      	adds	r0, r1, r2
 800045a:	6060      	str	r0, [r4, #4]
 800045c:	6828      	ldr	r0, [r5, #0]
 800045e:	892a      	ldrh	r2, [r5, #8]
 8000460:	1c76      	adds	r6, r6, #1
 8000462:	f108 0810 	add.w	r8, r8, #16
 8000466:	59c1      	ldr	r1, [r0, r7]
 8000468:	1d3f      	adds	r7, r7, #4
 800046a:	4296      	cmp	r6, r2
 800046c:	d3d6      	bcc.n	800041c <_platform_network_state_update_input+0x14>
 800046e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000472 <_platform_network_state_update_output>:
 8000472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000476:	4605      	mov	r5, r0
 8000478:	2600      	movs	r6, #0
 800047a:	6828      	ldr	r0, [r5, #0]
 800047c:	2704      	movs	r7, #4
 800047e:	46b0      	mov	r8, r6
 8000480:	6801      	ldr	r1, [r0, #0]
 8000482:	8928      	ldrh	r0, [r5, #8]
 8000484:	b398      	cbz	r0, 80004ee <_platform_network_state_update_output+0x7c>
 8000486:	6809      	ldr	r1, [r1, #0]
 8000488:	686a      	ldr	r2, [r5, #4]
 800048a:	6813      	ldr	r3, [r2, #0]
 800048c:	eb03 0408 	add.w	r4, r3, r8
 8000490:	680b      	ldr	r3, [r1, #0]
 8000492:	6860      	ldr	r0, [r4, #4]
 8000494:	68a2      	ldr	r2, [r4, #8]
 8000496:	ea5f 0c83 	movs.w	ip, r3, lsl #2
 800049a:	d50e      	bpl.n	80004ba <_platform_network_state_update_output+0x48>
 800049c:	6889      	ldr	r1, [r1, #8]
 800049e:	f010 fc27 	bl	8010cf0 <__aeabi_memcpy>
 80004a2:	6821      	ldr	r1, [r4, #0]
 80004a4:	6862      	ldr	r2, [r4, #4]
 80004a6:	68a3      	ldr	r3, [r4, #8]
 80004a8:	18d0      	adds	r0, r2, r3
 80004aa:	4288      	cmp	r0, r1
 80004ac:	6060      	str	r0, [r4, #4]
 80004ae:	d302      	bcc.n	80004b6 <_platform_network_state_update_output+0x44>
 80004b0:	68e0      	ldr	r0, [r4, #12]
 80004b2:	4240      	negs	r0, r0
 80004b4:	4408      	add	r0, r1
 80004b6:	6060      	str	r0, [r4, #4]
 80004b8:	e010      	b.n	80004dc <_platform_network_state_update_output+0x6a>
 80004ba:	4410      	add	r0, r2
 80004bc:	6822      	ldr	r2, [r4, #0]
 80004be:	6060      	str	r0, [r4, #4]
 80004c0:	4290      	cmp	r0, r2
 80004c2:	d302      	bcc.n	80004ca <_platform_network_state_update_output+0x58>
 80004c4:	68e0      	ldr	r0, [r4, #12]
 80004c6:	4240      	negs	r0, r0
 80004c8:	4410      	add	r0, r2
 80004ca:	6060      	str	r0, [r4, #4]
 80004cc:	4602      	mov	r2, r0
 80004ce:	6888      	ldr	r0, [r1, #8]
 80004d0:	68cb      	ldr	r3, [r1, #12]
 80004d2:	1ac0      	subs	r0, r0, r3
 80004d4:	1813      	adds	r3, r2, r0
 80004d6:	608b      	str	r3, [r1, #8]
 80004d8:	6862      	ldr	r2, [r4, #4]
 80004da:	60ca      	str	r2, [r1, #12]
 80004dc:	6828      	ldr	r0, [r5, #0]
 80004de:	892a      	ldrh	r2, [r5, #8]
 80004e0:	1c76      	adds	r6, r6, #1
 80004e2:	f108 0810 	add.w	r8, r8, #16
 80004e6:	59c1      	ldr	r1, [r0, r7]
 80004e8:	1d3f      	adds	r7, r7, #4
 80004ea:	4296      	cmp	r6, r2
 80004ec:	d3cb      	bcc.n	8000486 <_platform_network_state_update_output+0x14>
 80004ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080004f2 <_platform_network_io_bind>:
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d100      	bne.n	80004f8 <_platform_network_io_bind+0x6>
 80004f6:	4770      	bx	lr
 80004f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004fc:	b081      	sub	sp, #4
 80004fe:	2300      	movs	r3, #0
 8000500:	b405      	push	{r0, r2}
 8000502:	b081      	sub	sp, #4
 8000504:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000506:	8243      	strh	r3, [r0, #18]
 8000508:	9b01      	ldr	r3, [sp, #4]
 800050a:	2000      	movs	r0, #0
 800050c:	8218      	strh	r0, [r3, #16]
 800050e:	9c01      	ldr	r4, [sp, #4]
 8000510:	7a20      	ldrb	r0, [r4, #8]
 8000512:	f000 0003 	and.w	r0, r0, #3
 8000516:	2803      	cmp	r0, #3
 8000518:	d004      	beq.n	8000524 <_platform_network_io_bind+0x32>
 800051a:	2230      	movs	r2, #48	; 0x30
 800051c:	2111      	movs	r1, #17
 800051e:	f104 000c 	add.w	r0, r4, #12
 8000522:	e0d1      	b.n	80006c8 <_platform_network_io_bind+0x1d6>
 8000524:	2900      	cmp	r1, #0
 8000526:	bf1c      	itt	ne
 8000528:	8910      	ldrhne	r0, [r2, #8]
 800052a:	2800      	cmpne	r0, #0
 800052c:	f000 80c6 	beq.w	80006bc <_platform_network_io_bind+0x1ca>
 8000530:	6813      	ldr	r3, [r2, #0]
 8000532:	2700      	movs	r7, #0
 8000534:	f8b1 a004 	ldrh.w	sl, [r1, #4]
 8000538:	2504      	movs	r5, #4
 800053a:	46b9      	mov	r9, r7
 800053c:	1d0e      	adds	r6, r1, #4
 800053e:	681c      	ldr	r4, [r3, #0]
 8000540:	9200      	str	r2, [sp, #0]
 8000542:	9800      	ldr	r0, [sp, #0]
 8000544:	8901      	ldrh	r1, [r0, #8]
 8000546:	428f      	cmp	r7, r1
 8000548:	f080 80b4 	bcs.w	80006b4 <_platform_network_io_bind+0x1c2>
 800054c:	6840      	ldr	r0, [r0, #4]
 800054e:	2c00      	cmp	r4, #0
 8000550:	6801      	ldr	r1, [r0, #0]
 8000552:	eb01 0809 	add.w	r8, r1, r9
 8000556:	bf18      	it	ne
 8000558:	f1b8 0f00 	cmpne.w	r8, #0
 800055c:	f000 80ae 	beq.w	80006bc <_platform_network_io_bind+0x1ca>
 8000560:	8873      	ldrh	r3, [r6, #2]
 8000562:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 8000566:	6820      	ldr	r0, [r4, #0]
 8000568:	68b2      	ldr	r2, [r6, #8]
 800056a:	fb03 fe0c 	mul.w	lr, r3, ip
 800056e:	6841      	ldr	r1, [r0, #4]
 8000570:	fb02 fe0e 	mul.w	lr, r2, lr
 8000574:	4571      	cmp	r1, lr
 8000576:	f0c0 80a3 	bcc.w	80006c0 <_platform_network_io_bind+0x1ce>
 800057a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800057e:	459e      	cmp	lr, r3
 8000580:	bf04      	itt	eq
 8000582:	68e3      	ldreq	r3, [r4, #12]
 8000584:	4563      	cmpeq	r3, ip
 8000586:	bf04      	itt	eq
 8000588:	f8d4 c008 	ldreq.w	ip, [r4, #8]
 800058c:	4594      	cmpeq	ip, r2
 800058e:	f040 8097 	bne.w	80006c0 <_platform_network_io_bind+0x1ce>
 8000592:	6800      	ldr	r0, [r0, #0]
 8000594:	f004 fab4 	bl	8004b00 <ai_array_get_byte_size>
 8000598:	6921      	ldr	r1, [r4, #16]
 800059a:	6a22      	ldr	r2, [r4, #32]
 800059c:	4351      	muls	r1, r2
 800059e:	4288      	cmp	r0, r1
 80005a0:	f0c0 808e 	bcc.w	80006c0 <_platform_network_io_bind+0x1ce>
 80005a4:	6820      	ldr	r0, [r4, #0]
 80005a6:	6800      	ldr	r0, [r0, #0]
 80005a8:	f004 f9d2 	bl	8004950 <ai_array_to_buffer_fmt>
 80005ac:	f856 1c04 	ldr.w	r1, [r6, #-4]
 80005b0:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80005b4:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 80005b8:	4288      	cmp	r0, r1
 80005ba:	d115      	bne.n	80005e8 <_platform_network_io_bind+0xf6>
 80005bc:	68f0      	ldr	r0, [r6, #12]
 80005be:	2800      	cmp	r0, #0
 80005c0:	d07c      	beq.n	80006bc <_platform_network_io_bind+0x1ca>
 80005c2:	8830      	ldrh	r0, [r6, #0]
 80005c4:	b190      	cbz	r0, 80005ec <_platform_network_io_bind+0xfa>
 80005c6:	4550      	cmp	r0, sl
 80005c8:	4622      	mov	r2, r4
 80005ca:	f109 0910 	add.w	r9, r9, #16
 80005ce:	bf28      	it	cs
 80005d0:	4682      	movcs	sl, r0
 80005d2:	1f31      	subs	r1, r6, #4
 80005d4:	4640      	mov	r0, r8
 80005d6:	f7ff fefc 	bl	80003d2 <_platform_network_state_setup>
 80005da:	9800      	ldr	r0, [sp, #0]
 80005dc:	1c7f      	adds	r7, r7, #1
 80005de:	3614      	adds	r6, #20
 80005e0:	6801      	ldr	r1, [r0, #0]
 80005e2:	594c      	ldr	r4, [r1, r5]
 80005e4:	1d2d      	adds	r5, r5, #4
 80005e6:	e7ac      	b.n	8000542 <_platform_network_io_bind+0x50>
 80005e8:	2219      	movs	r2, #25
 80005ea:	e06a      	b.n	80006c2 <_platform_network_io_bind+0x1d0>
 80005ec:	2221      	movs	r2, #33	; 0x21
 80005ee:	e068      	b.n	80006c2 <_platform_network_io_bind+0x1d0>
 80005f0:	9a01      	ldr	r2, [sp, #4]
 80005f2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80005f4:	f103 020c 	add.w	r2, r3, #12
 80005f8:	8911      	ldrh	r1, [r2, #8]
 80005fa:	2900      	cmp	r1, #0
 80005fc:	d074      	beq.n	80006e8 <_platform_network_io_bind+0x1f6>
 80005fe:	6813      	ldr	r3, [r2, #0]
 8000600:	2700      	movs	r7, #0
 8000602:	2504      	movs	r5, #4
 8000604:	46b9      	mov	r9, r7
 8000606:	1d06      	adds	r6, r0, #4
 8000608:	681c      	ldr	r4, [r3, #0]
 800060a:	9200      	str	r2, [sp, #0]
 800060c:	9800      	ldr	r0, [sp, #0]
 800060e:	8901      	ldrh	r1, [r0, #8]
 8000610:	428f      	cmp	r7, r1
 8000612:	d25f      	bcs.n	80006d4 <_platform_network_io_bind+0x1e2>
 8000614:	6840      	ldr	r0, [r0, #4]
 8000616:	2c00      	cmp	r4, #0
 8000618:	6801      	ldr	r1, [r0, #0]
 800061a:	eb01 0809 	add.w	r8, r1, r9
 800061e:	bf18      	it	ne
 8000620:	f1b8 0f00 	cmpne.w	r8, #0
 8000624:	d05d      	beq.n	80006e2 <_platform_network_io_bind+0x1f0>
 8000626:	8873      	ldrh	r3, [r6, #2]
 8000628:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 800062c:	6820      	ldr	r0, [r4, #0]
 800062e:	68b2      	ldr	r2, [r6, #8]
 8000630:	fb03 fe0c 	mul.w	lr, r3, ip
 8000634:	6841      	ldr	r1, [r0, #4]
 8000636:	fb02 fe0e 	mul.w	lr, r2, lr
 800063a:	4571      	cmp	r1, lr
 800063c:	d354      	bcc.n	80006e8 <_platform_network_io_bind+0x1f6>
 800063e:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8000642:	459e      	cmp	lr, r3
 8000644:	bf04      	itt	eq
 8000646:	68e3      	ldreq	r3, [r4, #12]
 8000648:	4563      	cmpeq	r3, ip
 800064a:	bf04      	itt	eq
 800064c:	f8d4 c008 	ldreq.w	ip, [r4, #8]
 8000650:	4594      	cmpeq	ip, r2
 8000652:	d149      	bne.n	80006e8 <_platform_network_io_bind+0x1f6>
 8000654:	6800      	ldr	r0, [r0, #0]
 8000656:	f004 fa53 	bl	8004b00 <ai_array_get_byte_size>
 800065a:	6921      	ldr	r1, [r4, #16]
 800065c:	6a22      	ldr	r2, [r4, #32]
 800065e:	4351      	muls	r1, r2
 8000660:	4288      	cmp	r0, r1
 8000662:	d341      	bcc.n	80006e8 <_platform_network_io_bind+0x1f6>
 8000664:	6820      	ldr	r0, [r4, #0]
 8000666:	6800      	ldr	r0, [r0, #0]
 8000668:	f004 f972 	bl	8004950 <ai_array_to_buffer_fmt>
 800066c:	f856 1c04 	ldr.w	r1, [r6, #-4]
 8000670:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8000674:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000678:	4288      	cmp	r0, r1
 800067a:	d115      	bne.n	80006a8 <_platform_network_io_bind+0x1b6>
 800067c:	68f0      	ldr	r0, [r6, #12]
 800067e:	2800      	cmp	r0, #0
 8000680:	d02f      	beq.n	80006e2 <_platform_network_io_bind+0x1f0>
 8000682:	8830      	ldrh	r0, [r6, #0]
 8000684:	b198      	cbz	r0, 80006ae <_platform_network_io_bind+0x1bc>
 8000686:	4550      	cmp	r0, sl
 8000688:	4622      	mov	r2, r4
 800068a:	f109 0910 	add.w	r9, r9, #16
 800068e:	bf28      	it	cs
 8000690:	4682      	movcs	sl, r0
 8000692:	1f31      	subs	r1, r6, #4
 8000694:	4640      	mov	r0, r8
 8000696:	f7ff fe9c 	bl	80003d2 <_platform_network_state_setup>
 800069a:	9800      	ldr	r0, [sp, #0]
 800069c:	1c7f      	adds	r7, r7, #1
 800069e:	3614      	adds	r6, #20
 80006a0:	6801      	ldr	r1, [r0, #0]
 80006a2:	594c      	ldr	r4, [r1, r5]
 80006a4:	1d2d      	adds	r5, r5, #4
 80006a6:	e7b1      	b.n	800060c <_platform_network_io_bind+0x11a>
 80006a8:	2219      	movs	r2, #25
 80006aa:	2113      	movs	r1, #19
 80006ac:	e00a      	b.n	80006c4 <_platform_network_io_bind+0x1d2>
 80006ae:	2221      	movs	r2, #33	; 0x21
 80006b0:	2113      	movs	r1, #19
 80006b2:	e007      	b.n	80006c4 <_platform_network_io_bind+0x1d2>
 80006b4:	9802      	ldr	r0, [sp, #8]
 80006b6:	2800      	cmp	r0, #0
 80006b8:	d19a      	bne.n	80005f0 <_platform_network_io_bind+0xfe>
 80006ba:	e00e      	b.n	80006da <_platform_network_io_bind+0x1e8>
 80006bc:	2217      	movs	r2, #23
 80006be:	e000      	b.n	80006c2 <_platform_network_io_bind+0x1d0>
 80006c0:	2218      	movs	r2, #24
 80006c2:	2112      	movs	r1, #18
 80006c4:	9801      	ldr	r0, [sp, #4]
 80006c6:	300c      	adds	r0, #12
 80006c8:	f000 fc63 	bl	8000f92 <core_set_error>
 80006cc:	2000      	movs	r0, #0
 80006ce:	b004      	add	sp, #16
 80006d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d4:	9801      	ldr	r0, [sp, #4]
 80006d6:	f8a0 a010 	strh.w	sl, [r0, #16]
 80006da:	2001      	movs	r0, #1
 80006dc:	b004      	add	sp, #16
 80006de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e2:	2217      	movs	r2, #23
 80006e4:	2113      	movs	r1, #19
 80006e6:	e7ed      	b.n	80006c4 <_platform_network_io_bind+0x1d2>
 80006e8:	2218      	movs	r2, #24
 80006ea:	2113      	movs	r1, #19
 80006ec:	e7ea      	b.n	80006c4 <_platform_network_io_bind+0x1d2>

080006ee <ai_platform_runtime_get_revision>:
 80006ee:	f8df 05a8 	ldr.w	r0, [pc, #1448]	; 8000c98 <.text_19>
 80006f2:	f240 4249 	movw	r2, #1097	; 0x449
 80006f6:	6801      	ldr	r1, [r0, #0]
 80006f8:	0849      	lsrs	r1, r1, #1
 80006fa:	0049      	lsls	r1, r1, #1
 80006fc:	6001      	str	r1, [r0, #0]
 80006fe:	f8df 063c 	ldr.w	r0, [pc, #1596]	; 8000d3c <.text_21>
 8000702:	6801      	ldr	r1, [r0, #0]
 8000704:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000708:	4291      	cmp	r1, r2
 800070a:	d115      	bne.n	8000738 <ai_platform_runtime_get_revision+0x4a>
 800070c:	2001      	movs	r0, #1
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	4310      	orrs	r0, r2
 8000714:	4308      	orrs	r0, r1
 8000716:	d01d      	beq.n	8000754 <ai_platform_runtime_get_revision+0x66>
 8000718:	f8df 1624 	ldr.w	r1, [pc, #1572]	; 8000d40 <.text_22>
 800071c:	2201      	movs	r2, #1
 800071e:	608a      	str	r2, [r1, #8]
 8000720:	6888      	ldr	r0, [r1, #8]
 8000722:	2800      	cmp	r0, #0
 8000724:	d1fc      	bne.n	8000720 <ai_platform_runtime_get_revision+0x32>
 8000726:	f8df 261c 	ldr.w	r2, [pc, #1564]	; 8000d44 <.text_23>
 800072a:	f8df 3734 	ldr.w	r3, [pc, #1844]	; 8000e60 <.text_28>
 800072e:	600a      	str	r2, [r1, #0]
 8000730:	6809      	ldr	r1, [r1, #0]
 8000732:	4299      	cmp	r1, r3
 8000734:	d026      	beq.n	8000784 <ai_platform_runtime_get_revision+0x96>
 8000736:	e7fe      	b.n	8000736 <ai_platform_runtime_get_revision+0x48>
 8000738:	2000      	movs	r0, #0
 800073a:	f240 4c51 	movw	ip, #1105	; 0x451
 800073e:	4561      	cmp	r1, ip
 8000740:	bf08      	it	eq
 8000742:	2201      	moveq	r2, #1
 8000744:	d0e4      	beq.n	8000710 <ai_platform_runtime_get_revision+0x22>
 8000746:	2200      	movs	r2, #0
 8000748:	f240 4352 	movw	r3, #1106	; 0x452
 800074c:	4299      	cmp	r1, r3
 800074e:	d1df      	bne.n	8000710 <ai_platform_runtime_get_revision+0x22>
 8000750:	2101      	movs	r1, #1
 8000752:	e7de      	b.n	8000712 <ai_platform_runtime_get_revision+0x24>
 8000754:	f8df 05f0 	ldr.w	r0, [pc, #1520]	; 8000d48 <.text_24>
 8000758:	6801      	ldr	r1, [r0, #0]
 800075a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800075e:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8000762:	d10f      	bne.n	8000784 <ai_platform_runtime_get_revision+0x96>
 8000764:	f8df 15e4 	ldr.w	r1, [pc, #1508]	; 8000d4c <.text_25>
 8000768:	2201      	movs	r2, #1
 800076a:	608a      	str	r2, [r1, #8]
 800076c:	6888      	ldr	r0, [r1, #8]
 800076e:	2800      	cmp	r0, #0
 8000770:	d1fc      	bne.n	800076c <ai_platform_runtime_get_revision+0x7e>
 8000772:	f8df 25d0 	ldr.w	r2, [pc, #1488]	; 8000d44 <.text_23>
 8000776:	f8df 36e8 	ldr.w	r3, [pc, #1768]	; 8000e60 <.text_28>
 800077a:	600a      	str	r2, [r1, #0]
 800077c:	6809      	ldr	r1, [r1, #0]
 800077e:	4299      	cmp	r1, r3
 8000780:	d000      	beq.n	8000784 <ai_platform_runtime_get_revision+0x96>
 8000782:	e7fe      	b.n	8000782 <ai_platform_runtime_get_revision+0x94>
 8000784:	a0a3      	add	r0, pc, #652	; (adr r0, 8000a14 <.text_14>)
 8000786:	4770      	bx	lr

08000788 <ai_platform_runtime_get_version>:
 8000788:	f8df 050c 	ldr.w	r0, [pc, #1292]	; 8000c98 <.text_19>
 800078c:	f240 4249 	movw	r2, #1097	; 0x449
 8000790:	6801      	ldr	r1, [r0, #0]
 8000792:	0849      	lsrs	r1, r1, #1
 8000794:	0049      	lsls	r1, r1, #1
 8000796:	6001      	str	r1, [r0, #0]
 8000798:	f8df 05a0 	ldr.w	r0, [pc, #1440]	; 8000d3c <.text_21>
 800079c:	6801      	ldr	r1, [r0, #0]
 800079e:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80007a2:	4291      	cmp	r1, r2
 80007a4:	d115      	bne.n	80007d2 <ai_platform_runtime_get_version+0x4a>
 80007a6:	2001      	movs	r0, #1
 80007a8:	2200      	movs	r2, #0
 80007aa:	2100      	movs	r1, #0
 80007ac:	4310      	orrs	r0, r2
 80007ae:	4308      	orrs	r0, r1
 80007b0:	d01d      	beq.n	80007ee <ai_platform_runtime_get_version+0x66>
 80007b2:	f8df 158c 	ldr.w	r1, [pc, #1420]	; 8000d40 <.text_22>
 80007b6:	2201      	movs	r2, #1
 80007b8:	608a      	str	r2, [r1, #8]
 80007ba:	6888      	ldr	r0, [r1, #8]
 80007bc:	2800      	cmp	r0, #0
 80007be:	d1fc      	bne.n	80007ba <ai_platform_runtime_get_version+0x32>
 80007c0:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 8000d44 <.text_23>
 80007c4:	f8df 3770 	ldr.w	r3, [pc, #1904]	; 8000f38 <.text_30>
 80007c8:	600a      	str	r2, [r1, #0]
 80007ca:	6809      	ldr	r1, [r1, #0]
 80007cc:	4299      	cmp	r1, r3
 80007ce:	d026      	beq.n	800081e <ai_platform_runtime_get_version+0x96>
 80007d0:	e7fe      	b.n	80007d0 <ai_platform_runtime_get_version+0x48>
 80007d2:	2000      	movs	r0, #0
 80007d4:	f240 4c51 	movw	ip, #1105	; 0x451
 80007d8:	4561      	cmp	r1, ip
 80007da:	bf08      	it	eq
 80007dc:	2201      	moveq	r2, #1
 80007de:	d0e4      	beq.n	80007aa <ai_platform_runtime_get_version+0x22>
 80007e0:	2200      	movs	r2, #0
 80007e2:	f240 4352 	movw	r3, #1106	; 0x452
 80007e6:	4299      	cmp	r1, r3
 80007e8:	d1df      	bne.n	80007aa <ai_platform_runtime_get_version+0x22>
 80007ea:	2101      	movs	r1, #1
 80007ec:	e7de      	b.n	80007ac <ai_platform_runtime_get_version+0x24>
 80007ee:	f8df 0558 	ldr.w	r0, [pc, #1368]	; 8000d48 <.text_24>
 80007f2:	6801      	ldr	r1, [r0, #0]
 80007f4:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80007f8:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80007fc:	d10f      	bne.n	800081e <ai_platform_runtime_get_version+0x96>
 80007fe:	f8df 154c 	ldr.w	r1, [pc, #1356]	; 8000d4c <.text_25>
 8000802:	2201      	movs	r2, #1
 8000804:	608a      	str	r2, [r1, #8]
 8000806:	6888      	ldr	r0, [r1, #8]
 8000808:	2800      	cmp	r0, #0
 800080a:	d1fc      	bne.n	8000806 <ai_platform_runtime_get_version+0x7e>
 800080c:	f8df 2534 	ldr.w	r2, [pc, #1332]	; 8000d44 <.text_23>
 8000810:	f8df 3724 	ldr.w	r3, [pc, #1828]	; 8000f38 <.text_30>
 8000814:	600a      	str	r2, [r1, #0]
 8000816:	6809      	ldr	r1, [r1, #0]
 8000818:	4299      	cmp	r1, r3
 800081a:	d000      	beq.n	800081e <ai_platform_runtime_get_version+0x96>
 800081c:	e7fe      	b.n	800081c <ai_platform_runtime_get_version+0x94>
 800081e:	f20f 703c 	addw	r0, pc, #1852	; 0x73c
 8000822:	6800      	ldr	r0, [r0, #0]
 8000824:	4770      	bx	lr

08000826 <ai_platform_api_get_version>:
 8000826:	f8df 0470 	ldr.w	r0, [pc, #1136]	; 8000c98 <.text_19>
 800082a:	f240 4249 	movw	r2, #1097	; 0x449
 800082e:	6801      	ldr	r1, [r0, #0]
 8000830:	0849      	lsrs	r1, r1, #1
 8000832:	0049      	lsls	r1, r1, #1
 8000834:	6001      	str	r1, [r0, #0]
 8000836:	f8df 0504 	ldr.w	r0, [pc, #1284]	; 8000d3c <.text_21>
 800083a:	6801      	ldr	r1, [r0, #0]
 800083c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000840:	4291      	cmp	r1, r2
 8000842:	d115      	bne.n	8000870 <ai_platform_api_get_version+0x4a>
 8000844:	2001      	movs	r0, #1
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	4310      	orrs	r0, r2
 800084c:	4308      	orrs	r0, r1
 800084e:	d01d      	beq.n	800088c <ai_platform_api_get_version+0x66>
 8000850:	f8df 14ec 	ldr.w	r1, [pc, #1260]	; 8000d40 <.text_22>
 8000854:	2201      	movs	r2, #1
 8000856:	608a      	str	r2, [r1, #8]
 8000858:	6888      	ldr	r0, [r1, #8]
 800085a:	2800      	cmp	r0, #0
 800085c:	d1fc      	bne.n	8000858 <ai_platform_api_get_version+0x32>
 800085e:	f8df 24e4 	ldr.w	r2, [pc, #1252]	; 8000d44 <.text_23>
 8000862:	f8df 36d4 	ldr.w	r3, [pc, #1748]	; 8000f38 <.text_30>
 8000866:	600a      	str	r2, [r1, #0]
 8000868:	6809      	ldr	r1, [r1, #0]
 800086a:	4299      	cmp	r1, r3
 800086c:	d026      	beq.n	80008bc <ai_platform_api_get_version+0x96>
 800086e:	e7fe      	b.n	800086e <ai_platform_api_get_version+0x48>
 8000870:	2000      	movs	r0, #0
 8000872:	f240 4c51 	movw	ip, #1105	; 0x451
 8000876:	4561      	cmp	r1, ip
 8000878:	bf08      	it	eq
 800087a:	2201      	moveq	r2, #1
 800087c:	d0e4      	beq.n	8000848 <ai_platform_api_get_version+0x22>
 800087e:	2200      	movs	r2, #0
 8000880:	f240 4352 	movw	r3, #1106	; 0x452
 8000884:	4299      	cmp	r1, r3
 8000886:	d1df      	bne.n	8000848 <ai_platform_api_get_version+0x22>
 8000888:	2101      	movs	r1, #1
 800088a:	e7de      	b.n	800084a <ai_platform_api_get_version+0x24>
 800088c:	f8df 04b8 	ldr.w	r0, [pc, #1208]	; 8000d48 <.text_24>
 8000890:	6801      	ldr	r1, [r0, #0]
 8000892:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000896:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800089a:	d10f      	bne.n	80008bc <ai_platform_api_get_version+0x96>
 800089c:	f8df 14ac 	ldr.w	r1, [pc, #1196]	; 8000d4c <.text_25>
 80008a0:	2201      	movs	r2, #1
 80008a2:	608a      	str	r2, [r1, #8]
 80008a4:	6888      	ldr	r0, [r1, #8]
 80008a6:	2800      	cmp	r0, #0
 80008a8:	d1fc      	bne.n	80008a4 <ai_platform_api_get_version+0x7e>
 80008aa:	f8df 2498 	ldr.w	r2, [pc, #1176]	; 8000d44 <.text_23>
 80008ae:	f8df 3688 	ldr.w	r3, [pc, #1672]	; 8000f38 <.text_30>
 80008b2:	600a      	str	r2, [r1, #0]
 80008b4:	6809      	ldr	r1, [r1, #0]
 80008b6:	4299      	cmp	r1, r3
 80008b8:	d000      	beq.n	80008bc <ai_platform_api_get_version+0x96>
 80008ba:	e7fe      	b.n	80008ba <ai_platform_api_get_version+0x94>
 80008bc:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 80008c0:	6800      	ldr	r0, [r0, #0]
 80008c2:	4770      	bx	lr

080008c4 <ai_platform_interface_api_get_version>:
 80008c4:	f8df 03d0 	ldr.w	r0, [pc, #976]	; 8000c98 <.text_19>
 80008c8:	f240 4249 	movw	r2, #1097	; 0x449
 80008cc:	6801      	ldr	r1, [r0, #0]
 80008ce:	0849      	lsrs	r1, r1, #1
 80008d0:	0049      	lsls	r1, r1, #1
 80008d2:	6001      	str	r1, [r0, #0]
 80008d4:	f8df 0464 	ldr.w	r0, [pc, #1124]	; 8000d3c <.text_21>
 80008d8:	6801      	ldr	r1, [r0, #0]
 80008da:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80008de:	4291      	cmp	r1, r2
 80008e0:	d115      	bne.n	800090e <ai_platform_interface_api_get_version+0x4a>
 80008e2:	2001      	movs	r0, #1
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	4310      	orrs	r0, r2
 80008ea:	4308      	orrs	r0, r1
 80008ec:	d01d      	beq.n	800092a <ai_platform_interface_api_get_version+0x66>
 80008ee:	f8df 1450 	ldr.w	r1, [pc, #1104]	; 8000d40 <.text_22>
 80008f2:	2201      	movs	r2, #1
 80008f4:	608a      	str	r2, [r1, #8]
 80008f6:	6888      	ldr	r0, [r1, #8]
 80008f8:	2800      	cmp	r0, #0
 80008fa:	d1fc      	bne.n	80008f6 <ai_platform_interface_api_get_version+0x32>
 80008fc:	f8df 2444 	ldr.w	r2, [pc, #1092]	; 8000d44 <.text_23>
 8000900:	f8df 3634 	ldr.w	r3, [pc, #1588]	; 8000f38 <.text_30>
 8000904:	600a      	str	r2, [r1, #0]
 8000906:	6809      	ldr	r1, [r1, #0]
 8000908:	4299      	cmp	r1, r3
 800090a:	d026      	beq.n	800095a <ai_platform_interface_api_get_version+0x96>
 800090c:	e7fe      	b.n	800090c <ai_platform_interface_api_get_version+0x48>
 800090e:	2000      	movs	r0, #0
 8000910:	f240 4c51 	movw	ip, #1105	; 0x451
 8000914:	4561      	cmp	r1, ip
 8000916:	bf08      	it	eq
 8000918:	2201      	moveq	r2, #1
 800091a:	d0e4      	beq.n	80008e6 <ai_platform_interface_api_get_version+0x22>
 800091c:	2200      	movs	r2, #0
 800091e:	f240 4352 	movw	r3, #1106	; 0x452
 8000922:	4299      	cmp	r1, r3
 8000924:	d1df      	bne.n	80008e6 <ai_platform_interface_api_get_version+0x22>
 8000926:	2101      	movs	r1, #1
 8000928:	e7de      	b.n	80008e8 <ai_platform_interface_api_get_version+0x24>
 800092a:	f8df 041c 	ldr.w	r0, [pc, #1052]	; 8000d48 <.text_24>
 800092e:	6801      	ldr	r1, [r0, #0]
 8000930:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000934:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8000938:	d10f      	bne.n	800095a <ai_platform_interface_api_get_version+0x96>
 800093a:	f8df 1410 	ldr.w	r1, [pc, #1040]	; 8000d4c <.text_25>
 800093e:	2201      	movs	r2, #1
 8000940:	608a      	str	r2, [r1, #8]
 8000942:	6888      	ldr	r0, [r1, #8]
 8000944:	2800      	cmp	r0, #0
 8000946:	d1fc      	bne.n	8000942 <ai_platform_interface_api_get_version+0x7e>
 8000948:	f8df 23f8 	ldr.w	r2, [pc, #1016]	; 8000d44 <.text_23>
 800094c:	f8df 35e8 	ldr.w	r3, [pc, #1512]	; 8000f38 <.text_30>
 8000950:	600a      	str	r2, [r1, #0]
 8000952:	6809      	ldr	r1, [r1, #0]
 8000954:	4299      	cmp	r1, r3
 8000956:	d000      	beq.n	800095a <ai_platform_interface_api_get_version+0x96>
 8000958:	e7fe      	b.n	8000958 <ai_platform_interface_api_get_version+0x94>
 800095a:	f20f 6008 	addw	r0, pc, #1544	; 0x608
 800095e:	6800      	ldr	r0, [r0, #0]
 8000960:	4770      	bx	lr

08000962 <ai_platform_context_acquire>:
 8000962:	b430      	push	{r4, r5}
 8000964:	b120      	cbz	r0, 8000970 <ai_platform_context_acquire+0xe>
 8000966:	6801      	ldr	r1, [r0, #0]
 8000968:	f8df 25d0 	ldr.w	r2, [pc, #1488]	; 8000f3c <.text_31>
 800096c:	4291      	cmp	r1, r2
 800096e:	d000      	beq.n	8000972 <ai_platform_context_acquire+0x10>
 8000970:	2000      	movs	r0, #0
 8000972:	f8df 1324 	ldr.w	r1, [pc, #804]	; 8000c98 <.text_19>
 8000976:	f240 4449 	movw	r4, #1097	; 0x449
 800097a:	680b      	ldr	r3, [r1, #0]
 800097c:	085b      	lsrs	r3, r3, #1
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	600b      	str	r3, [r1, #0]
 8000982:	f8df 13b8 	ldr.w	r1, [pc, #952]	; 8000d3c <.text_21>
 8000986:	680a      	ldr	r2, [r1, #0]
 8000988:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800098c:	42a2      	cmp	r2, r4
 800098e:	d115      	bne.n	80009bc <ai_platform_context_acquire+0x5a>
 8000990:	2101      	movs	r1, #1
 8000992:	2300      	movs	r3, #0
 8000994:	2200      	movs	r2, #0
 8000996:	4319      	orrs	r1, r3
 8000998:	4311      	orrs	r1, r2
 800099a:	d01d      	beq.n	80009d8 <ai_platform_context_acquire+0x76>
 800099c:	f8df 23a0 	ldr.w	r2, [pc, #928]	; 8000d40 <.text_22>
 80009a0:	2301      	movs	r3, #1
 80009a2:	6093      	str	r3, [r2, #8]
 80009a4:	6891      	ldr	r1, [r2, #8]
 80009a6:	2900      	cmp	r1, #0
 80009a8:	d1fc      	bne.n	80009a4 <ai_platform_context_acquire+0x42>
 80009aa:	f8df 3398 	ldr.w	r3, [pc, #920]	; 8000d44 <.text_23>
 80009ae:	f8df 4588 	ldr.w	r4, [pc, #1416]	; 8000f38 <.text_30>
 80009b2:	6013      	str	r3, [r2, #0]
 80009b4:	6812      	ldr	r2, [r2, #0]
 80009b6:	42a2      	cmp	r2, r4
 80009b8:	d026      	beq.n	8000a08 <ai_platform_context_acquire+0xa6>
 80009ba:	e7fe      	b.n	80009ba <ai_platform_context_acquire+0x58>
 80009bc:	2100      	movs	r1, #0
 80009be:	f240 4551 	movw	r5, #1105	; 0x451
 80009c2:	42aa      	cmp	r2, r5
 80009c4:	bf08      	it	eq
 80009c6:	2301      	moveq	r3, #1
 80009c8:	d0e4      	beq.n	8000994 <ai_platform_context_acquire+0x32>
 80009ca:	2300      	movs	r3, #0
 80009cc:	f240 4452 	movw	r4, #1106	; 0x452
 80009d0:	42a2      	cmp	r2, r4
 80009d2:	d1df      	bne.n	8000994 <ai_platform_context_acquire+0x32>
 80009d4:	2201      	movs	r2, #1
 80009d6:	e7de      	b.n	8000996 <ai_platform_context_acquire+0x34>
 80009d8:	f8df 136c 	ldr.w	r1, [pc, #876]	; 8000d48 <.text_24>
 80009dc:	680a      	ldr	r2, [r1, #0]
 80009de:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80009e2:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80009e6:	d10f      	bne.n	8000a08 <ai_platform_context_acquire+0xa6>
 80009e8:	f8df 2360 	ldr.w	r2, [pc, #864]	; 8000d4c <.text_25>
 80009ec:	2301      	movs	r3, #1
 80009ee:	6093      	str	r3, [r2, #8]
 80009f0:	6891      	ldr	r1, [r2, #8]
 80009f2:	2900      	cmp	r1, #0
 80009f4:	d1fc      	bne.n	80009f0 <ai_platform_context_acquire+0x8e>
 80009f6:	f8df 334c 	ldr.w	r3, [pc, #844]	; 8000d44 <.text_23>
 80009fa:	f8df 453c 	ldr.w	r4, [pc, #1340]	; 8000f38 <.text_30>
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	6812      	ldr	r2, [r2, #0]
 8000a02:	42a2      	cmp	r2, r4
 8000a04:	d000      	beq.n	8000a08 <ai_platform_context_acquire+0xa6>
 8000a06:	e7fe      	b.n	8000a06 <ai_platform_context_acquire+0xa4>
 8000a08:	bc30      	pop	{r4, r5}
 8000a0a:	4770      	bx	lr

08000a0c <ai_platform_context_release>:
 8000a0c:	f8df 152c 	ldr.w	r1, [pc, #1324]	; 8000f3c <.text_31>
 8000a10:	6001      	str	r1, [r0, #0]
 8000a12:	4770      	bx	lr

08000a14 <.text_14>:
 8000a14:	00000000 	.word	0x00000000

08000a18 <ai_platform_network_get_error>:
 8000a18:	b430      	push	{r4, r5}
 8000a1a:	b120      	cbz	r0, 8000a26 <ai_platform_network_get_error+0xe>
 8000a1c:	6801      	ldr	r1, [r0, #0]
 8000a1e:	f8df 251c 	ldr.w	r2, [pc, #1308]	; 8000f3c <.text_31>
 8000a22:	4291      	cmp	r1, r2
 8000a24:	d000      	beq.n	8000a28 <ai_platform_network_get_error+0x10>
 8000a26:	2000      	movs	r0, #0
 8000a28:	499b      	ldr	r1, [pc, #620]	; (8000c98 <.text_19>)
 8000a2a:	f240 4449 	movw	r4, #1097	; 0x449
 8000a2e:	680b      	ldr	r3, [r1, #0]
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	600b      	str	r3, [r1, #0]
 8000a36:	f8df 1304 	ldr.w	r1, [pc, #772]	; 8000d3c <.text_21>
 8000a3a:	680a      	ldr	r2, [r1, #0]
 8000a3c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000a40:	42a2      	cmp	r2, r4
 8000a42:	d113      	bne.n	8000a6c <ai_platform_network_get_error+0x54>
 8000a44:	2101      	movs	r1, #1
 8000a46:	2300      	movs	r3, #0
 8000a48:	2200      	movs	r2, #0
 8000a4a:	4319      	orrs	r1, r3
 8000a4c:	4311      	orrs	r1, r2
 8000a4e:	d01b      	beq.n	8000a88 <ai_platform_network_get_error+0x70>
 8000a50:	4abb      	ldr	r2, [pc, #748]	; (8000d40 <.text_22>)
 8000a52:	2301      	movs	r3, #1
 8000a54:	6093      	str	r3, [r2, #8]
 8000a56:	6891      	ldr	r1, [r2, #8]
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	d1fc      	bne.n	8000a56 <ai_platform_network_get_error+0x3e>
 8000a5c:	4bb9      	ldr	r3, [pc, #740]	; (8000d44 <.text_23>)
 8000a5e:	f8df 44d8 	ldr.w	r4, [pc, #1240]	; 8000f38 <.text_30>
 8000a62:	6013      	str	r3, [r2, #0]
 8000a64:	6812      	ldr	r2, [r2, #0]
 8000a66:	42a2      	cmp	r2, r4
 8000a68:	d023      	beq.n	8000ab2 <ai_platform_network_get_error+0x9a>
 8000a6a:	e7fe      	b.n	8000a6a <ai_platform_network_get_error+0x52>
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f240 4551 	movw	r5, #1105	; 0x451
 8000a72:	42aa      	cmp	r2, r5
 8000a74:	bf08      	it	eq
 8000a76:	2301      	moveq	r3, #1
 8000a78:	d0e6      	beq.n	8000a48 <ai_platform_network_get_error+0x30>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f240 4452 	movw	r4, #1106	; 0x452
 8000a80:	42a2      	cmp	r2, r4
 8000a82:	d1e1      	bne.n	8000a48 <ai_platform_network_get_error+0x30>
 8000a84:	2201      	movs	r2, #1
 8000a86:	e7e0      	b.n	8000a4a <ai_platform_network_get_error+0x32>
 8000a88:	49af      	ldr	r1, [pc, #700]	; (8000d48 <.text_24>)
 8000a8a:	680a      	ldr	r2, [r1, #0]
 8000a8c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000a90:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8000a94:	d10d      	bne.n	8000ab2 <ai_platform_network_get_error+0x9a>
 8000a96:	4aad      	ldr	r2, [pc, #692]	; (8000d4c <.text_25>)
 8000a98:	2301      	movs	r3, #1
 8000a9a:	6093      	str	r3, [r2, #8]
 8000a9c:	6891      	ldr	r1, [r2, #8]
 8000a9e:	2900      	cmp	r1, #0
 8000aa0:	d1fc      	bne.n	8000a9c <ai_platform_network_get_error+0x84>
 8000aa2:	4ba8      	ldr	r3, [pc, #672]	; (8000d44 <.text_23>)
 8000aa4:	f8df 4490 	ldr.w	r4, [pc, #1168]	; 8000f38 <.text_30>
 8000aa8:	6013      	str	r3, [r2, #0]
 8000aaa:	6812      	ldr	r2, [r2, #0]
 8000aac:	42a2      	cmp	r2, r4
 8000aae:	d000      	beq.n	8000ab2 <ai_platform_network_get_error+0x9a>
 8000ab0:	e7fe      	b.n	8000ab0 <ai_platform_network_get_error+0x98>
 8000ab2:	b920      	cbnz	r0, 8000abe <ai_platform_network_get_error+0xa6>
 8000ab4:	f20f 40c0 	addw	r0, pc, #1216	; 0x4c0
 8000ab8:	6800      	ldr	r0, [r0, #0]
 8000aba:	bc30      	pop	{r4, r5}
 8000abc:	4770      	bx	lr
 8000abe:	300c      	adds	r0, #12
 8000ac0:	bc30      	pop	{r4, r5}
 8000ac2:	f000 ba61 	b.w	8000f88 <core_get_error>

08000ac6 <ai_platform_network_set_error>:
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf1c      	itt	ne
 8000aca:	300c      	addne	r0, #12
 8000acc:	f000 ba61 	bne.w	8000f92 <core_set_error>
 8000ad0:	4770      	bx	lr

08000ad2 <ai_platform_api_get_network_report>:
 8000ad2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ad6:	0004      	movs	r4, r0
 8000ad8:	b081      	sub	sp, #4
 8000ada:	460d      	mov	r5, r1
 8000adc:	d004      	beq.n	8000ae8 <ai_platform_api_get_network_report+0x16>
 8000ade:	6820      	ldr	r0, [r4, #0]
 8000ae0:	f8df 1458 	ldr.w	r1, [pc, #1112]	; 8000f3c <.text_31>
 8000ae4:	4288      	cmp	r0, r1
 8000ae6:	d000      	beq.n	8000aea <ai_platform_api_get_network_report+0x18>
 8000ae8:	2400      	movs	r4, #0
 8000aea:	486b      	ldr	r0, [pc, #428]	; (8000c98 <.text_19>)
 8000aec:	f240 4349 	movw	r3, #1097	; 0x449
 8000af0:	6802      	ldr	r2, [r0, #0]
 8000af2:	0852      	lsrs	r2, r2, #1
 8000af4:	0052      	lsls	r2, r2, #1
 8000af6:	6002      	str	r2, [r0, #0]
 8000af8:	4890      	ldr	r0, [pc, #576]	; (8000d3c <.text_21>)
 8000afa:	6801      	ldr	r1, [r0, #0]
 8000afc:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000b00:	4299      	cmp	r1, r3
 8000b02:	d113      	bne.n	8000b2c <ai_platform_api_get_network_report+0x5a>
 8000b04:	2001      	movs	r0, #1
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4310      	orrs	r0, r2
 8000b0c:	4308      	orrs	r0, r1
 8000b0e:	d01b      	beq.n	8000b48 <ai_platform_api_get_network_report+0x76>
 8000b10:	498b      	ldr	r1, [pc, #556]	; (8000d40 <.text_22>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	608a      	str	r2, [r1, #8]
 8000b16:	6888      	ldr	r0, [r1, #8]
 8000b18:	2800      	cmp	r0, #0
 8000b1a:	d1fc      	bne.n	8000b16 <ai_platform_api_get_network_report+0x44>
 8000b1c:	4a89      	ldr	r2, [pc, #548]	; (8000d44 <.text_23>)
 8000b1e:	f8df 3340 	ldr.w	r3, [pc, #832]	; 8000e60 <.text_28>
 8000b22:	600a      	str	r2, [r1, #0]
 8000b24:	6809      	ldr	r1, [r1, #0]
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d022      	beq.n	8000b70 <ai_platform_api_get_network_report+0x9e>
 8000b2a:	e7fe      	b.n	8000b2a <ai_platform_api_get_network_report+0x58>
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f240 4651 	movw	r6, #1105	; 0x451
 8000b32:	42b1      	cmp	r1, r6
 8000b34:	bf08      	it	eq
 8000b36:	2201      	moveq	r2, #1
 8000b38:	d0e6      	beq.n	8000b08 <ai_platform_api_get_network_report+0x36>
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f240 4352 	movw	r3, #1106	; 0x452
 8000b40:	4299      	cmp	r1, r3
 8000b42:	d1e1      	bne.n	8000b08 <ai_platform_api_get_network_report+0x36>
 8000b44:	2101      	movs	r1, #1
 8000b46:	e7e0      	b.n	8000b0a <ai_platform_api_get_network_report+0x38>
 8000b48:	487f      	ldr	r0, [pc, #508]	; (8000d48 <.text_24>)
 8000b4a:	6801      	ldr	r1, [r0, #0]
 8000b4c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000b50:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8000b54:	d10c      	bne.n	8000b70 <ai_platform_api_get_network_report+0x9e>
 8000b56:	497d      	ldr	r1, [pc, #500]	; (8000d4c <.text_25>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	608a      	str	r2, [r1, #8]
 8000b5c:	6888      	ldr	r0, [r1, #8]
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	d1fc      	bne.n	8000b5c <ai_platform_api_get_network_report+0x8a>
 8000b62:	4a78      	ldr	r2, [pc, #480]	; (8000d44 <.text_23>)
 8000b64:	4bbe      	ldr	r3, [pc, #760]	; (8000e60 <.text_28>)
 8000b66:	600a      	str	r2, [r1, #0]
 8000b68:	6809      	ldr	r1, [r1, #0]
 8000b6a:	4299      	cmp	r1, r3
 8000b6c:	d000      	beq.n	8000b70 <ai_platform_api_get_network_report+0x9e>
 8000b6e:	e7fe      	b.n	8000b6e <ai_platform_api_get_network_report+0x9c>
 8000b70:	2c00      	cmp	r4, #0
 8000b72:	bf18      	it	ne
 8000b74:	2d00      	cmpne	r5, #0
 8000b76:	d056      	beq.n	8000c26 <ai_platform_api_get_network_report+0x154>
 8000b78:	2000      	movs	r0, #0
 8000b7a:	6668      	str	r0, [r5, #100]	; 0x64
 8000b7c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000b7e:	2a00      	cmp	r2, #0
 8000b80:	d04b      	beq.n	8000c1a <ai_platform_api_get_network_report+0x148>
 8000b82:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8000b84:	1c49      	adds	r1, r1, #1
 8000b86:	6669      	str	r1, [r5, #100]	; 0x64
 8000b88:	6890      	ldr	r0, [r2, #8]
 8000b8a:	4282      	cmp	r2, r0
 8000b8c:	bf1c      	itt	ne
 8000b8e:	2800      	cmpne	r0, #0
 8000b90:	4602      	movne	r2, r0
 8000b92:	d1f6      	bne.n	8000b82 <ai_platform_api_get_network_report+0xb0>
 8000b94:	e03f      	b.n	8000c16 <ai_platform_api_get_network_report+0x144>
 8000b96:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000b98:	f105 0134 	add.w	r1, r5, #52	; 0x34
 8000b9c:	f7ff fbe0 	bl	8000360 <_ai_platform_get_io_buffers>
 8000ba0:	8628      	strh	r0, [r5, #48]	; 0x30
 8000ba2:	b910      	cbnz	r0, 8000baa <ai_platform_api_get_network_report+0xd8>
 8000ba4:	2218      	movs	r2, #24
 8000ba6:	2112      	movs	r1, #18
 8000ba8:	e039      	b.n	8000c1e <ai_platform_api_get_network_report+0x14c>
 8000baa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000bac:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8000bb0:	300c      	adds	r0, #12
 8000bb2:	f7ff fbd5 	bl	8000360 <_ai_platform_get_io_buffers>
 8000bb6:	8668      	strh	r0, [r5, #50]	; 0x32
 8000bb8:	b910      	cbnz	r0, 8000bc0 <ai_platform_api_get_network_report+0xee>
 8000bba:	2218      	movs	r2, #24
 8000bbc:	2113      	movs	r1, #19
 8000bbe:	e02e      	b.n	8000c1e <ai_platform_api_get_network_report+0x14c>
 8000bc0:	6860      	ldr	r0, [r4, #4]
 8000bc2:	f104 0228 	add.w	r2, r4, #40	; 0x28
 8000bc6:	66a8      	str	r0, [r5, #104]	; 0x68
 8000bc8:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 8000bcc:	e892 50c8 	ldmia.w	r2, {r3, r6, r7, ip, lr}
 8000bd0:	e881 50c8 	stmia.w	r1, {r3, r6, r7, ip, lr}
 8000bd4:	3414      	adds	r4, #20
 8000bd6:	f105 0850 	add.w	r8, r5, #80	; 0x50
 8000bda:	e894 0e03 	ldmia.w	r4, {r0, r1, r9, sl, fp}
 8000bde:	e888 0e03 	stmia.w	r8, {r0, r1, r9, sl, fp}
 8000be2:	f7ff fb71 	bl	80002c8 <CRC_Lock>
 8000be6:	a09d      	add	r0, pc, #628	; (adr r0, 8000e5c <.text_27>)
 8000be8:	6128      	str	r0, [r5, #16]
 8000bea:	f7ff fb6d 	bl	80002c8 <CRC_Lock>
 8000bee:	f20f 316c 	addw	r1, pc, #876	; 0x36c
 8000bf2:	680a      	ldr	r2, [r1, #0]
 8000bf4:	616a      	str	r2, [r5, #20]
 8000bf6:	f7ff fb67 	bl	80002c8 <CRC_Lock>
 8000bfa:	f20f 3064 	addw	r0, pc, #868	; 0x364
 8000bfe:	6801      	ldr	r1, [r0, #0]
 8000c00:	6269      	str	r1, [r5, #36]	; 0x24
 8000c02:	f7ff fb61 	bl	80002c8 <CRC_Lock>
 8000c06:	f20f 325c 	addw	r2, pc, #860	; 0x35c
 8000c0a:	6810      	ldr	r0, [r2, #0]
 8000c0c:	62a8      	str	r0, [r5, #40]	; 0x28
 8000c0e:	2001      	movs	r0, #1
 8000c10:	b001      	add	sp, #4
 8000c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c16:	2900      	cmp	r1, #0
 8000c18:	d1bd      	bne.n	8000b96 <ai_platform_api_get_network_report+0xc4>
 8000c1a:	2218      	movs	r2, #24
 8000c1c:	2111      	movs	r1, #17
 8000c1e:	f104 000c 	add.w	r0, r4, #12
 8000c22:	f000 f9b6 	bl	8000f92 <core_set_error>
 8000c26:	2000      	movs	r0, #0
 8000c28:	b001      	add	sp, #4
 8000c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000c2e <ai_platform_network_create>:
 8000c2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c30:	b081      	sub	sp, #4
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	9d06      	ldr	r5, [sp, #24]
 8000c36:	4604      	mov	r4, r0
 8000c38:	9807      	ldr	r0, [sp, #28]
 8000c3a:	4616      	mov	r6, r2
 8000c3c:	042d      	lsls	r5, r5, #16
 8000c3e:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8000c42:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000c46:	f20f 3034 	addw	r0, pc, #820	; 0x334
 8000c4a:	6807      	ldr	r7, [r0, #0]
 8000c4c:	f7ff fb3c 	bl	80002c8 <CRC_Lock>
 8000c50:	b924      	cbnz	r4, 8000c5c <ai_platform_network_create+0x2e>
 8000c52:	f20f 302c 	addw	r0, pc, #812	; 0x32c
 8000c56:	b001      	add	sp, #4
 8000c58:	6800      	ldr	r0, [r0, #0]
 8000c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c5c:	f8df 12dc 	ldr.w	r1, [pc, #732]	; 8000f3c <.text_31>
 8000c60:	6031      	str	r1, [r6, #0]
 8000c62:	6026      	str	r6, [r4, #0]
 8000c64:	f000 f98e 	bl	8000f84 <core_init>
 8000c68:	b910      	cbnz	r0, 8000c70 <ai_platform_network_create+0x42>
 8000c6a:	f20f 20fc 	addw	r0, pc, #764	; 0x2fc
 8000c6e:	e00d      	b.n	8000c8c <ai_platform_network_create+0x5e>
 8000c70:	49b3      	ldr	r1, [pc, #716]	; (8000f40 <.text_32>)
 8000c72:	428d      	cmp	r5, r1
 8000c74:	d303      	bcc.n	8000c7e <ai_platform_network_create+0x50>
 8000c76:	f20f 22f4 	addw	r2, pc, #756	; 0x2f4
 8000c7a:	6817      	ldr	r7, [r2, #0]
 8000c7c:	e007      	b.n	8000c8e <ai_platform_network_create+0x60>
 8000c7e:	f20f 20f0 	addw	r0, pc, #752	; 0x2f0
 8000c82:	f000 f99b 	bl	8000fbc <ai_check_custom_types>
 8000c86:	b920      	cbnz	r0, 8000c92 <ai_platform_network_create+0x64>
 8000c88:	f20f 20e8 	addw	r0, pc, #744	; 0x2e8
 8000c8c:	6807      	ldr	r7, [r0, #0]
 8000c8e:	2100      	movs	r1, #0
 8000c90:	6021      	str	r1, [r4, #0]
 8000c92:	4638      	mov	r0, r7
 8000c94:	b001      	add	sp, #4
 8000c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c98 <.text_19>:
 8000c98:	e0002000 	.word	0xe0002000

08000c9c <ai_platform_network_destroy>:
 8000c9c:	b470      	push	{r4, r5, r6}
 8000c9e:	b128      	cbz	r0, 8000cac <ai_platform_network_destroy+0x10>
 8000ca0:	6801      	ldr	r1, [r0, #0]
 8000ca2:	4aa6      	ldr	r2, [pc, #664]	; (8000f3c <.text_31>)
 8000ca4:	4291      	cmp	r1, r2
 8000ca6:	bf08      	it	eq
 8000ca8:	4602      	moveq	r2, r0
 8000caa:	d000      	beq.n	8000cae <ai_platform_network_destroy+0x12>
 8000cac:	2200      	movs	r2, #0
 8000cae:	49a5      	ldr	r1, [pc, #660]	; (8000f44 <.text_33>)
 8000cb0:	f240 4449 	movw	r4, #1097	; 0x449
 8000cb4:	680b      	ldr	r3, [r1, #0]
 8000cb6:	085b      	lsrs	r3, r3, #1
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	600b      	str	r3, [r1, #0]
 8000cbc:	491f      	ldr	r1, [pc, #124]	; (8000d3c <.text_21>)
 8000cbe:	680b      	ldr	r3, [r1, #0]
 8000cc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000cc4:	42a3      	cmp	r3, r4
 8000cc6:	d112      	bne.n	8000cee <ai_platform_network_destroy+0x52>
 8000cc8:	2101      	movs	r1, #1
 8000cca:	2400      	movs	r4, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4321      	orrs	r1, r4
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	d01a      	beq.n	8000d0a <ai_platform_network_destroy+0x6e>
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <.text_22>)
 8000cd6:	2401      	movs	r4, #1
 8000cd8:	609c      	str	r4, [r3, #8]
 8000cda:	6899      	ldr	r1, [r3, #8]
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	d1fc      	bne.n	8000cda <ai_platform_network_destroy+0x3e>
 8000ce0:	4c18      	ldr	r4, [pc, #96]	; (8000d44 <.text_23>)
 8000ce2:	4d95      	ldr	r5, [pc, #596]	; (8000f38 <.text_30>)
 8000ce4:	601c      	str	r4, [r3, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	42ab      	cmp	r3, r5
 8000cea:	d022      	beq.n	8000d32 <ai_platform_network_destroy+0x96>
 8000cec:	e7fe      	b.n	8000cec <ai_platform_network_destroy+0x50>
 8000cee:	2100      	movs	r1, #0
 8000cf0:	f240 4651 	movw	r6, #1105	; 0x451
 8000cf4:	42b3      	cmp	r3, r6
 8000cf6:	bf08      	it	eq
 8000cf8:	2401      	moveq	r4, #1
 8000cfa:	d0e7      	beq.n	8000ccc <ai_platform_network_destroy+0x30>
 8000cfc:	2400      	movs	r4, #0
 8000cfe:	f240 4552 	movw	r5, #1106	; 0x452
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	d1e2      	bne.n	8000ccc <ai_platform_network_destroy+0x30>
 8000d06:	2301      	movs	r3, #1
 8000d08:	e7e1      	b.n	8000cce <ai_platform_network_destroy+0x32>
 8000d0a:	490f      	ldr	r1, [pc, #60]	; (8000d48 <.text_24>)
 8000d0c:	680b      	ldr	r3, [r1, #0]
 8000d0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d12:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000d16:	d10c      	bne.n	8000d32 <ai_platform_network_destroy+0x96>
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <.text_25>)
 8000d1a:	2401      	movs	r4, #1
 8000d1c:	609c      	str	r4, [r3, #8]
 8000d1e:	6899      	ldr	r1, [r3, #8]
 8000d20:	2900      	cmp	r1, #0
 8000d22:	d1fc      	bne.n	8000d1e <ai_platform_network_destroy+0x82>
 8000d24:	4c07      	ldr	r4, [pc, #28]	; (8000d44 <.text_23>)
 8000d26:	4d84      	ldr	r5, [pc, #528]	; (8000f38 <.text_30>)
 8000d28:	601c      	str	r4, [r3, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	42ab      	cmp	r3, r5
 8000d2e:	d000      	beq.n	8000d32 <ai_platform_network_destroy+0x96>
 8000d30:	e7fe      	b.n	8000d30 <ai_platform_network_destroy+0x94>
 8000d32:	b102      	cbz	r2, 8000d36 <ai_platform_network_destroy+0x9a>
 8000d34:	2000      	movs	r0, #0
 8000d36:	bc70      	pop	{r4, r5, r6}
 8000d38:	4770      	bx	lr
	...

08000d3c <.text_21>:
 8000d3c:	e0042000 	.word	0xe0042000

08000d40 <.text_22>:
 8000d40:	40023000 	.word	0x40023000

08000d44 <.text_23>:
 8000d44:	f407a5c2 	.word	0xf407a5c2

08000d48 <.text_24>:
 8000d48:	5c001000 	.word	0x5c001000

08000d4c <.text_25>:
 8000d4c:	58024c00 	.word	0x58024c00

08000d50 <ai_platform_network_init>:
 8000d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d54:	b081      	sub	sp, #4
 8000d56:	460a      	mov	r2, r1
 8000d58:	b118      	cbz	r0, 8000d62 <ai_platform_network_init+0x12>
 8000d5a:	6801      	ldr	r1, [r0, #0]
 8000d5c:	4b77      	ldr	r3, [pc, #476]	; (8000f3c <.text_31>)
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	d000      	beq.n	8000d64 <ai_platform_network_init+0x14>
 8000d62:	2000      	movs	r0, #0
 8000d64:	4977      	ldr	r1, [pc, #476]	; (8000f44 <.text_33>)
 8000d66:	f240 4549 	movw	r5, #1097	; 0x449
 8000d6a:	680c      	ldr	r4, [r1, #0]
 8000d6c:	0864      	lsrs	r4, r4, #1
 8000d6e:	0064      	lsls	r4, r4, #1
 8000d70:	600c      	str	r4, [r1, #0]
 8000d72:	4975      	ldr	r1, [pc, #468]	; (8000f48 <.text_34>)
 8000d74:	680b      	ldr	r3, [r1, #0]
 8000d76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d7a:	42ab      	cmp	r3, r5
 8000d7c:	d112      	bne.n	8000da4 <ai_platform_network_init+0x54>
 8000d7e:	2101      	movs	r1, #1
 8000d80:	2400      	movs	r4, #0
 8000d82:	2300      	movs	r3, #0
 8000d84:	4321      	orrs	r1, r4
 8000d86:	4319      	orrs	r1, r3
 8000d88:	d01a      	beq.n	8000dc0 <ai_platform_network_init+0x70>
 8000d8a:	4b70      	ldr	r3, [pc, #448]	; (8000f4c <.text_35>)
 8000d8c:	2401      	movs	r4, #1
 8000d8e:	609c      	str	r4, [r3, #8]
 8000d90:	6899      	ldr	r1, [r3, #8]
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d1fc      	bne.n	8000d90 <ai_platform_network_init+0x40>
 8000d96:	4c6e      	ldr	r4, [pc, #440]	; (8000f50 <.text_36>)
 8000d98:	4d67      	ldr	r5, [pc, #412]	; (8000f38 <.text_30>)
 8000d9a:	601c      	str	r4, [r3, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	42ab      	cmp	r3, r5
 8000da0:	d022      	beq.n	8000de8 <ai_platform_network_init+0x98>
 8000da2:	e7fe      	b.n	8000da2 <ai_platform_network_init+0x52>
 8000da4:	2100      	movs	r1, #0
 8000da6:	f240 4651 	movw	r6, #1105	; 0x451
 8000daa:	42b3      	cmp	r3, r6
 8000dac:	bf08      	it	eq
 8000dae:	2401      	moveq	r4, #1
 8000db0:	d0e7      	beq.n	8000d82 <ai_platform_network_init+0x32>
 8000db2:	2400      	movs	r4, #0
 8000db4:	f240 4552 	movw	r5, #1106	; 0x452
 8000db8:	42ab      	cmp	r3, r5
 8000dba:	d1e2      	bne.n	8000d82 <ai_platform_network_init+0x32>
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e7e1      	b.n	8000d84 <ai_platform_network_init+0x34>
 8000dc0:	4964      	ldr	r1, [pc, #400]	; (8000f54 <.text_37>)
 8000dc2:	680b      	ldr	r3, [r1, #0]
 8000dc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000dc8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000dcc:	d10c      	bne.n	8000de8 <ai_platform_network_init+0x98>
 8000dce:	4b62      	ldr	r3, [pc, #392]	; (8000f58 <.text_38>)
 8000dd0:	2401      	movs	r4, #1
 8000dd2:	609c      	str	r4, [r3, #8]
 8000dd4:	6899      	ldr	r1, [r3, #8]
 8000dd6:	2900      	cmp	r1, #0
 8000dd8:	d1fc      	bne.n	8000dd4 <ai_platform_network_init+0x84>
 8000dda:	4c5d      	ldr	r4, [pc, #372]	; (8000f50 <.text_36>)
 8000ddc:	4d56      	ldr	r5, [pc, #344]	; (8000f38 <.text_30>)
 8000dde:	601c      	str	r4, [r3, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	d000      	beq.n	8000de8 <ai_platform_network_init+0x98>
 8000de6:	e7fe      	b.n	8000de6 <ai_platform_network_init+0x96>
 8000de8:	2800      	cmp	r0, #0
 8000dea:	d034      	beq.n	8000e56 <ai_platform_network_init+0x106>
 8000dec:	b90a      	cbnz	r2, 8000df2 <ai_platform_network_init+0xa2>
 8000dee:	2211      	movs	r2, #17
 8000df0:	e012      	b.n	8000e18 <ai_platform_network_init+0xc8>
 8000df2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000df4:	6913      	ldr	r3, [r2, #16]
 8000df6:	b939      	cbnz	r1, 8000e08 <ai_platform_network_init+0xb8>
 8000df8:	8b94      	ldrh	r4, [r2, #28]
 8000dfa:	8b55      	ldrh	r5, [r2, #26]
 8000dfc:	6a11      	ldr	r1, [r2, #32]
 8000dfe:	436c      	muls	r4, r5
 8000e00:	434c      	muls	r4, r1
 8000e02:	bf18      	it	ne
 8000e04:	2213      	movne	r2, #19
 8000e06:	d107      	bne.n	8000e18 <ai_platform_network_init+0xc8>
 8000e08:	b973      	cbnz	r3, 8000e28 <ai_platform_network_init+0xd8>
 8000e0a:	8911      	ldrh	r1, [r2, #8]
 8000e0c:	88d4      	ldrh	r4, [r2, #6]
 8000e0e:	68d3      	ldr	r3, [r2, #12]
 8000e10:	4361      	muls	r1, r4
 8000e12:	4359      	muls	r1, r3
 8000e14:	d008      	beq.n	8000e28 <ai_platform_network_init+0xd8>
 8000e16:	2212      	movs	r2, #18
 8000e18:	2110      	movs	r1, #16
 8000e1a:	300c      	adds	r0, #12
 8000e1c:	f000 f8b9 	bl	8000f92 <core_set_error>
 8000e20:	2000      	movs	r0, #0
 8000e22:	b001      	add	sp, #4
 8000e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e28:	f100 0114 	add.w	r1, r0, #20
 8000e2c:	f100 0c28 	add.w	ip, r0, #40	; 0x28
 8000e30:	caf8      	ldmia	r2!, {r3, r4, r5, r6, r7}
 8000e32:	e881 00f8 	stmia.w	r1, {r3, r4, r5, r6, r7}
 8000e36:	e892 4f00 	ldmia.w	r2, {r8, r9, sl, fp, lr}
 8000e3a:	e88c 4f00 	stmia.w	ip, {r8, r9, sl, fp, lr}
 8000e3e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000e40:	2103      	movs	r1, #3
 8000e42:	6081      	str	r1, [r0, #8]
 8000e44:	b13a      	cbz	r2, 8000e56 <ai_platform_network_init+0x106>
 8000e46:	6891      	ldr	r1, [r2, #8]
 8000e48:	6050      	str	r0, [r2, #4]
 8000e4a:	428a      	cmp	r2, r1
 8000e4c:	bf18      	it	ne
 8000e4e:	2900      	cmpne	r1, #0
 8000e50:	bf18      	it	ne
 8000e52:	460a      	movne	r2, r1
 8000e54:	d1f7      	bne.n	8000e46 <ai_platform_network_init+0xf6>
 8000e56:	b001      	add	sp, #4
 8000e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e5c <.text_27>:
 8000e5c:	00000000 	.word	0x00000000

08000e60 <.text_28>:
 8000e60:	b5e8b5cd 	.word	0xb5e8b5cd

08000e64 <ai_platform_network_process>:
 8000e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e66:	0004      	movs	r4, r0
 8000e68:	b081      	sub	sp, #4
 8000e6a:	d003      	beq.n	8000e74 <ai_platform_network_process+0x10>
 8000e6c:	6820      	ldr	r0, [r4, #0]
 8000e6e:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <.text_31>)
 8000e70:	4298      	cmp	r0, r3
 8000e72:	d000      	beq.n	8000e76 <ai_platform_network_process+0x12>
 8000e74:	2400      	movs	r4, #0
 8000e76:	4833      	ldr	r0, [pc, #204]	; (8000f44 <.text_33>)
 8000e78:	f240 4649 	movw	r6, #1097	; 0x449
 8000e7c:	6805      	ldr	r5, [r0, #0]
 8000e7e:	086d      	lsrs	r5, r5, #1
 8000e80:	006d      	lsls	r5, r5, #1
 8000e82:	6005      	str	r5, [r0, #0]
 8000e84:	4830      	ldr	r0, [pc, #192]	; (8000f48 <.text_34>)
 8000e86:	6803      	ldr	r3, [r0, #0]
 8000e88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e8c:	42b3      	cmp	r3, r6
 8000e8e:	d112      	bne.n	8000eb6 <ai_platform_network_process+0x52>
 8000e90:	2001      	movs	r0, #1
 8000e92:	2500      	movs	r5, #0
 8000e94:	2300      	movs	r3, #0
 8000e96:	4328      	orrs	r0, r5
 8000e98:	4318      	orrs	r0, r3
 8000e9a:	d01a      	beq.n	8000ed2 <ai_platform_network_process+0x6e>
 8000e9c:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <.text_35>)
 8000e9e:	2501      	movs	r5, #1
 8000ea0:	609d      	str	r5, [r3, #8]
 8000ea2:	6898      	ldr	r0, [r3, #8]
 8000ea4:	2800      	cmp	r0, #0
 8000ea6:	d1fc      	bne.n	8000ea2 <ai_platform_network_process+0x3e>
 8000ea8:	4d29      	ldr	r5, [pc, #164]	; (8000f50 <.text_36>)
 8000eaa:	4e23      	ldr	r6, [pc, #140]	; (8000f38 <.text_30>)
 8000eac:	601d      	str	r5, [r3, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	42b3      	cmp	r3, r6
 8000eb2:	d022      	beq.n	8000efa <ai_platform_network_process+0x96>
 8000eb4:	e7fe      	b.n	8000eb4 <ai_platform_network_process+0x50>
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f240 4751 	movw	r7, #1105	; 0x451
 8000ebc:	42bb      	cmp	r3, r7
 8000ebe:	bf08      	it	eq
 8000ec0:	2501      	moveq	r5, #1
 8000ec2:	d0e7      	beq.n	8000e94 <ai_platform_network_process+0x30>
 8000ec4:	2500      	movs	r5, #0
 8000ec6:	f240 4652 	movw	r6, #1106	; 0x452
 8000eca:	42b3      	cmp	r3, r6
 8000ecc:	d1e2      	bne.n	8000e94 <ai_platform_network_process+0x30>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e7e1      	b.n	8000e96 <ai_platform_network_process+0x32>
 8000ed2:	4820      	ldr	r0, [pc, #128]	; (8000f54 <.text_37>)
 8000ed4:	6803      	ldr	r3, [r0, #0]
 8000ed6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000eda:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000ede:	d10c      	bne.n	8000efa <ai_platform_network_process+0x96>
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <.text_38>)
 8000ee2:	2501      	movs	r5, #1
 8000ee4:	609d      	str	r5, [r3, #8]
 8000ee6:	6898      	ldr	r0, [r3, #8]
 8000ee8:	2800      	cmp	r0, #0
 8000eea:	d1fc      	bne.n	8000ee6 <ai_platform_network_process+0x82>
 8000eec:	4d18      	ldr	r5, [pc, #96]	; (8000f50 <.text_36>)
 8000eee:	4e12      	ldr	r6, [pc, #72]	; (8000f38 <.text_30>)
 8000ef0:	601d      	str	r5, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	42b3      	cmp	r3, r6
 8000ef6:	d000      	beq.n	8000efa <ai_platform_network_process+0x96>
 8000ef8:	e7fe      	b.n	8000ef8 <ai_platform_network_process+0x94>
 8000efa:	4620      	mov	r0, r4
 8000efc:	f7ff faf9 	bl	80004f2 <_platform_network_io_bind>
 8000f00:	b1b8      	cbz	r0, 8000f32 <ai_platform_network_process+0xce>
 8000f02:	8a60      	ldrh	r0, [r4, #18]
 8000f04:	8a21      	ldrh	r1, [r4, #16]
 8000f06:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000f08:	4288      	cmp	r0, r1
 8000f0a:	f105 060c 	add.w	r6, r5, #12
 8000f0e:	d20f      	bcs.n	8000f30 <ai_platform_network_process+0xcc>
 8000f10:	4628      	mov	r0, r5
 8000f12:	f7ff fa79 	bl	8000408 <_platform_network_state_update_input>
 8000f16:	4620      	mov	r0, r4
 8000f18:	f000 f8fa 	bl	8001110 <ai_layers_forward_all>
 8000f1c:	4630      	mov	r0, r6
 8000f1e:	f7ff faa8 	bl	8000472 <_platform_network_state_update_output>
 8000f22:	8a60      	ldrh	r0, [r4, #18]
 8000f24:	8a21      	ldrh	r1, [r4, #16]
 8000f26:	1c40      	adds	r0, r0, #1
 8000f28:	8260      	strh	r0, [r4, #18]
 8000f2a:	b280      	uxth	r0, r0
 8000f2c:	4288      	cmp	r0, r1
 8000f2e:	d3ef      	bcc.n	8000f10 <ai_platform_network_process+0xac>
 8000f30:	8a60      	ldrh	r0, [r4, #18]
 8000f32:	b001      	add	sp, #4
 8000f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000f38 <.text_30>:
 8000f38:	b5e8b5cd 	.word	0xb5e8b5cd

08000f3c <.text_31>:
 8000f3c:	a1c00100 	.word	0xa1c00100

08000f40 <.text_32>:
 8000f40:	01030001 	.word	0x01030001

08000f44 <.text_33>:
 8000f44:	e0002000 	.word	0xe0002000

08000f48 <.text_34>:
 8000f48:	e0042000 	.word	0xe0042000

08000f4c <.text_35>:
 8000f4c:	40023000 	.word	0x40023000

08000f50 <.text_36>:
 8000f50:	f407a5c2 	.word	0xf407a5c2

08000f54 <.text_37>:
 8000f54:	5c001000 	.word	0x5c001000

08000f58 <.text_38>:
 8000f58:	58024c00 	.word	0x58024c00

08000f5c <.text_39>:
 8000f5c:	00000004 	.word	0x00000004

08000f60 <.text_40>:
 8000f60:	00000101 	.word	0x00000101

08000f64 <.text_41>:
 8000f64:	00000301 	.word	0x00000301

08000f68 <.text_42>:
 8000f68:	00001030 	.word	0x00001030

08000f6c <.text_43>:
 8000f6c:	00001001 	.word	0x00001001

08000f70 <_platform_network_sanity_check{5}::signatures>:
 8000f70:	84048403                                ....

08000f74 <.text_45>:
 8000f74:	00001002 	.word	0x00001002

08000f78 <.text_46>:
 8000f78:	00001010 	.word	0x00001010

08000f7c <.text_47>:
 8000f7c:	00000000 	.word	0x00000000

08000f80 <.text_48>:
 8000f80:	00001010 	.word	0x00001010

08000f84 <core_init>:
 8000f84:	2001      	movs	r0, #1
 8000f86:	4770      	bx	lr

08000f88 <core_get_error>:
 8000f88:	4601      	mov	r1, r0
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	6808      	ldr	r0, [r1, #0]
 8000f8e:	600a      	str	r2, [r1, #0]
 8000f90:	4770      	bx	lr

08000f92 <core_set_error>:
 8000f92:	7803      	ldrb	r3, [r0, #0]
 8000f94:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000f98:	d104      	bne.n	8000fa4 <core_set_error+0x12>
 8000f9a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000f9e:	6001      	str	r1, [r0, #0]
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	4770      	bx	lr

08000fa8 <ai_layers_forward_layer>:
 8000fa8:	b510      	push	{r4, lr}
 8000faa:	4604      	mov	r4, r0
 8000fac:	68e1      	ldr	r1, [r4, #12]
 8000fae:	4788      	blx	r1
 8000fb0:	68a0      	ldr	r0, [r4, #8]
 8000fb2:	42a0      	cmp	r0, r4
 8000fb4:	bf08      	it	eq
 8000fb6:	2000      	moveq	r0, #0
 8000fb8:	bd10      	pop	{r4, pc}
	...

08000fbc <ai_check_custom_types>:
 8000fbc:	b500      	push	{lr}
 8000fbe:	b081      	sub	sp, #4
 8000fc0:	b160      	cbz	r0, 8000fdc <ai_check_custom_types+0x20>
 8000fc2:	7801      	ldrb	r1, [r0, #0]
 8000fc4:	2903      	cmp	r1, #3
 8000fc6:	d109      	bne.n	8000fdc <ai_check_custom_types+0x20>
 8000fc8:	f05f 0204 	movs.w	r2, #4
 8000fcc:	a18c      	add	r1, pc, #560	; (adr r1, 8001200 <ai_check_custom_types::ref_signatures>)
 8000fce:	f00f febb 	bl	8010d48 <memcmp>
 8000fd2:	1e40      	subs	r0, r0, #1
 8000fd4:	4180      	sbcs	r0, r0
 8000fd6:	0fc0      	lsrs	r0, r0, #31
 8000fd8:	b001      	add	sp, #4
 8000fda:	bd00      	pop	{pc}
 8000fdc:	2000      	movs	r0, #0
 8000fde:	b001      	add	sp, #4
 8000fe0:	bd00      	pop	{pc}
	...

08000fe4 <ai_layer_type_name>:
 8000fe4:	f242 7211 	movw	r2, #10001	; 0x2711
 8000fe8:	1a81      	subs	r1, r0, r2
 8000fea:	2901      	cmp	r1, #1
 8000fec:	bf81      	itttt	hi
 8000fee:	1ec9      	subhi	r1, r1, #3
 8000ff0:	290d      	cmphi	r1, #13
 8000ff2:	390f      	subhi	r1, #15
 8000ff4:	2909      	cmphi	r1, #9
 8000ff6:	f200 806b 	bhi.w	80010d0 <ai_layer_type_name+0xec>
 8000ffa:	1a80      	subs	r0, r0, r2
 8000ffc:	d033      	beq.n	8001066 <ai_layer_type_name+0x82>
 8000ffe:	1e40      	subs	r0, r0, #1
 8001000:	d033      	beq.n	800106a <ai_layer_type_name+0x86>
 8001002:	1e80      	subs	r0, r0, #2
 8001004:	d033      	beq.n	800106e <ai_layer_type_name+0x8a>
 8001006:	1e40      	subs	r0, r0, #1
 8001008:	d034      	beq.n	8001074 <ai_layer_type_name+0x90>
 800100a:	1e40      	subs	r0, r0, #1
 800100c:	d034      	beq.n	8001078 <ai_layer_type_name+0x94>
 800100e:	1e40      	subs	r0, r0, #1
 8001010:	d034      	beq.n	800107c <ai_layer_type_name+0x98>
 8001012:	1e40      	subs	r0, r0, #1
 8001014:	d034      	beq.n	8001080 <ai_layer_type_name+0x9c>
 8001016:	1e40      	subs	r0, r0, #1
 8001018:	d034      	beq.n	8001084 <ai_layer_type_name+0xa0>
 800101a:	1e40      	subs	r0, r0, #1
 800101c:	d034      	beq.n	8001088 <ai_layer_type_name+0xa4>
 800101e:	1e40      	subs	r0, r0, #1
 8001020:	d034      	beq.n	800108c <ai_layer_type_name+0xa8>
 8001022:	1e40      	subs	r0, r0, #1
 8001024:	d034      	beq.n	8001090 <ai_layer_type_name+0xac>
 8001026:	1e40      	subs	r0, r0, #1
 8001028:	d034      	beq.n	8001094 <ai_layer_type_name+0xb0>
 800102a:	1e40      	subs	r0, r0, #1
 800102c:	d034      	beq.n	8001098 <ai_layer_type_name+0xb4>
 800102e:	1e40      	subs	r0, r0, #1
 8001030:	d034      	beq.n	800109c <ai_layer_type_name+0xb8>
 8001032:	1e40      	subs	r0, r0, #1
 8001034:	d034      	beq.n	80010a0 <ai_layer_type_name+0xbc>
 8001036:	1e40      	subs	r0, r0, #1
 8001038:	d034      	beq.n	80010a4 <ai_layer_type_name+0xc0>
 800103a:	1e80      	subs	r0, r0, #2
 800103c:	d034      	beq.n	80010a8 <ai_layer_type_name+0xc4>
 800103e:	1e40      	subs	r0, r0, #1
 8001040:	d034      	beq.n	80010ac <ai_layer_type_name+0xc8>
 8001042:	1e40      	subs	r0, r0, #1
 8001044:	d034      	beq.n	80010b0 <ai_layer_type_name+0xcc>
 8001046:	1e40      	subs	r0, r0, #1
 8001048:	d034      	beq.n	80010b4 <ai_layer_type_name+0xd0>
 800104a:	1e40      	subs	r0, r0, #1
 800104c:	d034      	beq.n	80010b8 <ai_layer_type_name+0xd4>
 800104e:	1e40      	subs	r0, r0, #1
 8001050:	d034      	beq.n	80010bc <ai_layer_type_name+0xd8>
 8001052:	1e40      	subs	r0, r0, #1
 8001054:	d034      	beq.n	80010c0 <ai_layer_type_name+0xdc>
 8001056:	1e40      	subs	r0, r0, #1
 8001058:	d034      	beq.n	80010c4 <ai_layer_type_name+0xe0>
 800105a:	1e40      	subs	r0, r0, #1
 800105c:	d034      	beq.n	80010c8 <ai_layer_type_name+0xe4>
 800105e:	1e40      	subs	r0, r0, #1
 8001060:	d034      	beq.n	80010cc <ai_layer_type_name+0xe8>
 8001062:	a01c      	add	r0, pc, #112	; (adr r0, 80010d4 <.text_5>)
 8001064:	4770      	bx	lr
 8001066:	a01c      	add	r0, pc, #112	; (adr r0, 80010d8 <.text_6>)
 8001068:	4770      	bx	lr
 800106a:	a01c      	add	r0, pc, #112	; (adr r0, 80010dc <.text_7>)
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	a031      	add	r0, pc, #196	; (adr r0, 8001138 <.text_15>)
 8001072:	4770      	bx	lr
 8001074:	a032      	add	r0, pc, #200	; (adr r0, 8001140 <.text_16>)
 8001076:	4770      	bx	lr
 8001078:	a019      	add	r0, pc, #100	; (adr r0, 80010e0 <.text_8>)
 800107a:	4770      	bx	lr
 800107c:	a019      	add	r0, pc, #100	; (adr r0, 80010e4 <.text_9>)
 800107e:	4770      	bx	lr
 8001080:	a031      	add	r0, pc, #196	; (adr r0, 8001148 <.text_17>)
 8001082:	4770      	bx	lr
 8001084:	a018      	add	r0, pc, #96	; (adr r0, 80010e8 <.text_10>)
 8001086:	4770      	bx	lr
 8001088:	a031      	add	r0, pc, #196	; (adr r0, 8001150 <.text_18>)
 800108a:	4770      	bx	lr
 800108c:	a032      	add	r0, pc, #200	; (adr r0, 8001158 <.text_19>)
 800108e:	4770      	bx	lr
 8001090:	a036      	add	r0, pc, #216	; (adr r0, 800116c <.text_20>)
 8001092:	4770      	bx	lr
 8001094:	a037      	add	r0, pc, #220	; (adr r0, 8001174 <.text_21>)
 8001096:	4770      	bx	lr
 8001098:	a014      	add	r0, pc, #80	; (adr r0, 80010ec <.text_11>)
 800109a:	4770      	bx	lr
 800109c:	a037      	add	r0, pc, #220	; (adr r0, 800117c <.text_22>)
 800109e:	4770      	bx	lr
 80010a0:	a038      	add	r0, pc, #224	; (adr r0, 8001184 <.text_23>)
 80010a2:	4770      	bx	lr
 80010a4:	a03a      	add	r0, pc, #232	; (adr r0, 8001190 <.text_24>)
 80010a6:	4770      	bx	lr
 80010a8:	a03e      	add	r0, pc, #248	; (adr r0, 80011a4 <.text_25>)
 80010aa:	4770      	bx	lr
 80010ac:	a03f      	add	r0, pc, #252	; (adr r0, 80011ac <.text_26>)
 80010ae:	4770      	bx	lr
 80010b0:	a040      	add	r0, pc, #256	; (adr r0, 80011b4 <.text_27>)
 80010b2:	4770      	bx	lr
 80010b4:	a042      	add	r0, pc, #264	; (adr r0, 80011c0 <.text_28>)
 80010b6:	4770      	bx	lr
 80010b8:	a043      	add	r0, pc, #268	; (adr r0, 80011c8 <.text_29>)
 80010ba:	4770      	bx	lr
 80010bc:	a044      	add	r0, pc, #272	; (adr r0, 80011d0 <.text_30>)
 80010be:	4770      	bx	lr
 80010c0:	a00b      	add	r0, pc, #44	; (adr r0, 80010f0 <.text_12>)
 80010c2:	4770      	bx	lr
 80010c4:	a048      	add	r0, pc, #288	; (adr r0, 80011e8 <.text_31>)
 80010c6:	4770      	bx	lr
 80010c8:	a049      	add	r0, pc, #292	; (adr r0, 80011f0 <.text_32>)
 80010ca:	4770      	bx	lr
 80010cc:	a04a      	add	r0, pc, #296	; (adr r0, 80011f8 <.text_33>)
 80010ce:	4770      	bx	lr
 80010d0:	a000      	add	r0, pc, #0	; (adr r0, 80010d4 <.text_5>)
 80010d2:	4770      	bx	lr

080010d4 <.text_5>:
 80010d4:	00000000 	.word	0x00000000

080010d8 <.text_6>:
 80010d8:	00444441 	.word	0x00444441

080010dc <.text_7>:
 80010dc:	00004e42 	.word	0x00004e42

080010e0 <.text_8>:
 80010e0:	00555247 	.word	0x00555247

080010e4 <.text_9>:
 80010e4:	004e524c 	.word	0x004e524c

080010e8 <.text_10>:
 80010e8:	00004c4e 	.word	0x00004c4e

080010ec <.text_11>:
 80010ec:	00004d53 	.word	0x00004d53

080010f0 <.text_12>:
 80010f0:	00444150 	.word	0x00444150

080010f4 <ai_layer_type_is_valid>:
 80010f4:	f242 7111 	movw	r1, #10001	; 0x2711
 80010f8:	1a40      	subs	r0, r0, r1
 80010fa:	2801      	cmp	r0, #1
 80010fc:	bf81      	itttt	hi
 80010fe:	1ec0      	subhi	r0, r0, #3
 8001100:	280d      	cmphi	r0, #13
 8001102:	380f      	subhi	r0, #15
 8001104:	2809      	cmphi	r0, #9
 8001106:	d801      	bhi.n	800110c <ai_layer_type_is_valid+0x18>
 8001108:	2001      	movs	r0, #1
 800110a:	4770      	bx	lr
 800110c:	2000      	movs	r0, #0
 800110e:	4770      	bx	lr

08001110 <ai_layers_forward_all>:
 8001110:	b530      	push	{r4, r5, lr}
 8001112:	b081      	sub	sp, #4
 8001114:	4604      	mov	r4, r0
 8001116:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001118:	b158      	cbz	r0, 8001132 <ai_layers_forward_all+0x22>
 800111a:	64a0      	str	r0, [r4, #72]	; 0x48
 800111c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800111e:	68e9      	ldr	r1, [r5, #12]
 8001120:	4628      	mov	r0, r5
 8001122:	4788      	blx	r1
 8001124:	68a8      	ldr	r0, [r5, #8]
 8001126:	42a8      	cmp	r0, r5
 8001128:	bf08      	it	eq
 800112a:	2000      	moveq	r0, #0
 800112c:	2800      	cmp	r0, #0
 800112e:	64a0      	str	r0, [r4, #72]	; 0x48
 8001130:	d1f4      	bne.n	800111c <ai_layers_forward_all+0xc>
 8001132:	b001      	add	sp, #4
 8001134:	bd30      	pop	{r4, r5, pc}
	...

08001138 <.text_15>:
 8001138:	564e4f43 	.word	0x564e4f43
 800113c:	4432      	.short	0x4432
	...

08001140 <.text_16>:
 8001140:	534e4544 	.word	0x534e4544
 8001144:	0045      	.short	0x0045
	...

08001148 <.text_17>:
 8001148:	4d54534c 	.word	0x4d54534c
 800114c:	00000000 	.word	0x00000000

08001150 <.text_18>:
 8001150:	4d524f4e 	.word	0x4d524f4e
 8001154:	00000000 	.word	0x00000000

08001158 <.text_19>:
 8001158:	4954504f 	.word	0x4954504f
 800115c:	455a494d 	.word	0x455a494d
 8001160:	4f435f44 	.word	0x4f435f44
 8001164:	4432564e 	.word	0x4432564e
 8001168:	00000000 	.word	0x00000000

0800116c <.text_20>:
 800116c:	4d524550 	.word	0x4d524550
 8001170:	00455455 	.word	0x00455455

08001174 <.text_21>:
 8001174:	4c4f4f50 	.word	0x4c4f4f50
 8001178:	00000000 	.word	0x00000000

0800117c <.text_22>:
 800117c:	494c5053 	.word	0x494c5053
 8001180:	0054      	.short	0x0054
	...

08001184 <.text_23>:
 8001184:	454d4954 	.word	0x454d4954
 8001188:	4c45445f 	.word	0x4c45445f
 800118c:	5941      	.short	0x5941
	...

08001190 <.text_24>:
 8001190:	454d4954 	.word	0x454d4954
 8001194:	5349445f 	.word	0x5349445f
 8001198:	42495254 	.word	0x42495254
 800119c:	44455455 	.word	0x44455455
 80011a0:	00000000 	.word	0x00000000

080011a4 <.text_25>:
 80011a4:	434e4f43 	.word	0x434e4f43
 80011a8:	5441      	.short	0x5441
	...

080011ac <.text_26>:
 80011ac:	4d4d4547 	.word	0x4d4d4547
 80011b0:	00000000 	.word	0x00000000

080011b4 <.text_27>:
 80011b4:	41535055 	.word	0x41535055
 80011b8:	454c504d 	.word	0x454c504d
 80011bc:	00000000 	.word	0x00000000

080011c0 <.text_28>:
 80011c0:	57544c45 	.word	0x57544c45
 80011c4:	00455349 	.word	0x00455349

080011c8 <.text_29>:
 80011c8:	454e4547 	.word	0x454e4547
 80011cc:	00434952 	.word	0x00434952

080011d0 <.text_30>:
 80011d0:	54534e49 	.word	0x54534e49
 80011d4:	45434e41 	.word	0x45434e41
 80011d8:	4d524f4e 	.word	0x4d524f4e
 80011dc:	5a494c41 	.word	0x5a494c41
 80011e0:	4f495441 	.word	0x4f495441
 80011e4:	004e      	.short	0x004e
	...

080011e8 <.text_31>:
 80011e8:	43494c53 	.word	0x43494c53
 80011ec:	0045      	.short	0x0045
	...

080011f0 <.text_32>:
 80011f0:	454c4954 	.word	0x454c4954
 80011f4:	00000000 	.word	0x00000000

080011f8 <.text_33>:
 80011f8:	55444552 	.word	0x55444552
 80011fc:	4543      	.short	0x4543
	...

08001200 <ai_check_custom_types::ref_signatures>:
 8001200:	8403 8404                                   ....

08001204 <ai_conv2d_kernel_simple_f32>:
 8001204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001208:	468b      	mov	fp, r1
 800120a:	b081      	sub	sp, #4
 800120c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800120e:	4619      	mov	r1, r3
 8001210:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8001214:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8001216:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800121a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800121c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800121e:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8001222:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8001226:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800122a:	1ae4      	subs	r4, r4, r3
 800122c:	eba5 0709 	sub.w	r7, r5, r9
 8001230:	fb07 f708 	mul.w	r7, r7, r8
 8001234:	ebac 0009 	sub.w	r0, ip, r9
 8001238:	9700      	str	r7, [sp, #0]
 800123a:	fb05 f708 	mul.w	r7, r5, r8
 800123e:	fb05 650e 	mla	r5, r5, lr, r6
 8001242:	fb0c fc0e 	mul.w	ip, ip, lr
 8001246:	437c      	muls	r4, r7
 8001248:	fb08 f505 	mul.w	r5, r8, r5
 800124c:	eb01 0685 	add.w	r6, r1, r5, lsl #2
 8001250:	45da      	cmp	sl, fp
 8001252:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001254:	fb00 f008 	mul.w	r0, r0, r8
 8001258:	fb09 f908 	mul.w	r9, r9, r8
 800125c:	bf0c      	ite	eq
 800125e:	ed9f 0aa8 	vldreq	s0, [pc, #672]	; 8001500 <.text_4>
 8001262:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8001266:	2900      	cmp	r1, #0
 8001268:	fb08 f80c 	mul.w	r8, r8, ip
 800126c:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 8001270:	d070      	beq.n	8001354 <ai_conv2d_kernel_simple_f32+0x150>
 8001272:	f029 0203 	bic.w	r2, r9, #3
 8001276:	2b00      	cmp	r3, #0
 8001278:	edda 0a00 	vldr	s1, [sl]
 800127c:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001280:	46c4      	mov	ip, r8
 8001282:	dd5d      	ble.n	8001340 <ai_conv2d_kernel_simple_f32+0x13c>
 8001284:	469e      	mov	lr, r3
 8001286:	9d00      	ldr	r5, [sp, #0]
 8001288:	2700      	movs	r7, #0
 800128a:	2a00      	cmp	r2, #0
 800128c:	f340 801e 	ble.w	80012cc <ai_conv2d_kernel_simple_f32+0xc8>
 8001290:	ed96 4a00 	vldr	s8, [r6]
 8001294:	1d3f      	adds	r7, r7, #4
 8001296:	eddc 4a00 	vldr	s9, [ip]
 800129a:	ed96 3a01 	vldr	s6, [r6, #4]
 800129e:	eddc 3a01 	vldr	s7, [ip, #4]
 80012a2:	ee44 0a24 	vmla.f32	s1, s8, s9
 80012a6:	ed96 2a02 	vldr	s4, [r6, #8]
 80012aa:	eddc 2a02 	vldr	s5, [ip, #8]
 80012ae:	ee43 0a23 	vmla.f32	s1, s6, s7
 80012b2:	ed96 1a03 	vldr	s2, [r6, #12]
 80012b6:	3610      	adds	r6, #16
 80012b8:	4297      	cmp	r7, r2
 80012ba:	eddc 1a03 	vldr	s3, [ip, #12]
 80012be:	ee42 0a22 	vmla.f32	s1, s4, s5
 80012c2:	f10c 0c10 	add.w	ip, ip, #16
 80012c6:	ee41 0a21 	vmla.f32	s1, s2, s3
 80012ca:	dbe1      	blt.n	8001290 <ai_conv2d_kernel_simple_f32+0x8c>
 80012cc:	454f      	cmp	r7, r9
 80012ce:	da2f      	bge.n	8001330 <ai_conv2d_kernel_simple_f32+0x12c>
 80012d0:	1c7f      	adds	r7, r7, #1
 80012d2:	ed96 1a00 	vldr	s2, [r6]
 80012d6:	1d36      	adds	r6, r6, #4
 80012d8:	eddc 1a00 	vldr	s3, [ip]
 80012dc:	454f      	cmp	r7, r9
 80012de:	ee41 0a21 	vmla.f32	s1, s2, s3
 80012e2:	f10c 0c04 	add.w	ip, ip, #4
 80012e6:	da23      	bge.n	8001330 <ai_conv2d_kernel_simple_f32+0x12c>
 80012e8:	1c7f      	adds	r7, r7, #1
 80012ea:	ed96 1a00 	vldr	s2, [r6]
 80012ee:	1d36      	adds	r6, r6, #4
 80012f0:	eddc 1a00 	vldr	s3, [ip]
 80012f4:	454f      	cmp	r7, r9
 80012f6:	ee41 0a21 	vmla.f32	s1, s2, s3
 80012fa:	f10c 0c04 	add.w	ip, ip, #4
 80012fe:	da17      	bge.n	8001330 <ai_conv2d_kernel_simple_f32+0x12c>
 8001300:	1c7f      	adds	r7, r7, #1
 8001302:	ed96 1a00 	vldr	s2, [r6]
 8001306:	1d36      	adds	r6, r6, #4
 8001308:	eddc 1a00 	vldr	s3, [ip]
 800130c:	454f      	cmp	r7, r9
 800130e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001312:	f10c 0c04 	add.w	ip, ip, #4
 8001316:	da0b      	bge.n	8001330 <ai_conv2d_kernel_simple_f32+0x12c>
 8001318:	1c7f      	adds	r7, r7, #1
 800131a:	ed96 1a00 	vldr	s2, [r6]
 800131e:	1d36      	adds	r6, r6, #4
 8001320:	eddc 1a00 	vldr	s3, [ip]
 8001324:	454f      	cmp	r7, r9
 8001326:	ee41 0a21 	vmla.f32	s1, s2, s3
 800132a:	f10c 0c04 	add.w	ip, ip, #4
 800132e:	dbcf      	blt.n	80012d0 <ai_conv2d_kernel_simple_f32+0xcc>
 8001330:	f1be 0e01 	subs.w	lr, lr, #1
 8001334:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
 8001338:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800133c:	d1a4      	bne.n	8001288 <ai_conv2d_kernel_simple_f32+0x84>
 800133e:	9500      	str	r5, [sp, #0]
 8001340:	1e49      	subs	r1, r1, #1
 8001342:	edcb 0a00 	vstr	s1, [fp]
 8001346:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 800134a:	f10b 0b04 	add.w	fp, fp, #4
 800134e:	f10a 0a04 	add.w	sl, sl, #4
 8001352:	d190      	bne.n	8001276 <ai_conv2d_kernel_simple_f32+0x72>
 8001354:	b001      	add	sp, #4
 8001356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800135c <ai_conv2d_kernel_depthwise_f32>:
 800135c:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001360:	b084      	sub	sp, #16
 8001362:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8001366:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8001368:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800136c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800136e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001370:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8001372:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8001376:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
 800137a:	fbba f6f6 	udiv	r6, sl, r6
 800137e:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 8001382:	eba8 0a00 	sub.w	sl, r8, r0
 8001386:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8001388:	fb0c fa0a 	mul.w	sl, ip, sl
 800138c:	1b09      	subs	r1, r1, r4
 800138e:	ebae 0c00 	sub.w	ip, lr, r0
 8001392:	fb01 f10e 	mul.w	r1, r1, lr
 8001396:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8001398:	fb0e 7e09 	mla	lr, lr, r9, r7
 800139c:	eb03 078e 	add.w	r7, r3, lr, lsl #2
 80013a0:	9b04      	ldr	r3, [sp, #16]
 80013a2:	fb08 f809 	mul.w	r8, r8, r9
 80013a6:	429d      	cmp	r5, r3
 80013a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80013aa:	bf0c      	ite	eq
 80013ac:	ed9f 0a54 	vldreq	s0, [pc, #336]	; 8001500 <.text_4>
 80013b0:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 80013b4:	fb08 f803 	mul.w	r8, r8, r3
 80013b8:	eb02 0e88 	add.w	lr, r2, r8, lsl #2
 80013bc:	f04f 0800 	mov.w	r8, #0
 80013c0:	eb0e 0b83 	add.w	fp, lr, r3, lsl #2
 80013c4:	f8cd b000 	str.w	fp, [sp]
 80013c8:	45de      	cmp	lr, fp
 80013ca:	f080 8096 	bcs.w	80014fa <ai_conv2d_kernel_depthwise_f32+0x19e>
 80013ce:	950e      	str	r5, [sp, #56]	; 0x38
 80013d0:	f020 0303 	bic.w	r3, r0, #3
 80013d4:	9603      	str	r6, [sp, #12]
 80013d6:	9a03      	ldr	r2, [sp, #12]
 80013d8:	2a00      	cmp	r2, #0
 80013da:	f000 8088 	beq.w	80014ee <ai_conv2d_kernel_depthwise_f32+0x192>
 80013de:	9a04      	ldr	r2, [sp, #16]
 80013e0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80013e2:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 80013e6:	9a03      	ldr	r2, [sp, #12]
 80013e8:	9415      	str	r4, [sp, #84]	; 0x54
 80013ea:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 80013ee:	9102      	str	r1, [sp, #8]
 80013f0:	f8cd e004 	str.w	lr, [sp, #4]
 80013f4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80013f6:	edd5 0a00 	vldr	s1, [r5]
 80013fa:	ee60 0a80 	vmul.f32	s1, s1, s0
 80013fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001402:	2900      	cmp	r1, #0
 8001404:	dd63      	ble.n	80014ce <ai_conv2d_kernel_depthwise_f32+0x172>
 8001406:	2400      	movs	r4, #0
 8001408:	2b00      	cmp	r3, #0
 800140a:	dd26      	ble.n	800145a <ai_conv2d_kernel_depthwise_f32+0xfe>
 800140c:	f8dd 603c 	ldr.w	r6, [sp, #60]	; 0x3c
 8001410:	ed97 1a00 	vldr	s2, [r7]
 8001414:	1d24      	adds	r4, r4, #4
 8001416:	edde 1a00 	vldr	s3, [lr]
 800141a:	eb0e 0e86 	add.w	lr, lr, r6, lsl #2
 800141e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001422:	ed97 2a01 	vldr	s4, [r7, #4]
 8001426:	ed97 1a02 	vldr	s2, [r7, #8]
 800142a:	edde 2a00 	vldr	s5, [lr]
 800142e:	eb0e 0e86 	add.w	lr, lr, r6, lsl #2
 8001432:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001436:	ed97 2a03 	vldr	s4, [r7, #12]
 800143a:	3710      	adds	r7, #16
 800143c:	429c      	cmp	r4, r3
 800143e:	edde 1a00 	vldr	s3, [lr]
 8001442:	eb0e 0e86 	add.w	lr, lr, r6, lsl #2
 8001446:	ee41 0a21 	vmla.f32	s1, s2, s3
 800144a:	edde 2a00 	vldr	s5, [lr]
 800144e:	eb0e 0e86 	add.w	lr, lr, r6, lsl #2
 8001452:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001456:	dbdb      	blt.n	8001410 <ai_conv2d_kernel_depthwise_f32+0xb4>
 8001458:	960f      	str	r6, [sp, #60]	; 0x3c
 800145a:	4284      	cmp	r4, r0
 800145c:	da31      	bge.n	80014c2 <ai_conv2d_kernel_depthwise_f32+0x166>
 800145e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8001460:	1c64      	adds	r4, r4, #1
 8001462:	ed97 1a00 	vldr	s2, [r7]
 8001466:	1d3f      	adds	r7, r7, #4
 8001468:	edde 1a00 	vldr	s3, [lr]
 800146c:	4284      	cmp	r4, r0
 800146e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001472:	eb0e 0e86 	add.w	lr, lr, r6, lsl #2
 8001476:	da23      	bge.n	80014c0 <ai_conv2d_kernel_depthwise_f32+0x164>
 8001478:	1c64      	adds	r4, r4, #1
 800147a:	ed97 1a00 	vldr	s2, [r7]
 800147e:	1d3f      	adds	r7, r7, #4
 8001480:	edde 1a00 	vldr	s3, [lr]
 8001484:	4284      	cmp	r4, r0
 8001486:	ee41 0a21 	vmla.f32	s1, s2, s3
 800148a:	eb0e 0e86 	add.w	lr, lr, r6, lsl #2
 800148e:	da17      	bge.n	80014c0 <ai_conv2d_kernel_depthwise_f32+0x164>
 8001490:	1c64      	adds	r4, r4, #1
 8001492:	ed97 1a00 	vldr	s2, [r7]
 8001496:	1d3f      	adds	r7, r7, #4
 8001498:	edde 1a00 	vldr	s3, [lr]
 800149c:	4284      	cmp	r4, r0
 800149e:	ee41 0a21 	vmla.f32	s1, s2, s3
 80014a2:	eb0e 0e86 	add.w	lr, lr, r6, lsl #2
 80014a6:	da0b      	bge.n	80014c0 <ai_conv2d_kernel_depthwise_f32+0x164>
 80014a8:	1c64      	adds	r4, r4, #1
 80014aa:	ed97 1a00 	vldr	s2, [r7]
 80014ae:	1d3f      	adds	r7, r7, #4
 80014b0:	edde 1a00 	vldr	s3, [lr]
 80014b4:	4284      	cmp	r4, r0
 80014b6:	ee41 0a21 	vmla.f32	s1, s2, s3
 80014ba:	eb0e 0e86 	add.w	lr, lr, r6, lsl #2
 80014be:	dbcf      	blt.n	8001460 <ai_conv2d_kernel_depthwise_f32+0x104>
 80014c0:	960f      	str	r6, [sp, #60]	; 0x3c
 80014c2:	1e49      	subs	r1, r1, #1
 80014c4:	eb0e 0e8a 	add.w	lr, lr, sl, lsl #2
 80014c8:	eb07 078c 	add.w	r7, r7, ip, lsl #2
 80014cc:	d19b      	bne.n	8001406 <ai_conv2d_kernel_depthwise_f32+0xaa>
 80014ce:	1d2d      	adds	r5, r5, #4
 80014d0:	1e52      	subs	r2, r2, #1
 80014d2:	9902      	ldr	r1, [sp, #8]
 80014d4:	edc9 0a00 	vstr	s1, [r9]
 80014d8:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 80014dc:	f108 0801 	add.w	r8, r8, #1
 80014e0:	f109 0904 	add.w	r9, r9, #4
 80014e4:	d186      	bne.n	80013f4 <ai_conv2d_kernel_depthwise_f32+0x98>
 80014e6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80014e8:	9902      	ldr	r1, [sp, #8]
 80014ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80014ee:	9a00      	ldr	r2, [sp, #0]
 80014f0:	f10e 0e04 	add.w	lr, lr, #4
 80014f4:	4596      	cmp	lr, r2
 80014f6:	f4ff af6e 	bcc.w	80013d6 <ai_conv2d_kernel_depthwise_f32+0x7a>
 80014fa:	b005      	add	sp, #20
 80014fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001500 <.text_4>:
 8001500:	00000000 	.word	0x00000000

08001504 <ai_conv2d_kernel_group_f32>:
 8001504:	e92d 4ffa 	stmdb	sp!, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001508:	b085      	sub	sp, #20
 800150a:	4693      	mov	fp, r2
 800150c:	f9bd 9050 	ldrsh.w	r9, [sp, #80]	; 0x50
 8001510:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8001512:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001514:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
 8001518:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 800151c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800151e:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8001520:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8001522:	46ca      	mov	sl, r9
 8001524:	4655      	mov	r5, sl
 8001526:	ebaa 0c04 	sub.w	ip, sl, r4
 800152a:	981c      	ldr	r0, [sp, #112]	; 0x70
 800152c:	fb94 f6f5 	sdiv	r6, r4, r5
 8001530:	fb05 c506 	mla	r5, r5, r6, ip
 8001534:	4454      	add	r4, sl
 8001536:	1e64      	subs	r4, r4, #1
 8001538:	fb94 f4fa 	sdiv	r4, r4, sl
 800153c:	fb95 fcfa 	sdiv	ip, r5, sl
 8001540:	fb0a 551c 	mls	r5, sl, ip, r5
 8001544:	9501      	str	r5, [sp, #4]
 8001546:	4645      	mov	r5, r8
 8001548:	1bee      	subs	r6, r5, r7
 800154a:	fb97 fcf5 	sdiv	ip, r7, r5
 800154e:	fb05 6c0c 	mla	ip, r5, ip, r6
 8001552:	fb9c f6f5 	sdiv	r6, ip, r5
 8001556:	fb05 cc16 	mls	ip, r5, r6, ip
 800155a:	f8cd c000 	str.w	ip, [sp]
 800155e:	f8dd c004 	ldr.w	ip, [sp, #4]
 8001562:	fbb1 f6f2 	udiv	r6, r1, r2
 8001566:	eba0 000c 	sub.w	r0, r0, ip
 800156a:	4450      	add	r0, sl
 800156c:	1e40      	subs	r0, r0, #1
 800156e:	f8dd c000 	ldr.w	ip, [sp]
 8001572:	fb90 f0fa 	sdiv	r0, r0, sl
 8001576:	eba3 030c 	sub.w	r3, r3, ip
 800157a:	18eb      	adds	r3, r5, r3
 800157c:	1e5b      	subs	r3, r3, #1
 800157e:	fb93 fcf5 	sdiv	ip, r3, r5
 8001582:	ebae 0e0c 	sub.w	lr, lr, ip
 8001586:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001588:	9604      	str	r6, [sp, #16]
 800158a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800158c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800158e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001592:	fb01 f808 	mul.w	r8, r1, r8
 8001596:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001598:	fb06 f909 	mul.w	r9, r6, r9
 800159c:	fb00 881a 	mls	r8, r0, sl, r8
 80015a0:	f8dd a018 	ldr.w	sl, [sp, #24]
 80015a4:	1a09      	subs	r1, r1, r0
 80015a6:	4359      	muls	r1, r3
 80015a8:	eba9 0903 	sub.w	r9, r9, r3
 80015ac:	fb06 f808 	mul.w	r8, r6, r8
 80015b0:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80015b2:	435e      	muls	r6, r3
 80015b4:	fb0e fe06 	mul.w	lr, lr, r6
 80015b8:	19ee      	adds	r6, r5, r7
 80015ba:	1e76      	subs	r6, r6, #1
 80015bc:	fb96 f5f5 	sdiv	r5, r6, r5
 80015c0:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80015c2:	fb06 4405 	mla	r4, r6, r5, r4
 80015c6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80015c8:	9d05      	ldr	r5, [sp, #20]
 80015ca:	435c      	muls	r4, r3
 80015cc:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
 80015d0:	f8dd a004 	ldr.w	sl, [sp, #4]
 80015d4:	42ae      	cmp	r6, r5
 80015d6:	9d00      	ldr	r5, [sp, #0]
 80015d8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80015da:	bf0c      	ite	eq
 80015dc:	ed9f 0a40 	vldreq	s0, [pc, #256]	; 80016e0 <.text_6>
 80015e0:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 80015e4:	19ef      	adds	r7, r5, r7
 80015e6:	fb06 a607 	mla	r6, r6, r7, sl
 80015ea:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80015ec:	f04f 0a00 	mov.w	sl, #0
 80015f0:	437e      	muls	r6, r7
 80015f2:	eb0b 0586 	add.w	r5, fp, r6, lsl #2
 80015f6:	2a00      	cmp	r2, #0
 80015f8:	d06e      	beq.n	80016d8 <ai_conv2d_kernel_group_f32+0x1d4>
 80015fa:	9200      	str	r2, [sp, #0]
 80015fc:	9a04      	ldr	r2, [sp, #16]
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d064      	beq.n	80016cc <ai_conv2d_kernel_group_f32+0x1c8>
 8001602:	9a05      	ldr	r2, [sp, #20]
 8001604:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8001608:	f8cd c004 	str.w	ip, [sp, #4]
 800160c:	eb02 078a 	add.w	r7, r2, sl, lsl #2
 8001610:	9a04      	ldr	r2, [sp, #16]
 8001612:	f8cd e00c 	str.w	lr, [sp, #12]
 8001616:	eb0b 0b8a 	add.w	fp, fp, sl, lsl #2
 800161a:	9502      	str	r5, [sp, #8]
 800161c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001620:	eddb 0a00 	vldr	s1, [fp]
 8001624:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001628:	9d02      	ldr	r5, [sp, #8]
 800162a:	f1be 0f01 	cmp.w	lr, #1
 800162e:	db3b      	blt.n	80016a8 <ai_conv2d_kernel_group_f32+0x1a4>
 8001630:	2801      	cmp	r0, #1
 8001632:	db32      	blt.n	800169a <ai_conv2d_kernel_group_f32+0x196>
 8001634:	ea4f 0c00 	mov.w	ip, r0
 8001638:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 800163c:	42b5      	cmp	r5, r6
 800163e:	d227      	bcs.n	8001690 <ai_conv2d_kernel_group_f32+0x18c>
 8001640:	ed94 1a00 	vldr	s2, [r4]
 8001644:	1d24      	adds	r4, r4, #4
 8001646:	edd5 1a00 	vldr	s3, [r5]
 800164a:	1d2d      	adds	r5, r5, #4
 800164c:	42b5      	cmp	r5, r6
 800164e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001652:	d21d      	bcs.n	8001690 <ai_conv2d_kernel_group_f32+0x18c>
 8001654:	ed94 2a00 	vldr	s4, [r4]
 8001658:	1d24      	adds	r4, r4, #4
 800165a:	ed95 1a00 	vldr	s2, [r5]
 800165e:	1d2d      	adds	r5, r5, #4
 8001660:	42b5      	cmp	r5, r6
 8001662:	ee42 0a01 	vmla.f32	s1, s4, s2
 8001666:	d213      	bcs.n	8001690 <ai_conv2d_kernel_group_f32+0x18c>
 8001668:	edd4 1a00 	vldr	s3, [r4]
 800166c:	1d24      	adds	r4, r4, #4
 800166e:	ed95 2a00 	vldr	s4, [r5]
 8001672:	1d2d      	adds	r5, r5, #4
 8001674:	42b5      	cmp	r5, r6
 8001676:	ee41 0a82 	vmla.f32	s1, s3, s4
 800167a:	d209      	bcs.n	8001690 <ai_conv2d_kernel_group_f32+0x18c>
 800167c:	ed94 1a00 	vldr	s2, [r4]
 8001680:	1d24      	adds	r4, r4, #4
 8001682:	edd5 1a00 	vldr	s3, [r5]
 8001686:	1d2d      	adds	r5, r5, #4
 8001688:	42b5      	cmp	r5, r6
 800168a:	ee41 0a21 	vmla.f32	s1, s2, s3
 800168e:	d3d7      	bcc.n	8001640 <ai_conv2d_kernel_group_f32+0x13c>
 8001690:	f1bc 0c01 	subs.w	ip, ip, #1
 8001694:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 8001698:	d1ce      	bne.n	8001638 <ai_conv2d_kernel_group_f32+0x134>
 800169a:	f1be 0e01 	subs.w	lr, lr, #1
 800169e:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 80016a2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80016a6:	d1c3      	bne.n	8001630 <ai_conv2d_kernel_group_f32+0x12c>
 80016a8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80016ac:	edc7 0a00 	vstr	s1, [r7]
 80016b0:	1d3f      	adds	r7, r7, #4
 80016b2:	1e52      	subs	r2, r2, #1
 80016b4:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 80016b8:	f10a 0a01 	add.w	sl, sl, #1
 80016bc:	f10b 0b04 	add.w	fp, fp, #4
 80016c0:	d1ac      	bne.n	800161c <ai_conv2d_kernel_group_f32+0x118>
 80016c2:	f8dd c004 	ldr.w	ip, [sp, #4]
 80016c6:	f8dd e00c 	ldr.w	lr, [sp, #12]
 80016ca:	9d02      	ldr	r5, [sp, #8]
 80016cc:	9f00      	ldr	r7, [sp, #0]
 80016ce:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80016d2:	1e7f      	subs	r7, r7, #1
 80016d4:	9700      	str	r7, [sp, #0]
 80016d6:	d191      	bne.n	80015fc <ai_conv2d_kernel_group_f32+0xf8>
 80016d8:	b007      	add	sp, #28
 80016da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080016e0 <.text_6>:
 80016e0:	00000000 	.word	0x00000000

080016e4 <ai_conv2d_kernel_f32>:
 80016e4:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016e8:	b090      	sub	sp, #64	; 0x40
 80016ea:	991a      	ldr	r1, [sp, #104]	; 0x68
 80016ec:	b901      	cbnz	r1, 80016f0 <ai_conv2d_kernel_f32+0xc>
 80016ee:	9910      	ldr	r1, [sp, #64]	; 0x40
 80016f0:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80016f2:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80016f4:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80016f6:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 80016f8:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 80016fc:	f9bd c078 	ldrsh.w	ip, [sp, #120]	; 0x78
 8001700:	f9bd 807c 	ldrsh.w	r8, [sp, #124]	; 0x7c
 8001704:	1ba4      	subs	r4, r4, r6
 8001706:	1bed      	subs	r5, r5, r7
 8001708:	900f      	str	r0, [sp, #60]	; 0x3c
 800170a:	f1be 0f01 	cmp.w	lr, #1
 800170e:	920e      	str	r2, [sp, #56]	; 0x38
 8001710:	930d      	str	r3, [sp, #52]	; 0x34
 8001712:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001714:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001716:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001718:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 800171c:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 8001720:	bf04      	itt	eq
 8001722:	fb1c fb08 	smulbbeq	fp, ip, r8
 8001726:	f1bb 0f01 	cmpeq.w	fp, #1
 800172a:	d114      	bne.n	8001756 <ai_conv2d_kernel_f32+0x72>
 800172c:	9303      	str	r3, [sp, #12]
 800172e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001730:	9202      	str	r2, [sp, #8]
 8001732:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001734:	9001      	str	r0, [sp, #4]
 8001736:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001738:	9100      	str	r1, [sp, #0]
 800173a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800173c:	9409      	str	r4, [sp, #36]	; 0x24
 800173e:	9608      	str	r6, [sp, #32]
 8001740:	9507      	str	r5, [sp, #28]
 8001742:	9706      	str	r7, [sp, #24]
 8001744:	f8cd a014 	str.w	sl, [sp, #20]
 8001748:	f8cd 9010 	str.w	r9, [sp, #16]
 800174c:	f7ff fd5a 	bl	8001204 <ai_conv2d_kernel_simple_f32>
 8001750:	b011      	add	sp, #68	; 0x44
 8001752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001756:	4586      	cmp	lr, r0
 8001758:	bf04      	itt	eq
 800175a:	fb1c fb08 	smulbbeq	fp, ip, r8
 800175e:	f1bb 0f01 	cmpeq.w	fp, #1
 8001762:	d114      	bne.n	800178e <ai_conv2d_kernel_f32+0xaa>
 8001764:	9303      	str	r3, [sp, #12]
 8001766:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001768:	9202      	str	r2, [sp, #8]
 800176a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800176c:	9001      	str	r0, [sp, #4]
 800176e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001770:	9100      	str	r1, [sp, #0]
 8001772:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001774:	9409      	str	r4, [sp, #36]	; 0x24
 8001776:	9608      	str	r6, [sp, #32]
 8001778:	9507      	str	r5, [sp, #28]
 800177a:	9706      	str	r7, [sp, #24]
 800177c:	f8cd a014 	str.w	sl, [sp, #20]
 8001780:	f8cd 9010 	str.w	r9, [sp, #16]
 8001784:	f7ff fdea 	bl	800135c <ai_conv2d_kernel_depthwise_f32>
 8001788:	b011      	add	sp, #68	; 0x44
 800178a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800178e:	9303      	str	r3, [sp, #12]
 8001790:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001792:	9202      	str	r2, [sp, #8]
 8001794:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001796:	9001      	str	r0, [sp, #4]
 8001798:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800179a:	9100      	str	r1, [sp, #0]
 800179c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800179e:	940c      	str	r4, [sp, #48]	; 0x30
 80017a0:	960b      	str	r6, [sp, #44]	; 0x2c
 80017a2:	950a      	str	r5, [sp, #40]	; 0x28
 80017a4:	9709      	str	r7, [sp, #36]	; 0x24
 80017a6:	f8cd e020 	str.w	lr, [sp, #32]
 80017aa:	f8cd a01c 	str.w	sl, [sp, #28]
 80017ae:	f8cd 9018 	str.w	r9, [sp, #24]
 80017b2:	f8cd 8014 	str.w	r8, [sp, #20]
 80017b6:	f8cd c010 	str.w	ip, [sp, #16]
 80017ba:	f7ff fea3 	bl	8001504 <ai_conv2d_kernel_group_f32>
 80017be:	b011      	add	sp, #68	; 0x44
 80017c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080017c4 <ai_conv2d_stripe_f32>:
 80017c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017c8:	b091      	sub	sp, #68	; 0x44
 80017ca:	4604      	mov	r4, r0
 80017cc:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 80017ce:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80017d2:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 80017d6:	9e26      	ldr	r6, [sp, #152]	; 0x98
 80017d8:	2d00      	cmp	r5, #0
 80017da:	fb08 b606 	mla	r6, r8, r6, fp
 80017de:	9601      	str	r6, [sp, #4]
 80017e0:	d060      	beq.n	80018a4 <ai_conv2d_stripe_f32+0xe0>
 80017e2:	9500      	str	r5, [sp, #0]
 80017e4:	4625      	mov	r5, r4
 80017e6:	9102      	str	r1, [sp, #8]
 80017e8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80017ea:	920e      	str	r2, [sp, #56]	; 0x38
 80017ec:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80017ee:	930d      	str	r3, [sp, #52]	; 0x34
 80017f0:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 80017f4:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	; 0xa0
 80017f8:	950f      	str	r5, [sp, #60]	; 0x3c
 80017fa:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 80017fe:	971a      	str	r7, [sp, #104]	; 0x68
 8001800:	9821      	ldr	r0, [sp, #132]	; 0x84
 8001802:	9420      	str	r4, [sp, #128]	; 0x80
 8001804:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001806:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
 800180a:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
 800180e:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
 8001812:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8001814:	931f      	str	r3, [sp, #124]	; 0x7c
 8001816:	9d02      	ldr	r5, [sp, #8]
 8001818:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
 800181c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800181e:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
 8001822:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 8001826:	f8ad 10a0 	strh.w	r1, [sp, #160]	; 0xa0
 800182a:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
 800182e:	f8dd a004 	ldr.w	sl, [sp, #4]
 8001832:	9c00      	ldr	r4, [sp, #0]
 8001834:	f8ad 0084 	strh.w	r0, [sp, #132]	; 0x84
 8001838:	f1db 0000 	rsbs	r0, fp, #0
 800183c:	eba8 010b 	sub.w	r1, r8, fp
 8001840:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8001842:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001844:	9209      	str	r2, [sp, #36]	; 0x24
 8001846:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8001848:	bfd8      	it	le
 800184a:	2000      	movle	r0, #0
 800184c:	4549      	cmp	r1, r9
 800184e:	900b      	str	r0, [sp, #44]	; 0x2c
 8001850:	9308      	str	r3, [sp, #32]
 8001852:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 8001856:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 800185a:	4450      	add	r0, sl
 800185c:	bf28      	it	cs
 800185e:	4649      	movcs	r1, r9
 8001860:	910c      	str	r1, [sp, #48]	; 0x30
 8001862:	9924      	ldr	r1, [sp, #144]	; 0x90
 8001864:	910a      	str	r1, [sp, #40]	; 0x28
 8001866:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001868:	9107      	str	r1, [sp, #28]
 800186a:	4370      	muls	r0, r6
 800186c:	9206      	str	r2, [sp, #24]
 800186e:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	; 0xa0
 8001872:	9305      	str	r3, [sp, #20]
 8001874:	eb0e 0280 	add.w	r2, lr, r0, lsl #2
 8001878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800187a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800187c:	9104      	str	r1, [sp, #16]
 800187e:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
 8001882:	f8cd 800c 	str.w	r8, [sp, #12]
 8001886:	4629      	mov	r1, r5
 8001888:	9702      	str	r7, [sp, #8]
 800188a:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 800188e:	9601      	str	r6, [sp, #4]
 8001890:	f8cd c000 	str.w	ip, [sp]
 8001894:	f7ff ff26 	bl	80016e4 <ai_conv2d_kernel_f32>
 8001898:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
 800189c:	1e64      	subs	r4, r4, #1
 800189e:	448b      	add	fp, r1
 80018a0:	448a      	add	sl, r1
 80018a2:	d1c9      	bne.n	8001838 <ai_conv2d_stripe_f32+0x74>
 80018a4:	b011      	add	sp, #68	; 0x44
 80018a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080018aa <func_dummy>:
 80018aa:	4770      	bx	lr

080018ac <ai_dict8_dot_array_f32>:
 80018ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ae:	4604      	mov	r4, r0
 80018b0:	9805      	ldr	r0, [sp, #20]
 80018b2:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 80018b6:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 8001c1c <.text_12>
 80018ba:	3d20      	subs	r5, #32
 80018bc:	2808      	cmp	r0, #8
 80018be:	d22e      	bcs.n	800191e <ai_dict8_dot_array_f32+0x72>
 80018c0:	3520      	adds	r5, #32
 80018c2:	42ab      	cmp	r3, r5
 80018c4:	d224      	bcs.n	8001910 <ai_dict8_dot_array_f32+0x64>
 80018c6:	7808      	ldrb	r0, [r1, #0]
 80018c8:	ed93 1a00 	vldr	s2, [r3]
 80018cc:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80018d0:	1d18      	adds	r0, r3, #4
 80018d2:	42a8      	cmp	r0, r5
 80018d4:	edd6 0a00 	vldr	s1, [r6]
 80018d8:	ee00 0a81 	vmla.f32	s0, s1, s2
 80018dc:	d218      	bcs.n	8001910 <ai_dict8_dot_array_f32+0x64>
 80018de:	784b      	ldrb	r3, [r1, #1]
 80018e0:	ed90 1a00 	vldr	s2, [r0]
 80018e4:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 80018e8:	1d00      	adds	r0, r0, #4
 80018ea:	42a8      	cmp	r0, r5
 80018ec:	edd6 0a00 	vldr	s1, [r6]
 80018f0:	ee00 0a81 	vmla.f32	s0, s1, s2
 80018f4:	d20c      	bcs.n	8001910 <ai_dict8_dot_array_f32+0x64>
 80018f6:	788b      	ldrb	r3, [r1, #2]
 80018f8:	1cc9      	adds	r1, r1, #3
 80018fa:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 80018fe:	1d03      	adds	r3, r0, #4
 8001900:	42ab      	cmp	r3, r5
 8001902:	ed90 1a00 	vldr	s2, [r0]
 8001906:	edd6 0a00 	vldr	s1, [r6]
 800190a:	ee00 0a81 	vmla.f32	s0, s1, s2
 800190e:	d3da      	bcc.n	80018c6 <ai_dict8_dot_array_f32+0x1a>
 8001910:	edd4 1a00 	vldr	s3, [r4]
 8001914:	ee31 0a80 	vadd.f32	s0, s3, s0
 8001918:	ed84 0a00 	vstr	s0, [r4]
 800191c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800191e:	f001 0003 	and.w	r0, r1, #3
 8001922:	2803      	cmp	r0, #3
 8001924:	d8f4      	bhi.n	8001910 <ai_dict8_dot_array_f32+0x64>
 8001926:	e8df f000 	tbb	[pc, r0]
 800192a:	3503      	.short	0x3503
 800192c:	4b40      	.short	0x4b40
 800192e:	e7ef      	b.n	8001910 <ai_dict8_dot_array_f32+0x64>
 8001930:	429d      	cmp	r5, r3
 8001932:	f080 80d4 	bcs.w	8001ade <ai_dict8_dot_array_f32+0x232>
 8001936:	3520      	adds	r5, #32
 8001938:	42ab      	cmp	r3, r5
 800193a:	d2e9      	bcs.n	8001910 <ai_dict8_dot_array_f32+0x64>
 800193c:	780e      	ldrb	r6, [r1, #0]
 800193e:	1d18      	adds	r0, r3, #4
 8001940:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8001944:	42a8      	cmp	r0, r5
 8001946:	ed93 1a00 	vldr	s2, [r3]
 800194a:	edd7 0a00 	vldr	s1, [r7]
 800194e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001952:	d2dd      	bcs.n	8001910 <ai_dict8_dot_array_f32+0x64>
 8001954:	784b      	ldrb	r3, [r1, #1]
 8001956:	ed90 1a00 	vldr	s2, [r0]
 800195a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800195e:	1d00      	adds	r0, r0, #4
 8001960:	42a8      	cmp	r0, r5
 8001962:	edd6 0a00 	vldr	s1, [r6]
 8001966:	ee00 0a81 	vmla.f32	s0, s1, s2
 800196a:	d2d1      	bcs.n	8001910 <ai_dict8_dot_array_f32+0x64>
 800196c:	788b      	ldrb	r3, [r1, #2]
 800196e:	1cc9      	adds	r1, r1, #3
 8001970:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001974:	1d03      	adds	r3, r0, #4
 8001976:	42ab      	cmp	r3, r5
 8001978:	ed90 1a00 	vldr	s2, [r0]
 800197c:	edd6 0a00 	vldr	s1, [r6]
 8001980:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001984:	d3da      	bcc.n	800193c <ai_dict8_dot_array_f32+0x90>
 8001986:	edd4 1a00 	vldr	s3, [r4]
 800198a:	ee31 0a80 	vadd.f32	s0, s3, s0
 800198e:	ed84 0a00 	vstr	s0, [r4]
 8001992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001994:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001998:	ed93 1a00 	vldr	s2, [r3]
 800199c:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80019a0:	1d1b      	adds	r3, r3, #4
 80019a2:	edd6 0a00 	vldr	s1, [r6]
 80019a6:	ee00 0a81 	vmla.f32	s0, s1, s2
 80019aa:	f811 0b01 	ldrb.w	r0, [r1], #1
 80019ae:	ed93 1a00 	vldr	s2, [r3]
 80019b2:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80019b6:	1d1b      	adds	r3, r3, #4
 80019b8:	edd6 0a00 	vldr	s1, [r6]
 80019bc:	ee00 0a81 	vmla.f32	s0, s1, s2
 80019c0:	f811 0b01 	ldrb.w	r0, [r1], #1
 80019c4:	ed93 1a00 	vldr	s2, [r3]
 80019c8:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80019cc:	1d1b      	adds	r3, r3, #4
 80019ce:	429d      	cmp	r5, r3
 80019d0:	edd6 0a00 	vldr	s1, [r6]
 80019d4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80019d8:	d34f      	bcc.n	8001a7a <ai_dict8_dot_array_f32+0x1ce>
 80019da:	78cf      	ldrb	r7, [r1, #3]
 80019dc:	f891 e000 	ldrb.w	lr, [r1]
 80019e0:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 80019e4:	788f      	ldrb	r7, [r1, #2]
 80019e6:	f103 0010 	add.w	r0, r3, #16
 80019ea:	ed93 4a00 	vldr	s8, [r3]
 80019ee:	ed93 3a01 	vldr	s6, [r3, #4]
 80019f2:	ed93 2a02 	vldr	s4, [r3, #8]
 80019f6:	eddc 0a00 	vldr	s1, [ip]
 80019fa:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 80019fe:	784f      	ldrb	r7, [r1, #1]
 8001a00:	ed93 1a03 	vldr	s2, [r3, #12]
 8001a04:	790b      	ldrb	r3, [r1, #4]
 8001a06:	eddc 1a00 	vldr	s3, [ip]
 8001a0a:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001a0e:	eb02 078e 	add.w	r7, r2, lr, lsl #2
 8001a12:	edd7 3a00 	vldr	s7, [r7]
 8001a16:	794f      	ldrb	r7, [r1, #5]
 8001a18:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001a1c:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8001a20:	eddc 2a00 	vldr	s5, [ip]
 8001a24:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8001a28:	ee02 0a83 	vmla.f32	s0, s5, s6
 8001a2c:	798b      	ldrb	r3, [r1, #6]
 8001a2e:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001a32:	79cf      	ldrb	r7, [r1, #7]
 8001a34:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001a38:	3108      	adds	r1, #8
 8001a3a:	eddc 0a00 	vldr	s1, [ip]
 8001a3e:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8001a42:	ed9e 1a00 	vldr	s2, [lr]
 8001a46:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8001a4a:	ed90 4a00 	vldr	s8, [r0]
 8001a4e:	f100 0310 	add.w	r3, r0, #16
 8001a52:	edd0 3a01 	vldr	s7, [r0, #4]
 8001a56:	429d      	cmp	r5, r3
 8001a58:	ee00 0a84 	vmla.f32	s0, s1, s8
 8001a5c:	eddc 1a00 	vldr	s3, [ip]
 8001a60:	ed90 3a02 	vldr	s6, [r0, #8]
 8001a64:	ee01 0a23 	vmla.f32	s0, s2, s7
 8001a68:	ed9e 2a00 	vldr	s4, [lr]
 8001a6c:	edd0 2a03 	vldr	s5, [r0, #12]
 8001a70:	ee01 0a83 	vmla.f32	s0, s3, s6
 8001a74:	ee02 0a22 	vmla.f32	s0, s4, s5
 8001a78:	d2af      	bcs.n	80019da <ai_dict8_dot_array_f32+0x12e>
 8001a7a:	3520      	adds	r5, #32
 8001a7c:	42ab      	cmp	r3, r5
 8001a7e:	f4bf af47 	bcs.w	8001910 <ai_dict8_dot_array_f32+0x64>
 8001a82:	7808      	ldrb	r0, [r1, #0]
 8001a84:	ed93 1a00 	vldr	s2, [r3]
 8001a88:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001a8c:	1d18      	adds	r0, r3, #4
 8001a8e:	42a8      	cmp	r0, r5
 8001a90:	edd6 0a00 	vldr	s1, [r6]
 8001a94:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001a98:	f4bf af3a 	bcs.w	8001910 <ai_dict8_dot_array_f32+0x64>
 8001a9c:	784b      	ldrb	r3, [r1, #1]
 8001a9e:	ed90 1a00 	vldr	s2, [r0]
 8001aa2:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001aa6:	1d00      	adds	r0, r0, #4
 8001aa8:	42a8      	cmp	r0, r5
 8001aaa:	edd6 0a00 	vldr	s1, [r6]
 8001aae:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001ab2:	f4bf af2d 	bcs.w	8001910 <ai_dict8_dot_array_f32+0x64>
 8001ab6:	788b      	ldrb	r3, [r1, #2]
 8001ab8:	1cc9      	adds	r1, r1, #3
 8001aba:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001abe:	1d03      	adds	r3, r0, #4
 8001ac0:	42ab      	cmp	r3, r5
 8001ac2:	ed90 1a00 	vldr	s2, [r0]
 8001ac6:	edd6 0a00 	vldr	s1, [r6]
 8001aca:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001ace:	d3d8      	bcc.n	8001a82 <ai_dict8_dot_array_f32+0x1d6>
 8001ad0:	edd4 1a00 	vldr	s3, [r4]
 8001ad4:	ee31 0a80 	vadd.f32	s0, s3, s0
 8001ad8:	ed84 0a00 	vstr	s0, [r4]
 8001adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ade:	78cf      	ldrb	r7, [r1, #3]
 8001ae0:	f891 e000 	ldrb.w	lr, [r1]
 8001ae4:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001ae8:	788f      	ldrb	r7, [r1, #2]
 8001aea:	f103 0010 	add.w	r0, r3, #16
 8001aee:	ed93 4a00 	vldr	s8, [r3]
 8001af2:	ed93 3a01 	vldr	s6, [r3, #4]
 8001af6:	ed93 2a02 	vldr	s4, [r3, #8]
 8001afa:	eddc 0a00 	vldr	s1, [ip]
 8001afe:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001b02:	784f      	ldrb	r7, [r1, #1]
 8001b04:	ed93 1a03 	vldr	s2, [r3, #12]
 8001b08:	790b      	ldrb	r3, [r1, #4]
 8001b0a:	eddc 1a00 	vldr	s3, [ip]
 8001b0e:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001b12:	eb02 078e 	add.w	r7, r2, lr, lsl #2
 8001b16:	edd7 3a00 	vldr	s7, [r7]
 8001b1a:	794f      	ldrb	r7, [r1, #5]
 8001b1c:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001b20:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8001b24:	eddc 2a00 	vldr	s5, [ip]
 8001b28:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8001b2c:	ee02 0a83 	vmla.f32	s0, s5, s6
 8001b30:	798b      	ldrb	r3, [r1, #6]
 8001b32:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001b36:	79cf      	ldrb	r7, [r1, #7]
 8001b38:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001b3c:	3108      	adds	r1, #8
 8001b3e:	eddc 0a00 	vldr	s1, [ip]
 8001b42:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8001b46:	ed9e 1a00 	vldr	s2, [lr]
 8001b4a:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8001b4e:	ed90 4a00 	vldr	s8, [r0]
 8001b52:	f100 0310 	add.w	r3, r0, #16
 8001b56:	edd0 3a01 	vldr	s7, [r0, #4]
 8001b5a:	429d      	cmp	r5, r3
 8001b5c:	ee00 0a84 	vmla.f32	s0, s1, s8
 8001b60:	eddc 1a00 	vldr	s3, [ip]
 8001b64:	ed90 3a02 	vldr	s6, [r0, #8]
 8001b68:	ee01 0a23 	vmla.f32	s0, s2, s7
 8001b6c:	ed9e 2a00 	vldr	s4, [lr]
 8001b70:	edd0 2a03 	vldr	s5, [r0, #12]
 8001b74:	ee01 0a83 	vmla.f32	s0, s3, s6
 8001b78:	ee02 0a22 	vmla.f32	s0, s4, s5
 8001b7c:	d2af      	bcs.n	8001ade <ai_dict8_dot_array_f32+0x232>
 8001b7e:	e6da      	b.n	8001936 <ai_dict8_dot_array_f32+0x8a>

08001b80 <ai_dict4_dot_array_f32>:
 8001b80:	b4f0      	push	{r4, r5, r6, r7}
 8001b82:	9c04      	ldr	r4, [sp, #16]
 8001b84:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001c1c <.text_12>
 8001b88:	0865      	lsrs	r5, r4, #1
 8001b8a:	006d      	lsls	r5, r5, #1
 8001b8c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001b90:	42ab      	cmp	r3, r5
 8001b92:	d22f      	bcs.n	8001bf4 <ai_dict4_dot_array_f32+0x74>
 8001b94:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001b98:	ed93 2a00 	vldr	s4, [r3]
 8001b9c:	ed93 1a01 	vldr	s2, [r3, #4]
 8001ba0:	3308      	adds	r3, #8
 8001ba2:	f006 070f 	and.w	r7, r6, #15
 8001ba6:	0936      	lsrs	r6, r6, #4
 8001ba8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8001bac:	42ab      	cmp	r3, r5
 8001bae:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001bb2:	edd6 1a00 	vldr	s3, [r6]
 8001bb6:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001bba:	eddc 0a00 	vldr	s1, [ip]
 8001bbe:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001bc2:	d217      	bcs.n	8001bf4 <ai_dict4_dot_array_f32+0x74>
 8001bc4:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001bc8:	ed93 2a00 	vldr	s4, [r3]
 8001bcc:	ed93 1a01 	vldr	s2, [r3, #4]
 8001bd0:	3308      	adds	r3, #8
 8001bd2:	f006 070f 	and.w	r7, r6, #15
 8001bd6:	0936      	lsrs	r6, r6, #4
 8001bd8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8001bdc:	42ab      	cmp	r3, r5
 8001bde:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001be2:	edd6 1a00 	vldr	s3, [r6]
 8001be6:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001bea:	eddc 0a00 	vldr	s1, [ip]
 8001bee:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001bf2:	d3cf      	bcc.n	8001b94 <ai_dict4_dot_array_f32+0x14>
 8001bf4:	07e4      	lsls	r4, r4, #31
 8001bf6:	d509      	bpl.n	8001c0c <ai_dict4_dot_array_f32+0x8c>
 8001bf8:	7809      	ldrb	r1, [r1, #0]
 8001bfa:	ed93 1a00 	vldr	s2, [r3]
 8001bfe:	0909      	lsrs	r1, r1, #4
 8001c00:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001c04:	edd2 0a00 	vldr	s1, [r2]
 8001c08:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001c0c:	edd0 1a00 	vldr	s3, [r0]
 8001c10:	ee31 0a80 	vadd.f32	s0, s3, s0
 8001c14:	ed80 0a00 	vstr	s0, [r0]
 8001c18:	bcf0      	pop	{r4, r5, r6, r7}
 8001c1a:	4770      	bx	lr

08001c1c <.text_12>:
 8001c1c:	00000000 	.word	0x00000000

08001c20 <ai_dict_decompress_f32>:
 8001c20:	b4f0      	push	{r4, r5, r6, r7}
 8001c22:	4604      	mov	r4, r0
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	9805      	ldr	r0, [sp, #20]
 8001c28:	9e04      	ldr	r6, [sp, #16]
 8001c2a:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8001c2e:	d003      	beq.n	8001c38 <ai_dict_decompress_f32+0x18>
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d03f      	beq.n	8001cb4 <ai_dict_decompress_f32+0x94>
 8001c34:	bcf0      	pop	{r4, r5, r6, r7}
 8001c36:	4770      	bx	lr
 8001c38:	42ac      	cmp	r4, r5
 8001c3a:	d25a      	bcs.n	8001cf2 <ai_dict_decompress_f32+0xd2>
 8001c3c:	0870      	lsrs	r0, r6, #1
 8001c3e:	d02f      	beq.n	8001ca0 <ai_dict_decompress_f32+0x80>
 8001c40:	07c3      	lsls	r3, r0, #31
 8001c42:	d50d      	bpl.n	8001c60 <ai_dict_decompress_f32+0x40>
 8001c44:	780f      	ldrb	r7, [r1, #0]
 8001c46:	093f      	lsrs	r7, r7, #4
 8001c48:	f852 c027 	ldr.w	ip, [r2, r7, lsl #2]
 8001c4c:	f8c4 c000 	str.w	ip, [r4]
 8001c50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001c5c:	6067      	str	r7, [r4, #4]
 8001c5e:	3408      	adds	r4, #8
 8001c60:	0840      	lsrs	r0, r0, #1
 8001c62:	d01d      	beq.n	8001ca0 <ai_dict_decompress_f32+0x80>
 8001c64:	780b      	ldrb	r3, [r1, #0]
 8001c66:	091b      	lsrs	r3, r3, #4
 8001c68:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001c6c:	6027      	str	r7, [r4, #0]
 8001c6e:	f811 cb01 	ldrb.w	ip, [r1], #1
 8001c72:	f00c 0c0f 	and.w	ip, ip, #15
 8001c76:	f852 302c 	ldr.w	r3, [r2, ip, lsl #2]
 8001c7a:	6063      	str	r3, [r4, #4]
 8001c7c:	f104 0308 	add.w	r3, r4, #8
 8001c80:	780c      	ldrb	r4, [r1, #0]
 8001c82:	0924      	lsrs	r4, r4, #4
 8001c84:	1e40      	subs	r0, r0, #1
 8001c86:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 8001c8a:	601f      	str	r7, [r3, #0]
 8001c8c:	f811 cb01 	ldrb.w	ip, [r1], #1
 8001c90:	f00c 0c0f 	and.w	ip, ip, #15
 8001c94:	f852 402c 	ldr.w	r4, [r2, ip, lsl #2]
 8001c98:	605c      	str	r4, [r3, #4]
 8001c9a:	f103 0408 	add.w	r4, r3, #8
 8001c9e:	d1e1      	bne.n	8001c64 <ai_dict_decompress_f32+0x44>
 8001ca0:	07f0      	lsls	r0, r6, #31
 8001ca2:	d5c9      	bpl.n	8001c38 <ai_dict_decompress_f32+0x18>
 8001ca4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001cae:	f844 7b04 	str.w	r7, [r4], #4
 8001cb2:	e7c1      	b.n	8001c38 <ai_dict_decompress_f32+0x18>
 8001cb4:	42ac      	cmp	r4, r5
 8001cb6:	d21c      	bcs.n	8001cf2 <ai_dict_decompress_f32+0xd2>
 8001cb8:	7808      	ldrb	r0, [r1, #0]
 8001cba:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8001cbe:	1d20      	adds	r0, r4, #4
 8001cc0:	42a8      	cmp	r0, r5
 8001cc2:	6023      	str	r3, [r4, #0]
 8001cc4:	bf3f      	itttt	cc
 8001cc6:	784c      	ldrbcc	r4, [r1, #1]
 8001cc8:	f852 3024 	ldrcc.w	r3, [r2, r4, lsl #2]
 8001ccc:	f840 3b04 	strcc.w	r3, [r0], #4
 8001cd0:	42a8      	cmpcc	r0, r5
 8001cd2:	d20e      	bcs.n	8001cf2 <ai_dict_decompress_f32+0xd2>
 8001cd4:	788c      	ldrb	r4, [r1, #2]
 8001cd6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8001cda:	f840 3b04 	str.w	r3, [r0], #4
 8001cde:	42a8      	cmp	r0, r5
 8001ce0:	d207      	bcs.n	8001cf2 <ai_dict_decompress_f32+0xd2>
 8001ce2:	78cc      	ldrb	r4, [r1, #3]
 8001ce4:	1d09      	adds	r1, r1, #4
 8001ce6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8001cea:	1d04      	adds	r4, r0, #4
 8001cec:	42ac      	cmp	r4, r5
 8001cee:	6003      	str	r3, [r0, #0]
 8001cf0:	d3e2      	bcc.n	8001cb8 <ai_dict_decompress_f32+0x98>
 8001cf2:	bcf0      	pop	{r4, r5, r6, r7}
 8001cf4:	4770      	bx	lr

08001cf6 <forward_conv2d>:
 8001cf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cfa:	b0a7      	sub	sp, #156	; 0x9c
 8001cfc:	4605      	mov	r5, r0
 8001cfe:	6968      	ldr	r0, [r5, #20]
 8001d00:	6800      	ldr	r0, [r0, #0]
 8001d02:	68c2      	ldr	r2, [r0, #12]
 8001d04:	6801      	ldr	r1, [r0, #0]
 8001d06:	6813      	ldr	r3, [r2, #0]
 8001d08:	6982      	ldr	r2, [r0, #24]
 8001d0a:	8c00      	ldrh	r0, [r0, #32]
 8001d0c:	680c      	ldr	r4, [r1, #0]
 8001d0e:	f8d2 b000 	ldr.w	fp, [r2]
 8001d12:	2801      	cmp	r0, #1
 8001d14:	6890      	ldr	r0, [r2, #8]
 8001d16:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8001d1a:	bfcc      	ite	gt
 8001d1c:	6851      	ldrgt	r1, [r2, #4]
 8001d1e:	2100      	movle	r1, #0
 8001d20:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
 8001d24:	689e      	ldr	r6, [r3, #8]
 8001d26:	9603      	str	r6, [sp, #12]
 8001d28:	f8d3 a010 	ldr.w	sl, [r3, #16]
 8001d2c:	68df      	ldr	r7, [r3, #12]
 8001d2e:	9715      	str	r7, [sp, #84]	; 0x54
 8001d30:	6926      	ldr	r6, [r4, #16]
 8001d32:	961a      	str	r6, [sp, #104]	; 0x68
 8001d34:	68e7      	ldr	r7, [r4, #12]
 8001d36:	9721      	str	r7, [sp, #132]	; 0x84
 8001d38:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8001d3a:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 8001d3e:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 8001d40:	9720      	str	r7, [sp, #128]	; 0x80
 8001d42:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001d44:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 8001d46:	6817      	ldr	r7, [r2, #0]
 8001d48:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8001d4c:	9619      	str	r6, [sp, #100]	; 0x64
 8001d4e:	f8d5 e030 	ldr.w	lr, [r5, #48]	; 0x30
 8001d52:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 8001d56:	f8db 600c 	ldr.w	r6, [fp, #12]
 8001d5a:	9614      	str	r6, [sp, #80]	; 0x50
 8001d5c:	f8db e008 	ldr.w	lr, [fp, #8]
 8001d60:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 8001d64:	69ae      	ldr	r6, [r5, #24]
 8001d66:	961f      	str	r6, [sp, #124]	; 0x7c
 8001d68:	6824      	ldr	r4, [r4, #0]
 8001d6a:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8001d6e:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 8001d72:	f8db 6000 	ldr.w	r6, [fp]
 8001d76:	f8d6 9008 	ldr.w	r9, [r6, #8]
 8001d7a:	b119      	cbz	r1, 8001d84 <forward_conv2d+0x8e>
 8001d7c:	680a      	ldr	r2, [r1, #0]
 8001d7e:	6894      	ldr	r4, [r2, #8]
 8001d80:	9417      	str	r4, [sp, #92]	; 0x5c
 8001d82:	e001      	b.n	8001d88 <forward_conv2d+0x92>
 8001d84:	2600      	movs	r6, #0
 8001d86:	9617      	str	r6, [sp, #92]	; 0x5c
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	6893      	ldr	r3, [r2, #8]
 8001d8c:	9302      	str	r3, [sp, #8]
 8001d8e:	69e9      	ldr	r1, [r5, #28]
 8001d90:	b158      	cbz	r0, 8001daa <forward_conv2d+0xb4>
 8001d92:	6803      	ldr	r3, [r0, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	9212      	str	r2, [sp, #72]	; 0x48
 8001d98:	921c      	str	r2, [sp, #112]	; 0x70
 8001d9a:	69c6      	ldr	r6, [r0, #28]
 8001d9c:	9624      	str	r6, [sp, #144]	; 0x90
 8001d9e:	6859      	ldr	r1, [r3, #4]
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	f002 fead 	bl	8004b00 <ai_array_get_byte_size>
 8001da6:	4604      	mov	r4, r0
 8001da8:	e00a      	b.n	8001dc0 <forward_conv2d+0xca>
 8001daa:	b119      	cbz	r1, 8001db4 <forward_conv2d+0xbe>
 8001dac:	6889      	ldr	r1, [r1, #8]
 8001dae:	9112      	str	r1, [sp, #72]	; 0x48
 8001db0:	911c      	str	r1, [sp, #112]	; 0x70
 8001db2:	e002      	b.n	8001dba <forward_conv2d+0xc4>
 8001db4:	2300      	movs	r3, #0
 8001db6:	9312      	str	r3, [sp, #72]	; 0x48
 8001db8:	931c      	str	r3, [sp, #112]	; 0x70
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2401      	movs	r4, #1
 8001dbe:	9224      	str	r2, [sp, #144]	; 0x90
 8001dc0:	6a28      	ldr	r0, [r5, #32]
 8001dc2:	2800      	cmp	r0, #0
 8001dc4:	bf12      	itee	ne
 8001dc6:	9023      	strne	r0, [sp, #140]	; 0x8c
 8001dc8:	f8df 1c14 	ldreq.w	r1, [pc, #3092]	; 80029e0 <.text_22>
 8001dcc:	9123      	streq	r1, [sp, #140]	; 0x8c
 8001dce:	a818      	add	r0, sp, #96	; 0x60
 8001dd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001dd2:	8803      	ldrh	r3, [r0, #0]
 8001dd4:	2600      	movs	r6, #0
 8001dd6:	1e51      	subs	r1, r2, #1
 8001dd8:	1e5b      	subs	r3, r3, #1
 8001dda:	fb03 2201 	mla	r2, r3, r1, r2
 8001dde:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001de0:	9216      	str	r2, [sp, #88]	; 0x58
 8001de2:	aa19      	add	r2, sp, #100	; 0x64
 8001de4:	8813      	ldrh	r3, [r2, #0]
 8001de6:	2200      	movs	r2, #0
 8001de8:	1e48      	subs	r0, r1, #1
 8001dea:	1e5b      	subs	r3, r3, #1
 8001dec:	fb03 1100 	mla	r1, r3, r0, r1
 8001df0:	911d      	str	r1, [sp, #116]	; 0x74
 8001df2:	f8db 1000 	ldr.w	r1, [fp]
 8001df6:	6808      	ldr	r0, [r1, #0]
 8001df8:	11c3      	asrs	r3, r0, #7
 8001dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dfe:	ea4f 5c60 	mov.w	ip, r0, asr #21
 8001e02:	1440      	asrs	r0, r0, #17
 8001e04:	f000 000f 	and.w	r0, r0, #15
 8001e08:	f00c 0c03 	and.w	ip, ip, #3
 8001e0c:	2804      	cmp	r0, #4
 8001e0e:	fa23 f30c 	lsr.w	r3, r3, ip
 8001e12:	bf14      	ite	ne
 8001e14:	2808      	cmpne	r0, #8
 8001e16:	68ca      	ldreq	r2, [r1, #12]
 8001e18:	b1ba      	cbz	r2, 8001e4a <forward_conv2d+0x154>
 8001e1a:	6968      	ldr	r0, [r5, #20]
 8001e1c:	f8d0 c000 	ldr.w	ip, [r0]
 8001e20:	f8dc e024 	ldr.w	lr, [ip, #36]	; 0x24
 8001e24:	f8de 0000 	ldr.w	r0, [lr]
 8001e28:	b108      	cbz	r0, 8001e2e <forward_conv2d+0x138>
 8001e2a:	6806      	ldr	r6, [r0, #0]
 8001e2c:	68b6      	ldr	r6, [r6, #8]
 8001e2e:	6800      	ldr	r0, [r0, #0]
 8001e30:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8001e34:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8001e38:	f8cd e000 	str.w	lr, [sp]
 8001e3c:	f8cd c004 	str.w	ip, [sp, #4]
 8001e40:	6889      	ldr	r1, [r1, #8]
 8001e42:	4630      	mov	r0, r6
 8001e44:	f7ff feec 	bl	8001c20 <ai_dict_decompress_f32>
 8001e48:	b906      	cbnz	r6, 8001e4c <forward_conv2d+0x156>
 8001e4a:	464e      	mov	r6, r9
 8001e4c:	b2bf      	uxth	r7, r7
 8001e4e:	427f      	negs	r7, r7
 8001e50:	f1ba 0f00 	cmp.w	sl, #0
 8001e54:	d062      	beq.n	8001f1c <forward_conv2d+0x226>
 8001e56:	f1c8 0800 	rsb	r8, r8, #0
 8001e5a:	4652      	mov	r2, sl
 8001e5c:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
 8001e60:	9d02      	ldr	r5, [sp, #8]
 8001e62:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8001e66:	9626      	str	r6, [sp, #152]	; 0x98
 8001e68:	9711      	str	r7, [sp, #68]	; 0x44
 8001e6a:	9222      	str	r2, [sp, #136]	; 0x88
 8001e6c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8001e6e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8001e70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001e72:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8001e74:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001e76:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8001e78:	4249      	negs	r1, r1
 8001e7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8001e7c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8001e7e:	970d      	str	r7, [sp, #52]	; 0x34
 8001e80:	9008      	str	r0, [sp, #32]
 8001e82:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8001e84:	bfd8      	it	le
 8001e86:	2100      	movle	r1, #0
 8001e88:	1ad2      	subs	r2, r2, r3
 8001e8a:	9109      	str	r1, [sp, #36]	; 0x24
 8001e8c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001e8e:	42b2      	cmp	r2, r6
 8001e90:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8001e94:	9005      	str	r0, [sp, #20]
 8001e96:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001e98:	f8cd a008 	str.w	sl, [sp, #8]
 8001e9c:	b21b      	sxth	r3, r3
 8001e9e:	9107      	str	r1, [sp, #28]
 8001ea0:	bf28      	it	cs
 8001ea2:	4632      	movcs	r2, r6
 8001ea4:	920a      	str	r2, [sp, #40]	; 0x28
 8001ea6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001ea8:	930f      	str	r3, [sp, #60]	; 0x3c
 8001eaa:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8001eac:	9206      	str	r2, [sp, #24]
 8001eae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001eb0:	9915      	ldr	r1, [sp, #84]	; 0x54
 8001eb2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8001eb4:	930c      	str	r3, [sp, #48]	; 0x30
 8001eb6:	b236      	sxth	r6, r6
 8001eb8:	9104      	str	r1, [sp, #16]
 8001eba:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001ebc:	9203      	str	r2, [sp, #12]
 8001ebe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001ec0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001ec2:	9001      	str	r0, [sp, #4]
 8001ec4:	9100      	str	r1, [sp, #0]
 8001ec6:	4629      	mov	r1, r5
 8001ec8:	960e      	str	r6, [sp, #56]	; 0x38
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f7ff fc7a 	bl	80017c4 <ai_conv2d_stripe_f32>
 8001ed0:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001ed2:	b1d8      	cbz	r0, 8001f0c <forward_conv2d+0x216>
 8001ed4:	4683      	mov	fp, r0
 8001ed6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8001ed8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8001eda:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 8001ede:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8001ee2:	4633      	mov	r3, r6
 8001ee4:	4652      	mov	r2, sl
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	4628      	mov	r0, r5
 8001eea:	47c8      	blx	r9
 8001eec:	4446      	add	r6, r8
 8001eee:	1bf0      	subs	r0, r6, r7
 8001ef0:	42a0      	cmp	r0, r4
 8001ef2:	eb05 058a 	add.w	r5, r5, sl, lsl #2
 8001ef6:	bfa8      	it	ge
 8001ef8:	463e      	movge	r6, r7
 8001efa:	f1bb 0b01 	subs.w	fp, fp, #1
 8001efe:	d1f0      	bne.n	8001ee2 <forward_conv2d+0x1ec>
 8001f00:	9612      	str	r6, [sp, #72]	; 0x48
 8001f02:	971c      	str	r7, [sp, #112]	; 0x70
 8001f04:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
 8001f08:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8001f0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001f0e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001f10:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001f12:	18cb      	adds	r3, r1, r3
 8001f14:	9311      	str	r3, [sp, #68]	; 0x44
 8001f16:	1e52      	subs	r2, r2, #1
 8001f18:	9222      	str	r2, [sp, #136]	; 0x88
 8001f1a:	d1a7      	bne.n	8001e6c <forward_conv2d+0x176>
 8001f1c:	b027      	add	sp, #156	; 0x9c
 8001f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001f24 <forward_conv2d_nl_pool>:
 8001f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f28:	b0b9      	sub	sp, #228	; 0xe4
 8001f2a:	4607      	mov	r7, r0
 8001f2c:	6978      	ldr	r0, [r7, #20]
 8001f2e:	6800      	ldr	r0, [r0, #0]
 8001f30:	68c2      	ldr	r2, [r0, #12]
 8001f32:	6801      	ldr	r1, [r0, #0]
 8001f34:	6816      	ldr	r6, [r2, #0]
 8001f36:	6982      	ldr	r2, [r0, #24]
 8001f38:	8c00      	ldrh	r0, [r0, #32]
 8001f3a:	680b      	ldr	r3, [r1, #0]
 8001f3c:	f8d2 b000 	ldr.w	fp, [r2]
 8001f40:	2801      	cmp	r0, #1
 8001f42:	6890      	ldr	r0, [r2, #8]
 8001f44:	689c      	ldr	r4, [r3, #8]
 8001f46:	bfcc      	ite	gt
 8001f48:	6851      	ldrgt	r1, [r2, #4]
 8001f4a:	2100      	movle	r1, #0
 8001f4c:	9424      	str	r4, [sp, #144]	; 0x90
 8001f4e:	68b5      	ldr	r5, [r6, #8]
 8001f50:	9502      	str	r5, [sp, #8]
 8001f52:	6934      	ldr	r4, [r6, #16]
 8001f54:	9423      	str	r4, [sp, #140]	; 0x8c
 8001f56:	68f5      	ldr	r5, [r6, #12]
 8001f58:	9522      	str	r5, [sp, #136]	; 0x88
 8001f5a:	691c      	ldr	r4, [r3, #16]
 8001f5c:	941c      	str	r4, [sp, #112]	; 0x70
 8001f5e:	68dd      	ldr	r5, [r3, #12]
 8001f60:	952e      	str	r5, [sp, #184]	; 0xb8
 8001f62:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001f64:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
 8001f68:	8d3d      	ldrh	r5, [r7, #40]	; 0x28
 8001f6a:	9521      	str	r5, [sp, #132]	; 0x84
 8001f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f6e:	69bd      	ldr	r5, [r7, #24]
 8001f70:	f8b2 8000 	ldrh.w	r8, [r2]
 8001f74:	f8b2 9004 	ldrh.w	r9, [r2, #4]
 8001f78:	6894      	ldr	r4, [r2, #8]
 8001f7a:	952d      	str	r5, [sp, #180]	; 0xb4
 8001f7c:	f8d7 e02c 	ldr.w	lr, [r7, #44]	; 0x2c
 8001f80:	f8cd e080 	str.w	lr, [sp, #128]	; 0x80
 8001f84:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8001f86:	951f      	str	r5, [sp, #124]	; 0x7c
 8001f88:	f8db e008 	ldr.w	lr, [fp, #8]
 8001f8c:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
 8001f90:	f8db 500c 	ldr.w	r5, [fp, #12]
 8001f94:	951a      	str	r5, [sp, #104]	; 0x68
 8001f96:	f8d7 e03c 	ldr.w	lr, [r7, #60]	; 0x3c
 8001f9a:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
 8001f9e:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 8001fa0:	952b      	str	r5, [sp, #172]	; 0xac
 8001fa2:	f8d7 e048 	ldr.w	lr, [r7, #72]	; 0x48
 8001fa6:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8001faa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001fac:	6815      	ldr	r5, [r2, #0]
 8001fae:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8001fb2:	f8cd e0a8 	str.w	lr, [sp, #168]	; 0xa8
 8001fb6:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8001fba:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8001fc4:	f8cd e0a4 	str.w	lr, [sp, #164]	; 0xa4
 8001fc8:	f8db a000 	ldr.w	sl, [fp]
 8001fcc:	f8da a008 	ldr.w	sl, [sl, #8]
 8001fd0:	b119      	cbz	r1, 8001fda <forward_conv2d_nl_pool+0xb6>
 8001fd2:	680a      	ldr	r2, [r1, #0]
 8001fd4:	6893      	ldr	r3, [r2, #8]
 8001fd6:	931d      	str	r3, [sp, #116]	; 0x74
 8001fd8:	e003      	b.n	8001fe2 <forward_conv2d_nl_pool+0xbe>
 8001fda:	f04f 0e00 	mov.w	lr, #0
 8001fde:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
 8001fe2:	69f9      	ldr	r1, [r7, #28]
 8001fe4:	b158      	cbz	r0, 8001ffe <forward_conv2d_nl_pool+0xda>
 8001fe6:	6803      	ldr	r3, [r0, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	9218      	str	r2, [sp, #96]	; 0x60
 8001fec:	9210      	str	r2, [sp, #64]	; 0x40
 8001fee:	69c0      	ldr	r0, [r0, #28]
 8001ff0:	9015      	str	r0, [sp, #84]	; 0x54
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	6818      	ldr	r0, [r3, #0]
 8001ff6:	f002 fd83 	bl	8004b00 <ai_array_get_byte_size>
 8001ffa:	9014      	str	r0, [sp, #80]	; 0x50
 8001ffc:	e00b      	b.n	8002016 <forward_conv2d_nl_pool+0xf2>
 8001ffe:	b119      	cbz	r1, 8002008 <forward_conv2d_nl_pool+0xe4>
 8002000:	6889      	ldr	r1, [r1, #8]
 8002002:	9118      	str	r1, [sp, #96]	; 0x60
 8002004:	9110      	str	r1, [sp, #64]	; 0x40
 8002006:	e002      	b.n	800200e <forward_conv2d_nl_pool+0xea>
 8002008:	2300      	movs	r3, #0
 800200a:	9318      	str	r3, [sp, #96]	; 0x60
 800200c:	9310      	str	r3, [sp, #64]	; 0x40
 800200e:	2200      	movs	r2, #0
 8002010:	2301      	movs	r3, #1
 8002012:	9215      	str	r2, [sp, #84]	; 0x54
 8002014:	9314      	str	r3, [sp, #80]	; 0x50
 8002016:	6a38      	ldr	r0, [r7, #32]
 8002018:	2800      	cmp	r0, #0
 800201a:	bf12      	itee	ne
 800201c:	9030      	strne	r0, [sp, #192]	; 0xc0
 800201e:	f8df 19c0 	ldreq.w	r1, [pc, #2496]	; 80029e0 <.text_22>
 8002022:	9130      	streq	r1, [sp, #192]	; 0xc0
 8002024:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002026:	981a      	ldr	r0, [sp, #104]	; 0x68
 8002028:	9228      	str	r2, [sp, #160]	; 0xa0
 800202a:	aa1f      	add	r2, sp, #124	; 0x7c
 800202c:	8813      	ldrh	r3, [r2, #0]
 800202e:	1e41      	subs	r1, r0, #1
 8002030:	1e5b      	subs	r3, r3, #1
 8002032:	fb03 0001 	mla	r0, r3, r1, r0
 8002036:	ab20      	add	r3, sp, #128	; 0x80
 8002038:	f8b3 e000 	ldrh.w	lr, [r3]
 800203c:	9019      	str	r0, [sp, #100]	; 0x64
 800203e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8002040:	9819      	ldr	r0, [sp, #100]	; 0x64
 8002042:	1e4a      	subs	r2, r1, #1
 8002044:	f1ae 0e01 	sub.w	lr, lr, #1
 8002048:	fb0e 1102 	mla	r1, lr, r2, r1
 800204c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800204e:	9127      	str	r1, [sp, #156]	; 0x9c
 8002050:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002052:	9112      	str	r1, [sp, #72]	; 0x48
 8002054:	9921      	ldr	r1, [sp, #132]	; 0x84
 8002056:	1a12      	subs	r2, r2, r0
 8002058:	4442      	add	r2, r8
 800205a:	fa12 f084 	uxtah	r0, r2, r4
 800205e:	2400      	movs	r4, #0
 8002060:	fbb0 f1f1 	udiv	r1, r0, r1
 8002064:	1c49      	adds	r1, r1, #1
 8002066:	2200      	movs	r2, #0
 8002068:	9111      	str	r1, [sp, #68]	; 0x44
 800206a:	f8db 1000 	ldr.w	r1, [fp]
 800206e:	6808      	ldr	r0, [r1, #0]
 8002070:	11c3      	asrs	r3, r0, #7
 8002072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002076:	ea4f 5c60 	mov.w	ip, r0, asr #21
 800207a:	1440      	asrs	r0, r0, #17
 800207c:	f000 000f 	and.w	r0, r0, #15
 8002080:	f00c 0c03 	and.w	ip, ip, #3
 8002084:	2804      	cmp	r0, #4
 8002086:	fa23 f30c 	lsr.w	r3, r3, ip
 800208a:	bf14      	ite	ne
 800208c:	2808      	cmpne	r0, #8
 800208e:	68ca      	ldreq	r2, [r1, #12]
 8002090:	b1ca      	cbz	r2, 80020c6 <forward_conv2d_nl_pool+0x1a2>
 8002092:	6978      	ldr	r0, [r7, #20]
 8002094:	f8d0 c000 	ldr.w	ip, [r0]
 8002098:	f8dc e024 	ldr.w	lr, [ip, #36]	; 0x24
 800209c:	f8de 0004 	ldr.w	r0, [lr, #4]
 80020a0:	b108      	cbz	r0, 80020a6 <forward_conv2d_nl_pool+0x182>
 80020a2:	6804      	ldr	r4, [r0, #0]
 80020a4:	68a4      	ldr	r4, [r4, #8]
 80020a6:	6800      	ldr	r0, [r0, #0]
 80020a8:	f8dd e090 	ldr.w	lr, [sp, #144]	; 0x90
 80020ac:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80020b0:	f8cd e000 	str.w	lr, [sp]
 80020b4:	f8cd c004 	str.w	ip, [sp, #4]
 80020b8:	6889      	ldr	r1, [r1, #8]
 80020ba:	4620      	mov	r0, r4
 80020bc:	f7ff fdb0 	bl	8001c20 <ai_dict_decompress_f32>
 80020c0:	b10c      	cbz	r4, 80020c6 <forward_conv2d_nl_pool+0x1a2>
 80020c2:	4623      	mov	r3, r4
 80020c4:	e000      	b.n	80020c8 <forward_conv2d_nl_pool+0x1a4>
 80020c6:	4653      	mov	r3, sl
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	9f02      	ldr	r7, [sp, #8]
 80020cc:	f1c9 0900 	rsb	r9, r9, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
 80020d6:	6830      	ldr	r0, [r6, #0]
 80020d8:	6814      	ldr	r4, [r2, #0]
 80020da:	b22d      	sxth	r5, r5
 80020dc:	462e      	mov	r6, r5
 80020de:	f1c8 0800 	rsb	r8, r8, #0
 80020e2:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 80020e6:	f8dc 4000 	ldr.w	r4, [ip]
 80020ea:	f8dd c078 	ldr.w	ip, [sp, #120]	; 0x78
 80020ee:	68e2      	ldr	r2, [r4, #12]
 80020f0:	fb02 fc0c 	mul.w	ip, r2, ip
 80020f4:	f8d4 e000 	ldr.w	lr, [r4]
 80020f8:	fb07 fc0c 	mul.w	ip, r7, ip
 80020fc:	f8de a008 	ldr.w	sl, [lr, #8]
 8002100:	f8cd 90c8 	str.w	r9, [sp, #200]	; 0xc8
 8002104:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8002108:	f9bb e000 	ldrsh.w	lr, [fp]
 800210c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002110:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 8002114:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
 8002118:	f8dd c008 	ldr.w	ip, [sp, #8]
 800211c:	f1b9 0f00 	cmp.w	r9, #0
 8002120:	f8cd e0d4 	str.w	lr, [sp, #212]	; 0xd4
 8002124:	fb0b fc0c 	mul.w	ip, fp, ip
 8002128:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 800212c:	f8cd c0d0 	str.w	ip, [sp, #208]	; 0xd0
 8002130:	f8dd c008 	ldr.w	ip, [sp, #8]
 8002134:	f8cd b0c4 	str.w	fp, [sp, #196]	; 0xc4
 8002138:	fb02 fc0c 	mul.w	ip, r2, ip
 800213c:	f8cd c0cc 	str.w	ip, [sp, #204]	; 0xcc
 8002140:	f000 8103 	beq.w	800234a <forward_conv2d_nl_pool+0x426>
 8002144:	46b9      	mov	r9, r7
 8002146:	9337      	str	r3, [sp, #220]	; 0xdc
 8002148:	9026      	str	r0, [sp, #152]	; 0x98
 800214a:	912f      	str	r1, [sp, #188]	; 0xbc
 800214c:	9225      	str	r2, [sp, #148]	; 0x94
 800214e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8002152:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002154:	2b00      	cmp	r3, #0
 8002156:	dd61      	ble.n	800221c <forward_conv2d_nl_pool+0x2f8>
 8002158:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800215a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800215c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800215e:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 8002162:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8002164:	f8dd e09c 	ldr.w	lr, [sp, #156]	; 0x9c
 8002168:	4249      	negs	r1, r1
 800216a:	900b      	str	r0, [sp, #44]	; 0x2c
 800216c:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800216e:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8002172:	9008      	str	r0, [sp, #32]
 8002174:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8002176:	bfd8      	it	le
 8002178:	2100      	movle	r1, #0
 800217a:	1ad2      	subs	r2, r2, r3
 800217c:	9109      	str	r1, [sp, #36]	; 0x24
 800217e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002180:	4562      	cmp	r2, ip
 8002182:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8002186:	9005      	str	r0, [sp, #20]
 8002188:	9824      	ldr	r0, [sp, #144]	; 0x90
 800218a:	f8cd 9008 	str.w	r9, [sp, #8]
 800218e:	b21b      	sxth	r3, r3
 8002190:	9107      	str	r1, [sp, #28]
 8002192:	bf28      	it	cs
 8002194:	4662      	movcs	r2, ip
 8002196:	920a      	str	r2, [sp, #40]	; 0x28
 8002198:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800219a:	930f      	str	r3, [sp, #60]	; 0x3c
 800219c:	f8dd c080 	ldr.w	ip, [sp, #128]	; 0x80
 80021a0:	9206      	str	r2, [sp, #24]
 80021a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80021a4:	9925      	ldr	r1, [sp, #148]	; 0x94
 80021a6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80021a8:	930c      	str	r3, [sp, #48]	; 0x30
 80021aa:	fa0f fc8c 	sxth.w	ip, ip
 80021ae:	9104      	str	r1, [sp, #16]
 80021b0:	991d      	ldr	r1, [sp, #116]	; 0x74
 80021b2:	9203      	str	r2, [sp, #12]
 80021b4:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80021b6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80021b8:	9001      	str	r0, [sp, #4]
 80021ba:	9100      	str	r1, [sp, #0]
 80021bc:	4651      	mov	r1, sl
 80021be:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 80021c2:	2000      	movs	r0, #0
 80021c4:	f7ff fafe 	bl	80017c4 <ai_conv2d_stripe_f32>
 80021c8:	9825      	ldr	r0, [sp, #148]	; 0x94
 80021ca:	b328      	cbz	r0, 8002218 <forward_conv2d_nl_pool+0x2f4>
 80021cc:	4683      	mov	fp, r0
 80021ce:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80021d2:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 80021d4:	4643      	mov	r3, r8
 80021d6:	464a      	mov	r2, r9
 80021d8:	4651      	mov	r1, sl
 80021da:	4650      	mov	r0, sl
 80021dc:	47b8      	blx	r7
 80021de:	9815      	ldr	r0, [sp, #84]	; 0x54
 80021e0:	9931      	ldr	r1, [sp, #196]	; 0xc4
 80021e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80021e4:	eb0a 0a89 	add.w	sl, sl, r9, lsl #2
 80021e8:	4480      	add	r8, r0
 80021ea:	6820      	ldr	r0, [r4, #0]
 80021ec:	eba8 0101 	sub.w	r1, r8, r1
 80021f0:	4291      	cmp	r1, r2
 80021f2:	6841      	ldr	r1, [r0, #4]
 80021f4:	68c0      	ldr	r0, [r0, #12]
 80021f6:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 80021fa:	bfa8      	it	ge
 80021fc:	f8dd 8040 	ldrge.w	r8, [sp, #64]	; 0x40
 8002200:	4592      	cmp	sl, r2
 8002202:	d303      	bcc.n	800220c <forward_conv2d_nl_pool+0x2e8>
 8002204:	0089      	lsls	r1, r1, #2
 8002206:	4249      	negs	r1, r1
 8002208:	eb0a 0a01 	add.w	sl, sl, r1
 800220c:	f1bb 0b01 	subs.w	fp, fp, #1
 8002210:	d1e0      	bne.n	80021d4 <forward_conv2d_nl_pool+0x2b0>
 8002212:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8002216:	9730      	str	r7, [sp, #192]	; 0xc0
 8002218:	1c76      	adds	r6, r6, #1
 800221a:	b236      	sxth	r6, r6
 800221c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800221e:	1e49      	subs	r1, r1, #1
 8002220:	2900      	cmp	r1, #0
 8002222:	9111      	str	r1, [sp, #68]	; 0x44
 8002224:	dc4e      	bgt.n	80022c4 <forward_conv2d_nl_pool+0x3a0>
 8002226:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8002228:	6820      	ldr	r0, [r4, #0]
 800222a:	46d0      	mov	r8, sl
 800222c:	4371      	muls	r1, r6
 800222e:	68c2      	ldr	r2, [r0, #12]
 8002230:	0089      	lsls	r1, r1, #2
 8002232:	4249      	negs	r1, r1
 8002234:	4451      	add	r1, sl
 8002236:	4291      	cmp	r1, r2
 8002238:	bf3c      	itt	cc
 800223a:	6843      	ldrcc	r3, [r0, #4]
 800223c:	eb01 0183 	addcc.w	r1, r1, r3, lsl #2
 8002240:	428a      	cmp	r2, r1
 8002242:	d233      	bcs.n	80022ac <forward_conv2d_nl_pool+0x388>
 8002244:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
 8002248:	f9bc e000 	ldrsh.w	lr, [ip]
 800224c:	4576      	cmp	r6, lr
 800224e:	d02d      	beq.n	80022ac <forward_conv2d_nl_pool+0x388>
 8002250:	6847      	ldr	r7, [r0, #4]
 8002252:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8002256:	4291      	cmp	r1, r2
 8002258:	f080 8028 	bcs.w	80022ac <forward_conv2d_nl_pool+0x388>
 800225c:	f851 3b04 	ldr.w	r3, [r1], #4
 8002260:	f84a 3b04 	str.w	r3, [sl], #4
 8002264:	68c2      	ldr	r2, [r0, #12]
 8002266:	6843      	ldr	r3, [r0, #4]
 8002268:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 800226c:	4561      	cmp	r1, ip
 800226e:	d21d      	bcs.n	80022ac <forward_conv2d_nl_pool+0x388>
 8002270:	f851 eb04 	ldr.w	lr, [r1], #4
 8002274:	f84a eb04 	str.w	lr, [sl], #4
 8002278:	68c2      	ldr	r2, [r0, #12]
 800227a:	6843      	ldr	r3, [r0, #4]
 800227c:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8002280:	4561      	cmp	r1, ip
 8002282:	d213      	bcs.n	80022ac <forward_conv2d_nl_pool+0x388>
 8002284:	f851 eb04 	ldr.w	lr, [r1], #4
 8002288:	f84a eb04 	str.w	lr, [sl], #4
 800228c:	68c2      	ldr	r2, [r0, #12]
 800228e:	6843      	ldr	r3, [r0, #4]
 8002290:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8002294:	4561      	cmp	r1, ip
 8002296:	d209      	bcs.n	80022ac <forward_conv2d_nl_pool+0x388>
 8002298:	f851 eb04 	ldr.w	lr, [r1], #4
 800229c:	f84a eb04 	str.w	lr, [sl], #4
 80022a0:	68c2      	ldr	r2, [r0, #12]
 80022a2:	6843      	ldr	r3, [r0, #4]
 80022a4:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 80022a8:	4561      	cmp	r1, ip
 80022aa:	d3d7      	bcc.n	800225c <forward_conv2d_nl_pool+0x338>
 80022ac:	9811      	ldr	r0, [sp, #68]	; 0x44
 80022ae:	2800      	cmp	r0, #0
 80022b0:	d506      	bpl.n	80022c0 <forward_conv2d_nl_pool+0x39c>
 80022b2:	9936      	ldr	r1, [sp, #216]	; 0xd8
 80022b4:	4650      	mov	r0, sl
 80022b6:	f00e fd18 	bl	8010cea <__aeabi_memclr>
 80022ba:	981e      	ldr	r0, [sp, #120]	; 0x78
 80022bc:	1986      	adds	r6, r0, r6
 80022be:	b236      	sxth	r6, r6
 80022c0:	9612      	str	r6, [sp, #72]	; 0x48
 80022c2:	46c2      	mov	sl, r8
 80022c4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80022c6:	428e      	cmp	r6, r1
 80022c8:	d135      	bne.n	8002336 <forward_conv2d_nl_pool+0x412>
 80022ca:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80022cc:	2101      	movs	r1, #1
 80022ce:	9107      	str	r1, [sp, #28]
 80022d0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80022d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80022d4:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
 80022d8:	1c52      	adds	r2, r2, #1
 80022da:	9816      	ldr	r0, [sp, #88]	; 0x58
 80022dc:	922f      	str	r2, [sp, #188]	; 0xbc
 80022de:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80022e0:	b289      	uxth	r1, r1
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	9102      	str	r1, [sp, #8]
 80022e6:	1a36      	subs	r6, r6, r0
 80022e8:	9826      	ldr	r0, [sp, #152]	; 0x98
 80022ea:	b292      	uxth	r2, r2
 80022ec:	9008      	str	r0, [sp, #32]
 80022ee:	982b      	ldr	r0, [sp, #172]	; 0xac
 80022f0:	9206      	str	r2, [sp, #24]
 80022f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80022f4:	9925      	ldr	r1, [sp, #148]	; 0x94
 80022f6:	9305      	str	r3, [sp, #20]
 80022f8:	b280      	uxth	r0, r0
 80022fa:	fa1f f389 	uxth.w	r3, r9
 80022fe:	9004      	str	r0, [sp, #16]
 8002300:	b2a8      	uxth	r0, r5
 8002302:	9003      	str	r0, [sp, #12]
 8002304:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8002306:	b292      	uxth	r2, r2
 8002308:	b289      	uxth	r1, r1
 800230a:	9201      	str	r2, [sp, #4]
 800230c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800230e:	b280      	uxth	r0, r0
 8002310:	b236      	sxth	r6, r6
 8002312:	9000      	str	r0, [sp, #0]
 8002314:	6820      	ldr	r0, [r4, #0]
 8002316:	b292      	uxth	r2, r2
 8002318:	47e0      	blx	ip
 800231a:	9826      	ldr	r0, [sp, #152]	; 0x98
 800231c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800231e:	6881      	ldr	r1, [r0, #8]
 8002320:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002324:	6083      	str	r3, [r0, #8]
 8002326:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8002328:	1a69      	subs	r1, r5, r1
 800232a:	2900      	cmp	r1, #0
 800232c:	bfc3      	ittte	gt
 800232e:	9816      	ldrgt	r0, [sp, #88]	; 0x58
 8002330:	1a2d      	subgt	r5, r5, r0
 8002332:	b22d      	sxthgt	r5, r5
 8002334:	2500      	movle	r5, #0
 8002336:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8002338:	9821      	ldr	r0, [sp, #132]	; 0x84
 800233a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800233c:	1841      	adds	r1, r0, r1
 800233e:	9117      	str	r1, [sp, #92]	; 0x5c
 8002340:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8002342:	428a      	cmp	r2, r1
 8002344:	f4ff af05 	bcc.w	8002152 <forward_conv2d_nl_pool+0x22e>
 8002348:	9826      	ldr	r0, [sp, #152]	; 0x98
 800234a:	6821      	ldr	r1, [r4, #0]
 800234c:	68ca      	ldr	r2, [r1, #12]
 800234e:	608a      	str	r2, [r1, #8]
 8002350:	68c1      	ldr	r1, [r0, #12]
 8002352:	6081      	str	r1, [r0, #8]
 8002354:	b039      	add	sp, #228	; 0xe4
 8002356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800235c <forward_dense>:
 800235c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002360:	b081      	sub	sp, #4
 8002362:	ed2d 8b02 	vpush	{d8}
 8002366:	b088      	sub	sp, #32
 8002368:	6940      	ldr	r0, [r0, #20]
 800236a:	6800      	ldr	r0, [r0, #0]
 800236c:	6801      	ldr	r1, [r0, #0]
 800236e:	680a      	ldr	r2, [r1, #0]
 8002370:	6981      	ldr	r1, [r0, #24]
 8002372:	68c3      	ldr	r3, [r0, #12]
 8002374:	8c00      	ldrh	r0, [r0, #32]
 8002376:	2802      	cmp	r0, #2
 8002378:	f8d1 e000 	ldr.w	lr, [r1]
 800237c:	6894      	ldr	r4, [r2, #8]
 800237e:	681f      	ldr	r7, [r3, #0]
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	bfac      	ite	ge
 8002384:	684b      	ldrge	r3, [r1, #4]
 8002386:	2300      	movlt	r3, #0
 8002388:	68f9      	ldr	r1, [r7, #12]
 800238a:	f8de 9000 	ldr.w	r9, [lr]
 800238e:	6938      	ldr	r0, [r7, #16]
 8002390:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8002394:	683f      	ldr	r7, [r7, #0]
 8002396:	f8d9 5000 	ldr.w	r5, [r9]
 800239a:	4341      	muls	r1, r0
 800239c:	68bf      	ldr	r7, [r7, #8]
 800239e:	2000      	movs	r0, #0
 80023a0:	ea4f 18e5 	mov.w	r8, r5, asr #7
 80023a4:	156e      	asrs	r6, r5, #21
 80023a6:	146d      	asrs	r5, r5, #17
 80023a8:	f005 050f 	and.w	r5, r5, #15
 80023ac:	2d04      	cmp	r5, #4
 80023ae:	f008 087f 	and.w	r8, r8, #127	; 0x7f
 80023b2:	f006 0603 	and.w	r6, r6, #3
 80023b6:	fa28 f806 	lsr.w	r8, r8, r6
 80023ba:	bf14      	ite	ne
 80023bc:	2d08      	cmpne	r5, #8
 80023be:	f8d9 000c 	ldreq.w	r0, [r9, #12]
 80023c2:	2900      	cmp	r1, #0
 80023c4:	6895      	ldr	r5, [r2, #8]
 80023c6:	f8de 9018 	ldr.w	r9, [lr, #24]
 80023ca:	eb07 028c 	add.w	r2, r7, ip, lsl #2
 80023ce:	f000 80ef 	beq.w	80025b0 <forward_dense+0x254>
 80023d2:	f8cd e01c 	str.w	lr, [sp, #28]
 80023d6:	9305      	str	r3, [sp, #20]
 80023d8:	f8cd c018 	str.w	ip, [sp, #24]
 80023dc:	9201      	str	r2, [sp, #4]
 80023de:	9104      	str	r1, [sp, #16]
 80023e0:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80023e4:	9905      	ldr	r1, [sp, #20]
 80023e6:	f8de 3000 	ldr.w	r3, [lr]
 80023ea:	2900      	cmp	r1, #0
 80023ec:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80023f0:	bf1a      	itte	ne
 80023f2:	680b      	ldrne	r3, [r1, #0]
 80023f4:	689a      	ldrne	r2, [r3, #8]
 80023f6:	2200      	moveq	r2, #0
 80023f8:	2800      	cmp	r0, #0
 80023fa:	9b01      	ldr	r3, [sp, #4]
 80023fc:	f040 80aa 	bne.w	8002554 <forward_dense+0x1f8>
 8002400:	429f      	cmp	r7, r3
 8002402:	f080 80c8 	bcs.w	8002596 <forward_dense+0x23a>
 8002406:	9003      	str	r0, [sp, #12]
 8002408:	2a00      	cmp	r2, #0
 800240a:	4620      	mov	r0, r4
 800240c:	46ae      	mov	lr, r5
 800240e:	46dc      	mov	ip, fp
 8002410:	eddf 0a6a 	vldr	s1, [pc, #424]	; 80025bc <.text_17>
 8002414:	bf0e      	itee	eq
 8002416:	ed9f 0a69 	vldreq	s0, [pc, #420]	; 80025bc <.text_17>
 800241a:	ed92 0a00 	vldrne	s0, [r2]
 800241e:	1d12      	addne	r2, r2, #4
 8002420:	2c04      	cmp	r4, #4
 8002422:	d35c      	bcc.n	80024de <forward_dense+0x182>
 8002424:	08a1      	lsrs	r1, r4, #2
 8002426:	07ce      	lsls	r6, r1, #31
 8002428:	d51c      	bpl.n	8002464 <forward_dense+0x108>
 800242a:	ed9c 4a00 	vldr	s8, [ip]
 800242e:	1f00      	subs	r0, r0, #4
 8002430:	edde 4a00 	vldr	s9, [lr]
 8002434:	ed9c 3a01 	vldr	s6, [ip, #4]
 8002438:	edde 3a01 	vldr	s7, [lr, #4]
 800243c:	ee44 0a24 	vmla.f32	s1, s8, s9
 8002440:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002444:	edde 2a02 	vldr	s5, [lr, #8]
 8002448:	ee43 0a23 	vmla.f32	s1, s6, s7
 800244c:	ed9c 1a03 	vldr	s2, [ip, #12]
 8002450:	f10c 0c10 	add.w	ip, ip, #16
 8002454:	edde 1a03 	vldr	s3, [lr, #12]
 8002458:	f10e 0e10 	add.w	lr, lr, #16
 800245c:	ee42 0a22 	vmla.f32	s1, s4, s5
 8002460:	ee41 0a21 	vmla.f32	s1, s2, s3
 8002464:	0849      	lsrs	r1, r1, #1
 8002466:	d03a      	beq.n	80024de <forward_dense+0x182>
 8002468:	ed9c 1a03 	vldr	s2, [ip, #12]
 800246c:	3808      	subs	r0, #8
 800246e:	edde 1a03 	vldr	s3, [lr, #12]
 8002472:	1e49      	subs	r1, r1, #1
 8002474:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002478:	edde 2a02 	vldr	s5, [lr, #8]
 800247c:	ed9c 3a01 	vldr	s6, [ip, #4]
 8002480:	edde 3a01 	vldr	s7, [lr, #4]
 8002484:	ed9c 4a00 	vldr	s8, [ip]
 8002488:	f10c 0c10 	add.w	ip, ip, #16
 800248c:	edde 4a00 	vldr	s9, [lr]
 8002490:	f10e 0e10 	add.w	lr, lr, #16
 8002494:	ee44 0a24 	vmla.f32	s1, s8, s9
 8002498:	ee43 0a23 	vmla.f32	s1, s6, s7
 800249c:	ee42 0a22 	vmla.f32	s1, s4, s5
 80024a0:	ed9c 8a00 	vldr	s16, [ip]
 80024a4:	edde 8a00 	vldr	s17, [lr]
 80024a8:	ee41 0a21 	vmla.f32	s1, s2, s3
 80024ac:	ed9c 7a01 	vldr	s14, [ip, #4]
 80024b0:	edde 7a01 	vldr	s15, [lr, #4]
 80024b4:	ee48 0a28 	vmla.f32	s1, s16, s17
 80024b8:	ed9c 6a02 	vldr	s12, [ip, #8]
 80024bc:	edde 6a02 	vldr	s13, [lr, #8]
 80024c0:	ee47 0a27 	vmla.f32	s1, s14, s15
 80024c4:	ed9c 5a03 	vldr	s10, [ip, #12]
 80024c8:	f10c 0c10 	add.w	ip, ip, #16
 80024cc:	edde 5a03 	vldr	s11, [lr, #12]
 80024d0:	f10e 0e10 	add.w	lr, lr, #16
 80024d4:	ee46 0a26 	vmla.f32	s1, s12, s13
 80024d8:	ee45 0a25 	vmla.f32	s1, s10, s11
 80024dc:	d1c4      	bne.n	8002468 <forward_dense+0x10c>
 80024de:	b378      	cbz	r0, 8002540 <forward_dense+0x1e4>
 80024e0:	f010 0103 	ands.w	r1, r0, #3
 80024e4:	d00b      	beq.n	80024fe <forward_dense+0x1a2>
 80024e6:	1e49      	subs	r1, r1, #1
 80024e8:	ed9c 1a00 	vldr	s2, [ip]
 80024ec:	edde 1a00 	vldr	s3, [lr]
 80024f0:	f10e 0e04 	add.w	lr, lr, #4
 80024f4:	ee41 0a21 	vmla.f32	s1, s2, s3
 80024f8:	f10c 0c04 	add.w	ip, ip, #4
 80024fc:	d1f3      	bne.n	80024e6 <forward_dense+0x18a>
 80024fe:	0880      	lsrs	r0, r0, #2
 8002500:	f000 801e 	beq.w	8002540 <forward_dense+0x1e4>
 8002504:	ed9c 2a00 	vldr	s4, [ip]
 8002508:	1e40      	subs	r0, r0, #1
 800250a:	ed9e 1a00 	vldr	s2, [lr]
 800250e:	eddc 1a01 	vldr	s3, [ip, #4]
 8002512:	edde 2a01 	vldr	s5, [lr, #4]
 8002516:	ee42 0a01 	vmla.f32	s1, s4, s2
 800251a:	ee41 0aa2 	vmla.f32	s1, s3, s5
 800251e:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002522:	ed9e 1a02 	vldr	s2, [lr, #8]
 8002526:	eddc 1a03 	vldr	s3, [ip, #12]
 800252a:	f10c 0c10 	add.w	ip, ip, #16
 800252e:	edde 2a03 	vldr	s5, [lr, #12]
 8002532:	f10e 0e10 	add.w	lr, lr, #16
 8002536:	ee42 0a01 	vmla.f32	s1, s4, s2
 800253a:	ee41 0aa2 	vmla.f32	s1, s3, s5
 800253e:	d1e1      	bne.n	8002504 <forward_dense+0x1a8>
 8002540:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002544:	44cb      	add	fp, r9
 8002546:	ed87 0a00 	vstr	s0, [r7]
 800254a:	1d3f      	adds	r7, r7, #4
 800254c:	429f      	cmp	r7, r3
 800254e:	f4ff af5b 	bcc.w	8002408 <forward_dense+0xac>
 8002552:	e01f      	b.n	8002594 <forward_dense+0x238>
 8002554:	429f      	cmp	r7, r3
 8002556:	d21e      	bcs.n	8002596 <forward_dense+0x23a>
 8002558:	469a      	mov	sl, r3
 800255a:	9003      	str	r0, [sp, #12]
 800255c:	4616      	mov	r6, r2
 800255e:	2e00      	cmp	r6, #0
 8002560:	a802      	add	r0, sp, #8
 8002562:	bf19      	ittee	ne
 8002564:	f856 1b04 	ldrne.w	r1, [r6], #4
 8002568:	9102      	strne	r1, [sp, #8]
 800256a:	2300      	moveq	r3, #0
 800256c:	9302      	streq	r3, [sp, #8]
 800256e:	f1b8 0f04 	cmp.w	r8, #4
 8002572:	9400      	str	r4, [sp, #0]
 8002574:	462b      	mov	r3, r5
 8002576:	9a03      	ldr	r2, [sp, #12]
 8002578:	4659      	mov	r1, fp
 800257a:	d103      	bne.n	8002584 <forward_dense+0x228>
 800257c:	f7ff fb00 	bl	8001b80 <ai_dict4_dot_array_f32>
 8002580:	e002      	b.n	8002588 <forward_dense+0x22c>
 8002582:	bf00      	nop
 8002584:	f7ff f992 	bl	80018ac <ai_dict8_dot_array_f32>
 8002588:	9802      	ldr	r0, [sp, #8]
 800258a:	44cb      	add	fp, r9
 800258c:	f847 0b04 	str.w	r0, [r7], #4
 8002590:	4557      	cmp	r7, sl
 8002592:	d3e4      	bcc.n	800255e <forward_dense+0x202>
 8002594:	9803      	ldr	r0, [sp, #12]
 8002596:	9a01      	ldr	r2, [sp, #4]
 8002598:	9b06      	ldr	r3, [sp, #24]
 800259a:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 800259e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80025a2:	9a04      	ldr	r2, [sp, #16]
 80025a4:	f8cd e004 	str.w	lr, [sp, #4]
 80025a8:	1e52      	subs	r2, r2, #1
 80025aa:	9204      	str	r2, [sp, #16]
 80025ac:	f47f af18 	bne.w	80023e0 <forward_dense+0x84>
 80025b0:	b008      	add	sp, #32
 80025b2:	ecbd 8b02 	vpop	{d8}
 80025b6:	b001      	add	sp, #4
 80025b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080025bc <.text_17>:
 80025bc:	00000000 	.word	0x00000000

080025c0 <arm_mat_gemm_f32>:
 80025c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025c4:	4615      	mov	r5, r2
 80025c6:	b08a      	sub	sp, #40	; 0x28
 80025c8:	469b      	mov	fp, r3
 80025ca:	6842      	ldr	r2, [r0, #4]
 80025cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80025ce:	9203      	str	r2, [sp, #12]
 80025d0:	460f      	mov	r7, r1
 80025d2:	686c      	ldr	r4, [r5, #4]
 80025d4:	9400      	str	r4, [sp, #0]
 80025d6:	8804      	ldrh	r4, [r0, #0]
 80025d8:	8839      	ldrh	r1, [r7, #0]
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80025e0:	8840      	ldrh	r0, [r0, #2]
 80025e2:	f8b5 e000 	ldrh.w	lr, [r5]
 80025e6:	886e      	ldrh	r6, [r5, #2]
 80025e8:	2500      	movs	r5, #0
 80025ea:	f8b3 c000 	ldrh.w	ip, [r3]
 80025ee:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80025f2:	fa4f f38b 	sxtb.w	r3, fp
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	687f      	ldr	r7, [r7, #4]
 80025fa:	9706      	str	r7, [sp, #24]
 80025fc:	9705      	str	r7, [sp, #20]
 80025fe:	bf0c      	ite	eq
 8002600:	46a0      	moveq	r8, r4
 8002602:	4680      	movne	r8, r0
 8002604:	2e01      	cmp	r6, #1
 8002606:	bf0c      	ite	eq
 8002608:	2300      	moveq	r3, #0
 800260a:	2304      	movne	r3, #4
 800260c:	f1be 0f01 	cmp.w	lr, #1
 8002610:	d104      	bne.n	800261c <arm_mat_gemm_f32+0x5c>
 8002612:	2e01      	cmp	r6, #1
 8002614:	d007      	beq.n	8002626 <arm_mat_gemm_f32+0x66>
 8002616:	f1ca 0e00 	rsb	lr, sl, #0
 800261a:	e005      	b.n	8002628 <arm_mat_gemm_f32+0x68>
 800261c:	2e01      	cmp	r6, #1
 800261e:	bf08      	it	eq
 8002620:	f04f 0e01 	moveq.w	lr, #1
 8002624:	d000      	beq.n	8002628 <arm_mat_gemm_f32+0x68>
 8002626:	46ae      	mov	lr, r5
 8002628:	fa4f f78b 	sxtb.w	r7, fp
 800262c:	fa0f fe8e 	sxth.w	lr, lr
 8002630:	2f00      	cmp	r7, #0
 8002632:	f8cd e010 	str.w	lr, [sp, #16]
 8002636:	bf0c      	ite	eq
 8002638:	4627      	moveq	r7, r4
 800263a:	4607      	movne	r7, r0
 800263c:	4567      	cmp	r7, ip
 800263e:	d117      	bne.n	8002670 <arm_mat_gemm_f32+0xb0>
 8002640:	f99d e04c 	ldrsb.w	lr, [sp, #76]	; 0x4c
 8002644:	f1be 0f00 	cmp.w	lr, #0
 8002648:	bf0c      	ite	eq
 800264a:	9201      	streq	r2, [sp, #4]
 800264c:	9101      	strne	r1, [sp, #4]
 800264e:	9f01      	ldr	r7, [sp, #4]
 8002650:	4557      	cmp	r7, sl
 8002652:	d10d      	bne.n	8002670 <arm_mat_gemm_f32+0xb0>
 8002654:	fa4f f78b 	sxtb.w	r7, fp
 8002658:	2f00      	cmp	r7, #0
 800265a:	bf0c      	ite	eq
 800265c:	4607      	moveq	r7, r0
 800265e:	4627      	movne	r7, r4
 8002660:	f1be 0f00 	cmp.w	lr, #0
 8002664:	bf0c      	ite	eq
 8002666:	460e      	moveq	r6, r1
 8002668:	4616      	movne	r6, r2
 800266a:	42b7      	cmp	r7, r6
 800266c:	f000 809c 	beq.w	80027a8 <arm_mat_gemm_f32+0x1e8>
 8002670:	fb0a fc0c 	mul.w	ip, sl, ip
 8002674:	f06f 0002 	mvn.w	r0, #2
 8002678:	f1bc 0f00 	cmp.w	ip, #0
 800267c:	f340 8091 	ble.w	80027a2 <arm_mat_gemm_f32+0x1e2>
 8002680:	1c6d      	adds	r5, r5, #1
 8002682:	2100      	movs	r1, #0
 8002684:	b2aa      	uxth	r2, r5
 8002686:	4562      	cmp	r2, ip
 8002688:	f8c9 1000 	str.w	r1, [r9]
 800268c:	bfbf      	itttt	lt
 800268e:	f8c9 1004 	strlt.w	r1, [r9, #4]
 8002692:	1c6d      	addlt	r5, r5, #1
 8002694:	b2ac      	uxthlt	r4, r5
 8002696:	4564      	cmplt	r4, ip
 8002698:	f280 8083 	bge.w	80027a2 <arm_mat_gemm_f32+0x1e2>
 800269c:	1c6d      	adds	r5, r5, #1
 800269e:	b2aa      	uxth	r2, r5
 80026a0:	4562      	cmp	r2, ip
 80026a2:	f8c9 1008 	str.w	r1, [r9, #8]
 80026a6:	f280 807c 	bge.w	80027a2 <arm_mat_gemm_f32+0x1e2>
 80026aa:	1c6d      	adds	r5, r5, #1
 80026ac:	f8c9 100c 	str.w	r1, [r9, #12]
 80026b0:	b2a9      	uxth	r1, r5
 80026b2:	4561      	cmp	r1, ip
 80026b4:	f109 0910 	add.w	r9, r9, #16
 80026b8:	dbe2      	blt.n	8002680 <arm_mat_gemm_f32+0xc0>
 80026ba:	b00a      	add	sp, #40	; 0x28
 80026bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026c0:	9d06      	ldr	r5, [sp, #24]
 80026c2:	0096      	lsls	r6, r2, #2
 80026c4:	9608      	str	r6, [sp, #32]
 80026c6:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 80026ca:	f8cd c00c 	str.w	ip, [sp, #12]
 80026ce:	f8dd c014 	ldr.w	ip, [sp, #20]
 80026d2:	f8ad 4008 	strh.w	r4, [sp, #8]
 80026d6:	4644      	mov	r4, r8
 80026d8:	f8cd a01c 	str.w	sl, [sp, #28]
 80026dc:	fa4f fa8b 	sxtb.w	sl, fp
 80026e0:	f1ba 0f00 	cmp.w	sl, #0
 80026e4:	ed9f 1abd 	vldr	s2, [pc, #756]	; 80029dc <.text_21>
 80026e8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80026ec:	bf0c      	ite	eq
 80026ee:	4682      	moveq	sl, r0
 80026f0:	f8bd a008 	ldrhne.w	sl, [sp, #8]
 80026f4:	f1ba 0f00 	cmp.w	sl, #0
 80026f8:	f000 8019 	beq.w	800272e <arm_mat_gemm_f32+0x16e>
 80026fc:	fa4f f68b 	sxtb.w	r6, fp
 8002700:	2e00      	cmp	r6, #0
 8002702:	f1aa 0a01 	sub.w	sl, sl, #1
 8002706:	edd8 1a00 	vldr	s3, [r8]
 800270a:	ed95 2a00 	vldr	s4, [r5]
 800270e:	bf0c      	ite	eq
 8002710:	2604      	moveq	r6, #4
 8002712:	9e07      	ldrne	r6, [sp, #28]
 8002714:	f1be 0f00 	cmp.w	lr, #0
 8002718:	44b0      	add	r8, r6
 800271a:	ee01 1a82 	vmla.f32	s2, s3, s4
 800271e:	bf0c      	ite	eq
 8002720:	9e08      	ldreq	r6, [sp, #32]
 8002722:	2604      	movne	r6, #4
 8002724:	19ad      	adds	r5, r5, r6
 8002726:	fa1f f68a 	uxth.w	r6, sl
 800272a:	2e00      	cmp	r6, #0
 800272c:	d1e6      	bne.n	80026fc <arm_mat_gemm_f32+0x13c>
 800272e:	1e64      	subs	r4, r4, #1
 8002730:	b2a4      	uxth	r4, r4
 8002732:	f1be 0f00 	cmp.w	lr, #0
 8002736:	ee20 1a01 	vmul.f32	s2, s0, s2
 800273a:	edd7 1a00 	vldr	s3, [r7]
 800273e:	441f      	add	r7, r3
 8002740:	ee00 1aa1 	vmla.f32	s2, s1, s3
 8002744:	ed89 1a00 	vstr	s2, [r9]
 8002748:	f109 0904 	add.w	r9, r9, #4
 800274c:	bf0e      	itee	eq
 800274e:	1b15      	subeq	r5, r2, r4
 8002750:	1b0d      	subne	r5, r1, r4
 8002752:	4355      	mulne	r5, r2
 8002754:	2c00      	cmp	r4, #0
 8002756:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
 800275a:	d1bf      	bne.n	80026dc <arm_mat_gemm_f32+0x11c>
 800275c:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 8002760:	f8dd a004 	ldr.w	sl, [sp, #4]
 8002764:	f8cd c014 	str.w	ip, [sp, #20]
 8002768:	fa4f fc8b 	sxtb.w	ip, fp
 800276c:	f1bc 0f00 	cmp.w	ip, #0
 8002770:	9d03      	ldr	r5, [sp, #12]
 8002772:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8002776:	44d1      	add	r9, sl
 8002778:	f8ad 9002 	strh.w	r9, [sp, #2]
 800277c:	f8bd 9000 	ldrh.w	r9, [sp]
 8002780:	bf0c      	ite	eq
 8002782:	ea4f 0c80 	moveq.w	ip, r0, lsl #2
 8002786:	f04f 0c04 	movne.w	ip, #4
 800278a:	44ac      	add	ip, r5
 800278c:	9d04      	ldr	r5, [sp, #16]
 800278e:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 8002792:	f1a9 0a01 	sub.w	sl, r9, #1
 8002796:	f8ad a000 	strh.w	sl, [sp]
 800279a:	f8bd 5000 	ldrh.w	r5, [sp]
 800279e:	b965      	cbnz	r5, 80027ba <arm_mat_gemm_f32+0x1fa>
 80027a0:	2000      	movs	r0, #0
 80027a2:	b00a      	add	sp, #40	; 0x28
 80027a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027a8:	9f00      	ldr	r7, [sp, #0]
 80027aa:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80027ae:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80027b2:	f8ad 5002 	strh.w	r5, [sp, #2]
 80027b6:	f8ad 8000 	strh.w	r8, [sp]
 80027ba:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80027be:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 80027c2:	f1be 0f00 	cmp.w	lr, #0
 80027c6:	eb08 0989 	add.w	r9, r8, r9, lsl #2
 80027ca:	bf0c      	ite	eq
 80027cc:	4690      	moveq	r8, r2
 80027ce:	4688      	movne	r8, r1
 80027d0:	e776      	b.n	80026c0 <arm_mat_gemm_f32+0x100>

080027d2 <forward_gemm>:
 80027d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d4:	b08b      	sub	sp, #44	; 0x2c
 80027d6:	4604      	mov	r4, r0
 80027d8:	6960      	ldr	r0, [r4, #20]
 80027da:	2600      	movs	r6, #0
 80027dc:	2700      	movs	r7, #0
 80027de:	6800      	ldr	r0, [r0, #0]
 80027e0:	8902      	ldrh	r2, [r0, #8]
 80027e2:	6801      	ldr	r1, [r0, #0]
 80027e4:	68c3      	ldr	r3, [r0, #12]
 80027e6:	2a03      	cmp	r2, #3
 80027e8:	680d      	ldr	r5, [r1, #0]
 80027ea:	f8d3 c000 	ldr.w	ip, [r3]
 80027ee:	d102      	bne.n	80027f6 <forward_gemm+0x24>
 80027f0:	684e      	ldr	r6, [r1, #4]
 80027f2:	688f      	ldr	r7, [r1, #8]
 80027f4:	e00a      	b.n	800280c <forward_gemm+0x3a>
 80027f6:	2a02      	cmp	r2, #2
 80027f8:	d103      	bne.n	8002802 <forward_gemm+0x30>
 80027fa:	6980      	ldr	r0, [r0, #24]
 80027fc:	684e      	ldr	r6, [r1, #4]
 80027fe:	6807      	ldr	r7, [r0, #0]
 8002800:	e004      	b.n	800280c <forward_gemm+0x3a>
 8002802:	2a01      	cmp	r2, #1
 8002804:	d102      	bne.n	800280c <forward_gemm+0x3a>
 8002806:	6980      	ldr	r0, [r0, #24]
 8002808:	6806      	ldr	r6, [r0, #0]
 800280a:	6847      	ldr	r7, [r0, #4]
 800280c:	f8dc 0000 	ldr.w	r0, [ip]
 8002810:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8002814:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8002818:	6883      	ldr	r3, [r0, #8]
 800281a:	a808      	add	r0, sp, #32
 800281c:	b292      	uxth	r2, r2
 800281e:	b289      	uxth	r1, r1
 8002820:	f005 fc05 	bl	800802e <arm_mat_init_f32>
 8002824:	682a      	ldr	r2, [r5, #0]
 8002826:	6929      	ldr	r1, [r5, #16]
 8002828:	a806      	add	r0, sp, #24
 800282a:	6893      	ldr	r3, [r2, #8]
 800282c:	68aa      	ldr	r2, [r5, #8]
 800282e:	b289      	uxth	r1, r1
 8002830:	b292      	uxth	r2, r2
 8002832:	f005 fbfc 	bl	800802e <arm_mat_init_f32>
 8002836:	6830      	ldr	r0, [r6, #0]
 8002838:	68b2      	ldr	r2, [r6, #8]
 800283a:	6931      	ldr	r1, [r6, #16]
 800283c:	6883      	ldr	r3, [r0, #8]
 800283e:	a804      	add	r0, sp, #16
 8002840:	b292      	uxth	r2, r2
 8002842:	b289      	uxth	r1, r1
 8002844:	f005 fbf3 	bl	800802e <arm_mat_init_f32>
 8002848:	6838      	ldr	r0, [r7, #0]
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	6939      	ldr	r1, [r7, #16]
 800284e:	6883      	ldr	r3, [r0, #8]
 8002850:	a802      	add	r0, sp, #8
 8002852:	b292      	uxth	r2, r2
 8002854:	b289      	uxth	r1, r1
 8002856:	f005 fbea 	bl	800802e <arm_mat_init_f32>
 800285a:	a808      	add	r0, sp, #32
 800285c:	aa02      	add	r2, sp, #8
 800285e:	9001      	str	r0, [sp, #4]
 8002860:	f994 1021 	ldrsb.w	r1, [r4, #33]	; 0x21
 8002864:	a806      	add	r0, sp, #24
 8002866:	9100      	str	r1, [sp, #0]
 8002868:	f994 3020 	ldrsb.w	r3, [r4, #32]
 800286c:	edd4 0a07 	vldr	s1, [r4, #28]
 8002870:	a904      	add	r1, sp, #16
 8002872:	ed94 0a06 	vldr	s0, [r4, #24]
 8002876:	f7ff fea3 	bl	80025c0 <arm_mat_gemm_f32>
 800287a:	b00b      	add	sp, #44	; 0x2c
 800287c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002880 <forward_matmul>:
 8002880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002884:	b08b      	sub	sp, #44	; 0x2c
 8002886:	6940      	ldr	r0, [r0, #20]
 8002888:	6801      	ldr	r1, [r0, #0]
 800288a:	680a      	ldr	r2, [r1, #0]
 800288c:	6810      	ldr	r0, [r2, #0]
 800288e:	6857      	ldr	r7, [r2, #4]
 8002890:	68ca      	ldr	r2, [r1, #12]
 8002892:	6814      	ldr	r4, [r2, #0]
 8002894:	b90f      	cbnz	r7, 800289a <forward_matmul+0x1a>
 8002896:	6989      	ldr	r1, [r1, #24]
 8002898:	680f      	ldr	r7, [r1, #0]
 800289a:	68a2      	ldr	r2, [r4, #8]
 800289c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80028a0:	687d      	ldr	r5, [r7, #4]
 80028a2:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80028a6:	68c1      	ldr	r1, [r0, #12]
 80028a8:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80028ac:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 80028b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80028b4:	f8cd 9018 	str.w	r9, [sp, #24]
 80028b8:	6906      	ldr	r6, [r0, #16]
 80028ba:	6824      	ldr	r4, [r4, #0]
 80028bc:	fb01 fa0e 	mul.w	sl, r1, lr
 80028c0:	434e      	muls	r6, r1
 80028c2:	68a3      	ldr	r3, [r4, #8]
 80028c4:	2a00      	cmp	r2, #0
 80028c6:	fb0e f606 	mul.w	r6, lr, r6
 80028ca:	960a      	str	r6, [sp, #40]	; 0x28
 80028cc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80028d0:	fb08 f909 	mul.w	r9, r8, r9
 80028d4:	fb08 f805 	mul.w	r8, r8, r5
 80028d8:	fb05 f909 	mul.w	r9, r5, r9
 80028dc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80028e0:	d078      	beq.n	80029d4 <forward_matmul+0x154>
 80028e2:	2400      	movs	r4, #0
 80028e4:	46a1      	mov	r9, r4
 80028e6:	9202      	str	r2, [sp, #8]
 80028e8:	9a06      	ldr	r2, [sp, #24]
 80028ea:	2a00      	cmp	r2, #0
 80028ec:	d068      	beq.n	80029c0 <forward_matmul+0x140>
 80028ee:	2600      	movs	r6, #0
 80028f0:	9600      	str	r6, [sp, #0]
 80028f2:	9a06      	ldr	r2, [sp, #24]
 80028f4:	f8cd a014 	str.w	sl, [sp, #20]
 80028f8:	f8dd a000 	ldr.w	sl, [sp]
 80028fc:	f8cd b00c 	str.w	fp, [sp, #12]
 8002900:	9201      	str	r2, [sp, #4]
 8002902:	9a03      	ldr	r2, [sp, #12]
 8002904:	2a00      	cmp	r2, #0
 8002906:	d051      	beq.n	80029ac <forward_matmul+0x12c>
 8002908:	9507      	str	r5, [sp, #28]
 800290a:	f04f 0b00 	mov.w	fp, #0
 800290e:	f8cd c010 	str.w	ip, [sp, #16]
 8002912:	9200      	str	r2, [sp, #0]
 8002914:	9a04      	ldr	r2, [sp, #16]
 8002916:	2a00      	cmp	r2, #0
 8002918:	d03e      	beq.n	8002998 <forward_matmul+0x118>
 800291a:	f04f 0c00 	mov.w	ip, #0
 800291e:	9008      	str	r0, [sp, #32]
 8002920:	9808      	ldr	r0, [sp, #32]
 8002922:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80029dc <.text_21>
 8002926:	6806      	ldr	r6, [r0, #0]
 8002928:	6838      	ldr	r0, [r7, #0]
 800292a:	68b5      	ldr	r5, [r6, #8]
 800292c:	6880      	ldr	r0, [r0, #8]
 800292e:	192d      	adds	r5, r5, r4
 8002930:	4455      	add	r5, sl
 8002932:	4465      	add	r5, ip
 8002934:	4448      	add	r0, r9
 8002936:	4458      	add	r0, fp
 8002938:	eb00 060c 	add.w	r6, r0, ip
 800293c:	b321      	cbz	r1, 8002988 <forward_matmul+0x108>
 800293e:	07c8      	lsls	r0, r1, #31
 8002940:	d509      	bpl.n	8002956 <forward_matmul+0xd6>
 8002942:	edd5 0a00 	vldr	s1, [r5]
 8002946:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 800294a:	ed96 1a00 	vldr	s2, [r6]
 800294e:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8002952:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002956:	0848      	lsrs	r0, r1, #1
 8002958:	f000 8016 	beq.w	8002988 <forward_matmul+0x108>
 800295c:	edd5 0a00 	vldr	s1, [r5]
 8002960:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002964:	ed96 1a00 	vldr	s2, [r6]
 8002968:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 800296c:	1e40      	subs	r0, r0, #1
 800296e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002972:	edd5 1a00 	vldr	s3, [r5]
 8002976:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 800297a:	ed96 2a00 	vldr	s4, [r6]
 800297e:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8002982:	ee01 0a82 	vmla.f32	s0, s3, s4
 8002986:	d1e9      	bne.n	800295c <forward_matmul+0xdc>
 8002988:	ed83 0a00 	vstr	s0, [r3]
 800298c:	1d1b      	adds	r3, r3, #4
 800298e:	1e52      	subs	r2, r2, #1
 8002990:	f10c 0c04 	add.w	ip, ip, #4
 8002994:	d1c4      	bne.n	8002920 <forward_matmul+0xa0>
 8002996:	9808      	ldr	r0, [sp, #32]
 8002998:	9d00      	ldr	r5, [sp, #0]
 800299a:	9a07      	ldr	r2, [sp, #28]
 800299c:	eb0b 0b82 	add.w	fp, fp, r2, lsl #2
 80029a0:	1e6d      	subs	r5, r5, #1
 80029a2:	9500      	str	r5, [sp, #0]
 80029a4:	d1b6      	bne.n	8002914 <forward_matmul+0x94>
 80029a6:	4615      	mov	r5, r2
 80029a8:	f8dd c010 	ldr.w	ip, [sp, #16]
 80029ac:	9e01      	ldr	r6, [sp, #4]
 80029ae:	9a05      	ldr	r2, [sp, #20]
 80029b0:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 80029b4:	1e76      	subs	r6, r6, #1
 80029b6:	9601      	str	r6, [sp, #4]
 80029b8:	d1a3      	bne.n	8002902 <forward_matmul+0x82>
 80029ba:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80029be:	4692      	mov	sl, r2
 80029c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029c2:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 80029c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80029c8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80029cc:	9a02      	ldr	r2, [sp, #8]
 80029ce:	1e52      	subs	r2, r2, #1
 80029d0:	9202      	str	r2, [sp, #8]
 80029d2:	d189      	bne.n	80028e8 <forward_matmul+0x68>
 80029d4:	b00b      	add	sp, #44	; 0x2c
 80029d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080029dc <.text_21>:
 80029dc:	00000000 	.word	0x00000000

080029e0 <.text_22>:
 80029e0:	080018ab 	.word	0x080018ab

080029e4 <nl_func_sm_channel_f32>:
 80029e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029e8:	4614      	mov	r4, r2
 80029ea:	460f      	mov	r7, r1
 80029ec:	2c02      	cmp	r4, #2
 80029ee:	4606      	mov	r6, r0
 80029f0:	ed2d 8b02 	vpush	{d8}
 80029f4:	ed97 8a00 	vldr	s16, [r7]
 80029f8:	eddf 8ac5 	vldr	s17, [pc, #788]	; 8002d10 <.text_12>
 80029fc:	d33d      	bcc.n	8002a7a <nl_func_sm_channel_f32+0x96>
 80029fe:	1e61      	subs	r1, r4, #1
 8002a00:	1d3a      	adds	r2, r7, #4
 8002a02:	f011 0003 	ands.w	r0, r1, #3
 8002a06:	d00c      	beq.n	8002a22 <nl_func_sm_channel_f32+0x3e>
 8002a08:	ed92 0a00 	vldr	s0, [r2]
 8002a0c:	f102 0204 	add.w	r2, r2, #4
 8002a10:	eeb4 0a48 	vcmp.f32	s0, s16
 8002a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a18:	bf58      	it	pl
 8002a1a:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002a1e:	1e40      	subs	r0, r0, #1
 8002a20:	d1f2      	bne.n	8002a08 <nl_func_sm_channel_f32+0x24>
 8002a22:	0889      	lsrs	r1, r1, #2
 8002a24:	f000 802b 	beq.w	8002a7e <nl_func_sm_channel_f32+0x9a>
 8002a28:	ed92 0a00 	vldr	s0, [r2]
 8002a2c:	eeb4 0a48 	vcmp.f32	s0, s16
 8002a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a34:	bf58      	it	pl
 8002a36:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002a3a:	ed92 0a01 	vldr	s0, [r2, #4]
 8002a3e:	eeb4 0a48 	vcmp.f32	s0, s16
 8002a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a46:	bf58      	it	pl
 8002a48:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002a4c:	ed92 0a02 	vldr	s0, [r2, #8]
 8002a50:	eeb4 0a48 	vcmp.f32	s0, s16
 8002a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a58:	bf58      	it	pl
 8002a5a:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002a5e:	ed92 0a03 	vldr	s0, [r2, #12]
 8002a62:	f102 0210 	add.w	r2, r2, #16
 8002a66:	eeb4 0a48 	vcmp.f32	s0, s16
 8002a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6e:	bf58      	it	pl
 8002a70:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002a74:	1e49      	subs	r1, r1, #1
 8002a76:	d1d7      	bne.n	8002a28 <nl_func_sm_channel_f32+0x44>
 8002a78:	e001      	b.n	8002a7e <nl_func_sm_channel_f32+0x9a>
 8002a7a:	2c00      	cmp	r4, #0
 8002a7c:	d040      	beq.n	8002b00 <nl_func_sm_channel_f32+0x11c>
 8002a7e:	46b0      	mov	r8, r6
 8002a80:	ea4f 0504 	mov.w	r5, r4
 8002a84:	ed97 0a00 	vldr	s0, [r7]
 8002a88:	1d3f      	adds	r7, r7, #4
 8002a8a:	ee30 0a48 	vsub.f32	s0, s0, s16
 8002a8e:	f00e f9cf 	bl	8010e30 <expf>
 8002a92:	1e6d      	subs	r5, r5, #1
 8002a94:	ed88 0a00 	vstr	s0, [r8]
 8002a98:	ee78 8a80 	vadd.f32	s17, s17, s0
 8002a9c:	f108 0804 	add.w	r8, r8, #4
 8002aa0:	d1f0      	bne.n	8002a84 <nl_func_sm_channel_f32+0xa0>
 8002aa2:	f014 0003 	ands.w	r0, r4, #3
 8002aa6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002aaa:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8002aae:	d009      	beq.n	8002ac4 <nl_func_sm_channel_f32+0xe0>
 8002ab0:	edd6 0a00 	vldr	s1, [r6]
 8002ab4:	1e40      	subs	r0, r0, #1
 8002ab6:	ee60 0a80 	vmul.f32	s1, s1, s0
 8002aba:	edc6 0a00 	vstr	s1, [r6]
 8002abe:	f106 0604 	add.w	r6, r6, #4
 8002ac2:	d1f5      	bne.n	8002ab0 <nl_func_sm_channel_f32+0xcc>
 8002ac4:	08a4      	lsrs	r4, r4, #2
 8002ac6:	d01b      	beq.n	8002b00 <nl_func_sm_channel_f32+0x11c>
 8002ac8:	edd6 0a00 	vldr	s1, [r6]
 8002acc:	1e64      	subs	r4, r4, #1
 8002ace:	ee60 0a80 	vmul.f32	s1, s1, s0
 8002ad2:	edc6 0a00 	vstr	s1, [r6]
 8002ad6:	ed96 1a01 	vldr	s2, [r6, #4]
 8002ada:	ee21 1a00 	vmul.f32	s2, s2, s0
 8002ade:	ed86 1a01 	vstr	s2, [r6, #4]
 8002ae2:	edd6 0a02 	vldr	s1, [r6, #8]
 8002ae6:	ed96 1a03 	vldr	s2, [r6, #12]
 8002aea:	ee60 1a80 	vmul.f32	s3, s1, s0
 8002aee:	ee61 0a00 	vmul.f32	s1, s2, s0
 8002af2:	edc6 1a02 	vstr	s3, [r6, #8]
 8002af6:	edc6 0a03 	vstr	s1, [r6, #12]
 8002afa:	f106 0610 	add.w	r6, r6, #16
 8002afe:	d1e3      	bne.n	8002ac8 <nl_func_sm_channel_f32+0xe4>
 8002b00:	ecbd 8b02 	vpop	{d8}
 8002b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002b08 <nl_func_sm_array_f32>:
 8002b08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b0c:	b081      	sub	sp, #4
 8002b0e:	460c      	mov	r4, r1
 8002b10:	9f08      	ldr	r7, [sp, #32]
 8002b12:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8002b16:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002b18:	eb00 0e82 	add.w	lr, r0, r2, lsl #2
 8002b1c:	461d      	mov	r5, r3
 8002b1e:	00bf      	lsls	r7, r7, #2
 8002b20:	427f      	negs	r7, r7
 8002b22:	eb0c 0807 	add.w	r8, ip, r7
 8002b26:	00b6      	lsls	r6, r6, #2
 8002b28:	4276      	negs	r6, r6
 8002b2a:	45a0      	cmp	r8, r4
 8002b2c:	eb0e 0906 	add.w	r9, lr, r6
 8002b30:	d309      	bcc.n	8002b46 <nl_func_sm_array_f32+0x3e>
 8002b32:	2300      	movs	r3, #0
 8002b34:	462a      	mov	r2, r5
 8002b36:	4641      	mov	r1, r8
 8002b38:	4648      	mov	r0, r9
 8002b3a:	f7ff ff53 	bl	80029e4 <nl_func_sm_channel_f32>
 8002b3e:	44b8      	add	r8, r7
 8002b40:	45a0      	cmp	r8, r4
 8002b42:	44b1      	add	r9, r6
 8002b44:	d2f5      	bcs.n	8002b32 <nl_func_sm_array_f32+0x2a>
 8002b46:	b001      	add	sp, #4
 8002b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002b4c <nl_func_tanh_array_f32>:
 8002b4c:	b570      	push	{r4, r5, r6, lr}
 8002b4e:	460c      	mov	r4, r1
 8002b50:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002b54:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002b58:	1f0d      	subs	r5, r1, #4
 8002b5a:	1f06      	subs	r6, r0, #4
 8002b5c:	42a5      	cmp	r5, r4
 8002b5e:	d309      	bcc.n	8002b74 <nl_func_tanh_array_f32+0x28>
 8002b60:	ed95 0a00 	vldr	s0, [r5]
 8002b64:	1f2d      	subs	r5, r5, #4
 8002b66:	f00e f911 	bl	8010d8c <tanhf>
 8002b6a:	ed86 0a00 	vstr	s0, [r6]
 8002b6e:	1f36      	subs	r6, r6, #4
 8002b70:	42a5      	cmp	r5, r4
 8002b72:	d2f5      	bcs.n	8002b60 <nl_func_tanh_array_f32+0x14>
 8002b74:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b78 <nl_func_sigmoid_array_f32>:
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	460c      	mov	r4, r1
 8002b7c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002b80:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002b84:	1f0d      	subs	r5, r1, #4
 8002b86:	1f06      	subs	r6, r0, #4
 8002b88:	42a5      	cmp	r5, r4
 8002b8a:	d313      	bcc.n	8002bb4 <nl_func_sigmoid_array_f32+0x3c>
 8002b8c:	ed95 0a00 	vldr	s0, [r5]
 8002b90:	1f2d      	subs	r5, r5, #4
 8002b92:	eeb1 0a40 	vneg.f32	s0, s0
 8002b96:	f00e f94b 	bl	8010e30 <expf>
 8002b9a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002b9e:	ee70 0a20 	vadd.f32	s1, s0, s1
 8002ba2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002ba6:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8002baa:	ed86 1a00 	vstr	s2, [r6]
 8002bae:	1f36      	subs	r6, r6, #4
 8002bb0:	42a5      	cmp	r5, r4
 8002bb2:	d2eb      	bcs.n	8002b8c <nl_func_sigmoid_array_f32+0x14>
 8002bb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002bb8 <nl_func_hard_sigmoid_array_f32>:
 8002bb8:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002bbc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002bc0:	1f1b      	subs	r3, r3, #4
 8002bc2:	1f00      	subs	r0, r0, #4
 8002bc4:	428b      	cmp	r3, r1
 8002bc6:	d321      	bcc.n	8002c0c <nl_func_hard_sigmoid_array_f32+0x54>
 8002bc8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002bcc:	eddf 0aa7 	vldr	s1, [pc, #668]	; 8002e6c <.text_16>
 8002bd0:	edd3 1a00 	vldr	s3, [r3]
 8002bd4:	ed9f 2aa6 	vldr	s4, [pc, #664]	; 8002e70 <.text_17>
 8002bd8:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8002bdc:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002be0:	eeb4 1a60 	vcmp.f32	s2, s1
 8002be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be8:	da08      	bge.n	8002bfc <nl_func_hard_sigmoid_array_f32+0x44>
 8002bea:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8002bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf2:	d505      	bpl.n	8002c00 <nl_func_hard_sigmoid_array_f32+0x48>
 8002bf4:	ed9f 1a46 	vldr	s2, [pc, #280]	; 8002d10 <.text_12>
 8002bf8:	e002      	b.n	8002c00 <nl_func_hard_sigmoid_array_f32+0x48>
 8002bfa:	bf00      	nop
 8002bfc:	eeb0 1a40 	vmov.f32	s2, s0
 8002c00:	ed80 1a00 	vstr	s2, [r0]
 8002c04:	1f1b      	subs	r3, r3, #4
 8002c06:	1f00      	subs	r0, r0, #4
 8002c08:	428b      	cmp	r3, r1
 8002c0a:	d2e1      	bcs.n	8002bd0 <nl_func_hard_sigmoid_array_f32+0x18>
 8002c0c:	4770      	bx	lr
	...

08002c10 <nl_func_exp_array_f32>:
 8002c10:	b570      	push	{r4, r5, r6, lr}
 8002c12:	460c      	mov	r4, r1
 8002c14:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002c18:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002c1c:	1f0d      	subs	r5, r1, #4
 8002c1e:	1f06      	subs	r6, r0, #4
 8002c20:	42a5      	cmp	r5, r4
 8002c22:	d309      	bcc.n	8002c38 <nl_func_exp_array_f32+0x28>
 8002c24:	ed95 0a00 	vldr	s0, [r5]
 8002c28:	1f2d      	subs	r5, r5, #4
 8002c2a:	f00e f901 	bl	8010e30 <expf>
 8002c2e:	ed86 0a00 	vstr	s0, [r6]
 8002c32:	1f36      	subs	r6, r6, #4
 8002c34:	42a5      	cmp	r5, r4
 8002c36:	d2f5      	bcs.n	8002c24 <nl_func_exp_array_f32+0x14>
 8002c38:	bd70      	pop	{r4, r5, r6, pc}
	...

08002c3c <nl_func_sqrt_array_f32>:
 8002c3c:	b570      	push	{r4, r5, r6, lr}
 8002c3e:	460c      	mov	r4, r1
 8002c40:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002c44:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002c48:	1f0d      	subs	r5, r1, #4
 8002c4a:	1f06      	subs	r6, r0, #4
 8002c4c:	42a5      	cmp	r5, r4
 8002c4e:	d309      	bcc.n	8002c64 <nl_func_sqrt_array_f32+0x28>
 8002c50:	ed95 0a00 	vldr	s0, [r5]
 8002c54:	1f2d      	subs	r5, r5, #4
 8002c56:	f002 f8a9 	bl	8004dac <ai_math_sqrt>
 8002c5a:	ed86 0a00 	vstr	s0, [r6]
 8002c5e:	1f36      	subs	r6, r6, #4
 8002c60:	42a5      	cmp	r5, r4
 8002c62:	d2f5      	bcs.n	8002c50 <nl_func_sqrt_array_f32+0x14>
 8002c64:	bd70      	pop	{r4, r5, r6, pc}
	...

08002c68 <nl_func_soft_plus_array_f32>:
 8002c68:	b570      	push	{r4, r5, r6, lr}
 8002c6a:	460c      	mov	r4, r1
 8002c6c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002c70:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002c74:	1f0d      	subs	r5, r1, #4
 8002c76:	1f06      	subs	r6, r0, #4
 8002c78:	42a5      	cmp	r5, r4
 8002c7a:	d30f      	bcc.n	8002c9c <nl_func_soft_plus_array_f32+0x34>
 8002c7c:	ed95 0a00 	vldr	s0, [r5]
 8002c80:	1f2d      	subs	r5, r5, #4
 8002c82:	f00e f8d5 	bl	8010e30 <expf>
 8002c86:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002c8a:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002c8e:	f00e f949 	bl	8010f24 <logf>
 8002c92:	ed86 0a00 	vstr	s0, [r6]
 8002c96:	1f36      	subs	r6, r6, #4
 8002c98:	42a5      	cmp	r5, r4
 8002c9a:	d2ef      	bcs.n	8002c7c <nl_func_soft_plus_array_f32+0x14>
 8002c9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ca0 <nl_func_soft_sign_array_f32>:
 8002ca0:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002ca4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002ca8:	1f1b      	subs	r3, r3, #4
 8002caa:	1f00      	subs	r0, r0, #4
 8002cac:	428b      	cmp	r3, r1
 8002cae:	d30f      	bcc.n	8002cd0 <nl_func_soft_sign_array_f32+0x30>
 8002cb0:	ed93 0a00 	vldr	s0, [r3]
 8002cb4:	1f1b      	subs	r3, r3, #4
 8002cb6:	eef0 0ac0 	vabs.f32	s1, s0
 8002cba:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002cbe:	ee70 0a81 	vadd.f32	s1, s1, s2
 8002cc2:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8002cc6:	ed80 0a00 	vstr	s0, [r0]
 8002cca:	1f00      	subs	r0, r0, #4
 8002ccc:	428b      	cmp	r3, r1
 8002cce:	d2ef      	bcs.n	8002cb0 <nl_func_soft_sign_array_f32+0x10>
 8002cd0:	4770      	bx	lr
	...

08002cd4 <nl_func_sign_array_f32>:
 8002cd4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002cd8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002cdc:	1f1b      	subs	r3, r3, #4
 8002cde:	1f00      	subs	r0, r0, #4
 8002ce0:	428b      	cmp	r3, r1
 8002ce2:	d314      	bcc.n	8002d0e <nl_func_sign_array_f32+0x3a>
 8002ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ce8:	ed93 0a00 	vldr	s0, [r3]
 8002cec:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf4:	bfcc      	ite	gt
 8002cf6:	ed9f 0aba 	vldrgt	s0, [pc, #744]	; 8002fe0 <.text_21>
 8002cfa:	ee00 2a10 	vmovle	s0, r2
 8002cfe:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002d02:	1f1b      	subs	r3, r3, #4
 8002d04:	ed80 0a00 	vstr	s0, [r0]
 8002d08:	1f00      	subs	r0, r0, #4
 8002d0a:	428b      	cmp	r3, r1
 8002d0c:	d2ec      	bcs.n	8002ce8 <nl_func_sign_array_f32+0x14>
 8002d0e:	4770      	bx	lr

08002d10 <.text_12>:
 8002d10:	00000000 	.word	0x00000000

08002d14 <nl_func_clip_array_f32>:
 8002d14:	ed93 0a00 	vldr	s0, [r3]
 8002d18:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002d1c:	edd3 0a01 	vldr	s1, [r3, #4]
 8002d20:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002d24:	1f1b      	subs	r3, r3, #4
 8002d26:	1f00      	subs	r0, r0, #4
 8002d28:	428b      	cmp	r3, r1
 8002d2a:	d315      	bcc.n	8002d58 <nl_func_clip_array_f32+0x44>
 8002d2c:	ed93 1a00 	vldr	s2, [r3]
 8002d30:	eeb4 0a41 	vcmp.f32	s0, s2
 8002d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d38:	bf58      	it	pl
 8002d3a:	eeb0 1a40 	vmovpl.f32	s2, s0
 8002d3e:	eeb4 1a60 	vcmp.f32	s2, s1
 8002d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d46:	bf58      	it	pl
 8002d48:	eeb0 1a60 	vmovpl.f32	s2, s1
 8002d4c:	ed80 1a00 	vstr	s2, [r0]
 8002d50:	1f1b      	subs	r3, r3, #4
 8002d52:	1f00      	subs	r0, r0, #4
 8002d54:	428b      	cmp	r3, r1
 8002d56:	d2e9      	bcs.n	8002d2c <nl_func_clip_array_f32+0x18>
 8002d58:	4770      	bx	lr
	...

08002d5c <nl_func_hardmax_array_f32>:
 8002d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d60:	6856      	ldr	r6, [r2, #4]
 8002d62:	68d4      	ldr	r4, [r2, #12]
 8002d64:	4688      	mov	r8, r1
 8002d66:	4605      	mov	r5, r0
 8002d68:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002d6c:	4374      	muls	r4, r6
 8002d6e:	00a1      	lsls	r1, r4, #2
 8002d70:	f00d ffbb 	bl	8010cea <__aeabi_memclr>
 8002d74:	2200      	movs	r2, #0
 8002d76:	2c00      	cmp	r4, #0
 8002d78:	4643      	mov	r3, r8
 8002d7a:	d05c      	beq.n	8002e36 <nl_func_hardmax_array_f32+0xda>
 8002d7c:	f102 0c01 	add.w	ip, r2, #1
 8002d80:	eb06 0e02 	add.w	lr, r6, r2
 8002d84:	45f4      	cmp	ip, lr
 8002d86:	edd3 0a00 	vldr	s1, [r3]
 8002d8a:	d24b      	bcs.n	8002e24 <nl_func_hardmax_array_f32+0xc8>
 8002d8c:	1e71      	subs	r1, r6, #1
 8002d8e:	f011 0003 	ands.w	r0, r1, #3
 8002d92:	eb08 078c 	add.w	r7, r8, ip, lsl #2
 8002d96:	d00f      	beq.n	8002db8 <nl_func_hardmax_array_f32+0x5c>
 8002d98:	ed97 1a00 	vldr	s2, [r7]
 8002d9c:	f107 0704 	add.w	r7, r7, #4
 8002da0:	eef4 0a41 	vcmp.f32	s1, s2
 8002da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da8:	bf44      	itt	mi
 8002daa:	eef0 0a41 	vmovmi.f32	s1, s2
 8002dae:	4662      	movmi	r2, ip
 8002db0:	1e40      	subs	r0, r0, #1
 8002db2:	f10c 0c01 	add.w	ip, ip, #1
 8002db6:	d1ef      	bne.n	8002d98 <nl_func_hardmax_array_f32+0x3c>
 8002db8:	0889      	lsrs	r1, r1, #2
 8002dba:	d033      	beq.n	8002e24 <nl_func_hardmax_array_f32+0xc8>
 8002dbc:	ed97 1a00 	vldr	s2, [r7]
 8002dc0:	eef4 0a41 	vcmp.f32	s1, s2
 8002dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc8:	bf44      	itt	mi
 8002dca:	eef0 0a41 	vmovmi.f32	s1, s2
 8002dce:	4662      	movmi	r2, ip
 8002dd0:	ed97 1a01 	vldr	s2, [r7, #4]
 8002dd4:	f10c 0c01 	add.w	ip, ip, #1
 8002dd8:	eef4 0a41 	vcmp.f32	s1, s2
 8002ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de0:	bf44      	itt	mi
 8002de2:	eef0 0a41 	vmovmi.f32	s1, s2
 8002de6:	4662      	movmi	r2, ip
 8002de8:	ed97 1a02 	vldr	s2, [r7, #8]
 8002dec:	f10c 0c01 	add.w	ip, ip, #1
 8002df0:	eef4 0a41 	vcmp.f32	s1, s2
 8002df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df8:	bf44      	itt	mi
 8002dfa:	eef0 0a41 	vmovmi.f32	s1, s2
 8002dfe:	4662      	movmi	r2, ip
 8002e00:	ed97 1a03 	vldr	s2, [r7, #12]
 8002e04:	f10c 0c01 	add.w	ip, ip, #1
 8002e08:	eef4 0a41 	vcmp.f32	s1, s2
 8002e0c:	f107 0710 	add.w	r7, r7, #16
 8002e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e14:	bf44      	itt	mi
 8002e16:	eef0 0a41 	vmovmi.f32	s1, s2
 8002e1a:	4662      	movmi	r2, ip
 8002e1c:	1e49      	subs	r1, r1, #1
 8002e1e:	f10c 0c01 	add.w	ip, ip, #1
 8002e22:	d1cb      	bne.n	8002dbc <nl_func_hardmax_array_f32+0x60>
 8002e24:	eb05 0082 	add.w	r0, r5, r2, lsl #2
 8002e28:	4672      	mov	r2, lr
 8002e2a:	42a2      	cmp	r2, r4
 8002e2c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8002e30:	ed80 0a00 	vstr	s0, [r0]
 8002e34:	d3a2      	bcc.n	8002d7c <nl_func_hardmax_array_f32+0x20>
 8002e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002e3c <nl_func_relu_array_f32>:
 8002e3c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002e40:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002e44:	1f1b      	subs	r3, r3, #4
 8002e46:	1f00      	subs	r0, r0, #4
 8002e48:	428b      	cmp	r3, r1
 8002e4a:	d30e      	bcc.n	8002e6a <nl_func_relu_array_f32+0x2e>
 8002e4c:	ed93 0a00 	vldr	s0, [r3]
 8002e50:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e58:	bf48      	it	mi
 8002e5a:	ed9f 0abb 	vldrmi	s0, [pc, #748]	; 8003148 <.text_25>
 8002e5e:	ed80 0a00 	vstr	s0, [r0]
 8002e62:	1f1b      	subs	r3, r3, #4
 8002e64:	1f00      	subs	r0, r0, #4
 8002e66:	428b      	cmp	r3, r1
 8002e68:	d2f0      	bcs.n	8002e4c <nl_func_relu_array_f32+0x10>
 8002e6a:	4770      	bx	lr

08002e6c <.text_16>:
 8002e6c:	3f800001 	.word	0x3f800001

08002e70 <.text_17>:
 8002e70:	3e4ccccd 	.word	0x3e4ccccd

08002e74 <nl_func_relu_generic_array_f32>:
 8002e74:	ed93 0a00 	vldr	s0, [r3]
 8002e78:	1f00      	subs	r0, r0, #4
 8002e7a:	edd3 0a01 	vldr	s1, [r3, #4]
 8002e7e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002e82:	ed93 1a02 	vldr	s2, [r3, #8]
 8002e86:	1f0b      	subs	r3, r1, #4
 8002e88:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8002e8c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8002e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e94:	d52a      	bpl.n	8002eec <nl_func_relu_generic_array_f32+0x78>
 8002e96:	eef5 0a40 	vcmp.f32	s1, #0.0
 8002e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9e:	d013      	beq.n	8002ec8 <nl_func_relu_generic_array_f32+0x54>
 8002ea0:	428a      	cmp	r2, r1
 8002ea2:	d310      	bcc.n	8002ec6 <nl_func_relu_generic_array_f32+0x52>
 8002ea4:	ed92 1a00 	vldr	s2, [r2]
 8002ea8:	eeb4 1a40 	vcmp.f32	s2, s0
 8002eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb0:	bf44      	itt	mi
 8002eb2:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 8002eb6:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 8002eba:	ed80 1a00 	vstr	s2, [r0]
 8002ebe:	1f12      	subs	r2, r2, #4
 8002ec0:	1f00      	subs	r0, r0, #4
 8002ec2:	428a      	cmp	r2, r1
 8002ec4:	d2ee      	bcs.n	8002ea4 <nl_func_relu_generic_array_f32+0x30>
 8002ec6:	4770      	bx	lr
 8002ec8:	428a      	cmp	r2, r1
 8002eca:	d3fc      	bcc.n	8002ec6 <nl_func_relu_generic_array_f32+0x52>
 8002ecc:	edd2 0a00 	vldr	s1, [r2]
 8002ed0:	eef4 0a40 	vcmp.f32	s1, s0
 8002ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed8:	bf48      	it	mi
 8002eda:	eddf 0a9b 	vldrmi	s1, [pc, #620]	; 8003148 <.text_25>
 8002ede:	edc0 0a00 	vstr	s1, [r0]
 8002ee2:	1f12      	subs	r2, r2, #4
 8002ee4:	1f00      	subs	r0, r0, #4
 8002ee6:	428a      	cmp	r2, r1
 8002ee8:	d2f0      	bcs.n	8002ecc <nl_func_relu_generic_array_f32+0x58>
 8002eea:	4770      	bx	lr
 8002eec:	428a      	cmp	r2, r1
 8002eee:	d3ea      	bcc.n	8002ec6 <nl_func_relu_generic_array_f32+0x52>
 8002ef0:	edd2 1a00 	vldr	s3, [r2]
 8002ef4:	eef4 1a41 	vcmp.f32	s3, s2
 8002ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efc:	d50a      	bpl.n	8002f14 <nl_func_relu_generic_array_f32+0xa0>
 8002efe:	eef4 1a40 	vcmp.f32	s3, s0
 8002f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f06:	d507      	bpl.n	8002f18 <nl_func_relu_generic_array_f32+0xa4>
 8002f08:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8002f0c:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8002f10:	e002      	b.n	8002f18 <nl_func_relu_generic_array_f32+0xa4>
 8002f12:	bf00      	nop
 8002f14:	eef0 1a41 	vmov.f32	s3, s2
 8002f18:	edc0 1a00 	vstr	s3, [r0]
 8002f1c:	1f12      	subs	r2, r2, #4
 8002f1e:	1f00      	subs	r0, r0, #4
 8002f20:	428a      	cmp	r2, r1
 8002f22:	d2e5      	bcs.n	8002ef0 <nl_func_relu_generic_array_f32+0x7c>
 8002f24:	4770      	bx	lr
	...

08002f28 <nl_func_relu_thresholded_array_f32>:
 8002f28:	ed93 0a00 	vldr	s0, [r3]
 8002f2c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002f30:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002f34:	1f1b      	subs	r3, r3, #4
 8002f36:	1f00      	subs	r0, r0, #4
 8002f38:	428b      	cmp	r3, r1
 8002f3a:	d30e      	bcc.n	8002f5a <nl_func_relu_thresholded_array_f32+0x32>
 8002f3c:	edd3 0a00 	vldr	s1, [r3]
 8002f40:	eef4 0a40 	vcmp.f32	s1, s0
 8002f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f48:	bf48      	it	mi
 8002f4a:	eddf 0a7f 	vldrmi	s1, [pc, #508]	; 8003148 <.text_25>
 8002f4e:	edc0 0a00 	vstr	s1, [r0]
 8002f52:	1f1b      	subs	r3, r3, #4
 8002f54:	1f00      	subs	r0, r0, #4
 8002f56:	428b      	cmp	r3, r1
 8002f58:	d2f0      	bcs.n	8002f3c <nl_func_relu_thresholded_array_f32+0x14>
 8002f5a:	4770      	bx	lr

08002f5c <nl_func_elu_array_f32>:
 8002f5c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002f60:	b570      	push	{r4, r5, r6, lr}
 8002f62:	460c      	mov	r4, r1
 8002f64:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002f68:	1f06      	subs	r6, r0, #4
 8002f6a:	ed2d 8b04 	vpush	{d8-d9}
 8002f6e:	ed93 8a00 	vldr	s16, [r3]
 8002f72:	1f0d      	subs	r5, r1, #4
 8002f74:	42a5      	cmp	r5, r4
 8002f76:	d32f      	bcc.n	8002fd8 <nl_func_elu_array_f32+0x7c>
 8002f78:	edd5 8a00 	vldr	s17, [r5]
 8002f7c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8002f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f84:	eeb0 0a68 	vmov.f32	s0, s17
 8002f88:	bf4c      	ite	mi
 8002f8a:	ed9f 9a6f 	vldrmi	s18, [pc, #444]	; 8003148 <.text_25>
 8002f8e:	eeb0 9a68 	vmovpl.f32	s18, s17
 8002f92:	f00d ff4d 	bl	8010e30 <expf>
 8002f96:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002f9a:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002f9e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002fa2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002faa:	dd05      	ble.n	8002fb8 <nl_func_elu_array_f32+0x5c>
 8002fac:	ed9f 1a66 	vldr	s2, [pc, #408]	; 8003148 <.text_25>
 8002fb0:	ee39 9a01 	vadd.f32	s18, s18, s2
 8002fb4:	e00a      	b.n	8002fcc <nl_func_elu_array_f32+0x70>
 8002fb6:	bf00      	nop
 8002fb8:	eeb0 0a68 	vmov.f32	s0, s17
 8002fbc:	f00d ff38 	bl	8010e30 <expf>
 8002fc0:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002fc4:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002fc8:	ee00 9a08 	vmla.f32	s18, s0, s16
 8002fcc:	ed86 9a00 	vstr	s18, [r6]
 8002fd0:	1f2d      	subs	r5, r5, #4
 8002fd2:	1f36      	subs	r6, r6, #4
 8002fd4:	42a5      	cmp	r5, r4
 8002fd6:	d2cf      	bcs.n	8002f78 <nl_func_elu_array_f32+0x1c>
 8002fd8:	ecbd 8b04 	vpop	{d8-d9}
 8002fdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08002fe0 <.text_21>:
 8002fe0:	00000001 	.word	0x00000001

08002fe4 <nl_func_selu_array_f32>:
 8002fe4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002fe8:	b570      	push	{r4, r5, r6, lr}
 8002fea:	460c      	mov	r4, r1
 8002fec:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002ff0:	1f06      	subs	r6, r0, #4
 8002ff2:	ed2d 8b04 	vpush	{d8-d9}
 8002ff6:	ed93 8a00 	vldr	s16, [r3]
 8002ffa:	1f0d      	subs	r5, r1, #4
 8002ffc:	42a5      	cmp	r5, r4
 8002ffe:	edd3 8a01 	vldr	s17, [r3, #4]
 8003002:	d331      	bcc.n	8003068 <nl_func_selu_array_f32+0x84>
 8003004:	ed95 9a00 	vldr	s18, [r5]
 8003008:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800300c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003010:	eeb0 0a49 	vmov.f32	s0, s18
 8003014:	bf4c      	ite	mi
 8003016:	eddf 9a4c 	vldrmi	s19, [pc, #304]	; 8003148 <.text_25>
 800301a:	eef0 9a49 	vmovpl.f32	s19, s18
 800301e:	f00d ff07 	bl	8010e30 <expf>
 8003022:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8003026:	ee30 0a20 	vadd.f32	s0, s0, s1
 800302a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800302e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003036:	dd05      	ble.n	8003044 <nl_func_selu_array_f32+0x60>
 8003038:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8003148 <.text_25>
 800303c:	ee79 9a81 	vadd.f32	s19, s19, s2
 8003040:	e00a      	b.n	8003058 <nl_func_selu_array_f32+0x74>
 8003042:	bf00      	nop
 8003044:	eeb0 0a49 	vmov.f32	s0, s18
 8003048:	f00d fef2 	bl	8010e30 <expf>
 800304c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8003050:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003054:	ee40 9a08 	vmla.f32	s19, s0, s16
 8003058:	ee28 0aa9 	vmul.f32	s0, s17, s19
 800305c:	1f2d      	subs	r5, r5, #4
 800305e:	ed86 0a00 	vstr	s0, [r6]
 8003062:	1f36      	subs	r6, r6, #4
 8003064:	42a5      	cmp	r5, r4
 8003066:	d2cd      	bcs.n	8003004 <nl_func_selu_array_f32+0x20>
 8003068:	ecbd 8b04 	vpop	{d8-d9}
 800306c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003070 <nl_func_prelu_array_f32>:
 8003070:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8003074:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8003078:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800307c:	1f1b      	subs	r3, r3, #4
 800307e:	f1ac 0c04 	sub.w	ip, ip, #4
 8003082:	1f00      	subs	r0, r0, #4
 8003084:	458c      	cmp	ip, r1
 8003086:	d320      	bcc.n	80030ca <nl_func_prelu_array_f32+0x5a>
 8003088:	ed9c 0a00 	vldr	s0, [ip]
 800308c:	461a      	mov	r2, r3
 800308e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003092:	f1ac 0c04 	sub.w	ip, ip, #4
 8003096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309a:	ed92 1a00 	vldr	s2, [r2]
 800309e:	bf4c      	ite	mi
 80030a0:	eddf 0a29 	vldrmi	s1, [pc, #164]	; 8003148 <.text_25>
 80030a4:	eef0 0a40 	vmovpl.f32	s1, s0
 80030a8:	eeb1 0a40 	vneg.f32	s0, s0
 80030ac:	1f13      	subs	r3, r2, #4
 80030ae:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80030b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b6:	bf48      	it	mi
 80030b8:	ed9f 0a23 	vldrmi	s0, [pc, #140]	; 8003148 <.text_25>
 80030bc:	ee41 0a40 	vmls.f32	s1, s2, s0
 80030c0:	edc0 0a00 	vstr	s1, [r0]
 80030c4:	1f00      	subs	r0, r0, #4
 80030c6:	458c      	cmp	ip, r1
 80030c8:	d2de      	bcs.n	8003088 <nl_func_prelu_array_f32+0x18>
 80030ca:	4770      	bx	lr

080030cc <forward_relu>:
 80030cc:	b470      	push	{r4, r5, r6}
 80030ce:	b081      	sub	sp, #4
 80030d0:	4602      	mov	r2, r0
 80030d2:	6950      	ldr	r0, [r2, #20]
 80030d4:	6992      	ldr	r2, [r2, #24]
 80030d6:	6800      	ldr	r0, [r0, #0]
 80030d8:	6801      	ldr	r1, [r0, #0]
 80030da:	68c4      	ldr	r4, [r0, #12]
 80030dc:	680d      	ldr	r5, [r1, #0]
 80030de:	6826      	ldr	r6, [r4, #0]
 80030e0:	686c      	ldr	r4, [r5, #4]
 80030e2:	68ab      	ldr	r3, [r5, #8]
 80030e4:	68e9      	ldr	r1, [r5, #12]
 80030e6:	6928      	ldr	r0, [r5, #16]
 80030e8:	6836      	ldr	r6, [r6, #0]
 80030ea:	435c      	muls	r4, r3
 80030ec:	434c      	muls	r4, r1
 80030ee:	6829      	ldr	r1, [r5, #0]
 80030f0:	4344      	muls	r4, r0
 80030f2:	68b0      	ldr	r0, [r6, #8]
 80030f4:	6889      	ldr	r1, [r1, #8]
 80030f6:	b9ca      	cbnz	r2, 800312c <forward_relu+0x60>
 80030f8:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 80030fc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8003100:	1f12      	subs	r2, r2, #4
 8003102:	1f00      	subs	r0, r0, #4
 8003104:	428a      	cmp	r2, r1
 8003106:	d31c      	bcc.n	8003142 <forward_relu+0x76>
 8003108:	ed92 0a00 	vldr	s0, [r2]
 800310c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003114:	bf48      	it	mi
 8003116:	ed9f 0a0c 	vldrmi	s0, [pc, #48]	; 8003148 <.text_25>
 800311a:	ed80 0a00 	vstr	s0, [r0]
 800311e:	1f12      	subs	r2, r2, #4
 8003120:	1f00      	subs	r0, r0, #4
 8003122:	428a      	cmp	r2, r1
 8003124:	d2f0      	bcs.n	8003108 <forward_relu+0x3c>
 8003126:	b001      	add	sp, #4
 8003128:	bc70      	pop	{r4, r5, r6}
 800312a:	4770      	bx	lr
 800312c:	6893      	ldr	r3, [r2, #8]
 800312e:	6852      	ldr	r2, [r2, #4]
 8003130:	2a01      	cmp	r2, #1
 8003132:	4622      	mov	r2, r4
 8003134:	d102      	bne.n	800313c <forward_relu+0x70>
 8003136:	b001      	add	sp, #4
 8003138:	bc70      	pop	{r4, r5, r6}
 800313a:	e6f5      	b.n	8002f28 <nl_func_relu_thresholded_array_f32>
 800313c:	b001      	add	sp, #4
 800313e:	bc70      	pop	{r4, r5, r6}
 8003140:	e698      	b.n	8002e74 <nl_func_relu_generic_array_f32>
 8003142:	b001      	add	sp, #4
 8003144:	bc70      	pop	{r4, r5, r6}
 8003146:	4770      	bx	lr

08003148 <.text_25>:
 8003148:	00000000 	.word	0x00000000

0800314c <forward_relu_thresholded>:
 800314c:	b470      	push	{r4, r5, r6}
 800314e:	6941      	ldr	r1, [r0, #20]
 8003150:	6980      	ldr	r0, [r0, #24]
 8003152:	680d      	ldr	r5, [r1, #0]
 8003154:	682a      	ldr	r2, [r5, #0]
 8003156:	68ed      	ldr	r5, [r5, #12]
 8003158:	6816      	ldr	r6, [r2, #0]
 800315a:	6874      	ldr	r4, [r6, #4]
 800315c:	68b3      	ldr	r3, [r6, #8]
 800315e:	68f2      	ldr	r2, [r6, #12]
 8003160:	6931      	ldr	r1, [r6, #16]
 8003162:	6836      	ldr	r6, [r6, #0]
 8003164:	435c      	muls	r4, r3
 8003166:	4354      	muls	r4, r2
 8003168:	6882      	ldr	r2, [r0, #8]
 800316a:	434c      	muls	r4, r1
 800316c:	68b1      	ldr	r1, [r6, #8]
 800316e:	ed92 0a00 	vldr	s0, [r2]
 8003172:	682a      	ldr	r2, [r5, #0]
 8003174:	eb01 0384 	add.w	r3, r1, r4, lsl #2
 8003178:	6816      	ldr	r6, [r2, #0]
 800317a:	1f18      	subs	r0, r3, #4
 800317c:	68b3      	ldr	r3, [r6, #8]
 800317e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8003182:	1f22      	subs	r2, r4, #4
 8003184:	4288      	cmp	r0, r1
 8003186:	d30e      	bcc.n	80031a6 <forward_relu_thresholded+0x5a>
 8003188:	edd0 0a00 	vldr	s1, [r0]
 800318c:	eef4 0a40 	vcmp.f32	s1, s0
 8003190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003194:	bf48      	it	mi
 8003196:	eddf 0ac4 	vldrmi	s1, [pc, #784]	; 80034a8 <.text_34>
 800319a:	edc2 0a00 	vstr	s1, [r2]
 800319e:	1f00      	subs	r0, r0, #4
 80031a0:	1f12      	subs	r2, r2, #4
 80031a2:	4288      	cmp	r0, r1
 80031a4:	d2f0      	bcs.n	8003188 <forward_relu_thresholded+0x3c>
 80031a6:	bc70      	pop	{r4, r5, r6}
 80031a8:	4770      	bx	lr
	...

080031ac <forward_elu>:
 80031ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ae:	b081      	sub	sp, #4
 80031b0:	ed2d 8b04 	vpush	{d8-d9}
 80031b4:	6941      	ldr	r1, [r0, #20]
 80031b6:	6980      	ldr	r0, [r0, #24]
 80031b8:	680f      	ldr	r7, [r1, #0]
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	6814      	ldr	r4, [r2, #0]
 80031be:	6865      	ldr	r5, [r4, #4]
 80031c0:	68a3      	ldr	r3, [r4, #8]
 80031c2:	68e2      	ldr	r2, [r4, #12]
 80031c4:	6921      	ldr	r1, [r4, #16]
 80031c6:	6824      	ldr	r4, [r4, #0]
 80031c8:	435d      	muls	r5, r3
 80031ca:	4355      	muls	r5, r2
 80031cc:	68a4      	ldr	r4, [r4, #8]
 80031ce:	434d      	muls	r5, r1
 80031d0:	6881      	ldr	r1, [r0, #8]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	eb04 0285 	add.w	r2, r4, r5, lsl #2
 80031d8:	ed91 8a00 	vldr	s16, [r1]
 80031dc:	6801      	ldr	r1, [r0, #0]
 80031de:	1f16      	subs	r6, r2, #4
 80031e0:	680b      	ldr	r3, [r1, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80031e8:	1f2d      	subs	r5, r5, #4
 80031ea:	42a6      	cmp	r6, r4
 80031ec:	f0c0 8030 	bcc.w	8003250 <forward_elu+0xa4>
 80031f0:	edd6 8a00 	vldr	s17, [r6]
 80031f4:	eef5 8a40 	vcmp.f32	s17, #0.0
 80031f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fc:	eeb0 0a68 	vmov.f32	s0, s17
 8003200:	bf4c      	ite	mi
 8003202:	ed9f 9aa9 	vldrmi	s18, [pc, #676]	; 80034a8 <.text_34>
 8003206:	eeb0 9a68 	vmovpl.f32	s18, s17
 800320a:	f00d fe11 	bl	8010e30 <expf>
 800320e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8003212:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003216:	ee20 0a08 	vmul.f32	s0, s0, s16
 800321a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800321e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003222:	dd05      	ble.n	8003230 <forward_elu+0x84>
 8003224:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 80034a8 <.text_34>
 8003228:	ee39 9a01 	vadd.f32	s18, s18, s2
 800322c:	e00a      	b.n	8003244 <forward_elu+0x98>
 800322e:	bf00      	nop
 8003230:	eeb0 0a68 	vmov.f32	s0, s17
 8003234:	f00d fdfc 	bl	8010e30 <expf>
 8003238:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800323c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003240:	ee00 9a08 	vmla.f32	s18, s0, s16
 8003244:	ed85 9a00 	vstr	s18, [r5]
 8003248:	1f36      	subs	r6, r6, #4
 800324a:	1f2d      	subs	r5, r5, #4
 800324c:	42a6      	cmp	r6, r4
 800324e:	d2cf      	bcs.n	80031f0 <forward_elu+0x44>
 8003250:	ecbd 8b04 	vpop	{d8-d9}
 8003254:	b001      	add	sp, #4
 8003256:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003258 <forward_selu>:
 8003258:	b470      	push	{r4, r5, r6}
 800325a:	b081      	sub	sp, #4
 800325c:	6941      	ldr	r1, [r0, #20]
 800325e:	6980      	ldr	r0, [r0, #24]
 8003260:	680d      	ldr	r5, [r1, #0]
 8003262:	682a      	ldr	r2, [r5, #0]
 8003264:	6883      	ldr	r3, [r0, #8]
 8003266:	6816      	ldr	r6, [r2, #0]
 8003268:	6872      	ldr	r2, [r6, #4]
 800326a:	68b4      	ldr	r4, [r6, #8]
 800326c:	68f1      	ldr	r1, [r6, #12]
 800326e:	6930      	ldr	r0, [r6, #16]
 8003270:	6836      	ldr	r6, [r6, #0]
 8003272:	4362      	muls	r2, r4
 8003274:	68ec      	ldr	r4, [r5, #12]
 8003276:	6825      	ldr	r5, [r4, #0]
 8003278:	434a      	muls	r2, r1
 800327a:	68b1      	ldr	r1, [r6, #8]
 800327c:	682e      	ldr	r6, [r5, #0]
 800327e:	4342      	muls	r2, r0
 8003280:	68b0      	ldr	r0, [r6, #8]
 8003282:	b001      	add	sp, #4
 8003284:	bc70      	pop	{r4, r5, r6}
 8003286:	e6ad      	b.n	8002fe4 <nl_func_selu_array_f32>

08003288 <forward_prelu>:
 8003288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800328c:	b081      	sub	sp, #4
 800328e:	6940      	ldr	r0, [r0, #20]
 8003290:	6800      	ldr	r0, [r0, #0]
 8003292:	6801      	ldr	r1, [r0, #0]
 8003294:	68c2      	ldr	r2, [r0, #12]
 8003296:	6980      	ldr	r0, [r0, #24]
 8003298:	6804      	ldr	r4, [r0, #0]
 800329a:	680d      	ldr	r5, [r1, #0]
 800329c:	6817      	ldr	r7, [r2, #0]
 800329e:	6820      	ldr	r0, [r4, #0]
 80032a0:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80032a4:	b12c      	cbz	r4, 80032b2 <forward_prelu+0x2a>
 80032a6:	6841      	ldr	r1, [r0, #4]
 80032a8:	6800      	ldr	r0, [r0, #0]
 80032aa:	f001 fc29 	bl	8004b00 <ai_array_get_byte_size>
 80032ae:	4681      	mov	r9, r0
 80032b0:	e001      	b.n	80032b6 <forward_prelu+0x2e>
 80032b2:	f04f 0901 	mov.w	r9, #1
 80032b6:	6828      	ldr	r0, [r5, #0]
 80032b8:	6841      	ldr	r1, [r0, #4]
 80032ba:	6800      	ldr	r0, [r0, #0]
 80032bc:	f001 fc20 	bl	8004b00 <ai_array_get_byte_size>
 80032c0:	6829      	ldr	r1, [r5, #0]
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	688e      	ldr	r6, [r1, #8]
 80032c6:	1837      	adds	r7, r6, r0
 80032c8:	42be      	cmp	r6, r7
 80032ca:	6895      	ldr	r5, [r2, #8]
 80032cc:	d211      	bcs.n	80032f2 <forward_prelu+0x6a>
 80032ce:	6862      	ldr	r2, [r4, #4]
 80032d0:	68a0      	ldr	r0, [r4, #8]
 80032d2:	68e1      	ldr	r1, [r4, #12]
 80032d4:	f8d4 c010 	ldr.w	ip, [r4, #16]
 80032d8:	4643      	mov	r3, r8
 80032da:	4342      	muls	r2, r0
 80032dc:	4628      	mov	r0, r5
 80032de:	444d      	add	r5, r9
 80032e0:	434a      	muls	r2, r1
 80032e2:	4631      	mov	r1, r6
 80032e4:	444e      	add	r6, r9
 80032e6:	fb0c f202 	mul.w	r2, ip, r2
 80032ea:	f7ff fec1 	bl	8003070 <nl_func_prelu_array_f32>
 80032ee:	42be      	cmp	r6, r7
 80032f0:	d3ed      	bcc.n	80032ce <forward_prelu+0x46>
 80032f2:	b001      	add	sp, #4
 80032f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080032f8 <forward_sign>:
 80032f8:	b470      	push	{r4, r5, r6}
 80032fa:	6940      	ldr	r0, [r0, #20]
 80032fc:	6803      	ldr	r3, [r0, #0]
 80032fe:	6819      	ldr	r1, [r3, #0]
 8003300:	680c      	ldr	r4, [r1, #0]
 8003302:	6865      	ldr	r5, [r4, #4]
 8003304:	68a2      	ldr	r2, [r4, #8]
 8003306:	68e1      	ldr	r1, [r4, #12]
 8003308:	6920      	ldr	r0, [r4, #16]
 800330a:	6824      	ldr	r4, [r4, #0]
 800330c:	4355      	muls	r5, r2
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	6813      	ldr	r3, [r2, #0]
 8003312:	434d      	muls	r5, r1
 8003314:	4345      	muls	r5, r0
 8003316:	68a0      	ldr	r0, [r4, #8]
 8003318:	681c      	ldr	r4, [r3, #0]
 800331a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800331e:	68a6      	ldr	r6, [r4, #8]
 8003320:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8003324:	1f09      	subs	r1, r1, #4
 8003326:	1f2a      	subs	r2, r5, #4
 8003328:	4281      	cmp	r1, r0
 800332a:	d314      	bcc.n	8003356 <forward_sign+0x5e>
 800332c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003330:	ed91 0a00 	vldr	s0, [r1]
 8003334:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333c:	bfcc      	ite	gt
 800333e:	ed9f 0a5b 	vldrgt	s0, [pc, #364]	; 80034ac <.text_35>
 8003342:	ee00 3a10 	vmovle	s0, r3
 8003346:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800334a:	1f09      	subs	r1, r1, #4
 800334c:	ed82 0a00 	vstr	s0, [r2]
 8003350:	1f12      	subs	r2, r2, #4
 8003352:	4281      	cmp	r1, r0
 8003354:	d2ec      	bcs.n	8003330 <forward_sign+0x38>
 8003356:	bc70      	pop	{r4, r5, r6}
 8003358:	4770      	bx	lr
	...

0800335c <forward_clip>:
 800335c:	b470      	push	{r4, r5, r6}
 800335e:	6941      	ldr	r1, [r0, #20]
 8003360:	6980      	ldr	r0, [r0, #24]
 8003362:	680d      	ldr	r5, [r1, #0]
 8003364:	682a      	ldr	r2, [r5, #0]
 8003366:	6816      	ldr	r6, [r2, #0]
 8003368:	6874      	ldr	r4, [r6, #4]
 800336a:	68b3      	ldr	r3, [r6, #8]
 800336c:	68f2      	ldr	r2, [r6, #12]
 800336e:	6931      	ldr	r1, [r6, #16]
 8003370:	435c      	muls	r4, r3
 8003372:	4354      	muls	r4, r2
 8003374:	6832      	ldr	r2, [r6, #0]
 8003376:	434c      	muls	r4, r1
 8003378:	6881      	ldr	r1, [r0, #8]
 800337a:	6890      	ldr	r0, [r2, #8]
 800337c:	68ea      	ldr	r2, [r5, #12]
 800337e:	6813      	ldr	r3, [r2, #0]
 8003380:	681d      	ldr	r5, [r3, #0]
 8003382:	ed91 0a00 	vldr	s0, [r1]
 8003386:	edd1 0a01 	vldr	s1, [r1, #4]
 800338a:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 800338e:	68ae      	ldr	r6, [r5, #8]
 8003390:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8003394:	1f09      	subs	r1, r1, #4
 8003396:	1f22      	subs	r2, r4, #4
 8003398:	4281      	cmp	r1, r0
 800339a:	d315      	bcc.n	80033c8 <forward_clip+0x6c>
 800339c:	ed91 1a00 	vldr	s2, [r1]
 80033a0:	eeb4 0a41 	vcmp.f32	s0, s2
 80033a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a8:	bf58      	it	pl
 80033aa:	eeb0 1a40 	vmovpl.f32	s2, s0
 80033ae:	eeb4 1a60 	vcmp.f32	s2, s1
 80033b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b6:	bf58      	it	pl
 80033b8:	eeb0 1a60 	vmovpl.f32	s2, s1
 80033bc:	ed82 1a00 	vstr	s2, [r2]
 80033c0:	1f09      	subs	r1, r1, #4
 80033c2:	1f12      	subs	r2, r2, #4
 80033c4:	4281      	cmp	r1, r0
 80033c6:	d2e9      	bcs.n	800339c <forward_clip+0x40>
 80033c8:	bc70      	pop	{r4, r5, r6}
 80033ca:	4770      	bx	lr

080033cc <forward_sigmoid>:
 80033cc:	b570      	push	{r4, r5, r6, lr}
 80033ce:	6940      	ldr	r0, [r0, #20]
 80033d0:	6803      	ldr	r3, [r0, #0]
 80033d2:	6819      	ldr	r1, [r3, #0]
 80033d4:	680c      	ldr	r4, [r1, #0]
 80033d6:	6866      	ldr	r6, [r4, #4]
 80033d8:	68a2      	ldr	r2, [r4, #8]
 80033da:	68e1      	ldr	r1, [r4, #12]
 80033dc:	6920      	ldr	r0, [r4, #16]
 80033de:	6824      	ldr	r4, [r4, #0]
 80033e0:	4356      	muls	r6, r2
 80033e2:	434e      	muls	r6, r1
 80033e4:	68a4      	ldr	r4, [r4, #8]
 80033e6:	4346      	muls	r6, r0
 80033e8:	68d8      	ldr	r0, [r3, #12]
 80033ea:	eb04 0186 	add.w	r1, r4, r6, lsl #2
 80033ee:	6802      	ldr	r2, [r0, #0]
 80033f0:	6813      	ldr	r3, [r2, #0]
 80033f2:	1f0d      	subs	r5, r1, #4
 80033f4:	6899      	ldr	r1, [r3, #8]
 80033f6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80033fa:	1f36      	subs	r6, r6, #4
 80033fc:	42a5      	cmp	r5, r4
 80033fe:	d313      	bcc.n	8003428 <forward_sigmoid+0x5c>
 8003400:	ed95 0a00 	vldr	s0, [r5]
 8003404:	1f2d      	subs	r5, r5, #4
 8003406:	eeb1 0a40 	vneg.f32	s0, s0
 800340a:	f00d fd11 	bl	8010e30 <expf>
 800340e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003412:	ee70 0a20 	vadd.f32	s1, s0, s1
 8003416:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800341a:	ee81 1a20 	vdiv.f32	s2, s2, s1
 800341e:	ed86 1a00 	vstr	s2, [r6]
 8003422:	1f36      	subs	r6, r6, #4
 8003424:	42a5      	cmp	r5, r4
 8003426:	d2eb      	bcs.n	8003400 <forward_sigmoid+0x34>
 8003428:	bd70      	pop	{r4, r5, r6, pc}
	...

0800342c <forward_hard_sigmoid>:
 800342c:	b470      	push	{r4, r5, r6}
 800342e:	6940      	ldr	r0, [r0, #20]
 8003430:	6803      	ldr	r3, [r0, #0]
 8003432:	6819      	ldr	r1, [r3, #0]
 8003434:	680c      	ldr	r4, [r1, #0]
 8003436:	6865      	ldr	r5, [r4, #4]
 8003438:	68a2      	ldr	r2, [r4, #8]
 800343a:	68e1      	ldr	r1, [r4, #12]
 800343c:	6920      	ldr	r0, [r4, #16]
 800343e:	6824      	ldr	r4, [r4, #0]
 8003440:	4355      	muls	r5, r2
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	6813      	ldr	r3, [r2, #0]
 8003446:	434d      	muls	r5, r1
 8003448:	4345      	muls	r5, r0
 800344a:	68a0      	ldr	r0, [r4, #8]
 800344c:	681c      	ldr	r4, [r3, #0]
 800344e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003452:	68a6      	ldr	r6, [r4, #8]
 8003454:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8003458:	1f09      	subs	r1, r1, #4
 800345a:	1f2a      	subs	r2, r5, #4
 800345c:	4281      	cmp	r1, r0
 800345e:	d321      	bcc.n	80034a4 <forward_hard_sigmoid+0x78>
 8003460:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003464:	eddf 0a12 	vldr	s1, [pc, #72]	; 80034b0 <.text_36>
 8003468:	edd1 1a00 	vldr	s3, [r1]
 800346c:	ed9f 2a11 	vldr	s4, [pc, #68]	; 80034b4 <.text_37>
 8003470:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8003474:	ee01 1a82 	vmla.f32	s2, s3, s4
 8003478:	eeb4 1a60 	vcmp.f32	s2, s1
 800347c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003480:	da08      	bge.n	8003494 <forward_hard_sigmoid+0x68>
 8003482:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8003486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348a:	d505      	bpl.n	8003498 <forward_hard_sigmoid+0x6c>
 800348c:	ed9f 1a06 	vldr	s2, [pc, #24]	; 80034a8 <.text_34>
 8003490:	e002      	b.n	8003498 <forward_hard_sigmoid+0x6c>
 8003492:	bf00      	nop
 8003494:	eeb0 1a40 	vmov.f32	s2, s0
 8003498:	ed82 1a00 	vstr	s2, [r2]
 800349c:	1f09      	subs	r1, r1, #4
 800349e:	1f12      	subs	r2, r2, #4
 80034a0:	4281      	cmp	r1, r0
 80034a2:	d2e1      	bcs.n	8003468 <forward_hard_sigmoid+0x3c>
 80034a4:	bc70      	pop	{r4, r5, r6}
 80034a6:	4770      	bx	lr

080034a8 <.text_34>:
 80034a8:	00000000 	.word	0x00000000

080034ac <.text_35>:
 80034ac:	00000001 	.word	0x00000001

080034b0 <.text_36>:
 80034b0:	3f800001 	.word	0x3f800001

080034b4 <.text_37>:
 80034b4:	3e4ccccd 	.word	0x3e4ccccd

080034b8 <forward_exp>:
 80034b8:	b570      	push	{r4, r5, r6, lr}
 80034ba:	6940      	ldr	r0, [r0, #20]
 80034bc:	6803      	ldr	r3, [r0, #0]
 80034be:	6819      	ldr	r1, [r3, #0]
 80034c0:	680c      	ldr	r4, [r1, #0]
 80034c2:	6866      	ldr	r6, [r4, #4]
 80034c4:	68a2      	ldr	r2, [r4, #8]
 80034c6:	68e1      	ldr	r1, [r4, #12]
 80034c8:	6920      	ldr	r0, [r4, #16]
 80034ca:	6824      	ldr	r4, [r4, #0]
 80034cc:	4356      	muls	r6, r2
 80034ce:	434e      	muls	r6, r1
 80034d0:	68a4      	ldr	r4, [r4, #8]
 80034d2:	4346      	muls	r6, r0
 80034d4:	68d8      	ldr	r0, [r3, #12]
 80034d6:	eb04 0186 	add.w	r1, r4, r6, lsl #2
 80034da:	6802      	ldr	r2, [r0, #0]
 80034dc:	6813      	ldr	r3, [r2, #0]
 80034de:	1f0d      	subs	r5, r1, #4
 80034e0:	6899      	ldr	r1, [r3, #8]
 80034e2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80034e6:	1f36      	subs	r6, r6, #4
 80034e8:	42a5      	cmp	r5, r4
 80034ea:	d309      	bcc.n	8003500 <forward_exp+0x48>
 80034ec:	ed95 0a00 	vldr	s0, [r5]
 80034f0:	1f2d      	subs	r5, r5, #4
 80034f2:	f00d fc9d 	bl	8010e30 <expf>
 80034f6:	ed86 0a00 	vstr	s0, [r6]
 80034fa:	1f36      	subs	r6, r6, #4
 80034fc:	42a5      	cmp	r5, r4
 80034fe:	d2f5      	bcs.n	80034ec <forward_exp+0x34>
 8003500:	bd70      	pop	{r4, r5, r6, pc}
	...

08003504 <forward_sqrt>:
 8003504:	b570      	push	{r4, r5, r6, lr}
 8003506:	6940      	ldr	r0, [r0, #20]
 8003508:	6803      	ldr	r3, [r0, #0]
 800350a:	6819      	ldr	r1, [r3, #0]
 800350c:	680c      	ldr	r4, [r1, #0]
 800350e:	6866      	ldr	r6, [r4, #4]
 8003510:	68a2      	ldr	r2, [r4, #8]
 8003512:	68e1      	ldr	r1, [r4, #12]
 8003514:	6920      	ldr	r0, [r4, #16]
 8003516:	6824      	ldr	r4, [r4, #0]
 8003518:	4356      	muls	r6, r2
 800351a:	434e      	muls	r6, r1
 800351c:	68a4      	ldr	r4, [r4, #8]
 800351e:	4346      	muls	r6, r0
 8003520:	68d8      	ldr	r0, [r3, #12]
 8003522:	eb04 0186 	add.w	r1, r4, r6, lsl #2
 8003526:	6802      	ldr	r2, [r0, #0]
 8003528:	6813      	ldr	r3, [r2, #0]
 800352a:	1f0d      	subs	r5, r1, #4
 800352c:	6899      	ldr	r1, [r3, #8]
 800352e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8003532:	1f36      	subs	r6, r6, #4
 8003534:	42a5      	cmp	r5, r4
 8003536:	d309      	bcc.n	800354c <forward_sqrt+0x48>
 8003538:	ed95 0a00 	vldr	s0, [r5]
 800353c:	1f2d      	subs	r5, r5, #4
 800353e:	f001 fc35 	bl	8004dac <ai_math_sqrt>
 8003542:	ed86 0a00 	vstr	s0, [r6]
 8003546:	1f36      	subs	r6, r6, #4
 8003548:	42a5      	cmp	r5, r4
 800354a:	d2f5      	bcs.n	8003538 <forward_sqrt+0x34>
 800354c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003550 <forward_soft_plus>:
 8003550:	b570      	push	{r4, r5, r6, lr}
 8003552:	6940      	ldr	r0, [r0, #20]
 8003554:	6803      	ldr	r3, [r0, #0]
 8003556:	6819      	ldr	r1, [r3, #0]
 8003558:	680c      	ldr	r4, [r1, #0]
 800355a:	6866      	ldr	r6, [r4, #4]
 800355c:	68a2      	ldr	r2, [r4, #8]
 800355e:	68e1      	ldr	r1, [r4, #12]
 8003560:	6920      	ldr	r0, [r4, #16]
 8003562:	6824      	ldr	r4, [r4, #0]
 8003564:	4356      	muls	r6, r2
 8003566:	434e      	muls	r6, r1
 8003568:	68a4      	ldr	r4, [r4, #8]
 800356a:	4346      	muls	r6, r0
 800356c:	68d8      	ldr	r0, [r3, #12]
 800356e:	eb04 0186 	add.w	r1, r4, r6, lsl #2
 8003572:	6802      	ldr	r2, [r0, #0]
 8003574:	6813      	ldr	r3, [r2, #0]
 8003576:	1f0d      	subs	r5, r1, #4
 8003578:	6899      	ldr	r1, [r3, #8]
 800357a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800357e:	1f36      	subs	r6, r6, #4
 8003580:	42a5      	cmp	r5, r4
 8003582:	d30f      	bcc.n	80035a4 <forward_soft_plus+0x54>
 8003584:	ed95 0a00 	vldr	s0, [r5]
 8003588:	1f2d      	subs	r5, r5, #4
 800358a:	f00d fc51 	bl	8010e30 <expf>
 800358e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003592:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003596:	f00d fcc5 	bl	8010f24 <logf>
 800359a:	ed86 0a00 	vstr	s0, [r6]
 800359e:	1f36      	subs	r6, r6, #4
 80035a0:	42a5      	cmp	r5, r4
 80035a2:	d2ef      	bcs.n	8003584 <forward_soft_plus+0x34>
 80035a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080035a8 <forward_soft_sign>:
 80035a8:	b470      	push	{r4, r5, r6}
 80035aa:	6940      	ldr	r0, [r0, #20]
 80035ac:	6803      	ldr	r3, [r0, #0]
 80035ae:	6819      	ldr	r1, [r3, #0]
 80035b0:	680c      	ldr	r4, [r1, #0]
 80035b2:	6865      	ldr	r5, [r4, #4]
 80035b4:	68a2      	ldr	r2, [r4, #8]
 80035b6:	68e1      	ldr	r1, [r4, #12]
 80035b8:	6920      	ldr	r0, [r4, #16]
 80035ba:	6824      	ldr	r4, [r4, #0]
 80035bc:	4355      	muls	r5, r2
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	6813      	ldr	r3, [r2, #0]
 80035c2:	434d      	muls	r5, r1
 80035c4:	4345      	muls	r5, r0
 80035c6:	68a0      	ldr	r0, [r4, #8]
 80035c8:	681c      	ldr	r4, [r3, #0]
 80035ca:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80035ce:	68a6      	ldr	r6, [r4, #8]
 80035d0:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80035d4:	1f09      	subs	r1, r1, #4
 80035d6:	1f2a      	subs	r2, r5, #4
 80035d8:	4281      	cmp	r1, r0
 80035da:	d30f      	bcc.n	80035fc <forward_soft_sign+0x54>
 80035dc:	ed91 0a00 	vldr	s0, [r1]
 80035e0:	1f09      	subs	r1, r1, #4
 80035e2:	eef0 0ac0 	vabs.f32	s1, s0
 80035e6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80035ea:	ee70 0a81 	vadd.f32	s1, s1, s2
 80035ee:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80035f2:	ed82 0a00 	vstr	s0, [r2]
 80035f6:	1f12      	subs	r2, r2, #4
 80035f8:	4281      	cmp	r1, r0
 80035fa:	d2ef      	bcs.n	80035dc <forward_soft_sign+0x34>
 80035fc:	bc70      	pop	{r4, r5, r6}
 80035fe:	4770      	bx	lr

08003600 <forward_tanh>:
 8003600:	b570      	push	{r4, r5, r6, lr}
 8003602:	6940      	ldr	r0, [r0, #20]
 8003604:	6803      	ldr	r3, [r0, #0]
 8003606:	6819      	ldr	r1, [r3, #0]
 8003608:	680c      	ldr	r4, [r1, #0]
 800360a:	6866      	ldr	r6, [r4, #4]
 800360c:	68a2      	ldr	r2, [r4, #8]
 800360e:	68e1      	ldr	r1, [r4, #12]
 8003610:	6920      	ldr	r0, [r4, #16]
 8003612:	6824      	ldr	r4, [r4, #0]
 8003614:	4356      	muls	r6, r2
 8003616:	434e      	muls	r6, r1
 8003618:	68a4      	ldr	r4, [r4, #8]
 800361a:	4346      	muls	r6, r0
 800361c:	68d8      	ldr	r0, [r3, #12]
 800361e:	eb04 0186 	add.w	r1, r4, r6, lsl #2
 8003622:	6802      	ldr	r2, [r0, #0]
 8003624:	6813      	ldr	r3, [r2, #0]
 8003626:	1f0d      	subs	r5, r1, #4
 8003628:	6899      	ldr	r1, [r3, #8]
 800362a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800362e:	1f36      	subs	r6, r6, #4
 8003630:	42a5      	cmp	r5, r4
 8003632:	d309      	bcc.n	8003648 <forward_tanh+0x48>
 8003634:	ed95 0a00 	vldr	s0, [r5]
 8003638:	1f2d      	subs	r5, r5, #4
 800363a:	f00d fba7 	bl	8010d8c <tanhf>
 800363e:	ed86 0a00 	vstr	s0, [r6]
 8003642:	1f36      	subs	r6, r6, #4
 8003644:	42a5      	cmp	r5, r4
 8003646:	d2f5      	bcs.n	8003634 <forward_tanh+0x34>
 8003648:	bd70      	pop	{r4, r5, r6, pc}

0800364a <forward_sm>:
 800364a:	b570      	push	{r4, r5, r6, lr}
 800364c:	b082      	sub	sp, #8
 800364e:	6940      	ldr	r0, [r0, #20]
 8003650:	6800      	ldr	r0, [r0, #0]
 8003652:	6801      	ldr	r1, [r0, #0]
 8003654:	68c2      	ldr	r2, [r0, #12]
 8003656:	680c      	ldr	r4, [r1, #0]
 8003658:	6815      	ldr	r5, [r2, #0]
 800365a:	68a2      	ldr	r2, [r4, #8]
 800365c:	68a8      	ldr	r0, [r5, #8]
 800365e:	9200      	str	r2, [sp, #0]
 8003660:	9001      	str	r0, [sp, #4]
 8003662:	6866      	ldr	r6, [r4, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	68e1      	ldr	r1, [r4, #12]
 8003668:	6920      	ldr	r0, [r4, #16]
 800366a:	6824      	ldr	r4, [r4, #0]
 800366c:	4372      	muls	r2, r6
 800366e:	682d      	ldr	r5, [r5, #0]
 8003670:	434a      	muls	r2, r1
 8003672:	68a1      	ldr	r1, [r4, #8]
 8003674:	4342      	muls	r2, r0
 8003676:	68a8      	ldr	r0, [r5, #8]
 8003678:	f7ff fa46 	bl	8002b08 <nl_func_sm_array_f32>
 800367c:	b002      	add	sp, #8
 800367e:	bd70      	pop	{r4, r5, r6, pc}

08003680 <forward_hardmax>:
 8003680:	b470      	push	{r4, r5, r6}
 8003682:	b081      	sub	sp, #4
 8003684:	6941      	ldr	r1, [r0, #20]
 8003686:	6980      	ldr	r0, [r0, #24]
 8003688:	680c      	ldr	r4, [r1, #0]
 800368a:	6822      	ldr	r2, [r4, #0]
 800368c:	68e4      	ldr	r4, [r4, #12]
 800368e:	6883      	ldr	r3, [r0, #8]
 8003690:	6811      	ldr	r1, [r2, #0]
 8003692:	6826      	ldr	r6, [r4, #0]
 8003694:	680d      	ldr	r5, [r1, #0]
 8003696:	1d0a      	adds	r2, r1, #4
 8003698:	68a9      	ldr	r1, [r5, #8]
 800369a:	6835      	ldr	r5, [r6, #0]
 800369c:	68a8      	ldr	r0, [r5, #8]
 800369e:	b001      	add	sp, #4
 80036a0:	bc70      	pop	{r4, r5, r6}
 80036a2:	f7ff bb5b 	b.w	8002d5c <nl_func_hardmax_array_f32>
	...

080036a8 <pool_func_mp_array_f32>:
 80036a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ac:	469e      	mov	lr, r3
 80036ae:	4689      	mov	r9, r1
 80036b0:	b086      	sub	sp, #24
 80036b2:	4692      	mov	sl, r2
 80036b4:	f9bd 6058 	ldrsh.w	r6, [sp, #88]	; 0x58
 80036b8:	f9bd 7050 	ldrsh.w	r7, [sp, #80]	; 0x50
 80036bc:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 80036c0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80036c2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80036c4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80036c6:	6880      	ldr	r0, [r0, #8]
 80036c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80036ca:	9004      	str	r0, [sp, #16]
 80036cc:	1e70      	subs	r0, r6, #1
 80036ce:	fb10 f707 	smulbb	r7, r0, r7
 80036d2:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 80036d6:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 80036da:	6889      	ldr	r1, [r1, #8]
 80036dc:	1aff      	subs	r7, r7, r3
 80036de:	19c7      	adds	r7, r0, r7
 80036e0:	1e78      	subs	r0, r7, #1
 80036e2:	eba0 000a 	sub.w	r0, r0, sl
 80036e6:	432e      	orrs	r6, r5
 80036e8:	f040 80d7 	bne.w	800389a <pool_func_mp_array_f32+0x1f2>
 80036ec:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
 80036f0:	1e5f      	subs	r7, r3, #1
 80036f2:	fb17 f702 	smulbb	r7, r7, r2
 80036f6:	1b7f      	subs	r7, r7, r5
 80036f8:	19e7      	adds	r7, r4, r7
 80036fa:	1e7e      	subs	r6, r7, #1
 80036fc:	eba6 0609 	sub.w	r6, r6, r9
 8003700:	b236      	sxth	r6, r6
 8003702:	2e00      	cmp	r6, #0
 8003704:	bf44      	itt	mi
 8003706:	b200      	sxthmi	r0, r0
 8003708:	2800      	cmpmi	r0, #0
 800370a:	f140 80c6 	bpl.w	800389a <pool_func_mp_array_f32+0x1f2>
 800370e:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 8003712:	2700      	movs	r7, #0
 8003714:	ed9f 0ac5 	vldr	s0, [pc, #788]	; 8003a2c <.text_3>
 8003718:	f1b0 0f00 	cmp.w	r0, #0
 800371c:	f000 8183 	beq.w	8003a26 <pool_func_mp_array_f32+0x37e>
 8003720:	f9bd 5050 	ldrsh.w	r5, [sp, #80]	; 0x50
 8003724:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8003728:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 800372c:	f04f 0c00 	mov.w	ip, #0
 8003730:	fb15 3507 	smlabb	r5, r5, r7, r3
 8003734:	2800      	cmp	r0, #0
 8003736:	b22d      	sxth	r5, r5
 8003738:	f000 80a7 	beq.w	800388a <pool_func_mp_array_f32+0x1e2>
 800373c:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
 8003740:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 8003744:	f8cd 700c 	str.w	r7, [sp, #12]
 8003748:	f8cd c004 	str.w	ip, [sp, #4]
 800374c:	f8ad e000 	strh.w	lr, [sp]
 8003750:	f8bd e054 	ldrh.w	lr, [sp, #84]	; 0x54
 8003754:	9f01      	ldr	r7, [sp, #4]
 8003756:	f8bd 6000 	ldrh.w	r6, [sp]
 800375a:	f9bd 004c 	ldrsh.w	r0, [sp, #76]	; 0x4c
 800375e:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8003762:	f8dd c004 	ldr.w	ip, [sp, #4]
 8003766:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800376a:	2300      	movs	r3, #0
 800376c:	fb00 2c0c 	mla	ip, r0, ip, r2
 8003770:	9a03      	ldr	r2, [sp, #12]
 8003772:	fb0e 7702 	mla	r7, lr, r2, r7
 8003776:	f8bd 2000 	ldrh.w	r2, [sp]
 800377a:	437e      	muls	r6, r7
 800377c:	9605      	str	r6, [sp, #20]
 800377e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8003782:	fa0f fc8c 	sxth.w	ip, ip
 8003786:	2a00      	cmp	r2, #0
 8003788:	fb06 f808 	mul.w	r8, r6, r8
 800378c:	fa0f f888 	sxth.w	r8, r8
 8003790:	d06a      	beq.n	8003868 <pool_func_mp_array_f32+0x1c0>
 8003792:	9102      	str	r1, [sp, #8]
 8003794:	f8dd 600c 	ldr.w	r6, [sp, #12]
 8003798:	f8ad 9002 	strh.w	r9, [sp, #2]
 800379c:	f8bd e000 	ldrh.w	lr, [sp]
 80037a0:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
 80037a4:	eef0 0a40 	vmov.f32	s1, s0
 80037a8:	4371      	muls	r1, r6
 80037aa:	b209      	sxth	r1, r1
 80037ac:	460a      	mov	r2, r1
 80037ae:	42aa      	cmp	r2, r5
 80037b0:	9103      	str	r1, [sp, #12]
 80037b2:	da48      	bge.n	8003846 <pool_func_mp_array_f32+0x19e>
 80037b4:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80037b8:	eba5 0902 	sub.w	r9, r5, r2
 80037bc:	9a04      	ldr	r2, [sp, #16]
 80037be:	4379      	muls	r1, r7
 80037c0:	45e0      	cmp	r8, ip
 80037c2:	4644      	mov	r4, r8
 80037c4:	da3a      	bge.n	800383c <pool_func_mp_array_f32+0x194>
 80037c6:	ebac 0008 	sub.w	r0, ip, r8
 80037ca:	ea5f 7ac0 	movs.w	sl, r0, lsl #31
 80037ce:	d510      	bpl.n	80037f2 <pool_func_mp_array_f32+0x14a>
 80037d0:	46f2      	mov	sl, lr
 80037d2:	eb01 0b04 	add.w	fp, r1, r4
 80037d6:	fb0b 3a0a 	mla	sl, fp, sl, r3
 80037da:	eb02 0b8a 	add.w	fp, r2, sl, lsl #2
 80037de:	ed9b 1a00 	vldr	s2, [fp]
 80037e2:	eeb4 1a60 	vcmp.f32	s2, s1
 80037e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ea:	bf58      	it	pl
 80037ec:	eef0 0a41 	vmovpl.f32	s1, s2
 80037f0:	1c64      	adds	r4, r4, #1
 80037f2:	0840      	lsrs	r0, r0, #1
 80037f4:	d022      	beq.n	800383c <pool_func_mp_array_f32+0x194>
 80037f6:	46f2      	mov	sl, lr
 80037f8:	eb01 0b04 	add.w	fp, r1, r4
 80037fc:	fb0b 3b0a 	mla	fp, fp, sl, r3
 8003800:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8003804:	ed9b 1a00 	vldr	s2, [fp]
 8003808:	eeb4 1a60 	vcmp.f32	s2, s1
 800380c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003810:	bf58      	it	pl
 8003812:	eef0 0a41 	vmovpl.f32	s1, s2
 8003816:	1c64      	adds	r4, r4, #1
 8003818:	eb01 0b04 	add.w	fp, r1, r4
 800381c:	fb0b 3a0a 	mla	sl, fp, sl, r3
 8003820:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8003824:	ed9a 1a00 	vldr	s2, [sl]
 8003828:	eeb4 1a60 	vcmp.f32	s2, s1
 800382c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003830:	bf58      	it	pl
 8003832:	eef0 0a41 	vmovpl.f32	s1, s2
 8003836:	1c64      	adds	r4, r4, #1
 8003838:	1e40      	subs	r0, r0, #1
 800383a:	d1dc      	bne.n	80037f6 <pool_func_mp_array_f32+0x14e>
 800383c:	1879      	adds	r1, r7, r1
 800383e:	f1b9 0901 	subs.w	r9, r9, #1
 8003842:	d1bd      	bne.n	80037c0 <pool_func_mp_array_f32+0x118>
 8003844:	9204      	str	r2, [sp, #16]
 8003846:	9a05      	ldr	r2, [sp, #20]
 8003848:	9902      	ldr	r1, [sp, #8]
 800384a:	18d2      	adds	r2, r2, r3
 800384c:	1c5b      	adds	r3, r3, #1
 800384e:	eb01 0982 	add.w	r9, r1, r2, lsl #2
 8003852:	b21b      	sxth	r3, r3
 8003854:	4573      	cmp	r3, lr
 8003856:	edc9 0a00 	vstr	s1, [r9]
 800385a:	dba1      	blt.n	80037a0 <pool_func_mp_array_f32+0xf8>
 800385c:	9902      	ldr	r1, [sp, #8]
 800385e:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 8003862:	9603      	str	r6, [sp, #12]
 8003864:	f8ad e000 	strh.w	lr, [sp]
 8003868:	9a01      	ldr	r2, [sp, #4]
 800386a:	1c52      	adds	r2, r2, #1
 800386c:	b212      	sxth	r2, r2
 800386e:	9201      	str	r2, [sp, #4]
 8003870:	4610      	mov	r0, r2
 8003872:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8003876:	4290      	cmp	r0, r2
 8003878:	f6ff af6a 	blt.w	8003750 <pool_func_mp_array_f32+0xa8>
 800387c:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
 8003880:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8003884:	9f03      	ldr	r7, [sp, #12]
 8003886:	f8bd e000 	ldrh.w	lr, [sp]
 800388a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800388e:	1c7f      	adds	r7, r7, #1
 8003890:	b23f      	sxth	r7, r7
 8003892:	429f      	cmp	r7, r3
 8003894:	f280 80c7 	bge.w	8003a26 <pool_func_mp_array_f32+0x37e>
 8003898:	e742      	b.n	8003720 <pool_func_mp_array_f32+0x78>
 800389a:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 800389e:	f04f 0c00 	mov.w	ip, #0
 80038a2:	464b      	mov	r3, r9
 80038a4:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8003a2c <.text_3>
 80038a8:	f1b0 0f00 	cmp.w	r0, #0
 80038ac:	f000 80bb 	beq.w	8003a26 <pool_func_mp_array_f32+0x37e>
 80038b0:	f9bd 9050 	ldrsh.w	r9, [sp, #80]	; 0x50
 80038b4:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 80038b8:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	; 0x40
 80038bc:	f04f 0800 	mov.w	r8, #0
 80038c0:	fb1c f709 	smulbb	r7, ip, r9
 80038c4:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
 80038c8:	eba7 0909 	sub.w	r9, r7, r9
 80038cc:	2800      	cmp	r0, #0
 80038ce:	44b1      	add	r9, r6
 80038d0:	fa0f f989 	sxth.w	r9, r9
 80038d4:	f000 809e 	beq.w	8003a14 <pool_func_mp_array_f32+0x36c>
 80038d8:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
 80038dc:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 80038e0:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 80038e4:	f8cd c00c 	str.w	ip, [sp, #12]
 80038e8:	f8cd 8004 	str.w	r8, [sp, #4]
 80038ec:	f8ad e000 	strh.w	lr, [sp]
 80038f0:	f9bd 004c 	ldrsh.w	r0, [sp, #76]	; 0x4c
 80038f4:	9d01      	ldr	r5, [sp, #4]
 80038f6:	f8bd 8054 	ldrh.w	r8, [sp, #84]	; 0x54
 80038fa:	f8dd c004 	ldr.w	ip, [sp, #4]
 80038fe:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8003902:	f8bd 7000 	ldrh.w	r7, [sp]
 8003906:	fb15 f200 	smulbb	r2, r5, r0
 800390a:	f9bd 0044 	ldrsh.w	r0, [sp, #68]	; 0x44
 800390e:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 8003912:	fb08 cc0e 	mla	ip, r8, lr, ip
 8003916:	1a10      	subs	r0, r2, r0
 8003918:	1828      	adds	r0, r5, r0
 800391a:	f8bd 5000 	ldrh.w	r5, [sp]
 800391e:	fb0c f707 	mul.w	r7, ip, r7
 8003922:	b200      	sxth	r0, r0
 8003924:	9705      	str	r7, [sp, #20]
 8003926:	2d00      	cmp	r5, #0
 8003928:	d060      	beq.n	80039ec <pool_func_mp_array_f32+0x344>
 800392a:	9102      	str	r1, [sp, #8]
 800392c:	2100      	movs	r1, #0
 800392e:	9c03      	ldr	r4, [sp, #12]
 8003930:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	; 0x50
 8003934:	eef0 0a40 	vmov.f32	s1, s0
 8003938:	fb14 f502 	smulbb	r5, r4, r2
 800393c:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 8003940:	1aaa      	subs	r2, r5, r2
 8003942:	b212      	sxth	r2, r2
 8003944:	454a      	cmp	r2, r9
 8003946:	da42      	bge.n	80039ce <pool_func_mp_array_f32+0x326>
 8003948:	fb03 f802 	mul.w	r8, r3, r2
 800394c:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 8003950:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8003954:	f8dd 7004 	ldr.w	r7, [sp, #4]
 8003958:	fb17 fe06 	smulbb	lr, r7, r6
 800395c:	ebae 0e05 	sub.w	lr, lr, r5
 8003960:	fa0f fc8e 	sxth.w	ip, lr
 8003964:	fa0f fe8e 	sxth.w	lr, lr
 8003968:	4586      	cmp	lr, r0
 800396a:	da27      	bge.n	80039bc <pool_func_mp_array_f32+0x314>
 800396c:	f8dd e010 	ldr.w	lr, [sp, #16]
 8003970:	f8ad a002 	strh.w	sl, [sp, #2]
 8003974:	2a00      	cmp	r2, #0
 8003976:	bf58      	it	pl
 8003978:	f1bc 0f00 	cmppl.w	ip, #0
 800397c:	d416      	bmi.n	80039ac <pool_func_mp_array_f32+0x304>
 800397e:	f8bd a002 	ldrh.w	sl, [sp, #2]
 8003982:	4552      	cmp	r2, sl
 8003984:	bfb8      	it	lt
 8003986:	459c      	cmplt	ip, r3
 8003988:	da10      	bge.n	80039ac <pool_func_mp_array_f32+0x304>
 800398a:	f8bd a000 	ldrh.w	sl, [sp]
 800398e:	eb08 0b0c 	add.w	fp, r8, ip
 8003992:	fb0b 1a0a 	mla	sl, fp, sl, r1
 8003996:	eb0e 0a8a 	add.w	sl, lr, sl, lsl #2
 800399a:	ed9a 1a00 	vldr	s2, [sl]
 800399e:	eeb4 1a60 	vcmp.f32	s2, s1
 80039a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a6:	bf58      	it	pl
 80039a8:	eef0 0a41 	vmovpl.f32	s1, s2
 80039ac:	f10c 0c01 	add.w	ip, ip, #1
 80039b0:	4584      	cmp	ip, r0
 80039b2:	dbdf      	blt.n	8003974 <pool_func_mp_array_f32+0x2cc>
 80039b4:	f8cd e010 	str.w	lr, [sp, #16]
 80039b8:	f8bd a002 	ldrh.w	sl, [sp, #2]
 80039bc:	1c52      	adds	r2, r2, #1
 80039be:	454a      	cmp	r2, r9
 80039c0:	4498      	add	r8, r3
 80039c2:	dbc9      	blt.n	8003958 <pool_func_mp_array_f32+0x2b0>
 80039c4:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 80039c8:	f8ad 604c 	strh.w	r6, [sp, #76]	; 0x4c
 80039cc:	9701      	str	r7, [sp, #4]
 80039ce:	9d05      	ldr	r5, [sp, #20]
 80039d0:	9e02      	ldr	r6, [sp, #8]
 80039d2:	f8bd 2000 	ldrh.w	r2, [sp]
 80039d6:	186d      	adds	r5, r5, r1
 80039d8:	1c49      	adds	r1, r1, #1
 80039da:	eb06 0785 	add.w	r7, r6, r5, lsl #2
 80039de:	b209      	sxth	r1, r1
 80039e0:	4291      	cmp	r1, r2
 80039e2:	edc7 0a00 	vstr	s1, [r7]
 80039e6:	dba3      	blt.n	8003930 <pool_func_mp_array_f32+0x288>
 80039e8:	9902      	ldr	r1, [sp, #8]
 80039ea:	9403      	str	r4, [sp, #12]
 80039ec:	9a01      	ldr	r2, [sp, #4]
 80039ee:	1c52      	adds	r2, r2, #1
 80039f0:	b212      	sxth	r2, r2
 80039f2:	9201      	str	r2, [sp, #4]
 80039f4:	4615      	mov	r5, r2
 80039f6:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80039fa:	4295      	cmp	r5, r2
 80039fc:	f6ff af78 	blt.w	80038f0 <pool_func_mp_array_f32+0x248>
 8003a00:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
 8003a04:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 8003a08:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8003a0c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003a10:	f8bd e000 	ldrh.w	lr, [sp]
 8003a14:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 8003a18:	f10c 0c01 	add.w	ip, ip, #1
 8003a1c:	fa0f fc8c 	sxth.w	ip, ip
 8003a20:	4584      	cmp	ip, r0
 8003a22:	f6ff af45 	blt.w	80038b0 <pool_func_mp_array_f32+0x208>
 8003a26:	b006      	add	sp, #24
 8003a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003a2c <.text_3>:
 8003a2c:	cf000000 	.word	0xcf000000

08003a30 <pool_func_ap_array_f32>:
 8003a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a34:	468b      	mov	fp, r1
 8003a36:	4682      	mov	sl, r0
 8003a38:	4610      	mov	r0, r2
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	f8da 1008 	ldr.w	r1, [sl, #8]
 8003a40:	f9bd a05c 	ldrsh.w	sl, [sp, #92]	; 0x5c
 8003a44:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
 8003a48:	f9bd c04c 	ldrsh.w	ip, [sp, #76]	; 0x4c
 8003a4c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8003a4e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003a50:	4699      	mov	r9, r3
 8003a52:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8003a56:	f1aa 0e01 	sub.w	lr, sl, #1
 8003a5a:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8003a5e:	fb1e f404 	smulbb	r4, lr, r4
 8003a62:	f8bd e04c 	ldrh.w	lr, [sp, #76]	; 0x4c
 8003a66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003a68:	6892      	ldr	r2, [r2, #8]
 8003a6a:	eba4 040c 	sub.w	r4, r4, ip
 8003a6e:	4454      	add	r4, sl
 8003a70:	f1a4 0a01 	sub.w	sl, r4, #1
 8003a74:	ea56 0e0e 	orrs.w	lr, r6, lr
 8003a78:	ebaa 0a00 	sub.w	sl, sl, r0
 8003a7c:	f040 80cb 	bne.w	8003c16 <pool_func_ap_array_f32+0x1e6>
 8003a80:	f9bd c058 	ldrsh.w	ip, [sp, #88]	; 0x58
 8003a84:	f1ac 0401 	sub.w	r4, ip, #1
 8003a88:	fb14 f403 	smulbb	r4, r4, r3
 8003a8c:	1ba4      	subs	r4, r4, r6
 8003a8e:	4444      	add	r4, r8
 8003a90:	f1a4 0e01 	sub.w	lr, r4, #1
 8003a94:	ebae 0e0b 	sub.w	lr, lr, fp
 8003a98:	fa0f fe8e 	sxth.w	lr, lr
 8003a9c:	f1be 0f00 	cmp.w	lr, #0
 8003aa0:	bf44      	itt	mi
 8003aa2:	fa0f fa8a 	sxthmi.w	sl, sl
 8003aa6:	f1ba 0f00 	cmpmi.w	sl, #0
 8003aaa:	f140 80b4 	bpl.w	8003c16 <pool_func_ap_array_f32+0x1e6>
 8003aae:	f8bd 005c 	ldrh.w	r0, [sp, #92]	; 0x5c
 8003ab2:	2600      	movs	r6, #0
 8003ab4:	f1b0 0f00 	cmp.w	r0, #0
 8003ab8:	f000 8187 	beq.w	8003dca <pool_func_ap_array_f32+0x39a>
 8003abc:	f8bd e054 	ldrh.w	lr, [sp, #84]	; 0x54
 8003ac0:	f9bd a054 	ldrsh.w	sl, [sp, #84]	; 0x54
 8003ac4:	f9bd c044 	ldrsh.w	ip, [sp, #68]	; 0x44
 8003ac8:	f8bd 4058 	ldrh.w	r4, [sp, #88]	; 0x58
 8003acc:	2500      	movs	r5, #0
 8003ace:	fb0e fe06 	mul.w	lr, lr, r6
 8003ad2:	fb1a ca06 	smlabb	sl, sl, r6, ip
 8003ad6:	2c00      	cmp	r4, #0
 8003ad8:	fa0f fe8e 	sxth.w	lr, lr
 8003adc:	fa0f fa8a 	sxth.w	sl, sl
 8003ae0:	f8cd e010 	str.w	lr, [sp, #16]
 8003ae4:	f000 808f 	beq.w	8003c06 <pool_func_ap_array_f32+0x1d6>
 8003ae8:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 8003aec:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
 8003af0:	9605      	str	r6, [sp, #20]
 8003af2:	9501      	str	r5, [sp, #4]
 8003af4:	f8ad 900a 	strh.w	r9, [sp, #10]
 8003af8:	f9bd 8050 	ldrsh.w	r8, [sp, #80]	; 0x50
 8003afc:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
 8003b00:	9801      	ldr	r0, [sp, #4]
 8003b02:	9c05      	ldr	r4, [sp, #20]
 8003b04:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 8003b08:	2300      	movs	r3, #0
 8003b0a:	fb10 f908 	smulbb	r9, r0, r8
 8003b0e:	f8bd 800a 	ldrh.w	r8, [sp, #10]
 8003b12:	fb05 0004 	mla	r0, r5, r4, r0
 8003b16:	f1b8 0f00 	cmp.w	r8, #0
 8003b1a:	44cc      	add	ip, r9
 8003b1c:	fa0f fc8c 	sxth.w	ip, ip
 8003b20:	fb00 f008 	mul.w	r0, r0, r8
 8003b24:	9006      	str	r0, [sp, #24]
 8003b26:	d05d      	beq.n	8003be4 <pool_func_ap_array_f32+0x1b4>
 8003b28:	9200      	str	r2, [sp, #0]
 8003b2a:	f8ad b00c 	strh.w	fp, [sp, #12]
 8003b2e:	9804      	ldr	r0, [sp, #16]
 8003b30:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 8003dd0 <.text_5>
 8003b34:	eddf 0aa6 	vldr	s1, [pc, #664]	; 8003dd0 <.text_5>
 8003b38:	4550      	cmp	r0, sl
 8003b3a:	da41      	bge.n	8003bc0 <pool_func_ap_array_f32+0x190>
 8003b3c:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8003b40:	9c04      	ldr	r4, [sp, #16]
 8003b42:	460a      	mov	r2, r1
 8003b44:	ee10 ea90 	vmov	lr, s1
 8003b48:	fb00 f00b 	mul.w	r0, r0, fp
 8003b4c:	ebaa 0404 	sub.w	r4, sl, r4
 8003b50:	ea4f 0100 	mov.w	r1, r0
 8003b54:	fa0f f689 	sxth.w	r6, r9
 8003b58:	4566      	cmp	r6, ip
 8003b5a:	464d      	mov	r5, r9
 8003b5c:	da2a      	bge.n	8003bb4 <pool_func_ap_array_f32+0x184>
 8003b5e:	ebac 0006 	sub.w	r0, ip, r6
 8003b62:	44e6      	add	lr, ip
 8003b64:	07c7      	lsls	r7, r0, #31
 8003b66:	ebae 0e06 	sub.w	lr, lr, r6
 8003b6a:	d509      	bpl.n	8003b80 <pool_func_ap_array_f32+0x150>
 8003b6c:	198e      	adds	r6, r1, r6
 8003b6e:	1c6d      	adds	r5, r5, #1
 8003b70:	fb06 3608 	mla	r6, r6, r8, r3
 8003b74:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003b78:	edd6 0a00 	vldr	s1, [r6]
 8003b7c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003b80:	0840      	lsrs	r0, r0, #1
 8003b82:	d017      	beq.n	8003bb4 <pool_func_ap_array_f32+0x184>
 8003b84:	fa01 f685 	sxtah	r6, r1, r5
 8003b88:	1c6d      	adds	r5, r5, #1
 8003b8a:	fb06 3608 	mla	r6, r6, r8, r3
 8003b8e:	fa01 f785 	sxtah	r7, r1, r5
 8003b92:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003b96:	fb07 3708 	mla	r7, r7, r8, r3
 8003b9a:	1c6d      	adds	r5, r5, #1
 8003b9c:	1e40      	subs	r0, r0, #1
 8003b9e:	edd6 0a00 	vldr	s1, [r6]
 8003ba2:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8003ba6:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003baa:	ed96 1a00 	vldr	s2, [r6]
 8003bae:	ee30 0a01 	vadd.f32	s0, s0, s2
 8003bb2:	d1e7      	bne.n	8003b84 <pool_func_ap_array_f32+0x154>
 8003bb4:	1e64      	subs	r4, r4, #1
 8003bb6:	4459      	add	r1, fp
 8003bb8:	d1cc      	bne.n	8003b54 <pool_func_ap_array_f32+0x124>
 8003bba:	4611      	mov	r1, r2
 8003bbc:	ee00 ea90 	vmov	s1, lr
 8003bc0:	9a06      	ldr	r2, [sp, #24]
 8003bc2:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8003bc6:	9800      	ldr	r0, [sp, #0]
 8003bc8:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003bcc:	18d2      	adds	r2, r2, r3
 8003bce:	1c5b      	adds	r3, r3, #1
 8003bd0:	eb00 0b82 	add.w	fp, r0, r2, lsl #2
 8003bd4:	b21b      	sxth	r3, r3
 8003bd6:	4543      	cmp	r3, r8
 8003bd8:	ed8b 0a00 	vstr	s0, [fp]
 8003bdc:	dba7      	blt.n	8003b2e <pool_func_ap_array_f32+0xfe>
 8003bde:	9a00      	ldr	r2, [sp, #0]
 8003be0:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8003be4:	9801      	ldr	r0, [sp, #4]
 8003be6:	1c40      	adds	r0, r0, #1
 8003be8:	b200      	sxth	r0, r0
 8003bea:	9001      	str	r0, [sp, #4]
 8003bec:	4603      	mov	r3, r0
 8003bee:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 8003bf2:	4283      	cmp	r3, r0
 8003bf4:	f6ff af80 	blt.w	8003af8 <pool_func_ap_array_f32+0xc8>
 8003bf8:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8003bfc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8003c00:	9e05      	ldr	r6, [sp, #20]
 8003c02:	f8bd 900a 	ldrh.w	r9, [sp, #10]
 8003c06:	f8bd 005c 	ldrh.w	r0, [sp, #92]	; 0x5c
 8003c0a:	1c76      	adds	r6, r6, #1
 8003c0c:	b236      	sxth	r6, r6
 8003c0e:	4286      	cmp	r6, r0
 8003c10:	f280 80db 	bge.w	8003dca <pool_func_ap_array_f32+0x39a>
 8003c14:	e752      	b.n	8003abc <pool_func_ap_array_f32+0x8c>
 8003c16:	46da      	mov	sl, fp
 8003c18:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 8003c1c:	f04f 0c00 	mov.w	ip, #0
 8003c20:	f1bb 0f00 	cmp.w	fp, #0
 8003c24:	f000 80d1 	beq.w	8003dca <pool_func_ap_array_f32+0x39a>
 8003c28:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
 8003c2c:	f9bd e04c 	ldrsh.w	lr, [sp, #76]	; 0x4c
 8003c30:	f9bd 5054 	ldrsh.w	r5, [sp, #84]	; 0x54
 8003c34:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8003c38:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8003c3c:	fb1c f404 	smulbb	r4, ip, r4
 8003c40:	eba4 040e 	sub.w	r4, r4, lr
 8003c44:	f8ad 4008 	strh.w	r4, [sp, #8]
 8003c48:	f9bd 404c 	ldrsh.w	r4, [sp, #76]	; 0x4c
 8003c4c:	fb1c f505 	smulbb	r5, ip, r5
 8003c50:	1b2c      	subs	r4, r5, r4
 8003c52:	2500      	movs	r5, #0
 8003c54:	2f00      	cmp	r7, #0
 8003c56:	445c      	add	r4, fp
 8003c58:	b224      	sxth	r4, r4
 8003c5a:	f000 80ad 	beq.w	8003db8 <pool_func_ap_array_f32+0x388>
 8003c5e:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
 8003c62:	f8ad 6048 	strh.w	r6, [sp, #72]	; 0x48
 8003c66:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
 8003c6a:	f8cd c00c 	str.w	ip, [sp, #12]
 8003c6e:	9501      	str	r5, [sp, #4]
 8003c70:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 8003c74:	f8dd b004 	ldr.w	fp, [sp, #4]
 8003c78:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
 8003c7c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003c80:	f9bd 6048 	ldrsh.w	r6, [sp, #72]	; 0x48
 8003c84:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8003c88:	fb1b f303 	smulbb	r3, fp, r3
 8003c8c:	fb05 bb0c 	mla	fp, r5, ip, fp
 8003c90:	1b9e      	subs	r6, r3, r6
 8003c92:	f1b9 0f00 	cmp.w	r9, #0
 8003c96:	44b6      	add	lr, r6
 8003c98:	fa0f fe8e 	sxth.w	lr, lr
 8003c9c:	fb0b fb09 	mul.w	fp, fp, r9
 8003ca0:	b236      	sxth	r6, r6
 8003ca2:	f8cd b010 	str.w	fp, [sp, #16]
 8003ca6:	d075      	beq.n	8003d94 <pool_func_ap_array_f32+0x364>
 8003ca8:	9200      	str	r2, [sp, #0]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
 8003cb0:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8003dd0 <.text_5>
 8003cb4:	eddf 0a46 	vldr	s1, [pc, #280]	; 8003dd0 <.text_5>
 8003cb8:	45a0      	cmp	r8, r4
 8003cba:	da5a      	bge.n	8003d72 <pool_func_ap_array_f32+0x342>
 8003cbc:	fb0a fc08 	mul.w	ip, sl, r8
 8003cc0:	ee10 3a90 	vmov	r3, s1
 8003cc4:	4576      	cmp	r6, lr
 8003cc6:	46b3      	mov	fp, r6
 8003cc8:	da4c      	bge.n	8003d64 <pool_func_ap_array_f32+0x334>
 8003cca:	ebae 0506 	sub.w	r5, lr, r6
 8003cce:	07ef      	lsls	r7, r5, #31
 8003cd0:	d516      	bpl.n	8003d00 <pool_func_ap_array_f32+0x2d0>
 8003cd2:	f1b8 0f00 	cmp.w	r8, #0
 8003cd6:	bf58      	it	pl
 8003cd8:	f1bb 0f00 	cmppl.w	fp, #0
 8003cdc:	d40e      	bmi.n	8003cfc <pool_func_ap_array_f32+0x2cc>
 8003cde:	4580      	cmp	r8, r0
 8003ce0:	bfb8      	it	lt
 8003ce2:	45d3      	cmplt	fp, sl
 8003ce4:	da0a      	bge.n	8003cfc <pool_func_ap_array_f32+0x2cc>
 8003ce6:	eb0c 070b 	add.w	r7, ip, fp
 8003cea:	1c5b      	adds	r3, r3, #1
 8003cec:	fb07 2709 	mla	r7, r7, r9, r2
 8003cf0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003cf4:	edd7 0a00 	vldr	s1, [r7]
 8003cf8:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003cfc:	f10b 0b01 	add.w	fp, fp, #1
 8003d00:	086d      	lsrs	r5, r5, #1
 8003d02:	d02f      	beq.n	8003d64 <pool_func_ap_array_f32+0x334>
 8003d04:	465f      	mov	r7, fp
 8003d06:	46ab      	mov	fp, r5
 8003d08:	f1b8 0f00 	cmp.w	r8, #0
 8003d0c:	d405      	bmi.n	8003d1a <pool_func_ap_array_f32+0x2ea>
 8003d0e:	2f00      	cmp	r7, #0
 8003d10:	bf48      	it	mi
 8003d12:	1c7f      	addmi	r7, r7, #1
 8003d14:	d411      	bmi.n	8003d3a <pool_func_ap_array_f32+0x30a>
 8003d16:	4580      	cmp	r8, r0
 8003d18:	db01      	blt.n	8003d1e <pool_func_ap_array_f32+0x2ee>
 8003d1a:	1c7f      	adds	r7, r7, #1
 8003d1c:	e01e      	b.n	8003d5c <pool_func_ap_array_f32+0x32c>
 8003d1e:	1c7d      	adds	r5, r7, #1
 8003d20:	4557      	cmp	r7, sl
 8003d22:	da09      	bge.n	8003d38 <pool_func_ap_array_f32+0x308>
 8003d24:	4467      	add	r7, ip
 8003d26:	1c5b      	adds	r3, r3, #1
 8003d28:	fb07 2709 	mla	r7, r7, r9, r2
 8003d2c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003d30:	edd7 0a00 	vldr	s1, [r7]
 8003d34:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003d38:	462f      	mov	r7, r5
 8003d3a:	2f00      	cmp	r7, #0
 8003d3c:	d40e      	bmi.n	8003d5c <pool_func_ap_array_f32+0x32c>
 8003d3e:	4580      	cmp	r8, r0
 8003d40:	bfb8      	it	lt
 8003d42:	4557      	cmplt	r7, sl
 8003d44:	da0a      	bge.n	8003d5c <pool_func_ap_array_f32+0x32c>
 8003d46:	eb0c 0507 	add.w	r5, ip, r7
 8003d4a:	1c5b      	adds	r3, r3, #1
 8003d4c:	fb05 2509 	mla	r5, r5, r9, r2
 8003d50:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8003d54:	edd5 0a00 	vldr	s1, [r5]
 8003d58:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003d5c:	1c7f      	adds	r7, r7, #1
 8003d5e:	f1bb 0b01 	subs.w	fp, fp, #1
 8003d62:	d1d1      	bne.n	8003d08 <pool_func_ap_array_f32+0x2d8>
 8003d64:	f108 0801 	add.w	r8, r8, #1
 8003d68:	45a0      	cmp	r8, r4
 8003d6a:	44d4      	add	ip, sl
 8003d6c:	dbaa      	blt.n	8003cc4 <pool_func_ap_array_f32+0x294>
 8003d6e:	ee00 3a90 	vmov	s1, r3
 8003d72:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8003d76:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8003d7a:	9b00      	ldr	r3, [sp, #0]
 8003d7c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003d80:	4490      	add	r8, r2
 8003d82:	1c52      	adds	r2, r2, #1
 8003d84:	eb03 0b88 	add.w	fp, r3, r8, lsl #2
 8003d88:	b212      	sxth	r2, r2
 8003d8a:	454a      	cmp	r2, r9
 8003d8c:	ed8b 0a00 	vstr	s0, [fp]
 8003d90:	db8c      	blt.n	8003cac <pool_func_ap_array_f32+0x27c>
 8003d92:	9a00      	ldr	r2, [sp, #0]
 8003d94:	9b01      	ldr	r3, [sp, #4]
 8003d96:	1c5b      	adds	r3, r3, #1
 8003d98:	b21b      	sxth	r3, r3
 8003d9a:	9301      	str	r3, [sp, #4]
 8003d9c:	4698      	mov	r8, r3
 8003d9e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 8003da2:	4598      	cmp	r8, r3
 8003da4:	f6ff af64 	blt.w	8003c70 <pool_func_ap_array_f32+0x240>
 8003da8:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8003dac:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 8003db0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8003db4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003db8:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 8003dbc:	f10c 0c01 	add.w	ip, ip, #1
 8003dc0:	fa0f fc8c 	sxth.w	ip, ip
 8003dc4:	45dc      	cmp	ip, fp
 8003dc6:	f6ff af2f 	blt.w	8003c28 <pool_func_ap_array_f32+0x1f8>
 8003dca:	b007      	add	sp, #28
 8003dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003dd0 <.text_5>:
 8003dd0:	00000000 	.word	0x00000000

08003dd4 <pool_func_mp_kernel_array_f32>:
 8003dd4:	b470      	push	{r4, r5, r6}
 8003dd6:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 8003dda:	42a1      	cmp	r1, r4
 8003ddc:	d257      	bcs.n	8003e8e <pool_func_mp_kernel_array_f32+0xba>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d051      	beq.n	8003e86 <pool_func_mp_kernel_array_f32+0xb2>
 8003de2:	f013 0203 	ands.w	r2, r3, #3
 8003de6:	460d      	mov	r5, r1
 8003de8:	4606      	mov	r6, r0
 8003dea:	d011      	beq.n	8003e10 <pool_func_mp_kernel_array_f32+0x3c>
 8003dec:	ed96 0a00 	vldr	s0, [r6]
 8003df0:	edd5 0a00 	vldr	s1, [r5]
 8003df4:	eef4 0a40 	vcmp.f32	s1, s0
 8003df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfc:	bf58      	it	pl
 8003dfe:	eeb0 0a60 	vmovpl.f32	s0, s1
 8003e02:	ed86 0a00 	vstr	s0, [r6]
 8003e06:	1e52      	subs	r2, r2, #1
 8003e08:	1d36      	adds	r6, r6, #4
 8003e0a:	1d2d      	adds	r5, r5, #4
 8003e0c:	2a00      	cmp	r2, #0
 8003e0e:	d1ed      	bne.n	8003dec <pool_func_mp_kernel_array_f32+0x18>
 8003e10:	089a      	lsrs	r2, r3, #2
 8003e12:	d038      	beq.n	8003e86 <pool_func_mp_kernel_array_f32+0xb2>
 8003e14:	edd5 0a00 	vldr	s1, [r5]
 8003e18:	edd6 1a00 	vldr	s3, [r6]
 8003e1c:	eef4 0a61 	vcmp.f32	s1, s3
 8003e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e24:	bf48      	it	mi
 8003e26:	eef0 0a61 	vmovmi.f32	s1, s3
 8003e2a:	edc6 0a00 	vstr	s1, [r6]
 8003e2e:	edd5 0a01 	vldr	s1, [r5, #4]
 8003e32:	edd6 1a01 	vldr	s3, [r6, #4]
 8003e36:	eef4 0a61 	vcmp.f32	s1, s3
 8003e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e3e:	ed96 0a02 	vldr	s0, [r6, #8]
 8003e42:	bf48      	it	mi
 8003e44:	eef0 0a61 	vmovmi.f32	s1, s3
 8003e48:	edc6 0a01 	vstr	s1, [r6, #4]
 8003e4c:	ed95 1a02 	vldr	s2, [r5, #8]
 8003e50:	eeb4 1a40 	vcmp.f32	s2, s0
 8003e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e58:	edd6 1a03 	vldr	s3, [r6, #12]
 8003e5c:	bf48      	it	mi
 8003e5e:	eeb0 1a40 	vmovmi.f32	s2, s0
 8003e62:	ed86 1a02 	vstr	s2, [r6, #8]
 8003e66:	edd5 0a03 	vldr	s1, [r5, #12]
 8003e6a:	eef4 0a61 	vcmp.f32	s1, s3
 8003e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e72:	bf58      	it	pl
 8003e74:	eef0 1a60 	vmovpl.f32	s3, s1
 8003e78:	edc6 1a03 	vstr	s3, [r6, #12]
 8003e7c:	1e52      	subs	r2, r2, #1
 8003e7e:	3610      	adds	r6, #16
 8003e80:	3510      	adds	r5, #16
 8003e82:	2a00      	cmp	r2, #0
 8003e84:	d1c6      	bne.n	8003e14 <pool_func_mp_kernel_array_f32+0x40>
 8003e86:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8003e8a:	42a1      	cmp	r1, r4
 8003e8c:	d3a7      	bcc.n	8003dde <pool_func_mp_kernel_array_f32+0xa>
 8003e8e:	bc70      	pop	{r4, r5, r6}
 8003e90:	4770      	bx	lr
	...

08003e94 <pool_func_ap_kernel_array_f32>:
 8003e94:	b470      	push	{r4, r5, r6}
 8003e96:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 8003e9a:	42a1      	cmp	r1, r4
 8003e9c:	d24f      	bcs.n	8003f3e <pool_func_ap_kernel_array_f32+0xaa>
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d049      	beq.n	8003f36 <pool_func_ap_kernel_array_f32+0xa2>
 8003ea2:	f013 0203 	ands.w	r2, r3, #3
 8003ea6:	460d      	mov	r5, r1
 8003ea8:	4606      	mov	r6, r0
 8003eaa:	d00e      	beq.n	8003eca <pool_func_ap_kernel_array_f32+0x36>
 8003eac:	4288      	cmp	r0, r1
 8003eae:	ed95 0a00 	vldr	s0, [r5]
 8003eb2:	bf1c      	itt	ne
 8003eb4:	edd6 0a00 	vldrne	s1, [r6]
 8003eb8:	ee30 0a80 	vaddne.f32	s0, s1, s0
 8003ebc:	ed86 0a00 	vstr	s0, [r6]
 8003ec0:	1e52      	subs	r2, r2, #1
 8003ec2:	1d36      	adds	r6, r6, #4
 8003ec4:	1d2d      	adds	r5, r5, #4
 8003ec6:	2a00      	cmp	r2, #0
 8003ec8:	d1f0      	bne.n	8003eac <pool_func_ap_kernel_array_f32+0x18>
 8003eca:	089a      	lsrs	r2, r3, #2
 8003ecc:	d033      	beq.n	8003f36 <pool_func_ap_kernel_array_f32+0xa2>
 8003ece:	4288      	cmp	r0, r1
 8003ed0:	edd5 1a00 	vldr	s3, [r5]
 8003ed4:	d10c      	bne.n	8003ef0 <pool_func_ap_kernel_array_f32+0x5c>
 8003ed6:	edc6 1a00 	vstr	s3, [r6]
 8003eda:	ed95 0a01 	vldr	s0, [r5, #4]
 8003ede:	ed86 0a01 	vstr	s0, [r6, #4]
 8003ee2:	edd5 1a02 	vldr	s3, [r5, #8]
 8003ee6:	edc6 1a02 	vstr	s3, [r6, #8]
 8003eea:	edd5 1a03 	vldr	s3, [r5, #12]
 8003eee:	e01b      	b.n	8003f28 <pool_func_ap_kernel_array_f32+0x94>
 8003ef0:	edd6 0a00 	vldr	s1, [r6]
 8003ef4:	ee30 0aa1 	vadd.f32	s0, s1, s3
 8003ef8:	ed86 0a00 	vstr	s0, [r6]
 8003efc:	ed96 1a01 	vldr	s2, [r6, #4]
 8003f00:	ed95 0a01 	vldr	s0, [r5, #4]
 8003f04:	ee71 0a00 	vadd.f32	s1, s2, s0
 8003f08:	edc6 0a01 	vstr	s1, [r6, #4]
 8003f0c:	edd6 1a02 	vldr	s3, [r6, #8]
 8003f10:	edd5 0a02 	vldr	s1, [r5, #8]
 8003f14:	ee31 0aa0 	vadd.f32	s0, s3, s1
 8003f18:	ed86 0a02 	vstr	s0, [r6, #8]
 8003f1c:	ed96 0a03 	vldr	s0, [r6, #12]
 8003f20:	ed95 1a03 	vldr	s2, [r5, #12]
 8003f24:	ee70 1a01 	vadd.f32	s3, s0, s2
 8003f28:	edc6 1a03 	vstr	s3, [r6, #12]
 8003f2c:	1e52      	subs	r2, r2, #1
 8003f2e:	3610      	adds	r6, #16
 8003f30:	3510      	adds	r5, #16
 8003f32:	2a00      	cmp	r2, #0
 8003f34:	d1cb      	bne.n	8003ece <pool_func_ap_kernel_array_f32+0x3a>
 8003f36:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8003f3a:	42a1      	cmp	r1, r4
 8003f3c:	d3af      	bcc.n	8003e9e <pool_func_ap_kernel_array_f32+0xa>
 8003f3e:	9903      	ldr	r1, [sp, #12]
 8003f40:	b3a1      	cbz	r1, 8003fac <pool_func_ap_kernel_array_f32+0x118>
 8003f42:	ee00 1a10 	vmov	s0, r1
 8003f46:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8003f4a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003f4e:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003f52:	b35b      	cbz	r3, 8003fac <pool_func_ap_kernel_array_f32+0x118>
 8003f54:	f013 0103 	ands.w	r1, r3, #3
 8003f58:	f000 800a 	beq.w	8003f70 <pool_func_ap_kernel_array_f32+0xdc>
 8003f5c:	edd0 0a00 	vldr	s1, [r0]
 8003f60:	1e49      	subs	r1, r1, #1
 8003f62:	ee60 0a80 	vmul.f32	s1, s1, s0
 8003f66:	edc0 0a00 	vstr	s1, [r0]
 8003f6a:	f100 0004 	add.w	r0, r0, #4
 8003f6e:	d1f5      	bne.n	8003f5c <pool_func_ap_kernel_array_f32+0xc8>
 8003f70:	089b      	lsrs	r3, r3, #2
 8003f72:	d01b      	beq.n	8003fac <pool_func_ap_kernel_array_f32+0x118>
 8003f74:	edd0 0a00 	vldr	s1, [r0]
 8003f78:	1e5b      	subs	r3, r3, #1
 8003f7a:	ee60 0a80 	vmul.f32	s1, s1, s0
 8003f7e:	edc0 0a00 	vstr	s1, [r0]
 8003f82:	ed90 1a01 	vldr	s2, [r0, #4]
 8003f86:	ee21 1a00 	vmul.f32	s2, s2, s0
 8003f8a:	ed80 1a01 	vstr	s2, [r0, #4]
 8003f8e:	edd0 0a02 	vldr	s1, [r0, #8]
 8003f92:	ed90 1a03 	vldr	s2, [r0, #12]
 8003f96:	ee60 1a80 	vmul.f32	s3, s1, s0
 8003f9a:	ee61 0a00 	vmul.f32	s1, s2, s0
 8003f9e:	edc0 1a02 	vstr	s3, [r0, #8]
 8003fa2:	edc0 0a03 	vstr	s1, [r0, #12]
 8003fa6:	f100 0010 	add.w	r0, r0, #16
 8003faa:	d1e3      	bne.n	8003f74 <pool_func_ap_kernel_array_f32+0xe0>
 8003fac:	bc70      	pop	{r4, r5, r6}
 8003fae:	4770      	bx	lr

08003fb0 <forward_mp>:
 8003fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb4:	b08e      	sub	sp, #56	; 0x38
 8003fb6:	4680      	mov	r8, r0
 8003fb8:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8003fbc:	6800      	ldr	r0, [r0, #0]
 8003fbe:	6801      	ldr	r1, [r0, #0]
 8003fc0:	68c2      	ldr	r2, [r0, #12]
 8003fc2:	680d      	ldr	r5, [r1, #0]
 8003fc4:	6817      	ldr	r7, [r2, #0]
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	6929      	ldr	r1, [r5, #16]
 8003fca:	9109      	str	r1, [sp, #36]	; 0x24
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	9208      	str	r2, [sp, #32]
 8003fd0:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8003fd4:	68a9      	ldr	r1, [r5, #8]
 8003fd6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8003fda:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 8003fde:	f8cd c01c 	str.w	ip, [sp, #28]
 8003fe2:	f8d8 0020 	ldr.w	r0, [r8, #32]
 8003fe6:	f8d8 e024 	ldr.w	lr, [r8, #36]	; 0x24
 8003fea:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8003fee:	f8d8 c02c 	ldr.w	ip, [r8, #44]	; 0x2c
 8003ff2:	f8d5 8000 	ldr.w	r8, [r5]
 8003ff6:	683f      	ldr	r7, [r7, #0]
 8003ff8:	f8dc 6000 	ldr.w	r6, [ip]
 8003ffc:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8004000:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8004004:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8004008:	4276      	negs	r6, r6
 800400a:	2b00      	cmp	r3, #0
 800400c:	9600      	str	r6, [sp, #0]
 800400e:	f000 80d7 	beq.w	80041c0 <forward_mp+0x210>
 8004012:	9301      	str	r3, [sp, #4]
 8004014:	4264      	negs	r4, r4
 8004016:	940c      	str	r4, [sp, #48]	; 0x30
 8004018:	fb01 f709 	mul.w	r7, r1, r9
 800401c:	970b      	str	r7, [sp, #44]	; 0x2c
 800401e:	9d00      	ldr	r5, [sp, #0]
 8004020:	9b00      	ldr	r3, [sp, #0]
 8004022:	9f07      	ldr	r7, [sp, #28]
 8004024:	9c00      	ldr	r4, [sp, #0]
 8004026:	426d      	negs	r5, r5
 8004028:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800402a:	bfcc      	ite	gt
 800402c:	f04f 0c00 	movgt.w	ip, #0
 8004030:	f8dd c000 	ldrle.w	ip, [sp]
 8004034:	1aeb      	subs	r3, r5, r3
 8004036:	42bb      	cmp	r3, r7
 8004038:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800403a:	bf88      	it	hi
 800403c:	463b      	movhi	r3, r7
 800403e:	191c      	adds	r4, r3, r4
 8004040:	9b08      	ldr	r3, [sp, #32]
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 80b3 	beq.w	80041ae <forward_mp+0x1fe>
 8004048:	fb09 fa0c 	mul.w	sl, r9, ip
 800404c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004050:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8004054:	9202      	str	r2, [sp, #8]
 8004056:	9006      	str	r0, [sp, #24]
 8004058:	f8cd c014 	str.w	ip, [sp, #20]
 800405c:	9404      	str	r4, [sp, #16]
 800405e:	4268      	negs	r0, r5
 8004060:	9f03      	ldr	r7, [sp, #12]
 8004062:	9a02      	ldr	r2, [sp, #8]
 8004064:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8004068:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800406c:	bfcc      	ite	gt
 800406e:	2000      	movgt	r0, #0
 8004070:	4628      	movle	r0, r5
 8004072:	1b7f      	subs	r7, r7, r5
 8004074:	4297      	cmp	r7, r2
 8004076:	bf88      	it	hi
 8004078:	4617      	movhi	r7, r2
 800407a:	197f      	adds	r7, r7, r5
 800407c:	1a3f      	subs	r7, r7, r0
 800407e:	4460      	add	r0, ip
 8004080:	434f      	muls	r7, r1
 8004082:	4348      	muls	r0, r1
 8004084:	eb08 0c80 	add.w	ip, r8, r0, lsl #2
 8004088:	b309      	cbz	r1, 80040ce <forward_mp+0x11e>
 800408a:	f011 0003 	ands.w	r0, r1, #3
 800408e:	4672      	mov	r2, lr
 8004090:	4664      	mov	r4, ip
 8004092:	d005      	beq.n	80040a0 <forward_mp+0xf0>
 8004094:	1e40      	subs	r0, r0, #1
 8004096:	f854 6b04 	ldr.w	r6, [r4], #4
 800409a:	f842 6b04 	str.w	r6, [r2], #4
 800409e:	d1f9      	bne.n	8004094 <forward_mp+0xe4>
 80040a0:	0888      	lsrs	r0, r1, #2
 80040a2:	d014      	beq.n	80040ce <forward_mp+0x11e>
 80040a4:	ed94 0a00 	vldr	s0, [r4]
 80040a8:	1e40      	subs	r0, r0, #1
 80040aa:	ed82 0a00 	vstr	s0, [r2]
 80040ae:	edd4 0a01 	vldr	s1, [r4, #4]
 80040b2:	edc2 0a01 	vstr	s1, [r2, #4]
 80040b6:	ed94 0a02 	vldr	s0, [r4, #8]
 80040ba:	ed82 0a02 	vstr	s0, [r2, #8]
 80040be:	edd4 0a03 	vldr	s1, [r4, #12]
 80040c2:	3410      	adds	r4, #16
 80040c4:	edc2 0a03 	vstr	s1, [r2, #12]
 80040c8:	3210      	adds	r2, #16
 80040ca:	2800      	cmp	r0, #0
 80040cc:	d1ea      	bne.n	80040a4 <forward_mp+0xf4>
 80040ce:	9805      	ldr	r0, [sp, #20]
 80040d0:	9a04      	ldr	r2, [sp, #16]
 80040d2:	4290      	cmp	r0, r2
 80040d4:	da61      	bge.n	800419a <forward_mp+0x1ea>
 80040d6:	1a12      	subs	r2, r2, r0
 80040d8:	46e2      	mov	sl, ip
 80040da:	eb0a 0b87 	add.w	fp, sl, r7, lsl #2
 80040de:	45da      	cmp	sl, fp
 80040e0:	d257      	bcs.n	8004192 <forward_mp+0x1e2>
 80040e2:	2900      	cmp	r1, #0
 80040e4:	d051      	beq.n	800418a <forward_mp+0x1da>
 80040e6:	f011 0003 	ands.w	r0, r1, #3
 80040ea:	4654      	mov	r4, sl
 80040ec:	4676      	mov	r6, lr
 80040ee:	d011      	beq.n	8004114 <forward_mp+0x164>
 80040f0:	ed96 0a00 	vldr	s0, [r6]
 80040f4:	edd4 0a00 	vldr	s1, [r4]
 80040f8:	eef4 0a40 	vcmp.f32	s1, s0
 80040fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004100:	bf58      	it	pl
 8004102:	eeb0 0a60 	vmovpl.f32	s0, s1
 8004106:	ed86 0a00 	vstr	s0, [r6]
 800410a:	1e40      	subs	r0, r0, #1
 800410c:	1d36      	adds	r6, r6, #4
 800410e:	1d24      	adds	r4, r4, #4
 8004110:	2800      	cmp	r0, #0
 8004112:	d1ed      	bne.n	80040f0 <forward_mp+0x140>
 8004114:	0888      	lsrs	r0, r1, #2
 8004116:	d038      	beq.n	800418a <forward_mp+0x1da>
 8004118:	edd4 0a00 	vldr	s1, [r4]
 800411c:	edd6 1a00 	vldr	s3, [r6]
 8004120:	eef4 0a61 	vcmp.f32	s1, s3
 8004124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004128:	bf48      	it	mi
 800412a:	eef0 0a61 	vmovmi.f32	s1, s3
 800412e:	edc6 0a00 	vstr	s1, [r6]
 8004132:	edd4 0a01 	vldr	s1, [r4, #4]
 8004136:	edd6 1a01 	vldr	s3, [r6, #4]
 800413a:	eef4 0a61 	vcmp.f32	s1, s3
 800413e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004142:	ed96 0a02 	vldr	s0, [r6, #8]
 8004146:	bf48      	it	mi
 8004148:	eef0 0a61 	vmovmi.f32	s1, s3
 800414c:	edc6 0a01 	vstr	s1, [r6, #4]
 8004150:	ed94 1a02 	vldr	s2, [r4, #8]
 8004154:	eeb4 1a40 	vcmp.f32	s2, s0
 8004158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800415c:	edd6 1a03 	vldr	s3, [r6, #12]
 8004160:	bf48      	it	mi
 8004162:	eeb0 1a40 	vmovmi.f32	s2, s0
 8004166:	ed86 1a02 	vstr	s2, [r6, #8]
 800416a:	edd4 0a03 	vldr	s1, [r4, #12]
 800416e:	eef4 0a61 	vcmp.f32	s1, s3
 8004172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004176:	bf58      	it	pl
 8004178:	eef0 1a60 	vmovpl.f32	s3, s1
 800417c:	edc6 1a03 	vstr	s3, [r6, #12]
 8004180:	1e40      	subs	r0, r0, #1
 8004182:	3610      	adds	r6, #16
 8004184:	3410      	adds	r4, #16
 8004186:	2800      	cmp	r0, #0
 8004188:	d1c6      	bne.n	8004118 <forward_mp+0x168>
 800418a:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 800418e:	45da      	cmp	sl, fp
 8004190:	d3a7      	bcc.n	80040e2 <forward_mp+0x132>
 8004192:	1e52      	subs	r2, r2, #1
 8004194:	eb0c 0c89 	add.w	ip, ip, r9, lsl #2
 8004198:	d19e      	bne.n	80040d8 <forward_mp+0x128>
 800419a:	9806      	ldr	r0, [sp, #24]
 800419c:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 80041a0:	1945      	adds	r5, r0, r5
 80041a2:	1e5b      	subs	r3, r3, #1
 80041a4:	f47f af5b 	bne.w	800405e <forward_mp+0xae>
 80041a8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80041ac:	9a02      	ldr	r2, [sp, #8]
 80041ae:	9f00      	ldr	r7, [sp, #0]
 80041b0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80041b2:	19ef      	adds	r7, r5, r7
 80041b4:	9700      	str	r7, [sp, #0]
 80041b6:	9c01      	ldr	r4, [sp, #4]
 80041b8:	1e64      	subs	r4, r4, #1
 80041ba:	9401      	str	r4, [sp, #4]
 80041bc:	f47f af2f 	bne.w	800401e <forward_mp+0x6e>
 80041c0:	b00e      	add	sp, #56	; 0x38
 80041c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080041c8 <forward_ap>:
 80041c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041cc:	b097      	sub	sp, #92	; 0x5c
 80041ce:	6941      	ldr	r1, [r0, #20]
 80041d0:	6809      	ldr	r1, [r1, #0]
 80041d2:	68cb      	ldr	r3, [r1, #12]
 80041d4:	680a      	ldr	r2, [r1, #0]
 80041d6:	681f      	ldr	r7, [r3, #0]
 80041d8:	6816      	ldr	r6, [r2, #0]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	6934      	ldr	r4, [r6, #16]
 80041de:	940c      	str	r4, [sp, #48]	; 0x30
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80041e4:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 80041e8:	68b1      	ldr	r1, [r6, #8]
 80041ea:	f8d0 8018 	ldr.w	r8, [r0, #24]
 80041ee:	69c3      	ldr	r3, [r0, #28]
 80041f0:	2a00      	cmp	r2, #0
 80041f2:	9304      	str	r3, [sp, #16]
 80041f4:	6a04      	ldr	r4, [r0, #32]
 80041f6:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
 80041fa:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80041fe:	f8d0 e02c 	ldr.w	lr, [r0, #44]	; 0x2c
 8004202:	6836      	ldr	r6, [r6, #0]
 8004204:	f8d7 9000 	ldr.w	r9, [r7]
 8004208:	f8de a000 	ldr.w	sl, [lr]
 800420c:	f8de 5004 	ldr.w	r5, [lr, #4]
 8004210:	68b3      	ldr	r3, [r6, #8]
 8004212:	f8d9 9008 	ldr.w	r9, [r9, #8]
 8004216:	f1ca 0a00 	rsb	sl, sl, #0
 800421a:	f8cd a004 	str.w	sl, [sp, #4]
 800421e:	f000 8133 	beq.w	8004488 <forward_ap+0x2c0>
 8004222:	9203      	str	r2, [sp, #12]
 8004224:	426d      	negs	r5, r5
 8004226:	9515      	str	r5, [sp, #84]	; 0x54
 8004228:	9d04      	ldr	r5, [sp, #16]
 800422a:	fb01 f70c 	mul.w	r7, r1, ip
 800422e:	fb05 f508 	mul.w	r5, r5, r8
 8004232:	9514      	str	r5, [sp, #80]	; 0x50
 8004234:	9713      	str	r7, [sp, #76]	; 0x4c
 8004236:	9e01      	ldr	r6, [sp, #4]
 8004238:	9a01      	ldr	r2, [sp, #4]
 800423a:	9f04      	ldr	r7, [sp, #16]
 800423c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004240:	4276      	negs	r6, r6
 8004242:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004244:	bfcc      	ite	gt
 8004246:	2500      	movgt	r5, #0
 8004248:	9d01      	ldrle	r5, [sp, #4]
 800424a:	1ab2      	subs	r2, r6, r2
 800424c:	42ba      	cmp	r2, r7
 800424e:	bf88      	it	hi
 8004250:	463a      	movhi	r2, r7
 8004252:	4496      	add	lr, r2
 8004254:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004256:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8004258:	2a00      	cmp	r2, #0
 800425a:	f000 8109 	beq.w	8004470 <forward_ap+0x2a8>
 800425e:	4616      	mov	r6, r2
 8004260:	900d      	str	r0, [sp, #52]	; 0x34
 8004262:	fb0c f205 	mul.w	r2, ip, r5
 8004266:	f8cd c018 	str.w	ip, [sp, #24]
 800426a:	eba5 0b0e 	sub.w	fp, r5, lr
 800426e:	9212      	str	r2, [sp, #72]	; 0x48
 8004270:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8004274:	f8cd 8014 	str.w	r8, [sp, #20]
 8004278:	940a      	str	r4, [sp, #40]	; 0x28
 800427a:	9309      	str	r3, [sp, #36]	; 0x24
 800427c:	9508      	str	r5, [sp, #32]
 800427e:	f8cd e01c 	str.w	lr, [sp, #28]
 8004282:	9700      	str	r7, [sp, #0]
 8004284:	9602      	str	r6, [sp, #8]
 8004286:	9b00      	ldr	r3, [sp, #0]
 8004288:	9a06      	ldr	r2, [sp, #24]
 800428a:	9800      	ldr	r0, [sp, #0]
 800428c:	f8dd e000 	ldr.w	lr, [sp]
 8004290:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8004292:	425b      	negs	r3, r3
 8004294:	9b05      	ldr	r3, [sp, #20]
 8004296:	bfcc      	ite	gt
 8004298:	2500      	movgt	r5, #0
 800429a:	9d00      	ldrle	r5, [sp, #0]
 800429c:	1a10      	subs	r0, r2, r0
 800429e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042a0:	4298      	cmp	r0, r3
 80042a2:	bf88      	it	hi
 80042a4:	4618      	movhi	r0, r3
 80042a6:	4486      	add	lr, r0
 80042a8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80042aa:	eba5 0c0e 	sub.w	ip, r5, lr
 80042ae:	ebae 0805 	sub.w	r8, lr, r5
 80042b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042b4:	fb08 f801 	mul.w	r8, r8, r1
 80042b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80042bc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80042be:	1828      	adds	r0, r5, r0
 80042c0:	4348      	muls	r0, r1
 80042c2:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80042c6:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 80042ca:	2200      	movs	r2, #0
 80042cc:	2800      	cmp	r0, #0
 80042ce:	bf14      	ite	ne
 80042d0:	9f14      	ldrne	r7, [sp, #80]	; 0x50
 80042d2:	4667      	moveq	r7, ip
 80042d4:	b189      	cbz	r1, 80042fa <forward_ap+0x132>
 80042d6:	f011 0003 	ands.w	r0, r1, #3
 80042da:	464b      	mov	r3, r9
 80042dc:	d003      	beq.n	80042e6 <forward_ap+0x11e>
 80042de:	1e40      	subs	r0, r0, #1
 80042e0:	f843 2b04 	str.w	r2, [r3], #4
 80042e4:	d1fb      	bne.n	80042de <forward_ap+0x116>
 80042e6:	0888      	lsrs	r0, r1, #2
 80042e8:	d007      	beq.n	80042fa <forward_ap+0x132>
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	1e40      	subs	r0, r0, #1
 80042ee:	605a      	str	r2, [r3, #4]
 80042f0:	609a      	str	r2, [r3, #8]
 80042f2:	60da      	str	r2, [r3, #12]
 80042f4:	f103 0310 	add.w	r3, r3, #16
 80042f8:	d1f7      	bne.n	80042ea <forward_ap+0x122>
 80042fa:	9808      	ldr	r0, [sp, #32]
 80042fc:	9b07      	ldr	r3, [sp, #28]
 80042fe:	4298      	cmp	r0, r3
 8004300:	f280 80a4 	bge.w	800444c <forward_ap+0x284>
 8004304:	ebae 0505 	sub.w	r5, lr, r5
 8004308:	1a1b      	subs	r3, r3, r0
 800430a:	950e      	str	r5, [sp, #56]	; 0x38
 800430c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8004310:	4694      	mov	ip, r2
 8004312:	940f      	str	r4, [sp, #60]	; 0x3c
 8004314:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004316:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004318:	46b6      	mov	lr, r6
 800431a:	eb0e 0588 	add.w	r5, lr, r8, lsl #2
 800431e:	4494      	add	ip, r2
 8004320:	4560      	cmp	r0, ip
 8004322:	bf0c      	ite	eq
 8004324:	463c      	moveq	r4, r7
 8004326:	2400      	movne	r4, #0
 8004328:	45ae      	cmp	lr, r5
 800432a:	d24d      	bcs.n	80043c8 <forward_ap+0x200>
 800432c:	2200      	movs	r2, #0
 800432e:	2900      	cmp	r1, #0
 8004330:	d046      	beq.n	80043c0 <forward_ap+0x1f8>
 8004332:	f011 0003 	ands.w	r0, r1, #3
 8004336:	46f2      	mov	sl, lr
 8004338:	46cb      	mov	fp, r9
 800433a:	d010      	beq.n	800435e <forward_ap+0x196>
 800433c:	45f1      	cmp	r9, lr
 800433e:	ed9a 0a00 	vldr	s0, [sl]
 8004342:	f10a 0a04 	add.w	sl, sl, #4
 8004346:	bf1c      	itt	ne
 8004348:	eddb 0a00 	vldrne	s1, [fp]
 800434c:	ee30 0a80 	vaddne.f32	s0, s1, s0
 8004350:	1c52      	adds	r2, r2, #1
 8004352:	ed8b 0a00 	vstr	s0, [fp]
 8004356:	1e40      	subs	r0, r0, #1
 8004358:	f10b 0b04 	add.w	fp, fp, #4
 800435c:	d1ee      	bne.n	800433c <forward_ap+0x174>
 800435e:	0888      	lsrs	r0, r1, #2
 8004360:	d02e      	beq.n	80043c0 <forward_ap+0x1f8>
 8004362:	eb0e 0a82 	add.w	sl, lr, r2, lsl #2
 8004366:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800436a:	45f1      	cmp	r9, lr
 800436c:	edda 1a00 	vldr	s3, [sl]
 8004370:	bf1c      	itt	ne
 8004372:	ed92 0a00 	vldrne	s0, [r2]
 8004376:	ee70 1a21 	vaddne.f32	s3, s0, s3
 800437a:	edc2 1a00 	vstr	s3, [r2]
 800437e:	edda 1a01 	vldr	s3, [sl, #4]
 8004382:	bf1c      	itt	ne
 8004384:	edd2 0a01 	vldrne	s1, [r2, #4]
 8004388:	ee70 1aa1 	vaddne.f32	s3, s1, s3
 800438c:	edc2 1a01 	vstr	s3, [r2, #4]
 8004390:	ed9a 1a02 	vldr	s2, [sl, #8]
 8004394:	bf1c      	itt	ne
 8004396:	ed92 0a02 	vldrne	s0, [r2, #8]
 800439a:	ee30 1a01 	vaddne.f32	s2, s0, s2
 800439e:	ed82 1a02 	vstr	s2, [r2, #8]
 80043a2:	edda 1a03 	vldr	s3, [sl, #12]
 80043a6:	f10a 0a10 	add.w	sl, sl, #16
 80043aa:	bf1c      	itt	ne
 80043ac:	edd2 0a03 	vldrne	s1, [r2, #12]
 80043b0:	ee70 1aa1 	vaddne.f32	s3, s1, s3
 80043b4:	edc2 1a03 	vstr	s3, [r2, #12]
 80043b8:	1e40      	subs	r0, r0, #1
 80043ba:	3210      	adds	r2, #16
 80043bc:	2800      	cmp	r0, #0
 80043be:	d1d4      	bne.n	800436a <forward_ap+0x1a2>
 80043c0:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 80043c4:	45ae      	cmp	lr, r5
 80043c6:	d3b1      	bcc.n	800432c <forward_ap+0x164>
 80043c8:	2c00      	cmp	r4, #0
 80043ca:	d039      	beq.n	8004440 <forward_ap+0x278>
 80043cc:	ee00 4a10 	vmov	s0, r4
 80043d0:	2200      	movs	r2, #0
 80043d2:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80043d6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80043da:	ee80 0a80 	vdiv.f32	s0, s1, s0
 80043de:	b379      	cbz	r1, 8004440 <forward_ap+0x278>
 80043e0:	f011 0003 	ands.w	r0, r1, #3
 80043e4:	464c      	mov	r4, r9
 80043e6:	d00a      	beq.n	80043fe <forward_ap+0x236>
 80043e8:	edd4 0a00 	vldr	s1, [r4]
 80043ec:	1c52      	adds	r2, r2, #1
 80043ee:	ee60 0a80 	vmul.f32	s1, s1, s0
 80043f2:	1e40      	subs	r0, r0, #1
 80043f4:	edc4 0a00 	vstr	s1, [r4]
 80043f8:	f104 0404 	add.w	r4, r4, #4
 80043fc:	d1f4      	bne.n	80043e8 <forward_ap+0x220>
 80043fe:	0888      	lsrs	r0, r1, #2
 8004400:	f000 801e 	beq.w	8004440 <forward_ap+0x278>
 8004404:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8004408:	edd2 0a00 	vldr	s1, [r2]
 800440c:	1e40      	subs	r0, r0, #1
 800440e:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004412:	edc2 0a00 	vstr	s1, [r2]
 8004416:	ed92 1a01 	vldr	s2, [r2, #4]
 800441a:	ee21 1a00 	vmul.f32	s2, s2, s0
 800441e:	ed82 1a01 	vstr	s2, [r2, #4]
 8004422:	edd2 0a02 	vldr	s1, [r2, #8]
 8004426:	ed92 1a03 	vldr	s2, [r2, #12]
 800442a:	ee60 1a80 	vmul.f32	s3, s1, s0
 800442e:	ee61 0a00 	vmul.f32	s1, s2, s0
 8004432:	edc2 1a02 	vstr	s3, [r2, #8]
 8004436:	edc2 0a03 	vstr	s1, [r2, #12]
 800443a:	f102 0210 	add.w	r2, r2, #16
 800443e:	d1e3      	bne.n	8004408 <forward_ap+0x240>
 8004440:	1e5b      	subs	r3, r3, #1
 8004442:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004444:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8004448:	f47f af64 	bne.w	8004314 <forward_ap+0x14c>
 800444c:	9a00      	ldr	r2, [sp, #0]
 800444e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004450:	9c02      	ldr	r4, [sp, #8]
 8004452:	eb09 0981 	add.w	r9, r9, r1, lsl #2
 8004456:	189a      	adds	r2, r3, r2
 8004458:	9200      	str	r2, [sp, #0]
 800445a:	1e64      	subs	r4, r4, #1
 800445c:	9402      	str	r4, [sp, #8]
 800445e:	f47f af12 	bne.w	8004286 <forward_ap+0xbe>
 8004462:	461c      	mov	r4, r3
 8004464:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004466:	f8dd c018 	ldr.w	ip, [sp, #24]
 800446a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800446e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004470:	9e01      	ldr	r6, [sp, #4]
 8004472:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8004474:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8004478:	19be      	adds	r6, r7, r6
 800447a:	9601      	str	r6, [sp, #4]
 800447c:	f1be 0e01 	subs.w	lr, lr, #1
 8004480:	f8cd e00c 	str.w	lr, [sp, #12]
 8004484:	f47f aed7 	bne.w	8004236 <forward_ap+0x6e>
 8004488:	b017      	add	sp, #92	; 0x5c
 800448a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004490 <ai_array_fmt_name>:
 8004490:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8004494:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8004498:	d062      	beq.n	8004560 <ai_array_fmt_name+0xd0>
 800449a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800449e:	1a89      	subs	r1, r1, r2
 80044a0:	f000 8094 	beq.w	80045cc <ai_array_fmt_name+0x13c>
 80044a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044a8:	1a89      	subs	r1, r1, r2
 80044aa:	d071      	beq.n	8004590 <ai_array_fmt_name+0x100>
 80044ac:	1a89      	subs	r1, r1, r2
 80044ae:	d063      	beq.n	8004578 <ai_array_fmt_name+0xe8>
 80044b0:	1fc9      	subs	r1, r1, #7
 80044b2:	f000 808e 	beq.w	80045d2 <ai_array_fmt_name+0x142>
 80044b6:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80044ba:	1a89      	subs	r1, r1, r2
 80044bc:	d05f      	beq.n	800457e <ai_array_fmt_name+0xee>
 80044be:	390f      	subs	r1, #15
 80044c0:	f000 808a 	beq.w	80045d8 <ai_array_fmt_name+0x148>
 80044c4:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80044c8:	1a89      	subs	r1, r1, r2
 80044ca:	d05b      	beq.n	8004584 <ai_array_fmt_name+0xf4>
 80044cc:	391f      	subs	r1, #31
 80044ce:	f000 8086 	beq.w	80045de <ai_array_fmt_name+0x14e>
 80044d2:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80044d6:	1a89      	subs	r1, r1, r2
 80044d8:	d057      	beq.n	800458a <ai_array_fmt_name+0xfa>
 80044da:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 8004ab0 <.text_15>
 80044de:	1a89      	subs	r1, r1, r2
 80044e0:	f000 808f 	beq.w	8004602 <ai_array_fmt_name+0x172>
 80044e4:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80044e8:	1a89      	subs	r1, r1, r2
 80044ea:	f000 8087 	beq.w	80045fc <ai_array_fmt_name+0x16c>
 80044ee:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 8004ab4 <.text_16>
 80044f2:	1a89      	subs	r1, r1, r2
 80044f4:	d05e      	beq.n	80045b4 <ai_array_fmt_name+0x124>
 80044f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044fa:	1a89      	subs	r1, r1, r2
 80044fc:	d057      	beq.n	80045ae <ai_array_fmt_name+0x11e>
 80044fe:	1a89      	subs	r1, r1, r2
 8004500:	d049      	beq.n	8004596 <ai_array_fmt_name+0x106>
 8004502:	1fc9      	subs	r1, r1, #7
 8004504:	d059      	beq.n	80045ba <ai_array_fmt_name+0x12a>
 8004506:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800450a:	1a89      	subs	r1, r1, r2
 800450c:	d046      	beq.n	800459c <ai_array_fmt_name+0x10c>
 800450e:	390f      	subs	r1, #15
 8004510:	d056      	beq.n	80045c0 <ai_array_fmt_name+0x130>
 8004512:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8004516:	1a89      	subs	r1, r1, r2
 8004518:	d043      	beq.n	80045a2 <ai_array_fmt_name+0x112>
 800451a:	391f      	subs	r1, #31
 800451c:	d053      	beq.n	80045c6 <ai_array_fmt_name+0x136>
 800451e:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8004522:	1a89      	subs	r1, r1, r2
 8004524:	d040      	beq.n	80045a8 <ai_array_fmt_name+0x118>
 8004526:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 8004ab0 <.text_15>
 800452a:	1a89      	subs	r1, r1, r2
 800452c:	d063      	beq.n	80045f6 <ai_array_fmt_name+0x166>
 800452e:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004532:	1a89      	subs	r1, r1, r2
 8004534:	d05c      	beq.n	80045f0 <ai_array_fmt_name+0x160>
 8004536:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 8004ab8 <.text_17>
 800453a:	1a89      	subs	r1, r1, r2
 800453c:	d019      	beq.n	8004572 <ai_array_fmt_name+0xe2>
 800453e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004542:	1a89      	subs	r1, r1, r2
 8004544:	d00f      	beq.n	8004566 <ai_array_fmt_name+0xd6>
 8004546:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800454a:	1a89      	subs	r1, r1, r2
 800454c:	d00e      	beq.n	800456c <ai_array_fmt_name+0xdc>
 800454e:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 8004abc <.text_18>
 8004552:	1a89      	subs	r1, r1, r2
 8004554:	d049      	beq.n	80045ea <ai_array_fmt_name+0x15a>
 8004556:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800455a:	1a89      	subs	r1, r1, r2
 800455c:	d042      	beq.n	80045e4 <ai_array_fmt_name+0x154>
 800455e:	e053      	b.n	8004608 <ai_array_fmt_name+0x178>
 8004560:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 8004564:	4770      	bx	lr
 8004566:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 800456a:	4770      	bx	lr
 800456c:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 8004570:	4770      	bx	lr
 8004572:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 8004576:	4770      	bx	lr
 8004578:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 800457c:	4770      	bx	lr
 800457e:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8004582:	4770      	bx	lr
 8004584:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8004588:	4770      	bx	lr
 800458a:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 800458e:	4770      	bx	lr
 8004590:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8004594:	4770      	bx	lr
 8004596:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 800459a:	4770      	bx	lr
 800459c:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80045a0:	4770      	bx	lr
 80045a2:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80045a6:	4770      	bx	lr
 80045a8:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80045ac:	4770      	bx	lr
 80045ae:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 80045b2:	4770      	bx	lr
 80045b4:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 80045b8:	4770      	bx	lr
 80045ba:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 80045be:	4770      	bx	lr
 80045c0:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 80045c4:	4770      	bx	lr
 80045c6:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 80045ca:	4770      	bx	lr
 80045cc:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 80045d0:	4770      	bx	lr
 80045d2:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 80045d6:	4770      	bx	lr
 80045d8:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 80045dc:	4770      	bx	lr
 80045de:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 80045e2:	4770      	bx	lr
 80045e4:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 80045e8:	4770      	bx	lr
 80045ea:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 80045ee:	4770      	bx	lr
 80045f0:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 80045f4:	4770      	bx	lr
 80045f6:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 80045fa:	4770      	bx	lr
 80045fc:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8004600:	4770      	bx	lr
 8004602:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 8004606:	4770      	bx	lr
 8004608:	f36f 000d 	bfc	r0, #0, #14
 800460c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8004610:	2840      	cmp	r0, #64	; 0x40
 8004612:	d009      	beq.n	8004628 <ai_array_fmt_name+0x198>
 8004614:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 8004ac0 <.text_19>
 8004618:	4288      	cmp	r0, r1
 800461a:	d00b      	beq.n	8004634 <ai_array_fmt_name+0x1a4>
 800461c:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 8004ac4 <.text_20>
 8004620:	4288      	cmp	r0, r1
 8004622:	d004      	beq.n	800462e <ai_array_fmt_name+0x19e>
 8004624:	a07a      	add	r0, pc, #488	; (adr r0, 8004810 <.text_8>)
 8004626:	4770      	bx	lr
 8004628:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 800462c:	4770      	bx	lr
 800462e:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 8004632:	4770      	bx	lr
 8004634:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 8004638:	4770      	bx	lr

0800463a <ai_array_fmt_exported>:
 800463a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800463e:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8004642:	d068      	beq.n	8004716 <ai_array_fmt_exported+0xdc>
 8004644:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004648:	1a89      	subs	r1, r1, r2
 800464a:	d064      	beq.n	8004716 <ai_array_fmt_exported+0xdc>
 800464c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004650:	1a89      	subs	r1, r1, r2
 8004652:	d062      	beq.n	800471a <ai_array_fmt_exported+0xe0>
 8004654:	1a89      	subs	r1, r1, r2
 8004656:	d05e      	beq.n	8004716 <ai_array_fmt_exported+0xdc>
 8004658:	1fc9      	subs	r1, r1, #7
 800465a:	d05c      	beq.n	8004716 <ai_array_fmt_exported+0xdc>
 800465c:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004660:	1a89      	subs	r1, r1, r2
 8004662:	d058      	beq.n	8004716 <ai_array_fmt_exported+0xdc>
 8004664:	390f      	subs	r1, #15
 8004666:	d056      	beq.n	8004716 <ai_array_fmt_exported+0xdc>
 8004668:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800466c:	1a89      	subs	r1, r1, r2
 800466e:	d054      	beq.n	800471a <ai_array_fmt_exported+0xe0>
 8004670:	391f      	subs	r1, #31
 8004672:	d052      	beq.n	800471a <ai_array_fmt_exported+0xe0>
 8004674:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8004678:	1a89      	subs	r1, r1, r2
 800467a:	d04e      	beq.n	800471a <ai_array_fmt_exported+0xe0>
 800467c:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 8004ab0 <.text_15>
 8004680:	1a89      	subs	r1, r1, r2
 8004682:	d04a      	beq.n	800471a <ai_array_fmt_exported+0xe0>
 8004684:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004688:	1a89      	subs	r1, r1, r2
 800468a:	d046      	beq.n	800471a <ai_array_fmt_exported+0xe0>
 800468c:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 8004ab4 <.text_16>
 8004690:	1a89      	subs	r1, r1, r2
 8004692:	d040      	beq.n	8004716 <ai_array_fmt_exported+0xdc>
 8004694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004698:	1a89      	subs	r1, r1, r2
 800469a:	d03e      	beq.n	800471a <ai_array_fmt_exported+0xe0>
 800469c:	1a89      	subs	r1, r1, r2
 800469e:	d03a      	beq.n	8004716 <ai_array_fmt_exported+0xdc>
 80046a0:	1fc9      	subs	r1, r1, #7
 80046a2:	d038      	beq.n	8004716 <ai_array_fmt_exported+0xdc>
 80046a4:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80046a8:	1a89      	subs	r1, r1, r2
 80046aa:	d034      	beq.n	8004716 <ai_array_fmt_exported+0xdc>
 80046ac:	390f      	subs	r1, #15
 80046ae:	d032      	beq.n	8004716 <ai_array_fmt_exported+0xdc>
 80046b0:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80046b4:	1a89      	subs	r1, r1, r2
 80046b6:	d030      	beq.n	800471a <ai_array_fmt_exported+0xe0>
 80046b8:	391f      	subs	r1, #31
 80046ba:	d02e      	beq.n	800471a <ai_array_fmt_exported+0xe0>
 80046bc:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80046c0:	1a89      	subs	r1, r1, r2
 80046c2:	d02a      	beq.n	800471a <ai_array_fmt_exported+0xe0>
 80046c4:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 8004ab0 <.text_15>
 80046c8:	1a89      	subs	r1, r1, r2
 80046ca:	d026      	beq.n	800471a <ai_array_fmt_exported+0xe0>
 80046cc:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80046d0:	1a89      	subs	r1, r1, r2
 80046d2:	d022      	beq.n	800471a <ai_array_fmt_exported+0xe0>
 80046d4:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 8004ab8 <.text_17>
 80046d8:	1a89      	subs	r1, r1, r2
 80046da:	d01e      	beq.n	800471a <ai_array_fmt_exported+0xe0>
 80046dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046e0:	1a89      	subs	r1, r1, r2
 80046e2:	d018      	beq.n	8004716 <ai_array_fmt_exported+0xdc>
 80046e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046e8:	1a89      	subs	r1, r1, r2
 80046ea:	d016      	beq.n	800471a <ai_array_fmt_exported+0xe0>
 80046ec:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 8004abc <.text_18>
 80046f0:	1a89      	subs	r1, r1, r2
 80046f2:	d012      	beq.n	800471a <ai_array_fmt_exported+0xe0>
 80046f4:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80046f8:	1a89      	subs	r1, r1, r2
 80046fa:	d00e      	beq.n	800471a <ai_array_fmt_exported+0xe0>
 80046fc:	f36f 000d 	bfc	r0, #0, #14
 8004700:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8004704:	2840      	cmp	r0, #64	; 0x40
 8004706:	bf1f      	itttt	ne
 8004708:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8004ac0 <.text_19>
 800470c:	4298      	cmpne	r0, r3
 800470e:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8004ac4 <.text_20>
 8004712:	4298      	cmpne	r0, r3
 8004714:	d101      	bne.n	800471a <ai_array_fmt_exported+0xe0>
 8004716:	2001      	movs	r0, #1
 8004718:	4770      	bx	lr
 800471a:	2000      	movs	r0, #0
 800471c:	4770      	bx	lr

0800471e <ai_array_fmt_valid>:
 800471e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8004722:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8004726:	d069      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 8004728:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800472c:	1a89      	subs	r1, r1, r2
 800472e:	d065      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 8004730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004734:	1a89      	subs	r1, r1, r2
 8004736:	d061      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 8004738:	1a89      	subs	r1, r1, r2
 800473a:	d05f      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 800473c:	1fc9      	subs	r1, r1, #7
 800473e:	d05d      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 8004740:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004744:	1a89      	subs	r1, r1, r2
 8004746:	d059      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 8004748:	390f      	subs	r1, #15
 800474a:	d057      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 800474c:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8004750:	1a89      	subs	r1, r1, r2
 8004752:	d053      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 8004754:	391f      	subs	r1, #31
 8004756:	d051      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 8004758:	f640 72e1 	movw	r2, #4065	; 0xfe1
 800475c:	1a89      	subs	r1, r1, r2
 800475e:	d04d      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 8004760:	f8df 234c 	ldr.w	r2, [pc, #844]	; 8004ab0 <.text_15>
 8004764:	1a89      	subs	r1, r1, r2
 8004766:	d049      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 8004768:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800476c:	1a89      	subs	r1, r1, r2
 800476e:	d045      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 8004770:	f8df 2340 	ldr.w	r2, [pc, #832]	; 8004ab4 <.text_16>
 8004774:	1a89      	subs	r1, r1, r2
 8004776:	d041      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 8004778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800477c:	1a89      	subs	r1, r1, r2
 800477e:	d03d      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 8004780:	1a89      	subs	r1, r1, r2
 8004782:	d03b      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 8004784:	1fc9      	subs	r1, r1, #7
 8004786:	d039      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 8004788:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800478c:	1a89      	subs	r1, r1, r2
 800478e:	d035      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 8004790:	390f      	subs	r1, #15
 8004792:	d033      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 8004794:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8004798:	1a89      	subs	r1, r1, r2
 800479a:	d02f      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 800479c:	391f      	subs	r1, #31
 800479e:	d02d      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 80047a0:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80047a4:	1a89      	subs	r1, r1, r2
 80047a6:	d029      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 80047a8:	f8df 2304 	ldr.w	r2, [pc, #772]	; 8004ab0 <.text_15>
 80047ac:	1a89      	subs	r1, r1, r2
 80047ae:	d025      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 80047b0:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80047b4:	1a89      	subs	r1, r1, r2
 80047b6:	d021      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 80047b8:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 8004ab8 <.text_17>
 80047bc:	1a89      	subs	r1, r1, r2
 80047be:	d01d      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 80047c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047c4:	1a89      	subs	r1, r1, r2
 80047c6:	d019      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 80047c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80047cc:	1a89      	subs	r1, r1, r2
 80047ce:	d015      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 80047d0:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 8004abc <.text_18>
 80047d4:	1a89      	subs	r1, r1, r2
 80047d6:	d011      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 80047d8:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80047dc:	1a89      	subs	r1, r1, r2
 80047de:	bf1e      	ittt	ne
 80047e0:	f36f 000d 	bfcne	r0, #0, #14
 80047e4:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 80047e8:	2840      	cmpne	r0, #64	; 0x40
 80047ea:	d007      	beq.n	80047fc <ai_array_fmt_valid+0xde>
 80047ec:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 8004ac0 <.text_19>
 80047f0:	4298      	cmp	r0, r3
 80047f2:	bf1c      	itt	ne
 80047f4:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 8004ac4 <.text_20>
 80047f8:	4298      	cmpne	r0, r3
 80047fa:	d101      	bne.n	8004800 <ai_array_fmt_valid+0xe2>
 80047fc:	2001      	movs	r0, #1
 80047fe:	4770      	bx	lr
 8004800:	2000      	movs	r0, #0
 8004802:	4770      	bx	lr

08004804 <ai_array_fmt_get_formats>:
 8004804:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 8004ac8 <.text_21>
 8004808:	6001      	str	r1, [r0, #0]
 800480a:	201c      	movs	r0, #28
 800480c:	4770      	bx	lr
	...

08004810 <.text_8>:
 8004810:	00000000 	.word	0x00000000

08004814 <ai_buffer_fmt_name>:
 8004814:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8004818:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800481c:	d022      	beq.n	8004864 <ai_buffer_fmt_name+0x50>
 800481e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004822:	1a89      	subs	r1, r1, r2
 8004824:	d039      	beq.n	800489a <ai_buffer_fmt_name+0x86>
 8004826:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800482a:	1a89      	subs	r1, r1, r2
 800482c:	d020      	beq.n	8004870 <ai_buffer_fmt_name+0x5c>
 800482e:	1fc9      	subs	r1, r1, #7
 8004830:	d036      	beq.n	80048a0 <ai_buffer_fmt_name+0x8c>
 8004832:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004836:	1a89      	subs	r1, r1, r2
 8004838:	d01d      	beq.n	8004876 <ai_buffer_fmt_name+0x62>
 800483a:	390f      	subs	r1, #15
 800483c:	d033      	beq.n	80048a6 <ai_buffer_fmt_name+0x92>
 800483e:	4aa3      	ldr	r2, [pc, #652]	; (8004acc <.text_22>)
 8004840:	1a89      	subs	r1, r1, r2
 8004842:	d021      	beq.n	8004888 <ai_buffer_fmt_name+0x74>
 8004844:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004848:	1a89      	subs	r1, r1, r2
 800484a:	d017      	beq.n	800487c <ai_buffer_fmt_name+0x68>
 800484c:	1fc9      	subs	r1, r1, #7
 800484e:	d01e      	beq.n	800488e <ai_buffer_fmt_name+0x7a>
 8004850:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004854:	1a89      	subs	r1, r1, r2
 8004856:	d014      	beq.n	8004882 <ai_buffer_fmt_name+0x6e>
 8004858:	390f      	subs	r1, #15
 800485a:	d01b      	beq.n	8004894 <ai_buffer_fmt_name+0x80>
 800485c:	4a9c      	ldr	r2, [pc, #624]	; (8004ad0 <.text_23>)
 800485e:	1a89      	subs	r1, r1, r2
 8004860:	d003      	beq.n	800486a <ai_buffer_fmt_name+0x56>
 8004862:	e023      	b.n	80048ac <ai_buffer_fmt_name+0x98>
 8004864:	f20f 3070 	addw	r0, pc, #880	; 0x370
 8004868:	4770      	bx	lr
 800486a:	f20f 3078 	addw	r0, pc, #888	; 0x378
 800486e:	4770      	bx	lr
 8004870:	f20f 3094 	addw	r0, pc, #916	; 0x394
 8004874:	4770      	bx	lr
 8004876:	f20f 3098 	addw	r0, pc, #920	; 0x398
 800487a:	4770      	bx	lr
 800487c:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 8004880:	4770      	bx	lr
 8004882:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 8004886:	4770      	bx	lr
 8004888:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 800488c:	4770      	bx	lr
 800488e:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8004892:	4770      	bx	lr
 8004894:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8004898:	4770      	bx	lr
 800489a:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 800489e:	4770      	bx	lr
 80048a0:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 80048a4:	4770      	bx	lr
 80048a6:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 80048aa:	4770      	bx	lr
 80048ac:	0b80      	lsrs	r0, r0, #14
 80048ae:	0380      	lsls	r0, r0, #14
 80048b0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80048b4:	2840      	cmp	r0, #64	; 0x40
 80048b6:	d007      	beq.n	80048c8 <ai_buffer_fmt_name+0xb4>
 80048b8:	4981      	ldr	r1, [pc, #516]	; (8004ac0 <.text_19>)
 80048ba:	4288      	cmp	r0, r1
 80048bc:	d00a      	beq.n	80048d4 <ai_buffer_fmt_name+0xc0>
 80048be:	4981      	ldr	r1, [pc, #516]	; (8004ac4 <.text_20>)
 80048c0:	4288      	cmp	r0, r1
 80048c2:	d004      	beq.n	80048ce <ai_buffer_fmt_name+0xba>
 80048c4:	a079      	add	r0, pc, #484	; (adr r0, 8004aac <.text_14>)
 80048c6:	4770      	bx	lr
 80048c8:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 80048cc:	4770      	bx	lr
 80048ce:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 80048d2:	4770      	bx	lr
 80048d4:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 80048d8:	4770      	bx	lr

080048da <ai_buffer_fmt_valid>:
 80048da:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80048de:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80048e2:	d02d      	beq.n	8004940 <ai_buffer_fmt_valid+0x66>
 80048e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80048e8:	1a89      	subs	r1, r1, r2
 80048ea:	d029      	beq.n	8004940 <ai_buffer_fmt_valid+0x66>
 80048ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048f0:	1a89      	subs	r1, r1, r2
 80048f2:	d025      	beq.n	8004940 <ai_buffer_fmt_valid+0x66>
 80048f4:	1fc9      	subs	r1, r1, #7
 80048f6:	d023      	beq.n	8004940 <ai_buffer_fmt_valid+0x66>
 80048f8:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80048fc:	1a89      	subs	r1, r1, r2
 80048fe:	d01f      	beq.n	8004940 <ai_buffer_fmt_valid+0x66>
 8004900:	390f      	subs	r1, #15
 8004902:	d01d      	beq.n	8004940 <ai_buffer_fmt_valid+0x66>
 8004904:	4a71      	ldr	r2, [pc, #452]	; (8004acc <.text_22>)
 8004906:	1a89      	subs	r1, r1, r2
 8004908:	d01a      	beq.n	8004940 <ai_buffer_fmt_valid+0x66>
 800490a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800490e:	1a89      	subs	r1, r1, r2
 8004910:	d016      	beq.n	8004940 <ai_buffer_fmt_valid+0x66>
 8004912:	1fc9      	subs	r1, r1, #7
 8004914:	d014      	beq.n	8004940 <ai_buffer_fmt_valid+0x66>
 8004916:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800491a:	1a89      	subs	r1, r1, r2
 800491c:	d010      	beq.n	8004940 <ai_buffer_fmt_valid+0x66>
 800491e:	390f      	subs	r1, #15
 8004920:	d00e      	beq.n	8004940 <ai_buffer_fmt_valid+0x66>
 8004922:	4a6b      	ldr	r2, [pc, #428]	; (8004ad0 <.text_23>)
 8004924:	1a89      	subs	r1, r1, r2
 8004926:	bf1f      	itttt	ne
 8004928:	0b80      	lsrne	r0, r0, #14
 800492a:	0380      	lslne	r0, r0, #14
 800492c:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8004930:	2840      	cmpne	r0, #64	; 0x40
 8004932:	d005      	beq.n	8004940 <ai_buffer_fmt_valid+0x66>
 8004934:	4b62      	ldr	r3, [pc, #392]	; (8004ac0 <.text_19>)
 8004936:	4298      	cmp	r0, r3
 8004938:	bf1c      	itt	ne
 800493a:	4b62      	ldrne	r3, [pc, #392]	; (8004ac4 <.text_20>)
 800493c:	4298      	cmpne	r0, r3
 800493e:	d101      	bne.n	8004944 <ai_buffer_fmt_valid+0x6a>
 8004940:	2001      	movs	r0, #1
 8004942:	4770      	bx	lr
 8004944:	2000      	movs	r0, #0
 8004946:	4770      	bx	lr

08004948 <ai_buffer_fmt_get_formats>:
 8004948:	4962      	ldr	r1, [pc, #392]	; (8004ad4 <.text_24>)
 800494a:	6001      	str	r1, [r0, #0]
 800494c:	200c      	movs	r0, #12
 800494e:	4770      	bx	lr

08004950 <ai_array_to_buffer_fmt>:
 8004950:	4601      	mov	r1, r0
 8004952:	2040      	movs	r0, #64	; 0x40
 8004954:	f3c1 4243 	ubfx	r2, r1, #17, #4
 8004958:	2a02      	cmp	r2, #2
 800495a:	d104      	bne.n	8004966 <ai_array_to_buffer_fmt+0x16>
 800495c:	485e      	ldr	r0, [pc, #376]	; (8004ad8 <.text_25>)
 800495e:	4008      	ands	r0, r1
 8004960:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8004964:	e037      	b.n	80049d6 <ai_array_to_buffer_fmt+0x86>
 8004966:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 800496a:	4b55      	ldr	r3, [pc, #340]	; (8004ac0 <.text_19>)
 800496c:	1ad2      	subs	r2, r2, r3
 800496e:	d02d      	beq.n	80049cc <ai_array_to_buffer_fmt+0x7c>
 8004970:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004974:	1ad2      	subs	r2, r2, r3
 8004976:	d01b      	beq.n	80049b0 <ai_array_to_buffer_fmt+0x60>
 8004978:	1fd2      	subs	r2, r2, #7
 800497a:	d029      	beq.n	80049d0 <ai_array_to_buffer_fmt+0x80>
 800497c:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8004980:	1ad2      	subs	r2, r2, r3
 8004982:	d017      	beq.n	80049b4 <ai_array_to_buffer_fmt+0x64>
 8004984:	3a0f      	subs	r2, #15
 8004986:	d025      	beq.n	80049d4 <ai_array_to_buffer_fmt+0x84>
 8004988:	4b50      	ldr	r3, [pc, #320]	; (8004acc <.text_22>)
 800498a:	1ad2      	subs	r2, r2, r3
 800498c:	d018      	beq.n	80049c0 <ai_array_to_buffer_fmt+0x70>
 800498e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004992:	1ad2      	subs	r2, r2, r3
 8004994:	d010      	beq.n	80049b8 <ai_array_to_buffer_fmt+0x68>
 8004996:	1fd2      	subs	r2, r2, #7
 8004998:	d014      	beq.n	80049c4 <ai_array_to_buffer_fmt+0x74>
 800499a:	f240 33f9 	movw	r3, #1017	; 0x3f9
 800499e:	1ad2      	subs	r2, r2, r3
 80049a0:	d00c      	beq.n	80049bc <ai_array_to_buffer_fmt+0x6c>
 80049a2:	3a0f      	subs	r2, #15
 80049a4:	d010      	beq.n	80049c8 <ai_array_to_buffer_fmt+0x78>
 80049a6:	4b4a      	ldr	r3, [pc, #296]	; (8004ad0 <.text_23>)
 80049a8:	1ad2      	subs	r2, r2, r3
 80049aa:	d114      	bne.n	80049d6 <ai_array_to_buffer_fmt+0x86>
 80049ac:	484b      	ldr	r0, [pc, #300]	; (8004adc <.text_26>)
 80049ae:	e012      	b.n	80049d6 <ai_array_to_buffer_fmt+0x86>
 80049b0:	484b      	ldr	r0, [pc, #300]	; (8004ae0 <.text_27>)
 80049b2:	e010      	b.n	80049d6 <ai_array_to_buffer_fmt+0x86>
 80049b4:	484b      	ldr	r0, [pc, #300]	; (8004ae4 <.text_28>)
 80049b6:	e00e      	b.n	80049d6 <ai_array_to_buffer_fmt+0x86>
 80049b8:	484b      	ldr	r0, [pc, #300]	; (8004ae8 <.text_29>)
 80049ba:	e00c      	b.n	80049d6 <ai_array_to_buffer_fmt+0x86>
 80049bc:	484b      	ldr	r0, [pc, #300]	; (8004aec <.text_30>)
 80049be:	e00a      	b.n	80049d6 <ai_array_to_buffer_fmt+0x86>
 80049c0:	4840      	ldr	r0, [pc, #256]	; (8004ac4 <.text_20>)
 80049c2:	e008      	b.n	80049d6 <ai_array_to_buffer_fmt+0x86>
 80049c4:	484a      	ldr	r0, [pc, #296]	; (8004af0 <.text_31>)
 80049c6:	e006      	b.n	80049d6 <ai_array_to_buffer_fmt+0x86>
 80049c8:	484a      	ldr	r0, [pc, #296]	; (8004af4 <.text_32>)
 80049ca:	e004      	b.n	80049d6 <ai_array_to_buffer_fmt+0x86>
 80049cc:	4618      	mov	r0, r3
 80049ce:	e002      	b.n	80049d6 <ai_array_to_buffer_fmt+0x86>
 80049d0:	4849      	ldr	r0, [pc, #292]	; (8004af8 <.text_33>)
 80049d2:	e000      	b.n	80049d6 <ai_array_to_buffer_fmt+0x86>
 80049d4:	4849      	ldr	r0, [pc, #292]	; (8004afc <.text_34>)
 80049d6:	004a      	lsls	r2, r1, #1
 80049d8:	bf4c      	ite	mi
 80049da:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 80049de:	2200      	movpl	r2, #0
 80049e0:	4310      	orrs	r0, r2
 80049e2:	008a      	lsls	r2, r1, #2
 80049e4:	bf4c      	ite	mi
 80049e6:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 80049ea:	2200      	movpl	r2, #0
 80049ec:	4310      	orrs	r0, r2
 80049ee:	0109      	lsls	r1, r1, #4
 80049f0:	bf4c      	ite	mi
 80049f2:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 80049f6:	2100      	movpl	r1, #0
 80049f8:	4308      	orrs	r0, r1
 80049fa:	4770      	bx	lr

080049fc <ai_buffer_to_array_fmt>:
 80049fc:	4602      	mov	r2, r0
 80049fe:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 8004a02:	3840      	subs	r0, #64	; 0x40
 8004a04:	d022      	beq.n	8004a4c <ai_buffer_to_array_fmt+0x50>
 8004a06:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8004a0a:	1a40      	subs	r0, r0, r1
 8004a0c:	d030      	beq.n	8004a70 <ai_buffer_to_array_fmt+0x74>
 8004a0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a12:	1a40      	subs	r0, r0, r1
 8004a14:	d01e      	beq.n	8004a54 <ai_buffer_to_array_fmt+0x58>
 8004a16:	1fc0      	subs	r0, r0, #7
 8004a18:	d02c      	beq.n	8004a74 <ai_buffer_to_array_fmt+0x78>
 8004a1a:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8004a1e:	1a40      	subs	r0, r0, r1
 8004a20:	d01a      	beq.n	8004a58 <ai_buffer_to_array_fmt+0x5c>
 8004a22:	380f      	subs	r0, #15
 8004a24:	d028      	beq.n	8004a78 <ai_buffer_to_array_fmt+0x7c>
 8004a26:	4929      	ldr	r1, [pc, #164]	; (8004acc <.text_22>)
 8004a28:	1a40      	subs	r0, r0, r1
 8004a2a:	d01b      	beq.n	8004a64 <ai_buffer_to_array_fmt+0x68>
 8004a2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a30:	1a40      	subs	r0, r0, r1
 8004a32:	d013      	beq.n	8004a5c <ai_buffer_to_array_fmt+0x60>
 8004a34:	1fc0      	subs	r0, r0, #7
 8004a36:	d017      	beq.n	8004a68 <ai_buffer_to_array_fmt+0x6c>
 8004a38:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8004a3c:	1a40      	subs	r0, r0, r1
 8004a3e:	d00f      	beq.n	8004a60 <ai_buffer_to_array_fmt+0x64>
 8004a40:	380f      	subs	r0, #15
 8004a42:	d013      	beq.n	8004a6c <ai_buffer_to_array_fmt+0x70>
 8004a44:	4922      	ldr	r1, [pc, #136]	; (8004ad0 <.text_23>)
 8004a46:	1a40      	subs	r0, r0, r1
 8004a48:	d002      	beq.n	8004a50 <ai_buffer_to_array_fmt+0x54>
 8004a4a:	e017      	b.n	8004a7c <ai_buffer_to_array_fmt+0x80>
 8004a4c:	2040      	movs	r0, #64	; 0x40
 8004a4e:	e01f      	b.n	8004a90 <ai_buffer_to_array_fmt+0x94>
 8004a50:	4822      	ldr	r0, [pc, #136]	; (8004adc <.text_26>)
 8004a52:	e01d      	b.n	8004a90 <ai_buffer_to_array_fmt+0x94>
 8004a54:	4822      	ldr	r0, [pc, #136]	; (8004ae0 <.text_27>)
 8004a56:	e01b      	b.n	8004a90 <ai_buffer_to_array_fmt+0x94>
 8004a58:	4822      	ldr	r0, [pc, #136]	; (8004ae4 <.text_28>)
 8004a5a:	e019      	b.n	8004a90 <ai_buffer_to_array_fmt+0x94>
 8004a5c:	4822      	ldr	r0, [pc, #136]	; (8004ae8 <.text_29>)
 8004a5e:	e017      	b.n	8004a90 <ai_buffer_to_array_fmt+0x94>
 8004a60:	4822      	ldr	r0, [pc, #136]	; (8004aec <.text_30>)
 8004a62:	e015      	b.n	8004a90 <ai_buffer_to_array_fmt+0x94>
 8004a64:	4817      	ldr	r0, [pc, #92]	; (8004ac4 <.text_20>)
 8004a66:	e013      	b.n	8004a90 <ai_buffer_to_array_fmt+0x94>
 8004a68:	4821      	ldr	r0, [pc, #132]	; (8004af0 <.text_31>)
 8004a6a:	e011      	b.n	8004a90 <ai_buffer_to_array_fmt+0x94>
 8004a6c:	4821      	ldr	r0, [pc, #132]	; (8004af4 <.text_32>)
 8004a6e:	e00f      	b.n	8004a90 <ai_buffer_to_array_fmt+0x94>
 8004a70:	4813      	ldr	r0, [pc, #76]	; (8004ac0 <.text_19>)
 8004a72:	e00d      	b.n	8004a90 <ai_buffer_to_array_fmt+0x94>
 8004a74:	4820      	ldr	r0, [pc, #128]	; (8004af8 <.text_33>)
 8004a76:	e00b      	b.n	8004a90 <ai_buffer_to_array_fmt+0x94>
 8004a78:	4820      	ldr	r0, [pc, #128]	; (8004afc <.text_34>)
 8004a7a:	e009      	b.n	8004a90 <ai_buffer_to_array_fmt+0x94>
 8004a7c:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 8004a80:	f3c2 000d 	ubfx	r0, r2, #0, #14
 8004a84:	2900      	cmp	r1, #0
 8004a86:	bf14      	ite	ne
 8004a88:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 8004a8c:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 8004a90:	0051      	lsls	r1, r2, #1
 8004a92:	bf48      	it	mi
 8004a94:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 8004a98:	0093      	lsls	r3, r2, #2
 8004a9a:	bf48      	it	mi
 8004a9c:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 8004aa0:	0111      	lsls	r1, r2, #4
 8004aa2:	bf48      	it	mi
 8004aa4:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 8004aa8:	4770      	bx	lr
	...

08004aac <.text_14>:
 8004aac:	00000000 	.word	0x00000000

08004ab0 <.text_15>:
 8004ab0:	002be80f 	.word	0x002be80f

08004ab4 <.text_16>:
 8004ab4:	003bf7f1 	.word	0x003bf7f1

08004ab8 <.text_17>:
 8004ab8:	00b9fff1 	.word	0x00b9fff1

08004abc <.text_18>:
 8004abc:	004df000 	.word	0x004df000

08004ac0 <.text_19>:
 8004ac0:	00040040 	.word	0x00040040

08004ac4 <.text_20>:
 8004ac4:	00840040 	.word	0x00840040

08004ac8 <.text_21>:
 8004ac8:	0801226c 	.word	0x0801226c

08004acc <.text_22>:
 8004acc:	007ff7f1 	.word	0x007ff7f1

08004ad0 <.text_23>:
 8004ad0:	00fe07f1 	.word	0x00fe07f1

08004ad4 <.text_24>:
 8004ad4:	080122dc 	.word	0x080122dc

08004ad8 <.text_25>:
 8004ad8:	00803fff 	.word	0x00803fff

08004adc <.text_26>:
 8004adc:	01821040 	.word	0x01821040

08004ae0 <.text_27>:
 8004ae0:	00040440 	.word	0x00040440

08004ae4 <.text_28>:
 8004ae4:	00040840 	.word	0x00040840

08004ae8 <.text_29>:
 8004ae8:	00840440 	.word	0x00840440

08004aec <.text_30>:
 8004aec:	00840840 	.word	0x00840840

08004af0 <.text_31>:
 8004af0:	00840447 	.word	0x00840447

08004af4 <.text_32>:
 8004af4:	0084084f 	.word	0x0084084f

08004af8 <.text_33>:
 8004af8:	00040447 	.word	0x00040447

08004afc <.text_34>:
 8004afc:	0004084f 	.word	0x0004084f

08004b00 <ai_array_get_byte_size>:
 8004b00:	b909      	cbnz	r1, 8004b06 <ai_array_get_byte_size+0x6>
 8004b02:	2000      	movs	r0, #0
 8004b04:	4770      	bx	lr
 8004b06:	11c2      	asrs	r2, r0, #7
 8004b08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b0c:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8004b10:	189b      	adds	r3, r3, r2
 8004b12:	4359      	muls	r1, r3
 8004b14:	ea4f 4c60 	mov.w	ip, r0, asr #17
 8004b18:	f00c 0c0f 	and.w	ip, ip, #15
 8004b1c:	1543      	asrs	r3, r0, #21
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	1dc9      	adds	r1, r1, #7
 8004b24:	08c9      	lsrs	r1, r1, #3
 8004b26:	00c9      	lsls	r1, r1, #3
 8004b28:	40d9      	lsrs	r1, r3
 8004b2a:	f1bc 0f04 	cmp.w	ip, #4
 8004b2e:	d00a      	beq.n	8004b46 <ai_array_get_byte_size+0x46>
 8004b30:	f1bc 0f08 	cmp.w	ip, #8
 8004b34:	bf02      	ittt	eq
 8004b36:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 8004b3a:	1882      	addeq	r2, r0, r2
 8004b3c:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 8004b40:	1dc9      	adds	r1, r1, #7
 8004b42:	08c8      	lsrs	r0, r1, #3
 8004b44:	4770      	bx	lr
 8004b46:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8004b4a:	1882      	adds	r2, r0, r2
 8004b4c:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8004b50:	1dc9      	adds	r1, r1, #7
 8004b52:	08c8      	lsrs	r0, r1, #3
 8004b54:	4770      	bx	lr

08004b56 <ai_array_get_data_byte_size>:
 8004b56:	b909      	cbnz	r1, 8004b5c <ai_array_get_data_byte_size+0x6>
 8004b58:	2000      	movs	r0, #0
 8004b5a:	4770      	bx	lr
 8004b5c:	11c2      	asrs	r2, r0, #7
 8004b5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b62:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8004b66:	189a      	adds	r2, r3, r2
 8004b68:	4351      	muls	r1, r2
 8004b6a:	1540      	asrs	r0, r0, #21
 8004b6c:	f000 0003 	and.w	r0, r0, #3
 8004b70:	1dc9      	adds	r1, r1, #7
 8004b72:	08c9      	lsrs	r1, r1, #3
 8004b74:	00c9      	lsls	r1, r1, #3
 8004b76:	40c1      	lsrs	r1, r0
 8004b78:	1dc9      	adds	r1, r1, #7
 8004b7a:	08c8      	lsrs	r0, r1, #3
 8004b7c:	4770      	bx	lr

08004b7e <ai_array_get_elems_from_size>:
 8004b7e:	b909      	cbnz	r1, 8004b84 <ai_array_get_elems_from_size+0x6>
 8004b80:	2000      	movs	r0, #0
 8004b82:	4770      	bx	lr
 8004b84:	1442      	asrs	r2, r0, #17
 8004b86:	00c9      	lsls	r1, r1, #3
 8004b88:	f002 020f 	and.w	r2, r2, #15
 8004b8c:	2a04      	cmp	r2, #4
 8004b8e:	d002      	beq.n	8004b96 <ai_array_get_elems_from_size+0x18>
 8004b90:	2a08      	cmp	r2, #8
 8004b92:	d009      	beq.n	8004ba8 <ai_array_get_elems_from_size+0x2a>
 8004b94:	e010      	b.n	8004bb8 <ai_array_get_elems_from_size+0x3a>
 8004b96:	11c3      	asrs	r3, r0, #7
 8004b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b9c:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8004ba0:	18d2      	adds	r2, r2, r3
 8004ba2:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 8004ba6:	e007      	b.n	8004bb8 <ai_array_get_elems_from_size+0x3a>
 8004ba8:	11c2      	asrs	r2, r0, #7
 8004baa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bae:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8004bb2:	189a      	adds	r2, r3, r2
 8004bb4:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 8004bb8:	1542      	asrs	r2, r0, #21
 8004bba:	f002 0203 	and.w	r2, r2, #3
 8004bbe:	4091      	lsls	r1, r2
 8004bc0:	1dc9      	adds	r1, r1, #7
 8004bc2:	11c3      	asrs	r3, r0, #7
 8004bc4:	08c9      	lsrs	r1, r1, #3
 8004bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bca:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8004bce:	00c9      	lsls	r1, r1, #3
 8004bd0:	18c0      	adds	r0, r0, r3
 8004bd2:	fbb1 f0f0 	udiv	r0, r1, r0
 8004bd6:	4770      	bx	lr

08004bd8 <.text_38>:
 8004bd8:	5f544d46 	.word	0x5f544d46
 8004bdc:	454e4f4e 	.word	0x454e4f4e
 8004be0:	00000000 	.word	0x00000000

08004be4 <.text_39>:
 8004be4:	5f544d46 	.word	0x5f544d46
 8004be8:	414f4c46 	.word	0x414f4c46
 8004bec:	0054      	.short	0x0054
	...

08004bf0 <.text_40>:
 8004bf0:	5f544d46 	.word	0x5f544d46
 8004bf4:	414f4c46 	.word	0x414f4c46
 8004bf8:	00343654 	.word	0x00343654

08004bfc <.text_41>:
 8004bfc:	5f544d46 	.word	0x5f544d46
 8004c00:	414f4c46 	.word	0x414f4c46
 8004c04:	00363154 	.word	0x00363154

08004c08 <.text_42>:
 8004c08:	5f544d46 	.word	0x5f544d46
 8004c0c:	3855      	.short	0x3855
	...

08004c10 <.text_43>:
 8004c10:	5f544d46 	.word	0x5f544d46
 8004c14:	00363155 	.word	0x00363155

08004c18 <.text_44>:
 8004c18:	5f544d46 	.word	0x5f544d46
 8004c1c:	00323355 	.word	0x00323355

08004c20 <.text_45>:
 8004c20:	5f544d46 	.word	0x5f544d46
 8004c24:	00343655 	.word	0x00343655

08004c28 <.text_46>:
 8004c28:	5f544d46 	.word	0x5f544d46
 8004c2c:	3455      	.short	0x3455
	...

08004c30 <.text_47>:
 8004c30:	5f544d46 	.word	0x5f544d46
 8004c34:	3853      	.short	0x3853
	...

08004c38 <.text_48>:
 8004c38:	5f544d46 	.word	0x5f544d46
 8004c3c:	00363153 	.word	0x00363153

08004c40 <.text_49>:
 8004c40:	5f544d46 	.word	0x5f544d46
 8004c44:	00323353 	.word	0x00323353

08004c48 <.text_50>:
 8004c48:	5f544d46 	.word	0x5f544d46
 8004c4c:	00343653 	.word	0x00343653

08004c50 <.text_51>:
 8004c50:	5f544d46 	.word	0x5f544d46
 8004c54:	3453      	.short	0x3453
	...

08004c58 <.text_52>:
 8004c58:	5f544d46 	.word	0x5f544d46
 8004c5c:	0051      	.short	0x0051
	...

08004c60 <.text_53>:
 8004c60:	5f544d46 	.word	0x5f544d46
 8004c64:	3751      	.short	0x3751
	...

08004c68 <.text_54>:
 8004c68:	5f544d46 	.word	0x5f544d46
 8004c6c:	00353151 	.word	0x00353151

08004c70 <.text_55>:
 8004c70:	5f544d46 	.word	0x5f544d46
 8004c74:	00313351 	.word	0x00313351

08004c78 <.text_56>:
 8004c78:	5f544d46 	.word	0x5f544d46
 8004c7c:	5155      	.short	0x5155
	...

08004c80 <.text_57>:
 8004c80:	5f544d46 	.word	0x5f544d46
 8004c84:	00375155 	.word	0x00375155

08004c88 <.text_58>:
 8004c88:	5f544d46 	.word	0x5f544d46
 8004c8c:	35315155 	.word	0x35315155
 8004c90:	00000000 	.word	0x00000000

08004c94 <.text_59>:
 8004c94:	5f544d46 	.word	0x5f544d46
 8004c98:	31335155 	.word	0x31335155
 8004c9c:	00000000 	.word	0x00000000

08004ca0 <.text_60>:
 8004ca0:	5f544d46 	.word	0x5f544d46
 8004ca4:	3454554c 	.word	0x3454554c
 8004ca8:	4f4c465f 	.word	0x4f4c465f
 8004cac:	5441      	.short	0x5441
	...

08004cb0 <.text_61>:
 8004cb0:	5f544d46 	.word	0x5f544d46
 8004cb4:	3854554c 	.word	0x3854554c
 8004cb8:	4f4c465f 	.word	0x4f4c465f
 8004cbc:	5441      	.short	0x5441
	...

08004cc0 <.text_62>:
 8004cc0:	5f544d46 	.word	0x5f544d46
 8004cc4:	3454554c 	.word	0x3454554c
 8004cc8:	3531515f 	.word	0x3531515f
 8004ccc:	00000000 	.word	0x00000000

08004cd0 <.text_63>:
 8004cd0:	5f544d46 	.word	0x5f544d46
 8004cd4:	3854554c 	.word	0x3854554c
 8004cd8:	3531515f 	.word	0x3531515f
 8004cdc:	00000000 	.word	0x00000000

08004ce0 <.text_64>:
 8004ce0:	5f544d46 	.word	0x5f544d46
 8004ce4:	3454554c 	.word	0x3454554c
 8004ce8:	3151555f 	.word	0x3151555f
 8004cec:	0035      	.short	0x0035
	...

08004cf0 <.text_65>:
 8004cf0:	5f544d46 	.word	0x5f544d46
 8004cf4:	3854554c 	.word	0x3854554c
 8004cf8:	3151555f 	.word	0x3151555f
 8004cfc:	0035      	.short	0x0035
	...

08004d00 <.text_66>:
 8004d00:	415f4941 	.word	0x415f4941
 8004d04:	59415252 	.word	0x59415252
 8004d08:	524f465f 	.word	0x524f465f
 8004d0c:	5f54414d 	.word	0x5f54414d
 8004d10:	454e4f4e 	.word	0x454e4f4e
 8004d14:	00000000 	.word	0x00000000

08004d18 <.text_67>:
 8004d18:	415f4941 	.word	0x415f4941
 8004d1c:	59415252 	.word	0x59415252
 8004d20:	524f465f 	.word	0x524f465f
 8004d24:	5f54414d 	.word	0x5f54414d
 8004d28:	0051      	.short	0x0051
	...

08004d2c <.text_68>:
 8004d2c:	415f4941 	.word	0x415f4941
 8004d30:	59415252 	.word	0x59415252
 8004d34:	524f465f 	.word	0x524f465f
 8004d38:	5f54414d 	.word	0x5f54414d
 8004d3c:	5155      	.short	0x5155
	...

08004d40 <.text_69>:
 8004d40:	425f4941 	.word	0x425f4941
 8004d44:	45464655 	.word	0x45464655
 8004d48:	4f465f52 	.word	0x4f465f52
 8004d4c:	54414d52 	.word	0x54414d52
 8004d50:	4e4f4e5f 	.word	0x4e4f4e5f
 8004d54:	0045      	.short	0x0045
	...

08004d58 <.text_70>:
 8004d58:	425f4941 	.word	0x425f4941
 8004d5c:	45464655 	.word	0x45464655
 8004d60:	4f465f52 	.word	0x4f465f52
 8004d64:	54414d52 	.word	0x54414d52
 8004d68:	515f      	.short	0x515f
	...

08004d6c <.text_71>:
 8004d6c:	425f4941 	.word	0x425f4941
 8004d70:	45464655 	.word	0x45464655
 8004d74:	4f465f52 	.word	0x4f465f52
 8004d78:	54414d52 	.word	0x54414d52
 8004d7c:	0051555f 	.word	0x0051555f

08004d80 <ai_math_dot_array>:
 8004d80:	b530      	push	{r4, r5, lr}
 8004d82:	4604      	mov	r4, r0
 8004d84:	4608      	mov	r0, r1
 8004d86:	4611      	mov	r1, r2
 8004d88:	b081      	sub	sp, #4
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	2500      	movs	r5, #0
 8004d8e:	9500      	str	r5, [sp, #0]
 8004d90:	466b      	mov	r3, sp
 8004d92:	f002 fe97 	bl	8007ac4 <arm_dot_prod_f32>
 8004d96:	ed94 0a00 	vldr	s0, [r4]
 8004d9a:	eddd 0a00 	vldr	s1, [sp]
 8004d9e:	ee70 0a20 	vadd.f32	s1, s0, s1
 8004da2:	edc4 0a00 	vstr	s1, [r4]
 8004da6:	b001      	add	sp, #4
 8004da8:	bd30      	pop	{r4, r5, pc}
	...

08004dac <ai_math_sqrt>:
 8004dac:	eef0 0a40 	vmov.f32	s1, s0
 8004db0:	eef5 0a40 	vcmp.f32	s1, #0.0
 8004db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db8:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8004e5c <.text_12>
 8004dbc:	db01      	blt.n	8004dc2 <ai_math_sqrt+0x16>
 8004dbe:	eeb1 0ae0 	vsqrt.f32	s0, s1
 8004dc2:	4770      	bx	lr

08004dc4 <ai_math_exp>:
 8004dc4:	f00c b834 	b.w	8010e30 <expf>

08004dc8 <ai_math_pow>:
 8004dc8:	f00c b998 	b.w	80110fc <powf>

08004dcc <ai_math_tanh>:
 8004dcc:	f00b bfde 	b.w	8010d8c <tanhf>

08004dd0 <ai_math_relu>:
 8004dd0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd8:	bf48      	it	mi
 8004dda:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 8004e5c <.text_12>
 8004dde:	4770      	bx	lr

08004de0 <ai_math_prelu>:
 8004de0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de8:	bf48      	it	mi
 8004dea:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 8004dee:	4770      	bx	lr

08004df0 <ai_math_sigmoid>:
 8004df0:	b500      	push	{lr}
 8004df2:	b081      	sub	sp, #4
 8004df4:	eeb1 0a40 	vneg.f32	s0, s0
 8004df8:	f00c f81a 	bl	8010e30 <expf>
 8004dfc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004e00:	b001      	add	sp, #4
 8004e02:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004e06:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004e0a:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8004e0e:	bd00      	pop	{pc}

08004e10 <ai_math_hard_sigmoid>:
 8004e10:	eef0 0a40 	vmov.f32	s1, s0
 8004e14:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8004e60 <.text_13>
 8004e18:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8004e1c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8004e20:	eddf 0a10 	vldr	s1, [pc, #64]	; 8004e64 <.text_14>
 8004e24:	eeb4 0a60 	vcmp.f32	s0, s1
 8004e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e2c:	da07      	bge.n	8004e3e <ai_math_hard_sigmoid+0x2e>
 8004e2e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e36:	d504      	bpl.n	8004e42 <ai_math_hard_sigmoid+0x32>
 8004e38:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8004e5c <.text_12>
 8004e3c:	4770      	bx	lr
 8004e3e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004e42:	4770      	bx	lr

08004e44 <ai_math_sign>:
 8004e44:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e4c:	bfcc      	ite	gt
 8004e4e:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 8004e68 <.text_15>
 8004e52:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 8004e6c <.text_16>
 8004e56:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8004e5a:	4770      	bx	lr

08004e5c <.text_12>:
 8004e5c:	00000000 	.word	0x00000000

08004e60 <.text_13>:
 8004e60:	3e4ccccd 	.word	0x3e4ccccd

08004e64 <.text_14>:
 8004e64:	3f800001 	.word	0x3f800001

08004e68 <.text_15>:
 8004e68:	00000001 	.word	0x00000001

08004e6c <.text_16>:
 8004e6c:	ffffffff 	.word	0xffffffff

08004e70 <ai_sum>:
 8004e70:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004e74:	4770      	bx	lr

08004e76 <ai_sub>:
 8004e76:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004e7a:	4770      	bx	lr

08004e7c <ai_mul>:
 8004e7c:	ee20 0a20 	vmul.f32	s0, s0, s1
 8004e80:	4770      	bx	lr

08004e82 <ai_div>:
 8004e82:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8004e86:	4770      	bx	lr

08004e88 <ai_max>:
 8004e88:	eef4 0a40 	vcmp.f32	s1, s0
 8004e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e90:	bf58      	it	pl
 8004e92:	eeb0 0a60 	vmovpl.f32	s0, s1
 8004e96:	4770      	bx	lr

08004e98 <ai_min>:
 8004e98:	eeb4 0a60 	vcmp.f32	s0, s1
 8004e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea0:	bf58      	it	pl
 8004ea2:	eeb0 0a60 	vmovpl.f32	s0, s1
 8004ea6:	4770      	bx	lr

08004ea8 <__aeabi_memset>:
 8004ea8:	b470      	push	{r4, r5, r6}
 8004eaa:	0784      	lsls	r4, r0, #30
 8004eac:	d046      	beq.n	8004f3c <__aeabi_memset+0x94>
 8004eae:	1e4c      	subs	r4, r1, #1
 8004eb0:	2900      	cmp	r1, #0
 8004eb2:	d041      	beq.n	8004f38 <__aeabi_memset+0x90>
 8004eb4:	b2d5      	uxtb	r5, r2
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	e002      	b.n	8004ec0 <__aeabi_memset+0x18>
 8004eba:	1e61      	subs	r1, r4, #1
 8004ebc:	b3e4      	cbz	r4, 8004f38 <__aeabi_memset+0x90>
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	f803 5b01 	strb.w	r5, [r3], #1
 8004ec4:	0799      	lsls	r1, r3, #30
 8004ec6:	d1f8      	bne.n	8004eba <__aeabi_memset+0x12>
 8004ec8:	2c03      	cmp	r4, #3
 8004eca:	d92e      	bls.n	8004f2a <__aeabi_memset+0x82>
 8004ecc:	b2d5      	uxtb	r5, r2
 8004ece:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8004ed2:	2c0f      	cmp	r4, #15
 8004ed4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004ed8:	d919      	bls.n	8004f0e <__aeabi_memset+0x66>
 8004eda:	4626      	mov	r6, r4
 8004edc:	f103 0110 	add.w	r1, r3, #16
 8004ee0:	3e10      	subs	r6, #16
 8004ee2:	2e0f      	cmp	r6, #15
 8004ee4:	f841 5c10 	str.w	r5, [r1, #-16]
 8004ee8:	f841 5c0c 	str.w	r5, [r1, #-12]
 8004eec:	f841 5c08 	str.w	r5, [r1, #-8]
 8004ef0:	f841 5c04 	str.w	r5, [r1, #-4]
 8004ef4:	f101 0110 	add.w	r1, r1, #16
 8004ef8:	d8f2      	bhi.n	8004ee0 <__aeabi_memset+0x38>
 8004efa:	f1a4 0110 	sub.w	r1, r4, #16
 8004efe:	f021 010f 	bic.w	r1, r1, #15
 8004f02:	f004 040f 	and.w	r4, r4, #15
 8004f06:	3110      	adds	r1, #16
 8004f08:	2c03      	cmp	r4, #3
 8004f0a:	440b      	add	r3, r1
 8004f0c:	d90d      	bls.n	8004f2a <__aeabi_memset+0x82>
 8004f0e:	461e      	mov	r6, r3
 8004f10:	4621      	mov	r1, r4
 8004f12:	3904      	subs	r1, #4
 8004f14:	2903      	cmp	r1, #3
 8004f16:	f846 5b04 	str.w	r5, [r6], #4
 8004f1a:	d8fa      	bhi.n	8004f12 <__aeabi_memset+0x6a>
 8004f1c:	1f21      	subs	r1, r4, #4
 8004f1e:	f021 0103 	bic.w	r1, r1, #3
 8004f22:	3104      	adds	r1, #4
 8004f24:	440b      	add	r3, r1
 8004f26:	f004 0403 	and.w	r4, r4, #3
 8004f2a:	b12c      	cbz	r4, 8004f38 <__aeabi_memset+0x90>
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	441c      	add	r4, r3
 8004f30:	f803 2b01 	strb.w	r2, [r3], #1
 8004f34:	42a3      	cmp	r3, r4
 8004f36:	d1fb      	bne.n	8004f30 <__aeabi_memset+0x88>
 8004f38:	bc70      	pop	{r4, r5, r6}
 8004f3a:	4770      	bx	lr
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	4603      	mov	r3, r0
 8004f40:	e7c2      	b.n	8004ec8 <__aeabi_memset+0x20>
	...

08004f44 <__aeabi_drsub>:
 8004f44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004f48:	e002      	b.n	8004f50 <__adddf3>
 8004f4a:	bf00      	nop

08004f4c <__aeabi_dsub>:
 8004f4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004f50 <__adddf3>:
 8004f50:	b530      	push	{r4, r5, lr}
 8004f52:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004f56:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004f5a:	ea94 0f05 	teq	r4, r5
 8004f5e:	bf08      	it	eq
 8004f60:	ea90 0f02 	teqeq	r0, r2
 8004f64:	bf1f      	itttt	ne
 8004f66:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004f6a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8004f6e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004f72:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004f76:	f000 80e2 	beq.w	800513e <__adddf3+0x1ee>
 8004f7a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8004f7e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004f82:	bfb8      	it	lt
 8004f84:	426d      	neglt	r5, r5
 8004f86:	dd0c      	ble.n	8004fa2 <__adddf3+0x52>
 8004f88:	442c      	add	r4, r5
 8004f8a:	ea80 0202 	eor.w	r2, r0, r2
 8004f8e:	ea81 0303 	eor.w	r3, r1, r3
 8004f92:	ea82 0000 	eor.w	r0, r2, r0
 8004f96:	ea83 0101 	eor.w	r1, r3, r1
 8004f9a:	ea80 0202 	eor.w	r2, r0, r2
 8004f9e:	ea81 0303 	eor.w	r3, r1, r3
 8004fa2:	2d36      	cmp	r5, #54	; 0x36
 8004fa4:	bf88      	it	hi
 8004fa6:	bd30      	pophi	{r4, r5, pc}
 8004fa8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004fac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004fb0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8004fb4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8004fb8:	d002      	beq.n	8004fc0 <__adddf3+0x70>
 8004fba:	4240      	negs	r0, r0
 8004fbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004fc0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8004fc4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004fc8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004fcc:	d002      	beq.n	8004fd4 <__adddf3+0x84>
 8004fce:	4252      	negs	r2, r2
 8004fd0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004fd4:	ea94 0f05 	teq	r4, r5
 8004fd8:	f000 80a7 	beq.w	800512a <__adddf3+0x1da>
 8004fdc:	f1a4 0401 	sub.w	r4, r4, #1
 8004fe0:	f1d5 0e20 	rsbs	lr, r5, #32
 8004fe4:	db0d      	blt.n	8005002 <__adddf3+0xb2>
 8004fe6:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004fea:	fa22 f205 	lsr.w	r2, r2, r5
 8004fee:	1880      	adds	r0, r0, r2
 8004ff0:	f141 0100 	adc.w	r1, r1, #0
 8004ff4:	fa03 f20e 	lsl.w	r2, r3, lr
 8004ff8:	1880      	adds	r0, r0, r2
 8004ffa:	fa43 f305 	asr.w	r3, r3, r5
 8004ffe:	4159      	adcs	r1, r3
 8005000:	e00e      	b.n	8005020 <__adddf3+0xd0>
 8005002:	f1a5 0520 	sub.w	r5, r5, #32
 8005006:	f10e 0e20 	add.w	lr, lr, #32
 800500a:	2a01      	cmp	r2, #1
 800500c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005010:	bf28      	it	cs
 8005012:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005016:	fa43 f305 	asr.w	r3, r3, r5
 800501a:	18c0      	adds	r0, r0, r3
 800501c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005020:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005024:	d507      	bpl.n	8005036 <__adddf3+0xe6>
 8005026:	f04f 0e00 	mov.w	lr, #0
 800502a:	f1dc 0c00 	rsbs	ip, ip, #0
 800502e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005032:	eb6e 0101 	sbc.w	r1, lr, r1
 8005036:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800503a:	d31b      	bcc.n	8005074 <__adddf3+0x124>
 800503c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005040:	d30c      	bcc.n	800505c <__adddf3+0x10c>
 8005042:	0849      	lsrs	r1, r1, #1
 8005044:	ea5f 0030 	movs.w	r0, r0, rrx
 8005048:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800504c:	f104 0401 	add.w	r4, r4, #1
 8005050:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005054:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005058:	f080 809a 	bcs.w	8005190 <__adddf3+0x240>
 800505c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005060:	bf08      	it	eq
 8005062:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005066:	f150 0000 	adcs.w	r0, r0, #0
 800506a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800506e:	ea41 0105 	orr.w	r1, r1, r5
 8005072:	bd30      	pop	{r4, r5, pc}
 8005074:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005078:	4140      	adcs	r0, r0
 800507a:	eb41 0101 	adc.w	r1, r1, r1
 800507e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005082:	f1a4 0401 	sub.w	r4, r4, #1
 8005086:	d1e9      	bne.n	800505c <__adddf3+0x10c>
 8005088:	f091 0f00 	teq	r1, #0
 800508c:	bf04      	itt	eq
 800508e:	4601      	moveq	r1, r0
 8005090:	2000      	moveq	r0, #0
 8005092:	fab1 f381 	clz	r3, r1
 8005096:	bf08      	it	eq
 8005098:	3320      	addeq	r3, #32
 800509a:	f1a3 030b 	sub.w	r3, r3, #11
 800509e:	f1b3 0220 	subs.w	r2, r3, #32
 80050a2:	da0c      	bge.n	80050be <__adddf3+0x16e>
 80050a4:	320c      	adds	r2, #12
 80050a6:	dd08      	ble.n	80050ba <__adddf3+0x16a>
 80050a8:	f102 0c14 	add.w	ip, r2, #20
 80050ac:	f1c2 020c 	rsb	r2, r2, #12
 80050b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80050b4:	fa21 f102 	lsr.w	r1, r1, r2
 80050b8:	e00c      	b.n	80050d4 <__adddf3+0x184>
 80050ba:	f102 0214 	add.w	r2, r2, #20
 80050be:	bfd8      	it	le
 80050c0:	f1c2 0c20 	rsble	ip, r2, #32
 80050c4:	fa01 f102 	lsl.w	r1, r1, r2
 80050c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80050cc:	bfdc      	itt	le
 80050ce:	ea41 010c 	orrle.w	r1, r1, ip
 80050d2:	4090      	lslle	r0, r2
 80050d4:	1ae4      	subs	r4, r4, r3
 80050d6:	bfa2      	ittt	ge
 80050d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80050dc:	4329      	orrge	r1, r5
 80050de:	bd30      	popge	{r4, r5, pc}
 80050e0:	ea6f 0404 	mvn.w	r4, r4
 80050e4:	3c1f      	subs	r4, #31
 80050e6:	da1c      	bge.n	8005122 <__adddf3+0x1d2>
 80050e8:	340c      	adds	r4, #12
 80050ea:	dc0e      	bgt.n	800510a <__adddf3+0x1ba>
 80050ec:	f104 0414 	add.w	r4, r4, #20
 80050f0:	f1c4 0220 	rsb	r2, r4, #32
 80050f4:	fa20 f004 	lsr.w	r0, r0, r4
 80050f8:	fa01 f302 	lsl.w	r3, r1, r2
 80050fc:	ea40 0003 	orr.w	r0, r0, r3
 8005100:	fa21 f304 	lsr.w	r3, r1, r4
 8005104:	ea45 0103 	orr.w	r1, r5, r3
 8005108:	bd30      	pop	{r4, r5, pc}
 800510a:	f1c4 040c 	rsb	r4, r4, #12
 800510e:	f1c4 0220 	rsb	r2, r4, #32
 8005112:	fa20 f002 	lsr.w	r0, r0, r2
 8005116:	fa01 f304 	lsl.w	r3, r1, r4
 800511a:	ea40 0003 	orr.w	r0, r0, r3
 800511e:	4629      	mov	r1, r5
 8005120:	bd30      	pop	{r4, r5, pc}
 8005122:	fa21 f004 	lsr.w	r0, r1, r4
 8005126:	4629      	mov	r1, r5
 8005128:	bd30      	pop	{r4, r5, pc}
 800512a:	f094 0f00 	teq	r4, #0
 800512e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005132:	bf06      	itte	eq
 8005134:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005138:	3401      	addeq	r4, #1
 800513a:	3d01      	subne	r5, #1
 800513c:	e74e      	b.n	8004fdc <__adddf3+0x8c>
 800513e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005142:	bf18      	it	ne
 8005144:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005148:	d029      	beq.n	800519e <__adddf3+0x24e>
 800514a:	ea94 0f05 	teq	r4, r5
 800514e:	bf08      	it	eq
 8005150:	ea90 0f02 	teqeq	r0, r2
 8005154:	d005      	beq.n	8005162 <__adddf3+0x212>
 8005156:	ea54 0c00 	orrs.w	ip, r4, r0
 800515a:	bf04      	itt	eq
 800515c:	4619      	moveq	r1, r3
 800515e:	4610      	moveq	r0, r2
 8005160:	bd30      	pop	{r4, r5, pc}
 8005162:	ea91 0f03 	teq	r1, r3
 8005166:	bf1e      	ittt	ne
 8005168:	2100      	movne	r1, #0
 800516a:	2000      	movne	r0, #0
 800516c:	bd30      	popne	{r4, r5, pc}
 800516e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8005172:	d105      	bne.n	8005180 <__adddf3+0x230>
 8005174:	0040      	lsls	r0, r0, #1
 8005176:	4149      	adcs	r1, r1
 8005178:	bf28      	it	cs
 800517a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800517e:	bd30      	pop	{r4, r5, pc}
 8005180:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8005184:	bf3c      	itt	cc
 8005186:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800518a:	bd30      	popcc	{r4, r5, pc}
 800518c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005190:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8005194:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005198:	f04f 0000 	mov.w	r0, #0
 800519c:	bd30      	pop	{r4, r5, pc}
 800519e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80051a2:	bf1a      	itte	ne
 80051a4:	4619      	movne	r1, r3
 80051a6:	4610      	movne	r0, r2
 80051a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80051ac:	bf1c      	itt	ne
 80051ae:	460b      	movne	r3, r1
 80051b0:	4602      	movne	r2, r0
 80051b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80051b6:	bf06      	itte	eq
 80051b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80051bc:	ea91 0f03 	teqeq	r1, r3
 80051c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80051c4:	bd30      	pop	{r4, r5, pc}
 80051c6:	bf00      	nop

080051c8 <__aeabi_ui2d>:
 80051c8:	f090 0f00 	teq	r0, #0
 80051cc:	bf04      	itt	eq
 80051ce:	2100      	moveq	r1, #0
 80051d0:	4770      	bxeq	lr
 80051d2:	b530      	push	{r4, r5, lr}
 80051d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80051d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80051dc:	f04f 0500 	mov.w	r5, #0
 80051e0:	f04f 0100 	mov.w	r1, #0
 80051e4:	e750      	b.n	8005088 <__adddf3+0x138>
 80051e6:	bf00      	nop

080051e8 <__aeabi_i2d>:
 80051e8:	f090 0f00 	teq	r0, #0
 80051ec:	bf04      	itt	eq
 80051ee:	2100      	moveq	r1, #0
 80051f0:	4770      	bxeq	lr
 80051f2:	b530      	push	{r4, r5, lr}
 80051f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80051f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80051fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8005200:	bf48      	it	mi
 8005202:	4240      	negmi	r0, r0
 8005204:	f04f 0100 	mov.w	r1, #0
 8005208:	e73e      	b.n	8005088 <__adddf3+0x138>
 800520a:	bf00      	nop

0800520c <__aeabi_f2d>:
 800520c:	0042      	lsls	r2, r0, #1
 800520e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005212:	ea4f 0131 	mov.w	r1, r1, rrx
 8005216:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800521a:	bf1f      	itttt	ne
 800521c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005220:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005224:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005228:	4770      	bxne	lr
 800522a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800522e:	bf08      	it	eq
 8005230:	4770      	bxeq	lr
 8005232:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8005236:	bf04      	itt	eq
 8005238:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800523c:	4770      	bxeq	lr
 800523e:	b530      	push	{r4, r5, lr}
 8005240:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005244:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005248:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800524c:	e71c      	b.n	8005088 <__adddf3+0x138>
 800524e:	bf00      	nop

08005250 <__aeabi_ul2d>:
 8005250:	ea50 0201 	orrs.w	r2, r0, r1
 8005254:	bf08      	it	eq
 8005256:	4770      	bxeq	lr
 8005258:	b530      	push	{r4, r5, lr}
 800525a:	f04f 0500 	mov.w	r5, #0
 800525e:	e00a      	b.n	8005276 <__aeabi_l2d+0x16>

08005260 <__aeabi_l2d>:
 8005260:	ea50 0201 	orrs.w	r2, r0, r1
 8005264:	bf08      	it	eq
 8005266:	4770      	bxeq	lr
 8005268:	b530      	push	{r4, r5, lr}
 800526a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800526e:	d502      	bpl.n	8005276 <__aeabi_l2d+0x16>
 8005270:	4240      	negs	r0, r0
 8005272:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005276:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800527a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800527e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8005282:	f43f aed8 	beq.w	8005036 <__adddf3+0xe6>
 8005286:	f04f 0203 	mov.w	r2, #3
 800528a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800528e:	bf18      	it	ne
 8005290:	3203      	addne	r2, #3
 8005292:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005296:	bf18      	it	ne
 8005298:	3203      	addne	r2, #3
 800529a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800529e:	f1c2 0320 	rsb	r3, r2, #32
 80052a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80052a6:	fa20 f002 	lsr.w	r0, r0, r2
 80052aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80052ae:	ea40 000e 	orr.w	r0, r0, lr
 80052b2:	fa21 f102 	lsr.w	r1, r1, r2
 80052b6:	4414      	add	r4, r2
 80052b8:	e6bd      	b.n	8005036 <__adddf3+0xe6>
 80052ba:	bf00      	nop

080052bc <__aeabi_dmul>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80052c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80052c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80052ca:	bf1d      	ittte	ne
 80052cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80052d0:	ea94 0f0c 	teqne	r4, ip
 80052d4:	ea95 0f0c 	teqne	r5, ip
 80052d8:	f000 f8de 	bleq	8005498 <__aeabi_dmul+0x1dc>
 80052dc:	442c      	add	r4, r5
 80052de:	ea81 0603 	eor.w	r6, r1, r3
 80052e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80052e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80052ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80052ee:	bf18      	it	ne
 80052f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80052f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80052f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052fc:	d038      	beq.n	8005370 <__aeabi_dmul+0xb4>
 80052fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8005302:	f04f 0500 	mov.w	r5, #0
 8005306:	fbe1 e502 	umlal	lr, r5, r1, r2
 800530a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800530e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005312:	f04f 0600 	mov.w	r6, #0
 8005316:	fbe1 5603 	umlal	r5, r6, r1, r3
 800531a:	f09c 0f00 	teq	ip, #0
 800531e:	bf18      	it	ne
 8005320:	f04e 0e01 	orrne.w	lr, lr, #1
 8005324:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005328:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800532c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005330:	d204      	bcs.n	800533c <__aeabi_dmul+0x80>
 8005332:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005336:	416d      	adcs	r5, r5
 8005338:	eb46 0606 	adc.w	r6, r6, r6
 800533c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005340:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005344:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005348:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800534c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005350:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005354:	bf88      	it	hi
 8005356:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800535a:	d81e      	bhi.n	800539a <__aeabi_dmul+0xde>
 800535c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005360:	bf08      	it	eq
 8005362:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005366:	f150 0000 	adcs.w	r0, r0, #0
 800536a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800536e:	bd70      	pop	{r4, r5, r6, pc}
 8005370:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005374:	ea46 0101 	orr.w	r1, r6, r1
 8005378:	ea40 0002 	orr.w	r0, r0, r2
 800537c:	ea81 0103 	eor.w	r1, r1, r3
 8005380:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8005384:	bfc2      	ittt	gt
 8005386:	ebd4 050c 	rsbsgt	r5, r4, ip
 800538a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800538e:	bd70      	popgt	{r4, r5, r6, pc}
 8005390:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005394:	f04f 0e00 	mov.w	lr, #0
 8005398:	3c01      	subs	r4, #1
 800539a:	f300 80ab 	bgt.w	80054f4 <__aeabi_dmul+0x238>
 800539e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80053a2:	bfde      	ittt	le
 80053a4:	2000      	movle	r0, #0
 80053a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80053aa:	bd70      	pople	{r4, r5, r6, pc}
 80053ac:	f1c4 0400 	rsb	r4, r4, #0
 80053b0:	3c20      	subs	r4, #32
 80053b2:	da35      	bge.n	8005420 <__aeabi_dmul+0x164>
 80053b4:	340c      	adds	r4, #12
 80053b6:	dc1b      	bgt.n	80053f0 <__aeabi_dmul+0x134>
 80053b8:	f104 0414 	add.w	r4, r4, #20
 80053bc:	f1c4 0520 	rsb	r5, r4, #32
 80053c0:	fa00 f305 	lsl.w	r3, r0, r5
 80053c4:	fa20 f004 	lsr.w	r0, r0, r4
 80053c8:	fa01 f205 	lsl.w	r2, r1, r5
 80053cc:	ea40 0002 	orr.w	r0, r0, r2
 80053d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80053d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80053d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80053dc:	fa21 f604 	lsr.w	r6, r1, r4
 80053e0:	eb42 0106 	adc.w	r1, r2, r6
 80053e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80053e8:	bf08      	it	eq
 80053ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80053ee:	bd70      	pop	{r4, r5, r6, pc}
 80053f0:	f1c4 040c 	rsb	r4, r4, #12
 80053f4:	f1c4 0520 	rsb	r5, r4, #32
 80053f8:	fa00 f304 	lsl.w	r3, r0, r4
 80053fc:	fa20 f005 	lsr.w	r0, r0, r5
 8005400:	fa01 f204 	lsl.w	r2, r1, r4
 8005404:	ea40 0002 	orr.w	r0, r0, r2
 8005408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800540c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005410:	f141 0100 	adc.w	r1, r1, #0
 8005414:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005418:	bf08      	it	eq
 800541a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800541e:	bd70      	pop	{r4, r5, r6, pc}
 8005420:	f1c4 0520 	rsb	r5, r4, #32
 8005424:	fa00 f205 	lsl.w	r2, r0, r5
 8005428:	ea4e 0e02 	orr.w	lr, lr, r2
 800542c:	fa20 f304 	lsr.w	r3, r0, r4
 8005430:	fa01 f205 	lsl.w	r2, r1, r5
 8005434:	ea43 0302 	orr.w	r3, r3, r2
 8005438:	fa21 f004 	lsr.w	r0, r1, r4
 800543c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005440:	fa21 f204 	lsr.w	r2, r1, r4
 8005444:	ea20 0002 	bic.w	r0, r0, r2
 8005448:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800544c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005450:	bf08      	it	eq
 8005452:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005456:	bd70      	pop	{r4, r5, r6, pc}
 8005458:	f094 0f00 	teq	r4, #0
 800545c:	d10f      	bne.n	800547e <__aeabi_dmul+0x1c2>
 800545e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8005462:	0040      	lsls	r0, r0, #1
 8005464:	eb41 0101 	adc.w	r1, r1, r1
 8005468:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800546c:	bf08      	it	eq
 800546e:	3c01      	subeq	r4, #1
 8005470:	d0f7      	beq.n	8005462 <__aeabi_dmul+0x1a6>
 8005472:	ea41 0106 	orr.w	r1, r1, r6
 8005476:	f095 0f00 	teq	r5, #0
 800547a:	bf18      	it	ne
 800547c:	4770      	bxne	lr
 800547e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8005482:	0052      	lsls	r2, r2, #1
 8005484:	eb43 0303 	adc.w	r3, r3, r3
 8005488:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800548c:	bf08      	it	eq
 800548e:	3d01      	subeq	r5, #1
 8005490:	d0f7      	beq.n	8005482 <__aeabi_dmul+0x1c6>
 8005492:	ea43 0306 	orr.w	r3, r3, r6
 8005496:	4770      	bx	lr
 8005498:	ea94 0f0c 	teq	r4, ip
 800549c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80054a0:	bf18      	it	ne
 80054a2:	ea95 0f0c 	teqne	r5, ip
 80054a6:	d00c      	beq.n	80054c2 <__aeabi_dmul+0x206>
 80054a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80054ac:	bf18      	it	ne
 80054ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80054b2:	d1d1      	bne.n	8005458 <__aeabi_dmul+0x19c>
 80054b4:	ea81 0103 	eor.w	r1, r1, r3
 80054b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80054bc:	f04f 0000 	mov.w	r0, #0
 80054c0:	bd70      	pop	{r4, r5, r6, pc}
 80054c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80054c6:	bf06      	itte	eq
 80054c8:	4610      	moveq	r0, r2
 80054ca:	4619      	moveq	r1, r3
 80054cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80054d0:	d019      	beq.n	8005506 <__aeabi_dmul+0x24a>
 80054d2:	ea94 0f0c 	teq	r4, ip
 80054d6:	d102      	bne.n	80054de <__aeabi_dmul+0x222>
 80054d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80054dc:	d113      	bne.n	8005506 <__aeabi_dmul+0x24a>
 80054de:	ea95 0f0c 	teq	r5, ip
 80054e2:	d105      	bne.n	80054f0 <__aeabi_dmul+0x234>
 80054e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80054e8:	bf1c      	itt	ne
 80054ea:	4610      	movne	r0, r2
 80054ec:	4619      	movne	r1, r3
 80054ee:	d10a      	bne.n	8005506 <__aeabi_dmul+0x24a>
 80054f0:	ea81 0103 	eor.w	r1, r1, r3
 80054f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80054f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80054fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005500:	f04f 0000 	mov.w	r0, #0
 8005504:	bd70      	pop	{r4, r5, r6, pc}
 8005506:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800550a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800550e:	bd70      	pop	{r4, r5, r6, pc}

08005510 <__aeabi_ddiv>:
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005516:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800551a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800551e:	bf1d      	ittte	ne
 8005520:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005524:	ea94 0f0c 	teqne	r4, ip
 8005528:	ea95 0f0c 	teqne	r5, ip
 800552c:	f000 f8a7 	bleq	800567e <__aeabi_ddiv+0x16e>
 8005530:	eba4 0405 	sub.w	r4, r4, r5
 8005534:	ea81 0e03 	eor.w	lr, r1, r3
 8005538:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800553c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005540:	f000 8088 	beq.w	8005654 <__aeabi_ddiv+0x144>
 8005544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005548:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800554c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005550:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005554:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005558:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800555c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005560:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005564:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005568:	429d      	cmp	r5, r3
 800556a:	bf08      	it	eq
 800556c:	4296      	cmpeq	r6, r2
 800556e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8005572:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005576:	d202      	bcs.n	800557e <__aeabi_ddiv+0x6e>
 8005578:	085b      	lsrs	r3, r3, #1
 800557a:	ea4f 0232 	mov.w	r2, r2, rrx
 800557e:	1ab6      	subs	r6, r6, r2
 8005580:	eb65 0503 	sbc.w	r5, r5, r3
 8005584:	085b      	lsrs	r3, r3, #1
 8005586:	ea4f 0232 	mov.w	r2, r2, rrx
 800558a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800558e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8005592:	ebb6 0e02 	subs.w	lr, r6, r2
 8005596:	eb75 0e03 	sbcs.w	lr, r5, r3
 800559a:	bf22      	ittt	cs
 800559c:	1ab6      	subcs	r6, r6, r2
 800559e:	4675      	movcs	r5, lr
 80055a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80055a4:	085b      	lsrs	r3, r3, #1
 80055a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80055aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80055ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80055b2:	bf22      	ittt	cs
 80055b4:	1ab6      	subcs	r6, r6, r2
 80055b6:	4675      	movcs	r5, lr
 80055b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80055bc:	085b      	lsrs	r3, r3, #1
 80055be:	ea4f 0232 	mov.w	r2, r2, rrx
 80055c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80055c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80055ca:	bf22      	ittt	cs
 80055cc:	1ab6      	subcs	r6, r6, r2
 80055ce:	4675      	movcs	r5, lr
 80055d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80055d4:	085b      	lsrs	r3, r3, #1
 80055d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80055da:	ebb6 0e02 	subs.w	lr, r6, r2
 80055de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80055e2:	bf22      	ittt	cs
 80055e4:	1ab6      	subcs	r6, r6, r2
 80055e6:	4675      	movcs	r5, lr
 80055e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80055ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80055f0:	d018      	beq.n	8005624 <__aeabi_ddiv+0x114>
 80055f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80055f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80055fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80055fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005602:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005606:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800560a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800560e:	d1c0      	bne.n	8005592 <__aeabi_ddiv+0x82>
 8005610:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005614:	d10b      	bne.n	800562e <__aeabi_ddiv+0x11e>
 8005616:	ea41 0100 	orr.w	r1, r1, r0
 800561a:	f04f 0000 	mov.w	r0, #0
 800561e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005622:	e7b6      	b.n	8005592 <__aeabi_ddiv+0x82>
 8005624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005628:	bf04      	itt	eq
 800562a:	4301      	orreq	r1, r0
 800562c:	2000      	moveq	r0, #0
 800562e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005632:	bf88      	it	hi
 8005634:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005638:	f63f aeaf 	bhi.w	800539a <__aeabi_dmul+0xde>
 800563c:	ebb5 0c03 	subs.w	ip, r5, r3
 8005640:	bf04      	itt	eq
 8005642:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005646:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800564a:	f150 0000 	adcs.w	r0, r0, #0
 800564e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005652:	bd70      	pop	{r4, r5, r6, pc}
 8005654:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005658:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800565c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005660:	bfc2      	ittt	gt
 8005662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800566a:	bd70      	popgt	{r4, r5, r6, pc}
 800566c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005670:	f04f 0e00 	mov.w	lr, #0
 8005674:	3c01      	subs	r4, #1
 8005676:	e690      	b.n	800539a <__aeabi_dmul+0xde>
 8005678:	ea45 0e06 	orr.w	lr, r5, r6
 800567c:	e68d      	b.n	800539a <__aeabi_dmul+0xde>
 800567e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005682:	ea94 0f0c 	teq	r4, ip
 8005686:	bf08      	it	eq
 8005688:	ea95 0f0c 	teqeq	r5, ip
 800568c:	f43f af3b 	beq.w	8005506 <__aeabi_dmul+0x24a>
 8005690:	ea94 0f0c 	teq	r4, ip
 8005694:	d10a      	bne.n	80056ac <__aeabi_ddiv+0x19c>
 8005696:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800569a:	f47f af34 	bne.w	8005506 <__aeabi_dmul+0x24a>
 800569e:	ea95 0f0c 	teq	r5, ip
 80056a2:	f47f af25 	bne.w	80054f0 <__aeabi_dmul+0x234>
 80056a6:	4610      	mov	r0, r2
 80056a8:	4619      	mov	r1, r3
 80056aa:	e72c      	b.n	8005506 <__aeabi_dmul+0x24a>
 80056ac:	ea95 0f0c 	teq	r5, ip
 80056b0:	d106      	bne.n	80056c0 <__aeabi_ddiv+0x1b0>
 80056b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80056b6:	f43f aefd 	beq.w	80054b4 <__aeabi_dmul+0x1f8>
 80056ba:	4610      	mov	r0, r2
 80056bc:	4619      	mov	r1, r3
 80056be:	e722      	b.n	8005506 <__aeabi_dmul+0x24a>
 80056c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80056c4:	bf18      	it	ne
 80056c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80056ca:	f47f aec5 	bne.w	8005458 <__aeabi_dmul+0x19c>
 80056ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80056d2:	f47f af0d 	bne.w	80054f0 <__aeabi_dmul+0x234>
 80056d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80056da:	f47f aeeb 	bne.w	80054b4 <__aeabi_dmul+0x1f8>
 80056de:	e712      	b.n	8005506 <__aeabi_dmul+0x24a>

080056e0 <__aeabi_d2f>:
 80056e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80056e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80056e8:	bf24      	itt	cs
 80056ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80056ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80056f2:	d90d      	bls.n	8005710 <__aeabi_d2f+0x30>
 80056f4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80056f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80056fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005700:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005704:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005708:	bf08      	it	eq
 800570a:	f020 0001 	biceq.w	r0, r0, #1
 800570e:	4770      	bx	lr
 8005710:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8005714:	d121      	bne.n	800575a <__aeabi_d2f+0x7a>
 8005716:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800571a:	bfbc      	itt	lt
 800571c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8005720:	4770      	bxlt	lr
 8005722:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005726:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800572a:	f1c2 0218 	rsb	r2, r2, #24
 800572e:	f1c2 0c20 	rsb	ip, r2, #32
 8005732:	fa10 f30c 	lsls.w	r3, r0, ip
 8005736:	fa20 f002 	lsr.w	r0, r0, r2
 800573a:	bf18      	it	ne
 800573c:	f040 0001 	orrne.w	r0, r0, #1
 8005740:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005744:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005748:	fa03 fc0c 	lsl.w	ip, r3, ip
 800574c:	ea40 000c 	orr.w	r0, r0, ip
 8005750:	fa23 f302 	lsr.w	r3, r3, r2
 8005754:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005758:	e7cc      	b.n	80056f4 <__aeabi_d2f+0x14>
 800575a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800575e:	d107      	bne.n	8005770 <__aeabi_d2f+0x90>
 8005760:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005764:	bf1e      	ittt	ne
 8005766:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800576a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800576e:	4770      	bxne	lr
 8005770:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8005774:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005778:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop

08005780 <__aeabi_uldivmod>:
 8005780:	b953      	cbnz	r3, 8005798 <__aeabi_uldivmod+0x18>
 8005782:	b94a      	cbnz	r2, 8005798 <__aeabi_uldivmod+0x18>
 8005784:	2900      	cmp	r1, #0
 8005786:	bf08      	it	eq
 8005788:	2800      	cmpeq	r0, #0
 800578a:	bf1c      	itt	ne
 800578c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8005790:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8005794:	f000 b972 	b.w	8005a7c <__aeabi_idiv0>
 8005798:	f1ad 0c08 	sub.w	ip, sp, #8
 800579c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80057a0:	f000 f806 	bl	80057b0 <__udivmoddi4>
 80057a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80057a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057ac:	b004      	add	sp, #16
 80057ae:	4770      	bx	lr

080057b0 <__udivmoddi4>:
 80057b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057b4:	9e08      	ldr	r6, [sp, #32]
 80057b6:	4604      	mov	r4, r0
 80057b8:	4688      	mov	r8, r1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d14b      	bne.n	8005856 <__udivmoddi4+0xa6>
 80057be:	428a      	cmp	r2, r1
 80057c0:	4615      	mov	r5, r2
 80057c2:	d967      	bls.n	8005894 <__udivmoddi4+0xe4>
 80057c4:	fab2 f282 	clz	r2, r2
 80057c8:	b14a      	cbz	r2, 80057de <__udivmoddi4+0x2e>
 80057ca:	f1c2 0720 	rsb	r7, r2, #32
 80057ce:	fa01 f302 	lsl.w	r3, r1, r2
 80057d2:	fa20 f707 	lsr.w	r7, r0, r7
 80057d6:	4095      	lsls	r5, r2
 80057d8:	ea47 0803 	orr.w	r8, r7, r3
 80057dc:	4094      	lsls	r4, r2
 80057de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80057e2:	0c23      	lsrs	r3, r4, #16
 80057e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80057e8:	fa1f fc85 	uxth.w	ip, r5
 80057ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80057f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80057f4:	fb07 f10c 	mul.w	r1, r7, ip
 80057f8:	4299      	cmp	r1, r3
 80057fa:	d909      	bls.n	8005810 <__udivmoddi4+0x60>
 80057fc:	18eb      	adds	r3, r5, r3
 80057fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8005802:	f080 811b 	bcs.w	8005a3c <__udivmoddi4+0x28c>
 8005806:	4299      	cmp	r1, r3
 8005808:	f240 8118 	bls.w	8005a3c <__udivmoddi4+0x28c>
 800580c:	3f02      	subs	r7, #2
 800580e:	442b      	add	r3, r5
 8005810:	1a5b      	subs	r3, r3, r1
 8005812:	b2a4      	uxth	r4, r4
 8005814:	fbb3 f0fe 	udiv	r0, r3, lr
 8005818:	fb0e 3310 	mls	r3, lr, r0, r3
 800581c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8005820:	fb00 fc0c 	mul.w	ip, r0, ip
 8005824:	45a4      	cmp	ip, r4
 8005826:	d909      	bls.n	800583c <__udivmoddi4+0x8c>
 8005828:	192c      	adds	r4, r5, r4
 800582a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800582e:	f080 8107 	bcs.w	8005a40 <__udivmoddi4+0x290>
 8005832:	45a4      	cmp	ip, r4
 8005834:	f240 8104 	bls.w	8005a40 <__udivmoddi4+0x290>
 8005838:	3802      	subs	r0, #2
 800583a:	442c      	add	r4, r5
 800583c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8005840:	eba4 040c 	sub.w	r4, r4, ip
 8005844:	2700      	movs	r7, #0
 8005846:	b11e      	cbz	r6, 8005850 <__udivmoddi4+0xa0>
 8005848:	40d4      	lsrs	r4, r2
 800584a:	2300      	movs	r3, #0
 800584c:	e9c6 4300 	strd	r4, r3, [r6]
 8005850:	4639      	mov	r1, r7
 8005852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005856:	428b      	cmp	r3, r1
 8005858:	d909      	bls.n	800586e <__udivmoddi4+0xbe>
 800585a:	2e00      	cmp	r6, #0
 800585c:	f000 80eb 	beq.w	8005a36 <__udivmoddi4+0x286>
 8005860:	2700      	movs	r7, #0
 8005862:	e9c6 0100 	strd	r0, r1, [r6]
 8005866:	4638      	mov	r0, r7
 8005868:	4639      	mov	r1, r7
 800586a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586e:	fab3 f783 	clz	r7, r3
 8005872:	2f00      	cmp	r7, #0
 8005874:	d147      	bne.n	8005906 <__udivmoddi4+0x156>
 8005876:	428b      	cmp	r3, r1
 8005878:	d302      	bcc.n	8005880 <__udivmoddi4+0xd0>
 800587a:	4282      	cmp	r2, r0
 800587c:	f200 80fa 	bhi.w	8005a74 <__udivmoddi4+0x2c4>
 8005880:	1a84      	subs	r4, r0, r2
 8005882:	eb61 0303 	sbc.w	r3, r1, r3
 8005886:	2001      	movs	r0, #1
 8005888:	4698      	mov	r8, r3
 800588a:	2e00      	cmp	r6, #0
 800588c:	d0e0      	beq.n	8005850 <__udivmoddi4+0xa0>
 800588e:	e9c6 4800 	strd	r4, r8, [r6]
 8005892:	e7dd      	b.n	8005850 <__udivmoddi4+0xa0>
 8005894:	b902      	cbnz	r2, 8005898 <__udivmoddi4+0xe8>
 8005896:	deff      	udf	#255	; 0xff
 8005898:	fab2 f282 	clz	r2, r2
 800589c:	2a00      	cmp	r2, #0
 800589e:	f040 808f 	bne.w	80059c0 <__udivmoddi4+0x210>
 80058a2:	1b49      	subs	r1, r1, r5
 80058a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80058a8:	fa1f f885 	uxth.w	r8, r5
 80058ac:	2701      	movs	r7, #1
 80058ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80058b2:	0c23      	lsrs	r3, r4, #16
 80058b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80058b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80058bc:	fb08 f10c 	mul.w	r1, r8, ip
 80058c0:	4299      	cmp	r1, r3
 80058c2:	d907      	bls.n	80058d4 <__udivmoddi4+0x124>
 80058c4:	18eb      	adds	r3, r5, r3
 80058c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80058ca:	d202      	bcs.n	80058d2 <__udivmoddi4+0x122>
 80058cc:	4299      	cmp	r1, r3
 80058ce:	f200 80cd 	bhi.w	8005a6c <__udivmoddi4+0x2bc>
 80058d2:	4684      	mov	ip, r0
 80058d4:	1a59      	subs	r1, r3, r1
 80058d6:	b2a3      	uxth	r3, r4
 80058d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80058dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80058e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80058e4:	fb08 f800 	mul.w	r8, r8, r0
 80058e8:	45a0      	cmp	r8, r4
 80058ea:	d907      	bls.n	80058fc <__udivmoddi4+0x14c>
 80058ec:	192c      	adds	r4, r5, r4
 80058ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80058f2:	d202      	bcs.n	80058fa <__udivmoddi4+0x14a>
 80058f4:	45a0      	cmp	r8, r4
 80058f6:	f200 80b6 	bhi.w	8005a66 <__udivmoddi4+0x2b6>
 80058fa:	4618      	mov	r0, r3
 80058fc:	eba4 0408 	sub.w	r4, r4, r8
 8005900:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8005904:	e79f      	b.n	8005846 <__udivmoddi4+0x96>
 8005906:	f1c7 0c20 	rsb	ip, r7, #32
 800590a:	40bb      	lsls	r3, r7
 800590c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8005910:	ea4e 0e03 	orr.w	lr, lr, r3
 8005914:	fa01 f407 	lsl.w	r4, r1, r7
 8005918:	fa20 f50c 	lsr.w	r5, r0, ip
 800591c:	fa21 f30c 	lsr.w	r3, r1, ip
 8005920:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8005924:	4325      	orrs	r5, r4
 8005926:	fbb3 f9f8 	udiv	r9, r3, r8
 800592a:	0c2c      	lsrs	r4, r5, #16
 800592c:	fb08 3319 	mls	r3, r8, r9, r3
 8005930:	fa1f fa8e 	uxth.w	sl, lr
 8005934:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8005938:	fb09 f40a 	mul.w	r4, r9, sl
 800593c:	429c      	cmp	r4, r3
 800593e:	fa02 f207 	lsl.w	r2, r2, r7
 8005942:	fa00 f107 	lsl.w	r1, r0, r7
 8005946:	d90b      	bls.n	8005960 <__udivmoddi4+0x1b0>
 8005948:	eb1e 0303 	adds.w	r3, lr, r3
 800594c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8005950:	f080 8087 	bcs.w	8005a62 <__udivmoddi4+0x2b2>
 8005954:	429c      	cmp	r4, r3
 8005956:	f240 8084 	bls.w	8005a62 <__udivmoddi4+0x2b2>
 800595a:	f1a9 0902 	sub.w	r9, r9, #2
 800595e:	4473      	add	r3, lr
 8005960:	1b1b      	subs	r3, r3, r4
 8005962:	b2ad      	uxth	r5, r5
 8005964:	fbb3 f0f8 	udiv	r0, r3, r8
 8005968:	fb08 3310 	mls	r3, r8, r0, r3
 800596c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8005970:	fb00 fa0a 	mul.w	sl, r0, sl
 8005974:	45a2      	cmp	sl, r4
 8005976:	d908      	bls.n	800598a <__udivmoddi4+0x1da>
 8005978:	eb1e 0404 	adds.w	r4, lr, r4
 800597c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005980:	d26b      	bcs.n	8005a5a <__udivmoddi4+0x2aa>
 8005982:	45a2      	cmp	sl, r4
 8005984:	d969      	bls.n	8005a5a <__udivmoddi4+0x2aa>
 8005986:	3802      	subs	r0, #2
 8005988:	4474      	add	r4, lr
 800598a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800598e:	fba0 8902 	umull	r8, r9, r0, r2
 8005992:	eba4 040a 	sub.w	r4, r4, sl
 8005996:	454c      	cmp	r4, r9
 8005998:	46c2      	mov	sl, r8
 800599a:	464b      	mov	r3, r9
 800599c:	d354      	bcc.n	8005a48 <__udivmoddi4+0x298>
 800599e:	d051      	beq.n	8005a44 <__udivmoddi4+0x294>
 80059a0:	2e00      	cmp	r6, #0
 80059a2:	d069      	beq.n	8005a78 <__udivmoddi4+0x2c8>
 80059a4:	ebb1 050a 	subs.w	r5, r1, sl
 80059a8:	eb64 0403 	sbc.w	r4, r4, r3
 80059ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80059b0:	40fd      	lsrs	r5, r7
 80059b2:	40fc      	lsrs	r4, r7
 80059b4:	ea4c 0505 	orr.w	r5, ip, r5
 80059b8:	e9c6 5400 	strd	r5, r4, [r6]
 80059bc:	2700      	movs	r7, #0
 80059be:	e747      	b.n	8005850 <__udivmoddi4+0xa0>
 80059c0:	f1c2 0320 	rsb	r3, r2, #32
 80059c4:	fa20 f703 	lsr.w	r7, r0, r3
 80059c8:	4095      	lsls	r5, r2
 80059ca:	fa01 f002 	lsl.w	r0, r1, r2
 80059ce:	fa21 f303 	lsr.w	r3, r1, r3
 80059d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80059d6:	4338      	orrs	r0, r7
 80059d8:	0c01      	lsrs	r1, r0, #16
 80059da:	fbb3 f7fe 	udiv	r7, r3, lr
 80059de:	fa1f f885 	uxth.w	r8, r5
 80059e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80059e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80059ea:	fb07 f308 	mul.w	r3, r7, r8
 80059ee:	428b      	cmp	r3, r1
 80059f0:	fa04 f402 	lsl.w	r4, r4, r2
 80059f4:	d907      	bls.n	8005a06 <__udivmoddi4+0x256>
 80059f6:	1869      	adds	r1, r5, r1
 80059f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80059fc:	d22f      	bcs.n	8005a5e <__udivmoddi4+0x2ae>
 80059fe:	428b      	cmp	r3, r1
 8005a00:	d92d      	bls.n	8005a5e <__udivmoddi4+0x2ae>
 8005a02:	3f02      	subs	r7, #2
 8005a04:	4429      	add	r1, r5
 8005a06:	1acb      	subs	r3, r1, r3
 8005a08:	b281      	uxth	r1, r0
 8005a0a:	fbb3 f0fe 	udiv	r0, r3, lr
 8005a0e:	fb0e 3310 	mls	r3, lr, r0, r3
 8005a12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005a16:	fb00 f308 	mul.w	r3, r0, r8
 8005a1a:	428b      	cmp	r3, r1
 8005a1c:	d907      	bls.n	8005a2e <__udivmoddi4+0x27e>
 8005a1e:	1869      	adds	r1, r5, r1
 8005a20:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8005a24:	d217      	bcs.n	8005a56 <__udivmoddi4+0x2a6>
 8005a26:	428b      	cmp	r3, r1
 8005a28:	d915      	bls.n	8005a56 <__udivmoddi4+0x2a6>
 8005a2a:	3802      	subs	r0, #2
 8005a2c:	4429      	add	r1, r5
 8005a2e:	1ac9      	subs	r1, r1, r3
 8005a30:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8005a34:	e73b      	b.n	80058ae <__udivmoddi4+0xfe>
 8005a36:	4637      	mov	r7, r6
 8005a38:	4630      	mov	r0, r6
 8005a3a:	e709      	b.n	8005850 <__udivmoddi4+0xa0>
 8005a3c:	4607      	mov	r7, r0
 8005a3e:	e6e7      	b.n	8005810 <__udivmoddi4+0x60>
 8005a40:	4618      	mov	r0, r3
 8005a42:	e6fb      	b.n	800583c <__udivmoddi4+0x8c>
 8005a44:	4541      	cmp	r1, r8
 8005a46:	d2ab      	bcs.n	80059a0 <__udivmoddi4+0x1f0>
 8005a48:	ebb8 0a02 	subs.w	sl, r8, r2
 8005a4c:	eb69 020e 	sbc.w	r2, r9, lr
 8005a50:	3801      	subs	r0, #1
 8005a52:	4613      	mov	r3, r2
 8005a54:	e7a4      	b.n	80059a0 <__udivmoddi4+0x1f0>
 8005a56:	4660      	mov	r0, ip
 8005a58:	e7e9      	b.n	8005a2e <__udivmoddi4+0x27e>
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	e795      	b.n	800598a <__udivmoddi4+0x1da>
 8005a5e:	4667      	mov	r7, ip
 8005a60:	e7d1      	b.n	8005a06 <__udivmoddi4+0x256>
 8005a62:	4681      	mov	r9, r0
 8005a64:	e77c      	b.n	8005960 <__udivmoddi4+0x1b0>
 8005a66:	3802      	subs	r0, #2
 8005a68:	442c      	add	r4, r5
 8005a6a:	e747      	b.n	80058fc <__udivmoddi4+0x14c>
 8005a6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8005a70:	442b      	add	r3, r5
 8005a72:	e72f      	b.n	80058d4 <__udivmoddi4+0x124>
 8005a74:	4638      	mov	r0, r7
 8005a76:	e708      	b.n	800588a <__udivmoddi4+0xda>
 8005a78:	4637      	mov	r7, r6
 8005a7a:	e6e9      	b.n	8005850 <__udivmoddi4+0xa0>

08005a7c <__aeabi_idiv0>:
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop

08005a80 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	607b      	str	r3, [r7, #4]
 8005a88:	4603      	mov	r3, r0
 8005a8a:	81fb      	strh	r3, [r7, #14]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	81bb      	strh	r3, [r7, #12]
 8005a90:	4613      	mov	r3, r2
 8005a92:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8005a98:	89bb      	ldrh	r3, [r7, #12]
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8005a9e:	89bb      	ldrh	r3, [r7, #12]
 8005aa0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005aa4:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8005aaa:	f001 fc29 	bl	8007300 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8005aae:	89fb      	ldrh	r3, [r7, #14]
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2203      	movs	r2, #3
 8005ab4:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f001 fab3 	bl	8007024 <CODEC_IO_Write>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8005ac8:	89fb      	ldrh	r3, [r7, #14]
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2200      	movs	r2, #0
 8005ace:	f640 0117 	movw	r1, #2071	; 0x817
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f001 faa6 	bl	8007024 <CODEC_IO_Write>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	461a      	mov	r2, r3
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	4413      	add	r3, r2
 8005ae0:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8005ae2:	89fb      	ldrh	r3, [r7, #14]
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005aec:	4618      	mov	r0, r3
 8005aee:	f001 fa99 	bl	8007024 <CODEC_IO_Write>
 8005af2:	4603      	mov	r3, r0
 8005af4:	461a      	mov	r2, r3
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	4413      	add	r3, r2
 8005afa:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8005afc:	89fb      	ldrh	r3, [r7, #14]
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	226c      	movs	r2, #108	; 0x6c
 8005b02:	2139      	movs	r1, #57	; 0x39
 8005b04:	4618      	mov	r0, r3
 8005b06:	f001 fa8d 	bl	8007024 <CODEC_IO_Write>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	4413      	add	r3, r2
 8005b12:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8005b14:	8afb      	ldrh	r3, [r7, #22]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00c      	beq.n	8005b34 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8005b1a:	89fb      	ldrh	r3, [r7, #14]
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2213      	movs	r2, #19
 8005b20:	2101      	movs	r1, #1
 8005b22:	4618      	mov	r0, r3
 8005b24:	f001 fa7e 	bl	8007024 <CODEC_IO_Write>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	4413      	add	r3, r2
 8005b30:	61fb      	str	r3, [r7, #28]
 8005b32:	e00b      	b.n	8005b4c <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8005b34:	89fb      	ldrh	r3, [r7, #14]
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2203      	movs	r2, #3
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f001 fa71 	bl	8007024 <CODEC_IO_Write>
 8005b42:	4603      	mov	r3, r0
 8005b44:	461a      	mov	r2, r3
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8005b4c:	2032      	movs	r0, #50	; 0x32
 8005b4e:	f001 fc3f 	bl	80073d0 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8005b52:	8b3b      	ldrh	r3, [r7, #24]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 815b 	beq.w	8005e10 <wm8994_Init+0x390>
  {
    outputEnabled = 1;
 8005b5a:	4bbc      	ldr	r3, [pc, #752]	; (8005e4c <wm8994_Init+0x3cc>)
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8005b60:	8b3b      	ldrh	r3, [r7, #24]
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d047      	beq.n	8005bf6 <wm8994_Init+0x176>
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	f000 8087 	beq.w	8005c7a <wm8994_Init+0x1fa>
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	f040 810c 	bne.w	8005d8a <wm8994_Init+0x30a>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8005b72:	89fb      	ldrh	r3, [r7, #14]
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	f640 420c 	movw	r2, #3084	; 0xc0c
 8005b7a:	2105      	movs	r1, #5
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f001 fa51 	bl	8007024 <CODEC_IO_Write>
 8005b82:	4603      	mov	r3, r0
 8005b84:	461a      	mov	r2, r3
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	4413      	add	r3, r2
 8005b8a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8005b8c:	89fb      	ldrh	r3, [r7, #14]
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2200      	movs	r2, #0
 8005b92:	f240 6101 	movw	r1, #1537	; 0x601
 8005b96:	4618      	mov	r0, r3
 8005b98:	f001 fa44 	bl	8007024 <CODEC_IO_Write>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8005ba6:	89fb      	ldrh	r3, [r7, #14]
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2200      	movs	r2, #0
 8005bac:	f240 6102 	movw	r1, #1538	; 0x602
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f001 fa37 	bl	8007024 <CODEC_IO_Write>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	461a      	mov	r2, r3
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8005bc0:	89fb      	ldrh	r3, [r7, #14]
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	f240 6104 	movw	r1, #1540	; 0x604
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f001 fa2a 	bl	8007024 <CODEC_IO_Write>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8005bda:	89fb      	ldrh	r3, [r7, #14]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2202      	movs	r2, #2
 8005be0:	f240 6105 	movw	r1, #1541	; 0x605
 8005be4:	4618      	mov	r0, r3
 8005be6:	f001 fa1d 	bl	8007024 <CODEC_IO_Write>
 8005bea:	4603      	mov	r3, r0
 8005bec:	461a      	mov	r2, r3
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	61fb      	str	r3, [r7, #28]
      break;
 8005bf4:	e10f      	b.n	8005e16 <wm8994_Init+0x396>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8005bf6:	89fb      	ldrh	r3, [r7, #14]
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	f240 3203 	movw	r2, #771	; 0x303
 8005bfe:	2105      	movs	r1, #5
 8005c00:	4618      	mov	r0, r3
 8005c02:	f001 fa0f 	bl	8007024 <CODEC_IO_Write>
 8005c06:	4603      	mov	r3, r0
 8005c08:	461a      	mov	r2, r3
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8005c10:	89fb      	ldrh	r3, [r7, #14]
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2201      	movs	r2, #1
 8005c16:	f240 6101 	movw	r1, #1537	; 0x601
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f001 fa02 	bl	8007024 <CODEC_IO_Write>
 8005c20:	4603      	mov	r3, r0
 8005c22:	461a      	mov	r2, r3
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	4413      	add	r3, r2
 8005c28:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005c2a:	89fb      	ldrh	r3, [r7, #14]
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f240 6102 	movw	r1, #1538	; 0x602
 8005c34:	4618      	mov	r0, r3
 8005c36:	f001 f9f5 	bl	8007024 <CODEC_IO_Write>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	4413      	add	r3, r2
 8005c42:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8005c44:	89fb      	ldrh	r3, [r7, #14]
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f240 6104 	movw	r1, #1540	; 0x604
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f001 f9e8 	bl	8007024 <CODEC_IO_Write>
 8005c54:	4603      	mov	r3, r0
 8005c56:	461a      	mov	r2, r3
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8005c5e:	89fb      	ldrh	r3, [r7, #14]
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2200      	movs	r2, #0
 8005c64:	f240 6105 	movw	r1, #1541	; 0x605
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f001 f9db 	bl	8007024 <CODEC_IO_Write>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	461a      	mov	r2, r3
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	4413      	add	r3, r2
 8005c76:	61fb      	str	r3, [r7, #28]
      break;
 8005c78:	e0cd      	b.n	8005e16 <wm8994_Init+0x396>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005c7a:	8afb      	ldrh	r3, [r7, #22]
 8005c7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c80:	d141      	bne.n	8005d06 <wm8994_Init+0x286>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8005c82:	89fb      	ldrh	r3, [r7, #14]
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	f640 720f 	movw	r2, #3855	; 0xf0f
 8005c8a:	2105      	movs	r1, #5
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f001 f9c9 	bl	8007024 <CODEC_IO_Write>
 8005c92:	4603      	mov	r3, r0
 8005c94:	461a      	mov	r2, r3
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	4413      	add	r3, r2
 8005c9a:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8005c9c:	89fb      	ldrh	r3, [r7, #14]
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2203      	movs	r2, #3
 8005ca2:	f240 6101 	movw	r1, #1537	; 0x601
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f001 f9bc 	bl	8007024 <CODEC_IO_Write>
 8005cac:	4603      	mov	r3, r0
 8005cae:	461a      	mov	r2, r3
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8005cb6:	89fb      	ldrh	r3, [r7, #14]
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2203      	movs	r2, #3
 8005cbc:	f240 6102 	movw	r1, #1538	; 0x602
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f001 f9af 	bl	8007024 <CODEC_IO_Write>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	461a      	mov	r2, r3
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	4413      	add	r3, r2
 8005cce:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8005cd0:	89fb      	ldrh	r3, [r7, #14]
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2203      	movs	r2, #3
 8005cd6:	f240 6104 	movw	r1, #1540	; 0x604
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f001 f9a2 	bl	8007024 <CODEC_IO_Write>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8005cea:	89fb      	ldrh	r3, [r7, #14]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2203      	movs	r2, #3
 8005cf0:	f240 6105 	movw	r1, #1541	; 0x605
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f001 f995 	bl	8007024 <CODEC_IO_Write>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	4413      	add	r3, r2
 8005d02:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8005d04:	e087      	b.n	8005e16 <wm8994_Init+0x396>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8005d06:	89fb      	ldrh	r3, [r7, #14]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	f640 720f 	movw	r2, #3855	; 0xf0f
 8005d0e:	2105      	movs	r1, #5
 8005d10:	4618      	mov	r0, r3
 8005d12:	f001 f987 	bl	8007024 <CODEC_IO_Write>
 8005d16:	4603      	mov	r3, r0
 8005d18:	461a      	mov	r2, r3
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8005d20:	89fb      	ldrh	r3, [r7, #14]
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2201      	movs	r2, #1
 8005d26:	f240 6101 	movw	r1, #1537	; 0x601
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f001 f97a 	bl	8007024 <CODEC_IO_Write>
 8005d30:	4603      	mov	r3, r0
 8005d32:	461a      	mov	r2, r3
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	4413      	add	r3, r2
 8005d38:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005d3a:	89fb      	ldrh	r3, [r7, #14]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f240 6102 	movw	r1, #1538	; 0x602
 8005d44:	4618      	mov	r0, r3
 8005d46:	f001 f96d 	bl	8007024 <CODEC_IO_Write>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	4413      	add	r3, r2
 8005d52:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8005d54:	89fb      	ldrh	r3, [r7, #14]
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2202      	movs	r2, #2
 8005d5a:	f240 6104 	movw	r1, #1540	; 0x604
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f001 f960 	bl	8007024 <CODEC_IO_Write>
 8005d64:	4603      	mov	r3, r0
 8005d66:	461a      	mov	r2, r3
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8005d6e:	89fb      	ldrh	r3, [r7, #14]
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2202      	movs	r2, #2
 8005d74:	f240 6105 	movw	r1, #1541	; 0x605
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f001 f953 	bl	8007024 <CODEC_IO_Write>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	461a      	mov	r2, r3
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	4413      	add	r3, r2
 8005d86:	61fb      	str	r3, [r7, #28]
      break;
 8005d88:	e045      	b.n	8005e16 <wm8994_Init+0x396>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8005d8a:	89fb      	ldrh	r3, [r7, #14]
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	f240 3203 	movw	r2, #771	; 0x303
 8005d92:	2105      	movs	r1, #5
 8005d94:	4618      	mov	r0, r3
 8005d96:	f001 f945 	bl	8007024 <CODEC_IO_Write>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	4413      	add	r3, r2
 8005da2:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8005da4:	89fb      	ldrh	r3, [r7, #14]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2201      	movs	r2, #1
 8005daa:	f240 6101 	movw	r1, #1537	; 0x601
 8005dae:	4618      	mov	r0, r3
 8005db0:	f001 f938 	bl	8007024 <CODEC_IO_Write>
 8005db4:	4603      	mov	r3, r0
 8005db6:	461a      	mov	r2, r3
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	4413      	add	r3, r2
 8005dbc:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005dbe:	89fb      	ldrh	r3, [r7, #14]
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f240 6102 	movw	r1, #1538	; 0x602
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f001 f92b 	bl	8007024 <CODEC_IO_Write>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8005dd8:	89fb      	ldrh	r3, [r7, #14]
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f240 6104 	movw	r1, #1540	; 0x604
 8005de2:	4618      	mov	r0, r3
 8005de4:	f001 f91e 	bl	8007024 <CODEC_IO_Write>
 8005de8:	4603      	mov	r3, r0
 8005dea:	461a      	mov	r2, r3
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	4413      	add	r3, r2
 8005df0:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8005df2:	89fb      	ldrh	r3, [r7, #14]
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2200      	movs	r2, #0
 8005df8:	f240 6105 	movw	r1, #1541	; 0x605
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f001 f911 	bl	8007024 <CODEC_IO_Write>
 8005e02:	4603      	mov	r3, r0
 8005e04:	461a      	mov	r2, r3
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	4413      	add	r3, r2
 8005e0a:	61fb      	str	r3, [r7, #28]
      break;
 8005e0c:	bf00      	nop
 8005e0e:	e002      	b.n	8005e16 <wm8994_Init+0x396>
    }
  }
  else
  {
    outputEnabled = 0;
 8005e10:	4b0e      	ldr	r3, [pc, #56]	; (8005e4c <wm8994_Init+0x3cc>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8005e16:	8afb      	ldrh	r3, [r7, #22]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 81a7 	beq.w	800616c <wm8994_Init+0x6ec>
  {
    inputEnabled = 1;
 8005e1e:	4b0c      	ldr	r3, [pc, #48]	; (8005e50 <wm8994_Init+0x3d0>)
 8005e20:	2201      	movs	r2, #1
 8005e22:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8005e24:	8afb      	ldrh	r3, [r7, #22]
 8005e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e2a:	d013      	beq.n	8005e54 <wm8994_Init+0x3d4>
 8005e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e30:	dc04      	bgt.n	8005e3c <wm8994_Init+0x3bc>
 8005e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e36:	f000 80cf 	beq.w	8005fd8 <wm8994_Init+0x558>
 8005e3a:	e192      	b.n	8006162 <wm8994_Init+0x6e2>
 8005e3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e40:	d057      	beq.n	8005ef2 <wm8994_Init+0x472>
 8005e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e46:	f000 8116 	beq.w	8006076 <wm8994_Init+0x5f6>
 8005e4a:	e18a      	b.n	8006162 <wm8994_Init+0x6e2>
 8005e4c:	20000764 	.word	0x20000764
 8005e50:	20000768 	.word	0x20000768
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8005e54:	89fb      	ldrh	r3, [r7, #14]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8005e5c:	2104      	movs	r1, #4
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f001 f8e0 	bl	8007024 <CODEC_IO_Write>
 8005e64:	4603      	mov	r3, r0
 8005e66:	461a      	mov	r2, r3
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8005e6e:	89fb      	ldrh	r3, [r7, #14]
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	22db      	movs	r2, #219	; 0xdb
 8005e74:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f001 f8d3 	bl	8007024 <CODEC_IO_Write>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	461a      	mov	r2, r3
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	4413      	add	r3, r2
 8005e86:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8005e88:	89fb      	ldrh	r3, [r7, #14]
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8005e90:	2102      	movs	r1, #2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f001 f8c6 	bl	8007024 <CODEC_IO_Write>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8005ea2:	89fb      	ldrh	r3, [r7, #14]
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8005eac:	4618      	mov	r0, r3
 8005eae:	f001 f8b9 	bl	8007024 <CODEC_IO_Write>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	4413      	add	r3, r2
 8005eba:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8005ebc:	89fb      	ldrh	r3, [r7, #14]
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	f240 6109 	movw	r1, #1545	; 0x609
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f001 f8ac 	bl	8007024 <CODEC_IO_Write>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	461a      	mov	r2, r3
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8005ed6:	89fb      	ldrh	r3, [r7, #14]
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	220e      	movs	r2, #14
 8005edc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f001 f89f 	bl	8007024 <CODEC_IO_Write>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	461a      	mov	r2, r3
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	4413      	add	r3, r2
 8005eee:	61fb      	str	r3, [r7, #28]
      break;
 8005ef0:	e13f      	b.n	8006172 <wm8994_Init+0x6f2>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8005ef2:	89fb      	ldrh	r3, [r7, #14]
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2211      	movs	r2, #17
 8005ef8:	2128      	movs	r1, #40	; 0x28
 8005efa:	4618      	mov	r0, r3
 8005efc:	f001 f892 	bl	8007024 <CODEC_IO_Write>
 8005f00:	4603      	mov	r3, r0
 8005f02:	461a      	mov	r2, r3
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	4413      	add	r3, r2
 8005f08:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8005f0a:	89fb      	ldrh	r3, [r7, #14]
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2235      	movs	r2, #53	; 0x35
 8005f10:	2129      	movs	r1, #41	; 0x29
 8005f12:	4618      	mov	r0, r3
 8005f14:	f001 f886 	bl	8007024 <CODEC_IO_Write>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	4413      	add	r3, r2
 8005f20:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8005f22:	89fb      	ldrh	r3, [r7, #14]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2235      	movs	r2, #53	; 0x35
 8005f28:	212a      	movs	r1, #42	; 0x2a
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f001 f87a 	bl	8007024 <CODEC_IO_Write>
 8005f30:	4603      	mov	r3, r0
 8005f32:	461a      	mov	r2, r3
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	4413      	add	r3, r2
 8005f38:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8005f3a:	89fb      	ldrh	r3, [r7, #14]
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	f240 3203 	movw	r2, #771	; 0x303
 8005f42:	2104      	movs	r1, #4
 8005f44:	4618      	mov	r0, r3
 8005f46:	f001 f86d 	bl	8007024 <CODEC_IO_Write>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	4413      	add	r3, r2
 8005f52:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8005f54:	89fb      	ldrh	r3, [r7, #14]
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	22db      	movs	r2, #219	; 0xdb
 8005f5a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f001 f860 	bl	8007024 <CODEC_IO_Write>
 8005f64:	4603      	mov	r3, r0
 8005f66:	461a      	mov	r2, r3
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8005f6e:	89fb      	ldrh	r3, [r7, #14]
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	f246 3250 	movw	r2, #25424	; 0x6350
 8005f76:	2102      	movs	r1, #2
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f001 f853 	bl	8007024 <CODEC_IO_Write>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	461a      	mov	r2, r3
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	4413      	add	r3, r2
 8005f86:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8005f88:	89fb      	ldrh	r3, [r7, #14]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	f240 6106 	movw	r1, #1542	; 0x606
 8005f92:	4618      	mov	r0, r3
 8005f94:	f001 f846 	bl	8007024 <CODEC_IO_Write>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8005fa2:	89fb      	ldrh	r3, [r7, #14]
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f240 6107 	movw	r1, #1543	; 0x607
 8005fac:	4618      	mov	r0, r3
 8005fae:	f001 f839 	bl	8007024 <CODEC_IO_Write>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	4413      	add	r3, r2
 8005fba:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8005fbc:	89fb      	ldrh	r3, [r7, #14]
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	220d      	movs	r2, #13
 8005fc2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f001 f82c 	bl	8007024 <CODEC_IO_Write>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	461a      	mov	r2, r3
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	61fb      	str	r3, [r7, #28]
      break;
 8005fd6:	e0cc      	b.n	8006172 <wm8994_Init+0x6f2>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8005fd8:	89fb      	ldrh	r3, [r7, #14]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8005fe0:	2104      	movs	r1, #4
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f001 f81e 	bl	8007024 <CODEC_IO_Write>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	461a      	mov	r2, r3
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	4413      	add	r3, r2
 8005ff0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8005ff2:	89fb      	ldrh	r3, [r7, #14]
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	22db      	movs	r2, #219	; 0xdb
 8005ff8:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f001 f811 	bl	8007024 <CODEC_IO_Write>
 8006002:	4603      	mov	r3, r0
 8006004:	461a      	mov	r2, r3
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	4413      	add	r3, r2
 800600a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800600c:	89fb      	ldrh	r3, [r7, #14]
 800600e:	b2db      	uxtb	r3, r3
 8006010:	f246 3250 	movw	r2, #25424	; 0x6350
 8006014:	2102      	movs	r1, #2
 8006016:	4618      	mov	r0, r3
 8006018:	f001 f804 	bl	8007024 <CODEC_IO_Write>
 800601c:	4603      	mov	r3, r0
 800601e:	461a      	mov	r2, r3
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	4413      	add	r3, r2
 8006024:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8006026:	89fb      	ldrh	r3, [r7, #14]
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2202      	movs	r2, #2
 800602c:	f240 6106 	movw	r1, #1542	; 0x606
 8006030:	4618      	mov	r0, r3
 8006032:	f000 fff7 	bl	8007024 <CODEC_IO_Write>
 8006036:	4603      	mov	r3, r0
 8006038:	461a      	mov	r2, r3
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	4413      	add	r3, r2
 800603e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8006040:	89fb      	ldrh	r3, [r7, #14]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2202      	movs	r2, #2
 8006046:	f240 6107 	movw	r1, #1543	; 0x607
 800604a:	4618      	mov	r0, r3
 800604c:	f000 ffea 	bl	8007024 <CODEC_IO_Write>
 8006050:	4603      	mov	r3, r0
 8006052:	461a      	mov	r2, r3
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	4413      	add	r3, r2
 8006058:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800605a:	89fb      	ldrh	r3, [r7, #14]
 800605c:	b2db      	uxtb	r3, r3
 800605e:	220d      	movs	r2, #13
 8006060:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006064:	4618      	mov	r0, r3
 8006066:	f000 ffdd 	bl	8007024 <CODEC_IO_Write>
 800606a:	4603      	mov	r3, r0
 800606c:	461a      	mov	r2, r3
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	4413      	add	r3, r2
 8006072:	61fb      	str	r3, [r7, #28]
      break; 
 8006074:	e07d      	b.n	8006172 <wm8994_Init+0x6f2>
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8006076:	89fb      	ldrh	r3, [r7, #14]
 8006078:	b2db      	uxtb	r3, r3
 800607a:	f640 723c 	movw	r2, #3900	; 0xf3c
 800607e:	2104      	movs	r1, #4
 8006080:	4618      	mov	r0, r3
 8006082:	f000 ffcf 	bl	8007024 <CODEC_IO_Write>
 8006086:	4603      	mov	r3, r0
 8006088:	461a      	mov	r2, r3
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	4413      	add	r3, r2
 800608e:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8006090:	89fb      	ldrh	r3, [r7, #14]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	22db      	movs	r2, #219	; 0xdb
 8006096:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800609a:	4618      	mov	r0, r3
 800609c:	f000 ffc2 	bl	8007024 <CODEC_IO_Write>
 80060a0:	4603      	mov	r3, r0
 80060a2:	461a      	mov	r2, r3
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	4413      	add	r3, r2
 80060a8:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80060aa:	89fb      	ldrh	r3, [r7, #14]
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	22db      	movs	r2, #219	; 0xdb
 80060b0:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80060b4:	4618      	mov	r0, r3
 80060b6:	f000 ffb5 	bl	8007024 <CODEC_IO_Write>
 80060ba:	4603      	mov	r3, r0
 80060bc:	461a      	mov	r2, r3
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	4413      	add	r3, r2
 80060c2:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80060c4:	89fb      	ldrh	r3, [r7, #14]
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	f246 32a0 	movw	r2, #25504	; 0x63a0
 80060cc:	2102      	movs	r1, #2
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 ffa8 	bl	8007024 <CODEC_IO_Write>
 80060d4:	4603      	mov	r3, r0
 80060d6:	461a      	mov	r2, r3
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	4413      	add	r3, r2
 80060dc:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80060de:	89fb      	ldrh	r3, [r7, #14]
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2202      	movs	r2, #2
 80060e4:	f240 6106 	movw	r1, #1542	; 0x606
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 ff9b 	bl	8007024 <CODEC_IO_Write>
 80060ee:	4603      	mov	r3, r0
 80060f0:	461a      	mov	r2, r3
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	4413      	add	r3, r2
 80060f6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80060f8:	89fb      	ldrh	r3, [r7, #14]
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2202      	movs	r2, #2
 80060fe:	f240 6107 	movw	r1, #1543	; 0x607
 8006102:	4618      	mov	r0, r3
 8006104:	f000 ff8e 	bl	8007024 <CODEC_IO_Write>
 8006108:	4603      	mov	r3, r0
 800610a:	461a      	mov	r2, r3
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	4413      	add	r3, r2
 8006110:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8006112:	89fb      	ldrh	r3, [r7, #14]
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2202      	movs	r2, #2
 8006118:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800611c:	4618      	mov	r0, r3
 800611e:	f000 ff81 	bl	8007024 <CODEC_IO_Write>
 8006122:	4603      	mov	r3, r0
 8006124:	461a      	mov	r2, r3
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	4413      	add	r3, r2
 800612a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800612c:	89fb      	ldrh	r3, [r7, #14]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2202      	movs	r2, #2
 8006132:	f240 6109 	movw	r1, #1545	; 0x609
 8006136:	4618      	mov	r0, r3
 8006138:	f000 ff74 	bl	8007024 <CODEC_IO_Write>
 800613c:	4603      	mov	r3, r0
 800613e:	461a      	mov	r2, r3
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4413      	add	r3, r2
 8006144:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8006146:	89fb      	ldrh	r3, [r7, #14]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	220d      	movs	r2, #13
 800614c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006150:	4618      	mov	r0, r3
 8006152:	f000 ff67 	bl	8007024 <CODEC_IO_Write>
 8006156:	4603      	mov	r3, r0
 8006158:	461a      	mov	r2, r3
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	4413      	add	r3, r2
 800615e:	61fb      	str	r3, [r7, #28]
      break;    
 8006160:	e007      	b.n	8006172 <wm8994_Init+0x6f2>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	3301      	adds	r3, #1
 8006166:	61fb      	str	r3, [r7, #28]
      break;
 8006168:	bf00      	nop
 800616a:	e002      	b.n	8006172 <wm8994_Init+0x6f2>
    }
  }
  else
  {
    inputEnabled = 0;
 800616c:	4b95      	ldr	r3, [pc, #596]	; (80063c4 <wm8994_Init+0x944>)
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f245 6222 	movw	r2, #22050	; 0x5622
 8006178:	4293      	cmp	r3, r2
 800617a:	d076      	beq.n	800626a <wm8994_Init+0x7ea>
 800617c:	f245 6222 	movw	r2, #22050	; 0x5622
 8006180:	4293      	cmp	r3, r2
 8006182:	d80a      	bhi.n	800619a <wm8994_Init+0x71a>
 8006184:	f642 3211 	movw	r2, #11025	; 0x2b11
 8006188:	4293      	cmp	r3, r2
 800618a:	d060      	beq.n	800624e <wm8994_Init+0x7ce>
 800618c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8006190:	d025      	beq.n	80061de <wm8994_Init+0x75e>
 8006192:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8006196:	d014      	beq.n	80061c2 <wm8994_Init+0x742>
 8006198:	e083      	b.n	80062a2 <wm8994_Init+0x822>
 800619a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800619e:	4293      	cmp	r3, r2
 80061a0:	d071      	beq.n	8006286 <wm8994_Init+0x806>
 80061a2:	f64a 4244 	movw	r2, #44100	; 0xac44
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d803      	bhi.n	80061b2 <wm8994_Init+0x732>
 80061aa:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80061ae:	d024      	beq.n	80061fa <wm8994_Init+0x77a>
 80061b0:	e077      	b.n	80062a2 <wm8994_Init+0x822>
 80061b2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d02d      	beq.n	8006216 <wm8994_Init+0x796>
 80061ba:	4a83      	ldr	r2, [pc, #524]	; (80063c8 <wm8994_Init+0x948>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d038      	beq.n	8006232 <wm8994_Init+0x7b2>
 80061c0:	e06f      	b.n	80062a2 <wm8994_Init+0x822>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80061c2:	89fb      	ldrh	r3, [r7, #14]
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2203      	movs	r2, #3
 80061c8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 ff29 	bl	8007024 <CODEC_IO_Write>
 80061d2:	4603      	mov	r3, r0
 80061d4:	461a      	mov	r2, r3
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	4413      	add	r3, r2
 80061da:	61fb      	str	r3, [r7, #28]
    break;
 80061dc:	e06f      	b.n	80062be <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80061de:	89fb      	ldrh	r3, [r7, #14]
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2233      	movs	r2, #51	; 0x33
 80061e4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 ff1b 	bl	8007024 <CODEC_IO_Write>
 80061ee:	4603      	mov	r3, r0
 80061f0:	461a      	mov	r2, r3
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	4413      	add	r3, r2
 80061f6:	61fb      	str	r3, [r7, #28]
    break;
 80061f8:	e061      	b.n	80062be <wm8994_Init+0x83e>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80061fa:	89fb      	ldrh	r3, [r7, #14]
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2263      	movs	r2, #99	; 0x63
 8006200:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006204:	4618      	mov	r0, r3
 8006206:	f000 ff0d 	bl	8007024 <CODEC_IO_Write>
 800620a:	4603      	mov	r3, r0
 800620c:	461a      	mov	r2, r3
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	61fb      	str	r3, [r7, #28]
    break;
 8006214:	e053      	b.n	80062be <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8006216:	89fb      	ldrh	r3, [r7, #14]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2283      	movs	r2, #131	; 0x83
 800621c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006220:	4618      	mov	r0, r3
 8006222:	f000 feff 	bl	8007024 <CODEC_IO_Write>
 8006226:	4603      	mov	r3, r0
 8006228:	461a      	mov	r2, r3
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	4413      	add	r3, r2
 800622e:	61fb      	str	r3, [r7, #28]
    break;
 8006230:	e045      	b.n	80062be <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8006232:	89fb      	ldrh	r3, [r7, #14]
 8006234:	b2db      	uxtb	r3, r3
 8006236:	22a3      	movs	r2, #163	; 0xa3
 8006238:	f44f 7104 	mov.w	r1, #528	; 0x210
 800623c:	4618      	mov	r0, r3
 800623e:	f000 fef1 	bl	8007024 <CODEC_IO_Write>
 8006242:	4603      	mov	r3, r0
 8006244:	461a      	mov	r2, r3
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	4413      	add	r3, r2
 800624a:	61fb      	str	r3, [r7, #28]
    break;
 800624c:	e037      	b.n	80062be <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800624e:	89fb      	ldrh	r3, [r7, #14]
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2213      	movs	r2, #19
 8006254:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006258:	4618      	mov	r0, r3
 800625a:	f000 fee3 	bl	8007024 <CODEC_IO_Write>
 800625e:	4603      	mov	r3, r0
 8006260:	461a      	mov	r2, r3
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	4413      	add	r3, r2
 8006266:	61fb      	str	r3, [r7, #28]
    break;
 8006268:	e029      	b.n	80062be <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800626a:	89fb      	ldrh	r3, [r7, #14]
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2243      	movs	r2, #67	; 0x43
 8006270:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006274:	4618      	mov	r0, r3
 8006276:	f000 fed5 	bl	8007024 <CODEC_IO_Write>
 800627a:	4603      	mov	r3, r0
 800627c:	461a      	mov	r2, r3
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	4413      	add	r3, r2
 8006282:	61fb      	str	r3, [r7, #28]
    break;
 8006284:	e01b      	b.n	80062be <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8006286:	89fb      	ldrh	r3, [r7, #14]
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2273      	movs	r2, #115	; 0x73
 800628c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006290:	4618      	mov	r0, r3
 8006292:	f000 fec7 	bl	8007024 <CODEC_IO_Write>
 8006296:	4603      	mov	r3, r0
 8006298:	461a      	mov	r2, r3
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	4413      	add	r3, r2
 800629e:	61fb      	str	r3, [r7, #28]
    break; 
 80062a0:	e00d      	b.n	80062be <wm8994_Init+0x83e>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80062a2:	89fb      	ldrh	r3, [r7, #14]
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2283      	movs	r2, #131	; 0x83
 80062a8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 feb9 	bl	8007024 <CODEC_IO_Write>
 80062b2:	4603      	mov	r3, r0
 80062b4:	461a      	mov	r2, r3
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	4413      	add	r3, r2
 80062ba:	61fb      	str	r3, [r7, #28]
    break; 
 80062bc:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80062be:	8afb      	ldrh	r3, [r7, #22]
 80062c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062c4:	d10e      	bne.n	80062e4 <wm8994_Init+0x864>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 80062c6:	89fb      	ldrh	r3, [r7, #14]
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	f244 0218 	movw	r2, #16408	; 0x4018
 80062ce:	f44f 7140 	mov.w	r1, #768	; 0x300
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 fea6 	bl	8007024 <CODEC_IO_Write>
 80062d8:	4603      	mov	r3, r0
 80062da:	461a      	mov	r2, r3
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	4413      	add	r3, r2
 80062e0:	61fb      	str	r3, [r7, #28]
 80062e2:	e00d      	b.n	8006300 <wm8994_Init+0x880>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80062e4:	89fb      	ldrh	r3, [r7, #14]
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	f244 0210 	movw	r2, #16400	; 0x4010
 80062ec:	f44f 7140 	mov.w	r1, #768	; 0x300
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fe97 	bl	8007024 <CODEC_IO_Write>
 80062f6:	4603      	mov	r3, r0
 80062f8:	461a      	mov	r2, r3
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	4413      	add	r3, r2
 80062fe:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8006300:	89fb      	ldrh	r3, [r7, #14]
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2200      	movs	r2, #0
 8006306:	f240 3102 	movw	r1, #770	; 0x302
 800630a:	4618      	mov	r0, r3
 800630c:	f000 fe8a 	bl	8007024 <CODEC_IO_Write>
 8006310:	4603      	mov	r3, r0
 8006312:	461a      	mov	r2, r3
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	4413      	add	r3, r2
 8006318:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 800631a:	89fb      	ldrh	r3, [r7, #14]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	220a      	movs	r2, #10
 8006320:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006324:	4618      	mov	r0, r3
 8006326:	f000 fe7d 	bl	8007024 <CODEC_IO_Write>
 800632a:	4603      	mov	r3, r0
 800632c:	461a      	mov	r2, r3
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	4413      	add	r3, r2
 8006332:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8006334:	89fb      	ldrh	r3, [r7, #14]
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2201      	movs	r2, #1
 800633a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fe70 	bl	8007024 <CODEC_IO_Write>
 8006344:	4603      	mov	r3, r0
 8006346:	461a      	mov	r2, r3
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	4413      	add	r3, r2
 800634c:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 800634e:	8b3b      	ldrh	r3, [r7, #24]
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 817b 	beq.w	800664c <wm8994_Init+0xbcc>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8006356:	8b3b      	ldrh	r3, [r7, #24]
 8006358:	2b02      	cmp	r3, #2
 800635a:	d157      	bne.n	800640c <wm8994_Init+0x98c>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 800635c:	89fb      	ldrh	r3, [r7, #14]
 800635e:	b2db      	uxtb	r3, r3
 8006360:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006364:	212d      	movs	r1, #45	; 0x2d
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fe5c 	bl	8007024 <CODEC_IO_Write>
 800636c:	4603      	mov	r3, r0
 800636e:	461a      	mov	r2, r3
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	4413      	add	r3, r2
 8006374:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8006376:	89fb      	ldrh	r3, [r7, #14]
 8006378:	b2db      	uxtb	r3, r3
 800637a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800637e:	212e      	movs	r1, #46	; 0x2e
 8006380:	4618      	mov	r0, r3
 8006382:	f000 fe4f 	bl	8007024 <CODEC_IO_Write>
 8006386:	4603      	mov	r3, r0
 8006388:	461a      	mov	r2, r3
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	4413      	add	r3, r2
 800638e:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8006390:	4b0e      	ldr	r3, [pc, #56]	; (80063cc <wm8994_Init+0x94c>)
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01b      	beq.n	80063d0 <wm8994_Init+0x950>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8006398:	89fb      	ldrh	r3, [r7, #14]
 800639a:	b2db      	uxtb	r3, r3
 800639c:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 80063a0:	f44f 7188 	mov.w	r1, #272	; 0x110
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 fe3d 	bl	8007024 <CODEC_IO_Write>
 80063aa:	4603      	mov	r3, r0
 80063ac:	461a      	mov	r2, r3
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	4413      	add	r3, r2
 80063b2:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 80063b4:	4b05      	ldr	r3, [pc, #20]	; (80063cc <wm8994_Init+0x94c>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 80063ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80063be:	f001 f807 	bl	80073d0 <AUDIO_IO_Delay>
 80063c2:	e016      	b.n	80063f2 <wm8994_Init+0x972>
 80063c4:	20000768 	.word	0x20000768
 80063c8:	00017700 	.word	0x00017700
 80063cc:	20000030 	.word	0x20000030
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 80063d0:	89fb      	ldrh	r3, [r7, #14]
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	f248 1208 	movw	r2, #33032	; 0x8108
 80063d8:	f44f 7188 	mov.w	r1, #272	; 0x110
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 fe21 	bl	8007024 <CODEC_IO_Write>
 80063e2:	4603      	mov	r3, r0
 80063e4:	461a      	mov	r2, r3
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	4413      	add	r3, r2
 80063ea:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 80063ec:	2032      	movs	r0, #50	; 0x32
 80063ee:	f000 ffef 	bl	80073d0 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80063f2:	89fb      	ldrh	r3, [r7, #14]
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2200      	movs	r2, #0
 80063f8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fe11 	bl	8007024 <CODEC_IO_Write>
 8006402:	4603      	mov	r3, r0
 8006404:	461a      	mov	r2, r3
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	4413      	add	r3, r2
 800640a:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 800640c:	89fb      	ldrh	r3, [r7, #14]
 800640e:	b2db      	uxtb	r3, r3
 8006410:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006414:	2103      	movs	r1, #3
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fe04 	bl	8007024 <CODEC_IO_Write>
 800641c:	4603      	mov	r3, r0
 800641e:	461a      	mov	r2, r3
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	4413      	add	r3, r2
 8006424:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8006426:	89fb      	ldrh	r3, [r7, #14]
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2200      	movs	r2, #0
 800642c:	2122      	movs	r1, #34	; 0x22
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fdf8 	bl	8007024 <CODEC_IO_Write>
 8006434:	4603      	mov	r3, r0
 8006436:	461a      	mov	r2, r3
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	4413      	add	r3, r2
 800643c:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 800643e:	89fb      	ldrh	r3, [r7, #14]
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2200      	movs	r2, #0
 8006444:	2123      	movs	r1, #35	; 0x23
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fdec 	bl	8007024 <CODEC_IO_Write>
 800644c:	4603      	mov	r3, r0
 800644e:	461a      	mov	r2, r3
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	4413      	add	r3, r2
 8006454:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8006456:	89fb      	ldrh	r3, [r7, #14]
 8006458:	b2db      	uxtb	r3, r3
 800645a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800645e:	2136      	movs	r1, #54	; 0x36
 8006460:	4618      	mov	r0, r3
 8006462:	f000 fddf 	bl	8007024 <CODEC_IO_Write>
 8006466:	4603      	mov	r3, r0
 8006468:	461a      	mov	r2, r3
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	4413      	add	r3, r2
 800646e:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8006470:	89fb      	ldrh	r3, [r7, #14]
 8006472:	b2db      	uxtb	r3, r3
 8006474:	f243 0203 	movw	r2, #12291	; 0x3003
 8006478:	2101      	movs	r1, #1
 800647a:	4618      	mov	r0, r3
 800647c:	f000 fdd2 	bl	8007024 <CODEC_IO_Write>
 8006480:	4603      	mov	r3, r0
 8006482:	461a      	mov	r2, r3
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	4413      	add	r3, r2
 8006488:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800648a:	8afb      	ldrh	r3, [r7, #22]
 800648c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006490:	d10d      	bne.n	80064ae <wm8994_Init+0xa2e>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8006492:	89fb      	ldrh	r3, [r7, #14]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	f240 2205 	movw	r2, #517	; 0x205
 800649a:	2151      	movs	r1, #81	; 0x51
 800649c:	4618      	mov	r0, r3
 800649e:	f000 fdc1 	bl	8007024 <CODEC_IO_Write>
 80064a2:	4603      	mov	r3, r0
 80064a4:	461a      	mov	r2, r3
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	4413      	add	r3, r2
 80064aa:	61fb      	str	r3, [r7, #28]
 80064ac:	e00b      	b.n	80064c6 <wm8994_Init+0xa46>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 80064ae:	89fb      	ldrh	r3, [r7, #14]
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2205      	movs	r2, #5
 80064b4:	2151      	movs	r1, #81	; 0x51
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 fdb4 	bl	8007024 <CODEC_IO_Write>
 80064bc:	4603      	mov	r3, r0
 80064be:	461a      	mov	r2, r3
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	4413      	add	r3, r2
 80064c4:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80064c6:	8b7b      	ldrh	r3, [r7, #26]
 80064c8:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 80064cc:	f043 0303 	orr.w	r3, r3, #3
 80064d0:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80064d2:	89fb      	ldrh	r3, [r7, #14]
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	8b7a      	ldrh	r2, [r7, #26]
 80064d8:	2101      	movs	r1, #1
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 fda2 	bl	8007024 <CODEC_IO_Write>
 80064e0:	4603      	mov	r3, r0
 80064e2:	461a      	mov	r2, r3
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	4413      	add	r3, r2
 80064e8:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 80064ea:	89fb      	ldrh	r3, [r7, #14]
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2222      	movs	r2, #34	; 0x22
 80064f0:	2160      	movs	r1, #96	; 0x60
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 fd96 	bl	8007024 <CODEC_IO_Write>
 80064f8:	4603      	mov	r3, r0
 80064fa:	461a      	mov	r2, r3
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	4413      	add	r3, r2
 8006500:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8006502:	89fb      	ldrh	r3, [r7, #14]
 8006504:	b2db      	uxtb	r3, r3
 8006506:	f649 7225 	movw	r2, #40741	; 0x9f25
 800650a:	214c      	movs	r1, #76	; 0x4c
 800650c:	4618      	mov	r0, r3
 800650e:	f000 fd89 	bl	8007024 <CODEC_IO_Write>
 8006512:	4603      	mov	r3, r0
 8006514:	461a      	mov	r2, r3
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	4413      	add	r3, r2
 800651a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 800651c:	200f      	movs	r0, #15
 800651e:	f000 ff57 	bl	80073d0 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8006522:	89fb      	ldrh	r3, [r7, #14]
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2201      	movs	r2, #1
 8006528:	212d      	movs	r1, #45	; 0x2d
 800652a:	4618      	mov	r0, r3
 800652c:	f000 fd7a 	bl	8007024 <CODEC_IO_Write>
 8006530:	4603      	mov	r3, r0
 8006532:	461a      	mov	r2, r3
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	4413      	add	r3, r2
 8006538:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 800653a:	89fb      	ldrh	r3, [r7, #14]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2201      	movs	r2, #1
 8006540:	212e      	movs	r1, #46	; 0x2e
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fd6e 	bl	8007024 <CODEC_IO_Write>
 8006548:	4603      	mov	r3, r0
 800654a:	461a      	mov	r2, r3
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	4413      	add	r3, r2
 8006550:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8006552:	89fb      	ldrh	r3, [r7, #14]
 8006554:	b2db      	uxtb	r3, r3
 8006556:	f44f 724c 	mov.w	r2, #816	; 0x330
 800655a:	2103      	movs	r1, #3
 800655c:	4618      	mov	r0, r3
 800655e:	f000 fd61 	bl	8007024 <CODEC_IO_Write>
 8006562:	4603      	mov	r3, r0
 8006564:	461a      	mov	r2, r3
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	4413      	add	r3, r2
 800656a:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 800656c:	89fb      	ldrh	r3, [r7, #14]
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2233      	movs	r2, #51	; 0x33
 8006572:	2154      	movs	r1, #84	; 0x54
 8006574:	4618      	mov	r0, r3
 8006576:	f000 fd55 	bl	8007024 <CODEC_IO_Write>
 800657a:	4603      	mov	r3, r0
 800657c:	461a      	mov	r2, r3
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	4413      	add	r3, r2
 8006582:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8006584:	f240 1001 	movw	r0, #257	; 0x101
 8006588:	f000 ff22 	bl	80073d0 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 800658c:	89fb      	ldrh	r3, [r7, #14]
 800658e:	b2db      	uxtb	r3, r3
 8006590:	22ee      	movs	r2, #238	; 0xee
 8006592:	2160      	movs	r1, #96	; 0x60
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fd45 	bl	8007024 <CODEC_IO_Write>
 800659a:	4603      	mov	r3, r0
 800659c:	461a      	mov	r2, r3
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	4413      	add	r3, r2
 80065a2:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 80065a4:	89fb      	ldrh	r3, [r7, #14]
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	22c0      	movs	r2, #192	; 0xc0
 80065aa:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 fd38 	bl	8007024 <CODEC_IO_Write>
 80065b4:	4603      	mov	r3, r0
 80065b6:	461a      	mov	r2, r3
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	4413      	add	r3, r2
 80065bc:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 80065be:	89fb      	ldrh	r3, [r7, #14]
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	22c0      	movs	r2, #192	; 0xc0
 80065c4:	f240 6111 	movw	r1, #1553	; 0x611
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 fd2b 	bl	8007024 <CODEC_IO_Write>
 80065ce:	4603      	mov	r3, r0
 80065d0:	461a      	mov	r2, r3
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	4413      	add	r3, r2
 80065d6:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80065d8:	89fb      	ldrh	r3, [r7, #14]
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2210      	movs	r2, #16
 80065de:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 fd1e 	bl	8007024 <CODEC_IO_Write>
 80065e8:	4603      	mov	r3, r0
 80065ea:	461a      	mov	r2, r3
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	4413      	add	r3, r2
 80065f0:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 80065f2:	89fb      	ldrh	r3, [r7, #14]
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	22c0      	movs	r2, #192	; 0xc0
 80065f8:	f240 6112 	movw	r1, #1554	; 0x612
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 fd11 	bl	8007024 <CODEC_IO_Write>
 8006602:	4603      	mov	r3, r0
 8006604:	461a      	mov	r2, r3
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	4413      	add	r3, r2
 800660a:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 800660c:	89fb      	ldrh	r3, [r7, #14]
 800660e:	b2db      	uxtb	r3, r3
 8006610:	22c0      	movs	r2, #192	; 0xc0
 8006612:	f240 6113 	movw	r1, #1555	; 0x613
 8006616:	4618      	mov	r0, r3
 8006618:	f000 fd04 	bl	8007024 <CODEC_IO_Write>
 800661c:	4603      	mov	r3, r0
 800661e:	461a      	mov	r2, r3
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	4413      	add	r3, r2
 8006624:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8006626:	89fb      	ldrh	r3, [r7, #14]
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2210      	movs	r2, #16
 800662c:	f240 4122 	movw	r1, #1058	; 0x422
 8006630:	4618      	mov	r0, r3
 8006632:	f000 fcf7 	bl	8007024 <CODEC_IO_Write>
 8006636:	4603      	mov	r3, r0
 8006638:	461a      	mov	r2, r3
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	4413      	add	r3, r2
 800663e:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8006640:	7afa      	ldrb	r2, [r7, #11]
 8006642:	89fb      	ldrh	r3, [r7, #14]
 8006644:	4611      	mov	r1, r2
 8006646:	4618      	mov	r0, r3
 8006648:	f000 f984 	bl	8006954 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 800664c:	8afb      	ldrh	r3, [r7, #22]
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 80a6 	beq.w	80067a0 <wm8994_Init+0xd20>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8006654:	8afb      	ldrh	r3, [r7, #22]
 8006656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800665a:	d003      	beq.n	8006664 <wm8994_Init+0xbe4>
 800665c:	8afb      	ldrh	r3, [r7, #22]
 800665e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006662:	d12b      	bne.n	80066bc <wm8994_Init+0xc3c>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8006664:	8b7b      	ldrh	r3, [r7, #26]
 8006666:	f043 0313 	orr.w	r3, r3, #19
 800666a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800666c:	89fb      	ldrh	r3, [r7, #14]
 800666e:	b2db      	uxtb	r3, r3
 8006670:	8b7a      	ldrh	r2, [r7, #26]
 8006672:	2101      	movs	r1, #1
 8006674:	4618      	mov	r0, r3
 8006676:	f000 fcd5 	bl	8007024 <CODEC_IO_Write>
 800667a:	4603      	mov	r3, r0
 800667c:	461a      	mov	r2, r3
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	4413      	add	r3, r2
 8006682:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8006684:	89fb      	ldrh	r3, [r7, #14]
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2202      	movs	r2, #2
 800668a:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800668e:	4618      	mov	r0, r3
 8006690:	f000 fcc8 	bl	8007024 <CODEC_IO_Write>
 8006694:	4603      	mov	r3, r0
 8006696:	461a      	mov	r2, r3
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	4413      	add	r3, r2
 800669c:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 800669e:	89fb      	ldrh	r3, [r7, #14]
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80066a6:	f240 4111 	movw	r1, #1041	; 0x411
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 fcba 	bl	8007024 <CODEC_IO_Write>
 80066b0:	4603      	mov	r3, r0
 80066b2:	461a      	mov	r2, r3
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	4413      	add	r3, r2
 80066b8:	61fb      	str	r3, [r7, #28]
 80066ba:	e06b      	b.n	8006794 <wm8994_Init+0xd14>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80066bc:	8afb      	ldrh	r3, [r7, #22]
 80066be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066c2:	d139      	bne.n	8006738 <wm8994_Init+0xcb8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80066c4:	8b7b      	ldrh	r3, [r7, #26]
 80066c6:	f043 0313 	orr.w	r3, r3, #19
 80066ca:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80066cc:	89fb      	ldrh	r3, [r7, #14]
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	8b7a      	ldrh	r2, [r7, #26]
 80066d2:	2101      	movs	r1, #1
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 fca5 	bl	8007024 <CODEC_IO_Write>
 80066da:	4603      	mov	r3, r0
 80066dc:	461a      	mov	r2, r3
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	4413      	add	r3, r2
 80066e2:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80066e4:	89fb      	ldrh	r3, [r7, #14]
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2202      	movs	r2, #2
 80066ea:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fc98 	bl	8007024 <CODEC_IO_Write>
 80066f4:	4603      	mov	r3, r0
 80066f6:	461a      	mov	r2, r3
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	4413      	add	r3, r2
 80066fc:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80066fe:	89fb      	ldrh	r3, [r7, #14]
 8006700:	b2db      	uxtb	r3, r3
 8006702:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8006706:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800670a:	4618      	mov	r0, r3
 800670c:	f000 fc8a 	bl	8007024 <CODEC_IO_Write>
 8006710:	4603      	mov	r3, r0
 8006712:	461a      	mov	r2, r3
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	4413      	add	r3, r2
 8006718:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 800671a:	89fb      	ldrh	r3, [r7, #14]
 800671c:	b2db      	uxtb	r3, r3
 800671e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8006722:	f240 4111 	movw	r1, #1041	; 0x411
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fc7c 	bl	8007024 <CODEC_IO_Write>
 800672c:	4603      	mov	r3, r0
 800672e:	461a      	mov	r2, r3
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	4413      	add	r3, r2
 8006734:	61fb      	str	r3, [r7, #28]
 8006736:	e02d      	b.n	8006794 <wm8994_Init+0xd14>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8006738:	8afb      	ldrh	r3, [r7, #22]
 800673a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800673e:	d003      	beq.n	8006748 <wm8994_Init+0xcc8>
 8006740:	8afb      	ldrh	r3, [r7, #22]
 8006742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006746:	d125      	bne.n	8006794 <wm8994_Init+0xd14>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8006748:	89fb      	ldrh	r3, [r7, #14]
 800674a:	b2db      	uxtb	r3, r3
 800674c:	220b      	movs	r2, #11
 800674e:	2118      	movs	r1, #24
 8006750:	4618      	mov	r0, r3
 8006752:	f000 fc67 	bl	8007024 <CODEC_IO_Write>
 8006756:	4603      	mov	r3, r0
 8006758:	461a      	mov	r2, r3
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	4413      	add	r3, r2
 800675e:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8006760:	89fb      	ldrh	r3, [r7, #14]
 8006762:	b2db      	uxtb	r3, r3
 8006764:	220b      	movs	r2, #11
 8006766:	211a      	movs	r1, #26
 8006768:	4618      	mov	r0, r3
 800676a:	f000 fc5b 	bl	8007024 <CODEC_IO_Write>
 800676e:	4603      	mov	r3, r0
 8006770:	461a      	mov	r2, r3
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	4413      	add	r3, r2
 8006776:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8006778:	89fb      	ldrh	r3, [r7, #14]
 800677a:	b2db      	uxtb	r3, r3
 800677c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8006780:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8006784:	4618      	mov	r0, r3
 8006786:	f000 fc4d 	bl	8007024 <CODEC_IO_Write>
 800678a:	4603      	mov	r3, r0
 800678c:	461a      	mov	r2, r3
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	4413      	add	r3, r2
 8006792:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8006794:	7afa      	ldrb	r2, [r7, #11]
 8006796:	89fb      	ldrh	r3, [r7, #14]
 8006798:	4611      	mov	r1, r2
 800679a:	4618      	mov	r0, r3
 800679c:	f000 f8da 	bl	8006954 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 80067a0:	69fb      	ldr	r3, [r7, #28]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3720      	adds	r7, #32
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop

080067ac <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80067b0:	f000 fdb0 	bl	8007314 <AUDIO_IO_DeInit>
}
 80067b4:	bf00      	nop
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	4603      	mov	r3, r0
 80067c0:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80067c2:	f000 fd9d 	bl	8007300 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80067c6:	88fb      	ldrh	r3, [r7, #6]
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2100      	movs	r1, #0
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 fdd3 	bl	8007378 <AUDIO_IO_Read>
 80067d2:	4603      	mov	r3, r0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	4603      	mov	r3, r0
 80067e4:	6039      	str	r1, [r7, #0]
 80067e6:	80fb      	strh	r3, [r7, #6]
 80067e8:	4613      	mov	r3, r2
 80067ea:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80067f0:	88fb      	ldrh	r3, [r7, #6]
 80067f2:	2100      	movs	r1, #0
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 f9d1 	bl	8006b9c <wm8994_SetMute>
 80067fa:	4602      	mov	r2, r0
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4413      	add	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8006802:	68fb      	ldr	r3, [r7, #12]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	4603      	mov	r3, r0
 8006814:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800681a:	88fb      	ldrh	r3, [r7, #6]
 800681c:	2101      	movs	r1, #1
 800681e:	4618      	mov	r0, r3
 8006820:	f000 f9bc 	bl	8006b9c <wm8994_SetMute>
 8006824:	4602      	mov	r2, r0
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4413      	add	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 800682c:	88fb      	ldrh	r3, [r7, #6]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2201      	movs	r2, #1
 8006832:	2102      	movs	r1, #2
 8006834:	4618      	mov	r0, r3
 8006836:	f000 fbf5 	bl	8007024 <CODEC_IO_Write>
 800683a:	4603      	mov	r3, r0
 800683c:	461a      	mov	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	4413      	add	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8006844:	68fb      	ldr	r3, [r7, #12]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	4603      	mov	r3, r0
 8006856:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800685c:	88fb      	ldrh	r3, [r7, #6]
 800685e:	2100      	movs	r1, #0
 8006860:	4618      	mov	r0, r3
 8006862:	f000 f99b 	bl	8006b9c <wm8994_SetMute>
 8006866:	4602      	mov	r2, r0
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800686e:	68fb      	ldr	r3, [r7, #12]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	4603      	mov	r3, r0
 8006880:	6039      	str	r1, [r7, #0]
 8006882:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8006888:	4b31      	ldr	r3, [pc, #196]	; (8006950 <wm8994_Stop+0xd8>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d05a      	beq.n	8006946 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8006890:	88fb      	ldrh	r3, [r7, #6]
 8006892:	2101      	movs	r1, #1
 8006894:	4618      	mov	r0, r3
 8006896:	f000 f981 	bl	8006b9c <wm8994_SetMute>
 800689a:	4602      	mov	r2, r0
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4413      	add	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d04e      	beq.n	8006946 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80068a8:	88fb      	ldrh	r3, [r7, #6]
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068b0:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 fbb5 	bl	8007024 <CODEC_IO_Write>
 80068ba:	4603      	mov	r3, r0
 80068bc:	461a      	mov	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	4413      	add	r3, r2
 80068c2:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80068c4:	88fb      	ldrh	r3, [r7, #6]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068cc:	f240 4122 	movw	r1, #1058	; 0x422
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 fba7 	bl	8007024 <CODEC_IO_Write>
 80068d6:	4603      	mov	r3, r0
 80068d8:	461a      	mov	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4413      	add	r3, r2
 80068de:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80068e0:	88fb      	ldrh	r3, [r7, #6]
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2200      	movs	r2, #0
 80068e6:	212d      	movs	r1, #45	; 0x2d
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 fb9b 	bl	8007024 <CODEC_IO_Write>
 80068ee:	4603      	mov	r3, r0
 80068f0:	461a      	mov	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4413      	add	r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 80068f8:	88fb      	ldrh	r3, [r7, #6]
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2200      	movs	r2, #0
 80068fe:	212e      	movs	r1, #46	; 0x2e
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fb8f 	bl	8007024 <CODEC_IO_Write>
 8006906:	4603      	mov	r3, r0
 8006908:	461a      	mov	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4413      	add	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8006910:	88fb      	ldrh	r3, [r7, #6]
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2200      	movs	r2, #0
 8006916:	2105      	movs	r1, #5
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fb83 	bl	8007024 <CODEC_IO_Write>
 800691e:	4603      	mov	r3, r0
 8006920:	461a      	mov	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4413      	add	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8006928:	88fb      	ldrh	r3, [r7, #6]
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2200      	movs	r2, #0
 800692e:	2100      	movs	r1, #0
 8006930:	4618      	mov	r0, r3
 8006932:	f000 fb77 	bl	8007024 <CODEC_IO_Write>
 8006936:	4603      	mov	r3, r0
 8006938:	461a      	mov	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4413      	add	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8006940:	4b03      	ldr	r3, [pc, #12]	; (8006950 <wm8994_Stop+0xd8>)
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8006946:	68fb      	ldr	r3, [r7, #12]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	20000764 	.word	0x20000764

08006954 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	4603      	mov	r3, r0
 800695c:	460a      	mov	r2, r1
 800695e:	80fb      	strh	r3, [r7, #6]
 8006960:	4613      	mov	r3, r2
 8006962:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8006964:	2300      	movs	r3, #0
 8006966:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8006968:	797b      	ldrb	r3, [r7, #5]
 800696a:	2b64      	cmp	r3, #100	; 0x64
 800696c:	d80b      	bhi.n	8006986 <wm8994_SetVolume+0x32>
 800696e:	797a      	ldrb	r2, [r7, #5]
 8006970:	4613      	mov	r3, r2
 8006972:	019b      	lsls	r3, r3, #6
 8006974:	1a9b      	subs	r3, r3, r2
 8006976:	4a86      	ldr	r2, [pc, #536]	; (8006b90 <wm8994_SetVolume+0x23c>)
 8006978:	fb82 1203 	smull	r1, r2, r2, r3
 800697c:	1152      	asrs	r2, r2, #5
 800697e:	17db      	asrs	r3, r3, #31
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	b2db      	uxtb	r3, r3
 8006984:	e000      	b.n	8006988 <wm8994_SetVolume+0x34>
 8006986:	2364      	movs	r3, #100	; 0x64
 8006988:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 800698a:	4b82      	ldr	r3, [pc, #520]	; (8006b94 <wm8994_SetVolume+0x240>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 809b 	beq.w	8006aca <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8006994:	7afb      	ldrb	r3, [r7, #11]
 8006996:	2b3e      	cmp	r3, #62	; 0x3e
 8006998:	d93d      	bls.n	8006a16 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800699a:	88fb      	ldrh	r3, [r7, #6]
 800699c:	2100      	movs	r1, #0
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 f8fc 	bl	8006b9c <wm8994_SetMute>
 80069a4:	4602      	mov	r2, r0
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	4413      	add	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80069ac:	88fb      	ldrh	r3, [r7, #6]
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	f240 127f 	movw	r2, #383	; 0x17f
 80069b4:	211c      	movs	r1, #28
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 fb34 	bl	8007024 <CODEC_IO_Write>
 80069bc:	4603      	mov	r3, r0
 80069be:	461a      	mov	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4413      	add	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80069c6:	88fb      	ldrh	r3, [r7, #6]
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	f240 127f 	movw	r2, #383	; 0x17f
 80069ce:	211d      	movs	r1, #29
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 fb27 	bl	8007024 <CODEC_IO_Write>
 80069d6:	4603      	mov	r3, r0
 80069d8:	461a      	mov	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4413      	add	r3, r2
 80069de:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80069e0:	88fb      	ldrh	r3, [r7, #6]
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	f240 127f 	movw	r2, #383	; 0x17f
 80069e8:	2126      	movs	r1, #38	; 0x26
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fb1a 	bl	8007024 <CODEC_IO_Write>
 80069f0:	4603      	mov	r3, r0
 80069f2:	461a      	mov	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80069fa:	88fb      	ldrh	r3, [r7, #6]
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	f240 127f 	movw	r2, #383	; 0x17f
 8006a02:	2127      	movs	r1, #39	; 0x27
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 fb0d 	bl	8007024 <CODEC_IO_Write>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	4413      	add	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	e059      	b.n	8006aca <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8006a16:	797b      	ldrb	r3, [r7, #5]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d109      	bne.n	8006a30 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8006a1c:	88fb      	ldrh	r3, [r7, #6]
 8006a1e:	2101      	movs	r1, #1
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 f8bb 	bl	8006b9c <wm8994_SetMute>
 8006a26:	4602      	mov	r2, r0
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	e04c      	b.n	8006aca <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006a30:	88fb      	ldrh	r3, [r7, #6]
 8006a32:	2100      	movs	r1, #0
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 f8b1 	bl	8006b9c <wm8994_SetMute>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4413      	add	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8006a42:	88fb      	ldrh	r3, [r7, #6]
 8006a44:	b2d8      	uxtb	r0, r3
 8006a46:	7afb      	ldrb	r3, [r7, #11]
 8006a48:	b21b      	sxth	r3, r3
 8006a4a:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006a4e:	b21b      	sxth	r3, r3
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	461a      	mov	r2, r3
 8006a54:	211c      	movs	r1, #28
 8006a56:	f000 fae5 	bl	8007024 <CODEC_IO_Write>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4413      	add	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8006a64:	88fb      	ldrh	r3, [r7, #6]
 8006a66:	b2d8      	uxtb	r0, r3
 8006a68:	7afb      	ldrb	r3, [r7, #11]
 8006a6a:	b21b      	sxth	r3, r3
 8006a6c:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006a70:	b21b      	sxth	r3, r3
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	461a      	mov	r2, r3
 8006a76:	211d      	movs	r1, #29
 8006a78:	f000 fad4 	bl	8007024 <CODEC_IO_Write>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	461a      	mov	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8006a86:	88fb      	ldrh	r3, [r7, #6]
 8006a88:	b2d8      	uxtb	r0, r3
 8006a8a:	7afb      	ldrb	r3, [r7, #11]
 8006a8c:	b21b      	sxth	r3, r3
 8006a8e:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006a92:	b21b      	sxth	r3, r3
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	461a      	mov	r2, r3
 8006a98:	2126      	movs	r1, #38	; 0x26
 8006a9a:	f000 fac3 	bl	8007024 <CODEC_IO_Write>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8006aa8:	88fb      	ldrh	r3, [r7, #6]
 8006aaa:	b2d8      	uxtb	r0, r3
 8006aac:	7afb      	ldrb	r3, [r7, #11]
 8006aae:	b21b      	sxth	r3, r3
 8006ab0:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006ab4:	b21b      	sxth	r3, r3
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	461a      	mov	r2, r3
 8006aba:	2127      	movs	r1, #39	; 0x27
 8006abc:	f000 fab2 	bl	8007024 <CODEC_IO_Write>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8006aca:	4b33      	ldr	r3, [pc, #204]	; (8006b98 <wm8994_SetVolume+0x244>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d059      	beq.n	8006b86 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8006ad2:	797b      	ldrb	r3, [r7, #5]
 8006ad4:	2b63      	cmp	r3, #99	; 0x63
 8006ad6:	d80c      	bhi.n	8006af2 <wm8994_SetVolume+0x19e>
 8006ad8:	797a      	ldrb	r2, [r7, #5]
 8006ada:	4613      	mov	r3, r2
 8006adc:	011b      	lsls	r3, r3, #4
 8006ade:	1a9b      	subs	r3, r3, r2
 8006ae0:	011b      	lsls	r3, r3, #4
 8006ae2:	4a2b      	ldr	r2, [pc, #172]	; (8006b90 <wm8994_SetVolume+0x23c>)
 8006ae4:	fb82 1203 	smull	r1, r2, r2, r3
 8006ae8:	1152      	asrs	r2, r2, #5
 8006aea:	17db      	asrs	r3, r3, #31
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	e000      	b.n	8006af4 <wm8994_SetVolume+0x1a0>
 8006af2:	23ef      	movs	r3, #239	; 0xef
 8006af4:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8006af6:	88fb      	ldrh	r3, [r7, #6]
 8006af8:	b2d8      	uxtb	r0, r3
 8006afa:	7afb      	ldrb	r3, [r7, #11]
 8006afc:	b21b      	sxth	r3, r3
 8006afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b02:	b21b      	sxth	r3, r3
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	461a      	mov	r2, r3
 8006b08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b0c:	f000 fa8a 	bl	8007024 <CODEC_IO_Write>
 8006b10:	4603      	mov	r3, r0
 8006b12:	461a      	mov	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4413      	add	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8006b1a:	88fb      	ldrh	r3, [r7, #6]
 8006b1c:	b2d8      	uxtb	r0, r3
 8006b1e:	7afb      	ldrb	r3, [r7, #11]
 8006b20:	b21b      	sxth	r3, r3
 8006b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b26:	b21b      	sxth	r3, r3
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f240 4101 	movw	r1, #1025	; 0x401
 8006b30:	f000 fa78 	bl	8007024 <CODEC_IO_Write>
 8006b34:	4603      	mov	r3, r0
 8006b36:	461a      	mov	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8006b3e:	88fb      	ldrh	r3, [r7, #6]
 8006b40:	b2d8      	uxtb	r0, r3
 8006b42:	7afb      	ldrb	r3, [r7, #11]
 8006b44:	b21b      	sxth	r3, r3
 8006b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b4a:	b21b      	sxth	r3, r3
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f240 4104 	movw	r1, #1028	; 0x404
 8006b54:	f000 fa66 	bl	8007024 <CODEC_IO_Write>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8006b62:	88fb      	ldrh	r3, [r7, #6]
 8006b64:	b2d8      	uxtb	r0, r3
 8006b66:	7afb      	ldrb	r3, [r7, #11]
 8006b68:	b21b      	sxth	r3, r3
 8006b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b6e:	b21b      	sxth	r3, r3
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	461a      	mov	r2, r3
 8006b74:	f240 4105 	movw	r1, #1029	; 0x405
 8006b78:	f000 fa54 	bl	8007024 <CODEC_IO_Write>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	461a      	mov	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	4413      	add	r3, r2
 8006b84:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8006b86:	68fb      	ldr	r3, [r7, #12]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	51eb851f 	.word	0x51eb851f
 8006b94:	20000764 	.word	0x20000764
 8006b98:	20000768 	.word	0x20000768

08006b9c <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	6039      	str	r1, [r7, #0]
 8006ba6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8006bac:	4b21      	ldr	r3, [pc, #132]	; (8006c34 <wm8994_SetMute+0x98>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d039      	beq.n	8006c28 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d11c      	bne.n	8006bf4 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8006bba:	88fb      	ldrh	r3, [r7, #6]
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bc2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 fa2c 	bl	8007024 <CODEC_IO_Write>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	461a      	mov	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8006bd6:	88fb      	ldrh	r3, [r7, #6]
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bde:	f240 4122 	movw	r1, #1058	; 0x422
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 fa1e 	bl	8007024 <CODEC_IO_Write>
 8006be8:	4603      	mov	r3, r0
 8006bea:	461a      	mov	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4413      	add	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	e019      	b.n	8006c28 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8006bf4:	88fb      	ldrh	r3, [r7, #6]
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2210      	movs	r2, #16
 8006bfa:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 fa10 	bl	8007024 <CODEC_IO_Write>
 8006c04:	4603      	mov	r3, r0
 8006c06:	461a      	mov	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8006c0e:	88fb      	ldrh	r3, [r7, #6]
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2210      	movs	r2, #16
 8006c14:	f240 4122 	movw	r1, #1058	; 0x422
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 fa03 	bl	8007024 <CODEC_IO_Write>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	461a      	mov	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4413      	add	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8006c28:	68fb      	ldr	r3, [r7, #12]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20000764 	.word	0x20000764

08006c38 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	4603      	mov	r3, r0
 8006c40:	460a      	mov	r2, r1
 8006c42:	80fb      	strh	r3, [r7, #6]
 8006c44:	4613      	mov	r3, r2
 8006c46:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8006c48:	2300      	movs	r3, #0
 8006c4a:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8006c4c:	797b      	ldrb	r3, [r7, #5]
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d047      	beq.n	8006ce2 <wm8994_SetOutputMode+0xaa>
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	f000 8087 	beq.w	8006d66 <wm8994_SetOutputMode+0x12e>
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	f040 80c6 	bne.w	8006dea <wm8994_SetOutputMode+0x1b2>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8006c5e:	88fb      	ldrh	r3, [r7, #6]
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	f640 420c 	movw	r2, #3084	; 0xc0c
 8006c66:	2105      	movs	r1, #5
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 f9db 	bl	8007024 <CODEC_IO_Write>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	461a      	mov	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4413      	add	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8006c78:	88fb      	ldrh	r3, [r7, #6]
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f240 6101 	movw	r1, #1537	; 0x601
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 f9ce 	bl	8007024 <CODEC_IO_Write>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4413      	add	r3, r2
 8006c90:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8006c92:	88fb      	ldrh	r3, [r7, #6]
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2200      	movs	r2, #0
 8006c98:	f240 6102 	movw	r1, #1538	; 0x602
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 f9c1 	bl	8007024 <CODEC_IO_Write>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	4413      	add	r3, r2
 8006caa:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8006cac:	88fb      	ldrh	r3, [r7, #6]
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	f240 6104 	movw	r1, #1540	; 0x604
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 f9b4 	bl	8007024 <CODEC_IO_Write>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8006cc6:	88fb      	ldrh	r3, [r7, #6]
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f240 6105 	movw	r1, #1541	; 0x605
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 f9a7 	bl	8007024 <CODEC_IO_Write>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	461a      	mov	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	4413      	add	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]
    break;
 8006ce0:	e0c5      	b.n	8006e6e <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8006ce2:	88fb      	ldrh	r3, [r7, #6]
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	f240 3203 	movw	r2, #771	; 0x303
 8006cea:	2105      	movs	r1, #5
 8006cec:	4618      	mov	r0, r3
 8006cee:	f000 f999 	bl	8007024 <CODEC_IO_Write>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8006cfc:	88fb      	ldrh	r3, [r7, #6]
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2201      	movs	r2, #1
 8006d02:	f240 6101 	movw	r1, #1537	; 0x601
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 f98c 	bl	8007024 <CODEC_IO_Write>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	461a      	mov	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006d16:	88fb      	ldrh	r3, [r7, #6]
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f240 6102 	movw	r1, #1538	; 0x602
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 f97f 	bl	8007024 <CODEC_IO_Write>
 8006d26:	4603      	mov	r3, r0
 8006d28:	461a      	mov	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8006d30:	88fb      	ldrh	r3, [r7, #6]
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2200      	movs	r2, #0
 8006d36:	f240 6104 	movw	r1, #1540	; 0x604
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 f972 	bl	8007024 <CODEC_IO_Write>
 8006d40:	4603      	mov	r3, r0
 8006d42:	461a      	mov	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4413      	add	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8006d4a:	88fb      	ldrh	r3, [r7, #6]
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f240 6105 	movw	r1, #1541	; 0x605
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 f965 	bl	8007024 <CODEC_IO_Write>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	4413      	add	r3, r2
 8006d62:	60fb      	str	r3, [r7, #12]
    break;
 8006d64:	e083      	b.n	8006e6e <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8006d66:	88fb      	ldrh	r3, [r7, #6]
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	f640 720f 	movw	r2, #3855	; 0xf0f
 8006d6e:	2105      	movs	r1, #5
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 f957 	bl	8007024 <CODEC_IO_Write>
 8006d76:	4603      	mov	r3, r0
 8006d78:	461a      	mov	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8006d80:	88fb      	ldrh	r3, [r7, #6]
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2201      	movs	r2, #1
 8006d86:	f240 6101 	movw	r1, #1537	; 0x601
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 f94a 	bl	8007024 <CODEC_IO_Write>
 8006d90:	4603      	mov	r3, r0
 8006d92:	461a      	mov	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4413      	add	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006d9a:	88fb      	ldrh	r3, [r7, #6]
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f240 6102 	movw	r1, #1538	; 0x602
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 f93d 	bl	8007024 <CODEC_IO_Write>
 8006daa:	4603      	mov	r3, r0
 8006dac:	461a      	mov	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	4413      	add	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8006db4:	88fb      	ldrh	r3, [r7, #6]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2202      	movs	r2, #2
 8006dba:	f240 6104 	movw	r1, #1540	; 0x604
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 f930 	bl	8007024 <CODEC_IO_Write>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8006dce:	88fb      	ldrh	r3, [r7, #6]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	f240 6105 	movw	r1, #1541	; 0x605
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 f923 	bl	8007024 <CODEC_IO_Write>
 8006dde:	4603      	mov	r3, r0
 8006de0:	461a      	mov	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4413      	add	r3, r2
 8006de6:	60fb      	str	r3, [r7, #12]
    break;
 8006de8:	e041      	b.n	8006e6e <wm8994_SetOutputMode+0x236>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8006dea:	88fb      	ldrh	r3, [r7, #6]
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	f240 3203 	movw	r2, #771	; 0x303
 8006df2:	2105      	movs	r1, #5
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 f915 	bl	8007024 <CODEC_IO_Write>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	4413      	add	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8006e04:	88fb      	ldrh	r3, [r7, #6]
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f240 6101 	movw	r1, #1537	; 0x601
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 f908 	bl	8007024 <CODEC_IO_Write>
 8006e14:	4603      	mov	r3, r0
 8006e16:	461a      	mov	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006e1e:	88fb      	ldrh	r3, [r7, #6]
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2201      	movs	r2, #1
 8006e24:	f240 6102 	movw	r1, #1538	; 0x602
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 f8fb 	bl	8007024 <CODEC_IO_Write>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	461a      	mov	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	4413      	add	r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8006e38:	88fb      	ldrh	r3, [r7, #6]
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f240 6104 	movw	r1, #1540	; 0x604
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 f8ee 	bl	8007024 <CODEC_IO_Write>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	4413      	add	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8006e52:	88fb      	ldrh	r3, [r7, #6]
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2200      	movs	r2, #0
 8006e58:	f240 6105 	movw	r1, #1541	; 0x605
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 f8e1 	bl	8007024 <CODEC_IO_Write>
 8006e62:	4603      	mov	r3, r0
 8006e64:	461a      	mov	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	4413      	add	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]
    break;    
 8006e6c:	bf00      	nop
  }  
  return counter;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	6039      	str	r1, [r7, #0]
 8006e82:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8006e84:	2300      	movs	r3, #0
 8006e86:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	f245 6222 	movw	r2, #22050	; 0x5622
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d076      	beq.n	8006f80 <wm8994_SetFrequency+0x108>
 8006e92:	f245 6222 	movw	r2, #22050	; 0x5622
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d80a      	bhi.n	8006eb0 <wm8994_SetFrequency+0x38>
 8006e9a:	f642 3211 	movw	r2, #11025	; 0x2b11
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d060      	beq.n	8006f64 <wm8994_SetFrequency+0xec>
 8006ea2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8006ea6:	d025      	beq.n	8006ef4 <wm8994_SetFrequency+0x7c>
 8006ea8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8006eac:	d014      	beq.n	8006ed8 <wm8994_SetFrequency+0x60>
 8006eae:	e083      	b.n	8006fb8 <wm8994_SetFrequency+0x140>
 8006eb0:	f64a 4244 	movw	r2, #44100	; 0xac44
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d071      	beq.n	8006f9c <wm8994_SetFrequency+0x124>
 8006eb8:	f64a 4244 	movw	r2, #44100	; 0xac44
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d803      	bhi.n	8006ec8 <wm8994_SetFrequency+0x50>
 8006ec0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8006ec4:	d024      	beq.n	8006f10 <wm8994_SetFrequency+0x98>
 8006ec6:	e077      	b.n	8006fb8 <wm8994_SetFrequency+0x140>
 8006ec8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d02d      	beq.n	8006f2c <wm8994_SetFrequency+0xb4>
 8006ed0:	4a43      	ldr	r2, [pc, #268]	; (8006fe0 <wm8994_SetFrequency+0x168>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d038      	beq.n	8006f48 <wm8994_SetFrequency+0xd0>
 8006ed6:	e06f      	b.n	8006fb8 <wm8994_SetFrequency+0x140>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8006ed8:	88fb      	ldrh	r3, [r7, #6]
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2203      	movs	r2, #3
 8006ede:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 f89e 	bl	8007024 <CODEC_IO_Write>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	461a      	mov	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]
    break;
 8006ef2:	e06f      	b.n	8006fd4 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8006ef4:	88fb      	ldrh	r3, [r7, #6]
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2233      	movs	r2, #51	; 0x33
 8006efa:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 f890 	bl	8007024 <CODEC_IO_Write>
 8006f04:	4603      	mov	r3, r0
 8006f06:	461a      	mov	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	60fb      	str	r3, [r7, #12]
    break;
 8006f0e:	e061      	b.n	8006fd4 <wm8994_SetFrequency+0x15c>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8006f10:	88fb      	ldrh	r3, [r7, #6]
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2263      	movs	r2, #99	; 0x63
 8006f16:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 f882 	bl	8007024 <CODEC_IO_Write>
 8006f20:	4603      	mov	r3, r0
 8006f22:	461a      	mov	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	4413      	add	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]
    break;
 8006f2a:	e053      	b.n	8006fd4 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8006f2c:	88fb      	ldrh	r3, [r7, #6]
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2283      	movs	r2, #131	; 0x83
 8006f32:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 f874 	bl	8007024 <CODEC_IO_Write>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	461a      	mov	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]
    break;
 8006f46:	e045      	b.n	8006fd4 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8006f48:	88fb      	ldrh	r3, [r7, #6]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	22a3      	movs	r2, #163	; 0xa3
 8006f4e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 f866 	bl	8007024 <CODEC_IO_Write>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4413      	add	r3, r2
 8006f60:	60fb      	str	r3, [r7, #12]
    break;
 8006f62:	e037      	b.n	8006fd4 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8006f64:	88fb      	ldrh	r3, [r7, #6]
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2213      	movs	r2, #19
 8006f6a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 f858 	bl	8007024 <CODEC_IO_Write>
 8006f74:	4603      	mov	r3, r0
 8006f76:	461a      	mov	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]
    break;
 8006f7e:	e029      	b.n	8006fd4 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8006f80:	88fb      	ldrh	r3, [r7, #6]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2243      	movs	r2, #67	; 0x43
 8006f86:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 f84a 	bl	8007024 <CODEC_IO_Write>
 8006f90:	4603      	mov	r3, r0
 8006f92:	461a      	mov	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4413      	add	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]
    break;
 8006f9a:	e01b      	b.n	8006fd4 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8006f9c:	88fb      	ldrh	r3, [r7, #6]
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2273      	movs	r2, #115	; 0x73
 8006fa2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 f83c 	bl	8007024 <CODEC_IO_Write>
 8006fac:	4603      	mov	r3, r0
 8006fae:	461a      	mov	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]
    break; 
 8006fb6:	e00d      	b.n	8006fd4 <wm8994_SetFrequency+0x15c>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8006fb8:	88fb      	ldrh	r3, [r7, #6]
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2283      	movs	r2, #131	; 0x83
 8006fbe:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 f82e 	bl	8007024 <CODEC_IO_Write>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	461a      	mov	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	4413      	add	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]
    break; 
 8006fd2:	bf00      	nop
  }
  return counter;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	00017700 	.word	0x00017700

08006fe4 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	4603      	mov	r3, r0
 8006fec:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8006ff2:	88fb      	ldrh	r3, [r7, #6]
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 f812 	bl	8007024 <CODEC_IO_Write>
 8007000:	4603      	mov	r3, r0
 8007002:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8007004:	4b05      	ldr	r3, [pc, #20]	; (800701c <wm8994_Reset+0x38>)
 8007006:	2200      	movs	r2, #0
 8007008:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 800700a:	4b05      	ldr	r3, [pc, #20]	; (8007020 <wm8994_Reset+0x3c>)
 800700c:	2200      	movs	r2, #0
 800700e:	601a      	str	r2, [r3, #0]

  return counter;
 8007010:	68fb      	ldr	r3, [r7, #12]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	20000764 	.word	0x20000764
 8007020:	20000768 	.word	0x20000768

08007024 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	71fb      	strb	r3, [r7, #7]
 800702e:	460b      	mov	r3, r1
 8007030:	80bb      	strh	r3, [r7, #4]
 8007032:	4613      	mov	r3, r2
 8007034:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8007036:	2300      	movs	r3, #0
 8007038:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800703a:	887a      	ldrh	r2, [r7, #2]
 800703c:	88b9      	ldrh	r1, [r7, #4]
 800703e:	79fb      	ldrb	r3, [r7, #7]
 8007040:	4618      	mov	r0, r3
 8007042:	f000 f96f 	bl	8007324 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	b2db      	uxtb	r3, r3
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08c      	sub	sp, #48	; 0x30
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a51      	ldr	r2, [pc, #324]	; (80071a4 <I2Cx_MspInit+0x150>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d14d      	bne.n	8007100 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8007064:	4b50      	ldr	r3, [pc, #320]	; (80071a8 <I2Cx_MspInit+0x154>)
 8007066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007068:	4a4f      	ldr	r2, [pc, #316]	; (80071a8 <I2Cx_MspInit+0x154>)
 800706a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800706e:	6313      	str	r3, [r2, #48]	; 0x30
 8007070:	4b4d      	ldr	r3, [pc, #308]	; (80071a8 <I2Cx_MspInit+0x154>)
 8007072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007078:	61bb      	str	r3, [r7, #24]
 800707a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800707c:	2380      	movs	r3, #128	; 0x80
 800707e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8007080:	2312      	movs	r3, #18
 8007082:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8007084:	2300      	movs	r3, #0
 8007086:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8007088:	2302      	movs	r3, #2
 800708a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800708c:	2304      	movs	r3, #4
 800708e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8007090:	f107 031c 	add.w	r3, r7, #28
 8007094:	4619      	mov	r1, r3
 8007096:	4845      	ldr	r0, [pc, #276]	; (80071ac <I2Cx_MspInit+0x158>)
 8007098:	f004 fad6 	bl	800b648 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800709c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80070a2:	f107 031c 	add.w	r3, r7, #28
 80070a6:	4619      	mov	r1, r3
 80070a8:	4840      	ldr	r0, [pc, #256]	; (80071ac <I2Cx_MspInit+0x158>)
 80070aa:	f004 facd 	bl	800b648 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80070ae:	4b3e      	ldr	r3, [pc, #248]	; (80071a8 <I2Cx_MspInit+0x154>)
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	4a3d      	ldr	r2, [pc, #244]	; (80071a8 <I2Cx_MspInit+0x154>)
 80070b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80070b8:	6413      	str	r3, [r2, #64]	; 0x40
 80070ba:	4b3b      	ldr	r3, [pc, #236]	; (80071a8 <I2Cx_MspInit+0x154>)
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070c2:	617b      	str	r3, [r7, #20]
 80070c4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80070c6:	4b38      	ldr	r3, [pc, #224]	; (80071a8 <I2Cx_MspInit+0x154>)
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	4a37      	ldr	r2, [pc, #220]	; (80071a8 <I2Cx_MspInit+0x154>)
 80070cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80070d0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80070d2:	4b35      	ldr	r3, [pc, #212]	; (80071a8 <I2Cx_MspInit+0x154>)
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	4a34      	ldr	r2, [pc, #208]	; (80071a8 <I2Cx_MspInit+0x154>)
 80070d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80070dc:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80070de:	2200      	movs	r2, #0
 80070e0:	210f      	movs	r1, #15
 80070e2:	2048      	movs	r0, #72	; 0x48
 80070e4:	f003 fdbb 	bl	800ac5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80070e8:	2048      	movs	r0, #72	; 0x48
 80070ea:	f003 fdd4 	bl	800ac96 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80070ee:	2200      	movs	r2, #0
 80070f0:	210f      	movs	r1, #15
 80070f2:	2049      	movs	r0, #73	; 0x49
 80070f4:	f003 fdb3 	bl	800ac5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80070f8:	2049      	movs	r0, #73	; 0x49
 80070fa:	f003 fdcc 	bl	800ac96 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80070fe:	e04d      	b.n	800719c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8007100:	4b29      	ldr	r3, [pc, #164]	; (80071a8 <I2Cx_MspInit+0x154>)
 8007102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007104:	4a28      	ldr	r2, [pc, #160]	; (80071a8 <I2Cx_MspInit+0x154>)
 8007106:	f043 0302 	orr.w	r3, r3, #2
 800710a:	6313      	str	r3, [r2, #48]	; 0x30
 800710c:	4b26      	ldr	r3, [pc, #152]	; (80071a8 <I2Cx_MspInit+0x154>)
 800710e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	613b      	str	r3, [r7, #16]
 8007116:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8007118:	f44f 7380 	mov.w	r3, #256	; 0x100
 800711c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800711e:	2312      	movs	r3, #18
 8007120:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8007122:	2300      	movs	r3, #0
 8007124:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8007126:	2302      	movs	r3, #2
 8007128:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800712a:	2304      	movs	r3, #4
 800712c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800712e:	f107 031c 	add.w	r3, r7, #28
 8007132:	4619      	mov	r1, r3
 8007134:	481e      	ldr	r0, [pc, #120]	; (80071b0 <I2Cx_MspInit+0x15c>)
 8007136:	f004 fa87 	bl	800b648 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800713a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800713e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8007140:	f107 031c 	add.w	r3, r7, #28
 8007144:	4619      	mov	r1, r3
 8007146:	481a      	ldr	r0, [pc, #104]	; (80071b0 <I2Cx_MspInit+0x15c>)
 8007148:	f004 fa7e 	bl	800b648 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800714c:	4b16      	ldr	r3, [pc, #88]	; (80071a8 <I2Cx_MspInit+0x154>)
 800714e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007150:	4a15      	ldr	r2, [pc, #84]	; (80071a8 <I2Cx_MspInit+0x154>)
 8007152:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007156:	6413      	str	r3, [r2, #64]	; 0x40
 8007158:	4b13      	ldr	r3, [pc, #76]	; (80071a8 <I2Cx_MspInit+0x154>)
 800715a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8007164:	4b10      	ldr	r3, [pc, #64]	; (80071a8 <I2Cx_MspInit+0x154>)
 8007166:	6a1b      	ldr	r3, [r3, #32]
 8007168:	4a0f      	ldr	r2, [pc, #60]	; (80071a8 <I2Cx_MspInit+0x154>)
 800716a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800716e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8007170:	4b0d      	ldr	r3, [pc, #52]	; (80071a8 <I2Cx_MspInit+0x154>)
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	4a0c      	ldr	r2, [pc, #48]	; (80071a8 <I2Cx_MspInit+0x154>)
 8007176:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800717a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800717c:	2200      	movs	r2, #0
 800717e:	210f      	movs	r1, #15
 8007180:	201f      	movs	r0, #31
 8007182:	f003 fd6c 	bl	800ac5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8007186:	201f      	movs	r0, #31
 8007188:	f003 fd85 	bl	800ac96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800718c:	2200      	movs	r2, #0
 800718e:	210f      	movs	r1, #15
 8007190:	2020      	movs	r0, #32
 8007192:	f003 fd64 	bl	800ac5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8007196:	2020      	movs	r0, #32
 8007198:	f003 fd7d 	bl	800ac96 <HAL_NVIC_EnableIRQ>
}
 800719c:	bf00      	nop
 800719e:	3730      	adds	r7, #48	; 0x30
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	2000076c 	.word	0x2000076c
 80071a8:	40023800 	.word	0x40023800
 80071ac:	40021c00 	.word	0x40021c00
 80071b0:	40020400 	.word	0x40020400

080071b4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f004 fff9 	bl	800c1b4 <HAL_I2C_GetState>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d125      	bne.n	8007214 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a14      	ldr	r2, [pc, #80]	; (800721c <I2Cx_Init+0x68>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d103      	bne.n	80071d8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a13      	ldr	r2, [pc, #76]	; (8007220 <I2Cx_Init+0x6c>)
 80071d4:	601a      	str	r2, [r3, #0]
 80071d6:	e002      	b.n	80071de <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a12      	ldr	r2, [pc, #72]	; (8007224 <I2Cx_Init+0x70>)
 80071dc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a11      	ldr	r2, [pc, #68]	; (8007228 <I2Cx_Init+0x74>)
 80071e2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7ff ff23 	bl	8007054 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f004 fcce 	bl	800bbb0 <HAL_I2C_Init>
  }
}
 8007214:	bf00      	nop
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	2000076c 	.word	0x2000076c
 8007220:	40005c00 	.word	0x40005c00
 8007224:	40005400 	.word	0x40005400
 8007228:	40912732 	.word	0x40912732

0800722c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b08a      	sub	sp, #40	; 0x28
 8007230:	af04      	add	r7, sp, #16
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	4608      	mov	r0, r1
 8007236:	4611      	mov	r1, r2
 8007238:	461a      	mov	r2, r3
 800723a:	4603      	mov	r3, r0
 800723c:	72fb      	strb	r3, [r7, #11]
 800723e:	460b      	mov	r3, r1
 8007240:	813b      	strh	r3, [r7, #8]
 8007242:	4613      	mov	r3, r2
 8007244:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8007246:	2300      	movs	r3, #0
 8007248:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800724a:	7afb      	ldrb	r3, [r7, #11]
 800724c:	b299      	uxth	r1, r3
 800724e:	88f8      	ldrh	r0, [r7, #6]
 8007250:	893a      	ldrh	r2, [r7, #8]
 8007252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007256:	9302      	str	r3, [sp, #8]
 8007258:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800725a:	9301      	str	r3, [sp, #4]
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	4603      	mov	r3, r0
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f004 fe8c 	bl	800bf80 <HAL_I2C_Mem_Read>
 8007268:	4603      	mov	r3, r0
 800726a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800726c:	7dfb      	ldrb	r3, [r7, #23]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d004      	beq.n	800727c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8007272:	7afb      	ldrb	r3, [r7, #11]
 8007274:	4619      	mov	r1, r3
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 f832 	bl	80072e0 <I2Cx_Error>
  }
  return status;    
 800727c:	7dfb      	ldrb	r3, [r7, #23]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3718      	adds	r7, #24
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b08a      	sub	sp, #40	; 0x28
 800728a:	af04      	add	r7, sp, #16
 800728c:	60f8      	str	r0, [r7, #12]
 800728e:	4608      	mov	r0, r1
 8007290:	4611      	mov	r1, r2
 8007292:	461a      	mov	r2, r3
 8007294:	4603      	mov	r3, r0
 8007296:	72fb      	strb	r3, [r7, #11]
 8007298:	460b      	mov	r3, r1
 800729a:	813b      	strh	r3, [r7, #8]
 800729c:	4613      	mov	r3, r2
 800729e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80072a4:	7afb      	ldrb	r3, [r7, #11]
 80072a6:	b299      	uxth	r1, r3
 80072a8:	88f8      	ldrh	r0, [r7, #6]
 80072aa:	893a      	ldrh	r2, [r7, #8]
 80072ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072b0:	9302      	str	r3, [sp, #8]
 80072b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072b4:	9301      	str	r3, [sp, #4]
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	4603      	mov	r3, r0
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f004 fd4b 	bl	800bd58 <HAL_I2C_Mem_Write>
 80072c2:	4603      	mov	r3, r0
 80072c4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80072c6:	7dfb      	ldrb	r3, [r7, #23]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d004      	beq.n	80072d6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80072cc:	7afb      	ldrb	r3, [r7, #11]
 80072ce:	4619      	mov	r1, r3
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 f805 	bl	80072e0 <I2Cx_Error>
  }
  return status;
 80072d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	460b      	mov	r3, r1
 80072ea:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f004 fcef 	bl	800bcd0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7ff ff5e 	bl	80071b4 <I2Cx_Init>
}
 80072f8:	bf00      	nop
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8007300:	b580      	push	{r7, lr}
 8007302:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8007304:	4802      	ldr	r0, [pc, #8]	; (8007310 <AUDIO_IO_Init+0x10>)
 8007306:	f7ff ff55 	bl	80071b4 <I2Cx_Init>
}
 800730a:	bf00      	nop
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	2000076c 	.word	0x2000076c

08007314 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8007314:	b480      	push	{r7}
 8007316:	af00      	add	r7, sp, #0
}
 8007318:	bf00      	nop
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
	...

08007324 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af02      	add	r7, sp, #8
 800732a:	4603      	mov	r3, r0
 800732c:	71fb      	strb	r3, [r7, #7]
 800732e:	460b      	mov	r3, r1
 8007330:	80bb      	strh	r3, [r7, #4]
 8007332:	4613      	mov	r3, r2
 8007334:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8007336:	887b      	ldrh	r3, [r7, #2]
 8007338:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 800733a:	89fb      	ldrh	r3, [r7, #14]
 800733c:	0a1b      	lsrs	r3, r3, #8
 800733e:	b29b      	uxth	r3, r3
 8007340:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8007342:	89fb      	ldrh	r3, [r7, #14]
 8007344:	021b      	lsls	r3, r3, #8
 8007346:	b29b      	uxth	r3, r3
 8007348:	b21a      	sxth	r2, r3
 800734a:	887b      	ldrh	r3, [r7, #2]
 800734c:	b21b      	sxth	r3, r3
 800734e:	4313      	orrs	r3, r2
 8007350:	b21b      	sxth	r3, r3
 8007352:	b29b      	uxth	r3, r3
 8007354:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8007356:	88ba      	ldrh	r2, [r7, #4]
 8007358:	79f9      	ldrb	r1, [r7, #7]
 800735a:	2302      	movs	r3, #2
 800735c:	9301      	str	r3, [sp, #4]
 800735e:	1cbb      	adds	r3, r7, #2
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	2302      	movs	r3, #2
 8007364:	4803      	ldr	r0, [pc, #12]	; (8007374 <AUDIO_IO_Write+0x50>)
 8007366:	f7ff ff8e 	bl	8007286 <I2Cx_WriteMultiple>
}
 800736a:	bf00      	nop
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	2000076c 	.word	0x2000076c

08007378 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af02      	add	r7, sp, #8
 800737e:	4603      	mov	r3, r0
 8007380:	460a      	mov	r2, r1
 8007382:	71fb      	strb	r3, [r7, #7]
 8007384:	4613      	mov	r3, r2
 8007386:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8007388:	2300      	movs	r3, #0
 800738a:	81bb      	strh	r3, [r7, #12]
 800738c:	2300      	movs	r3, #0
 800738e:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8007390:	88ba      	ldrh	r2, [r7, #4]
 8007392:	79f9      	ldrb	r1, [r7, #7]
 8007394:	2302      	movs	r3, #2
 8007396:	9301      	str	r3, [sp, #4]
 8007398:	f107 030c 	add.w	r3, r7, #12
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	2302      	movs	r3, #2
 80073a0:	480a      	ldr	r0, [pc, #40]	; (80073cc <AUDIO_IO_Read+0x54>)
 80073a2:	f7ff ff43 	bl	800722c <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80073a6:	89bb      	ldrh	r3, [r7, #12]
 80073a8:	0a1b      	lsrs	r3, r3, #8
 80073aa:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80073ac:	89bb      	ldrh	r3, [r7, #12]
 80073ae:	021b      	lsls	r3, r3, #8
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	b21a      	sxth	r2, r3
 80073b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	b21b      	sxth	r3, r3
 80073bc:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 80073be:	89fb      	ldrh	r3, [r7, #14]
 80073c0:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 80073c2:	89bb      	ldrh	r3, [r7, #12]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	2000076c 	.word	0x2000076c

080073d0 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f003 fb43 	bl	800aa64 <HAL_Delay>
}
 80073de:	bf00      	nop
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
	...

080073e8 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 80073f0:	480e      	ldr	r0, [pc, #56]	; (800742c <HAL_SAI_ErrorCallback+0x44>)
 80073f2:	f006 fdfb 	bl	800dfec <HAL_SAI_GetState>
 80073f6:	4603      	mov	r3, r0
 80073f8:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 80073fa:	480d      	ldr	r0, [pc, #52]	; (8007430 <HAL_SAI_ErrorCallback+0x48>)
 80073fc:	f006 fdf6 	bl	800dfec <HAL_SAI_GetState>
 8007400:	4603      	mov	r3, r0
 8007402:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	2b02      	cmp	r3, #2
 8007408:	d002      	beq.n	8007410 <HAL_SAI_ErrorCallback+0x28>
 800740a:	7bfb      	ldrb	r3, [r7, #15]
 800740c:	2b12      	cmp	r3, #18
 800740e:	d101      	bne.n	8007414 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8007410:	f000 f810 	bl	8007434 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8007414:	7bbb      	ldrb	r3, [r7, #14]
 8007416:	2b02      	cmp	r3, #2
 8007418:	d002      	beq.n	8007420 <HAL_SAI_ErrorCallback+0x38>
 800741a:	7bbb      	ldrb	r3, [r7, #14]
 800741c:	2b22      	cmp	r3, #34	; 0x22
 800741e:	d101      	bne.n	8007424 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8007420:	f000 f9d0 	bl	80077c4 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8007424:	bf00      	nop
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	200007b8 	.word	0x200007b8
 8007430:	2000083c 	.word	0x2000083c

08007434 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8007434:	b480      	push	{r7}
 8007436:	af00      	add	r7, sp, #0
}
 8007438:	bf00      	nop
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
	...

08007444 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8007444:	b580      	push	{r7, lr}
 8007446:	b08c      	sub	sp, #48	; 0x30
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 800744e:	4b63      	ldr	r3, [pc, #396]	; (80075dc <BSP_AUDIO_OUT_MspInit+0x198>)
 8007450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007452:	4a62      	ldr	r2, [pc, #392]	; (80075dc <BSP_AUDIO_OUT_MspInit+0x198>)
 8007454:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007458:	6453      	str	r3, [r2, #68]	; 0x44
 800745a:	4b60      	ldr	r3, [pc, #384]	; (80075dc <BSP_AUDIO_OUT_MspInit+0x198>)
 800745c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800745e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007462:	61bb      	str	r3, [r7, #24]
 8007464:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8007466:	4b5d      	ldr	r3, [pc, #372]	; (80075dc <BSP_AUDIO_OUT_MspInit+0x198>)
 8007468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746a:	4a5c      	ldr	r2, [pc, #368]	; (80075dc <BSP_AUDIO_OUT_MspInit+0x198>)
 800746c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007470:	6313      	str	r3, [r2, #48]	; 0x30
 8007472:	4b5a      	ldr	r3, [pc, #360]	; (80075dc <BSP_AUDIO_OUT_MspInit+0x198>)
 8007474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800747a:	617b      	str	r3, [r7, #20]
 800747c:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 800747e:	4b57      	ldr	r3, [pc, #348]	; (80075dc <BSP_AUDIO_OUT_MspInit+0x198>)
 8007480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007482:	4a56      	ldr	r2, [pc, #344]	; (80075dc <BSP_AUDIO_OUT_MspInit+0x198>)
 8007484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007488:	6313      	str	r3, [r2, #48]	; 0x30
 800748a:	4b54      	ldr	r3, [pc, #336]	; (80075dc <BSP_AUDIO_OUT_MspInit+0x198>)
 800748c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007492:	613b      	str	r3, [r7, #16]
 8007494:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8007496:	4b51      	ldr	r3, [pc, #324]	; (80075dc <BSP_AUDIO_OUT_MspInit+0x198>)
 8007498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749a:	4a50      	ldr	r2, [pc, #320]	; (80075dc <BSP_AUDIO_OUT_MspInit+0x198>)
 800749c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074a0:	6313      	str	r3, [r2, #48]	; 0x30
 80074a2:	4b4e      	ldr	r3, [pc, #312]	; (80075dc <BSP_AUDIO_OUT_MspInit+0x198>)
 80074a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 80074ae:	2380      	movs	r3, #128	; 0x80
 80074b0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80074b2:	2302      	movs	r3, #2
 80074b4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80074ba:	2303      	movs	r3, #3
 80074bc:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80074be:	230a      	movs	r3, #10
 80074c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80074c2:	f107 031c 	add.w	r3, r7, #28
 80074c6:	4619      	mov	r1, r3
 80074c8:	4845      	ldr	r0, [pc, #276]	; (80075e0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80074ca:	f004 f8bd 	bl	800b648 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80074ce:	2320      	movs	r3, #32
 80074d0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80074d2:	2302      	movs	r3, #2
 80074d4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80074d6:	2300      	movs	r3, #0
 80074d8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80074da:	2303      	movs	r3, #3
 80074dc:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80074de:	230a      	movs	r3, #10
 80074e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80074e2:	f107 031c 	add.w	r3, r7, #28
 80074e6:	4619      	mov	r1, r3
 80074e8:	483d      	ldr	r0, [pc, #244]	; (80075e0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80074ea:	f004 f8ad 	bl	800b648 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 80074ee:	2340      	movs	r3, #64	; 0x40
 80074f0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80074f2:	2302      	movs	r3, #2
 80074f4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80074f6:	2300      	movs	r3, #0
 80074f8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80074fa:	2303      	movs	r3, #3
 80074fc:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80074fe:	230a      	movs	r3, #10
 8007500:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8007502:	f107 031c 	add.w	r3, r7, #28
 8007506:	4619      	mov	r1, r3
 8007508:	4835      	ldr	r0, [pc, #212]	; (80075e0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 800750a:	f004 f89d 	bl	800b648 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800750e:	2310      	movs	r3, #16
 8007510:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8007512:	2302      	movs	r3, #2
 8007514:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8007516:	2300      	movs	r3, #0
 8007518:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800751a:	2303      	movs	r3, #3
 800751c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800751e:	230a      	movs	r3, #10
 8007520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8007522:	f107 031c 	add.w	r3, r7, #28
 8007526:	4619      	mov	r1, r3
 8007528:	482d      	ldr	r0, [pc, #180]	; (80075e0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 800752a:	f004 f88d 	bl	800b648 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800752e:	4b2b      	ldr	r3, [pc, #172]	; (80075dc <BSP_AUDIO_OUT_MspInit+0x198>)
 8007530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007532:	4a2a      	ldr	r2, [pc, #168]	; (80075dc <BSP_AUDIO_OUT_MspInit+0x198>)
 8007534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007538:	6313      	str	r3, [r2, #48]	; 0x30
 800753a:	4b28      	ldr	r3, [pc, #160]	; (80075dc <BSP_AUDIO_OUT_MspInit+0x198>)
 800753c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007542:	60bb      	str	r3, [r7, #8]
 8007544:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a26      	ldr	r2, [pc, #152]	; (80075e4 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d138      	bne.n	80075c2 <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8007550:	4b25      	ldr	r3, [pc, #148]	; (80075e8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8007552:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8007556:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8007558:	4b23      	ldr	r3, [pc, #140]	; (80075e8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800755a:	2240      	movs	r2, #64	; 0x40
 800755c:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800755e:	4b22      	ldr	r3, [pc, #136]	; (80075e8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8007560:	2200      	movs	r2, #0
 8007562:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8007564:	4b20      	ldr	r3, [pc, #128]	; (80075e8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8007566:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800756a:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 800756c:	4b1e      	ldr	r3, [pc, #120]	; (80075e8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800756e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007572:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8007574:	4b1c      	ldr	r3, [pc, #112]	; (80075e8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8007576:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800757a:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 800757c:	4b1a      	ldr	r3, [pc, #104]	; (80075e8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800757e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007582:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8007584:	4b18      	ldr	r3, [pc, #96]	; (80075e8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8007586:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800758a:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 800758c:	4b16      	ldr	r3, [pc, #88]	; (80075e8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800758e:	2204      	movs	r2, #4
 8007590:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8007592:	4b15      	ldr	r3, [pc, #84]	; (80075e8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8007594:	2203      	movs	r2, #3
 8007596:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8007598:	4b13      	ldr	r3, [pc, #76]	; (80075e8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800759a:	2200      	movs	r2, #0
 800759c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800759e:	4b12      	ldr	r3, [pc, #72]	; (80075e8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80075a4:	4b10      	ldr	r3, [pc, #64]	; (80075e8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80075a6:	4a11      	ldr	r2, [pc, #68]	; (80075ec <BSP_AUDIO_OUT_MspInit+0x1a8>)
 80075a8:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a0e      	ldr	r2, [pc, #56]	; (80075e8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80075ae:	66da      	str	r2, [r3, #108]	; 0x6c
 80075b0:	4a0d      	ldr	r2, [pc, #52]	; (80075e8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 80075b6:	480c      	ldr	r0, [pc, #48]	; (80075e8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80075b8:	f003 fd20 	bl	800affc <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 80075bc:	480a      	ldr	r0, [pc, #40]	; (80075e8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80075be:	f003 fc6f 	bl	800aea0 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80075c2:	2200      	movs	r2, #0
 80075c4:	210e      	movs	r1, #14
 80075c6:	203c      	movs	r0, #60	; 0x3c
 80075c8:	f003 fb49 	bl	800ac5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 80075cc:	203c      	movs	r0, #60	; 0x3c
 80075ce:	f003 fb62 	bl	800ac96 <HAL_NVIC_EnableIRQ>
}
 80075d2:	bf00      	nop
 80075d4:	3730      	adds	r7, #48	; 0x30
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	40023800 	.word	0x40023800
 80075e0:	40022000 	.word	0x40022000
 80075e4:	40015c04 	.word	0x40015c04
 80075e8:	200008c0 	.word	0x200008c0
 80075ec:	40026470 	.word	0x40026470

080075f0 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b0a6      	sub	sp, #152	; 0x98
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80075fc:	f107 0314 	add.w	r3, r7, #20
 8007600:	4618      	mov	r0, r3
 8007602:	f006 f87d 	bl	800d700 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	f642 3211 	movw	r2, #11025	; 0x2b11
 800760c:	4293      	cmp	r3, r2
 800760e:	d009      	beq.n	8007624 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	f245 6222 	movw	r2, #22050	; 0x5622
 8007616:	4293      	cmp	r3, r2
 8007618:	d004      	beq.n	8007624 <BSP_AUDIO_OUT_ClockConfig+0x34>
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8007620:	4293      	cmp	r3, r2
 8007622:	d112      	bne.n	800764a <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8007624:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007628:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800762a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800762e:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8007630:	f240 13ad 	movw	r3, #429	; 0x1ad
 8007634:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8007636:	2302      	movs	r3, #2
 8007638:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 800763a:	2313      	movs	r3, #19
 800763c:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800763e:	f107 0314 	add.w	r3, r7, #20
 8007642:	4618      	mov	r0, r3
 8007644:	f005 fc6e 	bl	800cf24 <HAL_RCCEx_PeriphCLKConfig>
 8007648:	e011      	b.n	800766e <BSP_AUDIO_OUT_ClockConfig+0x7e>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800764a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800764e:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8007650:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007654:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8007656:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800765a:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 800765c:	2307      	movs	r3, #7
 800765e:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8007660:	2301      	movs	r3, #1
 8007662:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8007664:	f107 0314 	add.w	r3, r7, #20
 8007668:	4618      	mov	r0, r3
 800766a:	f005 fc5b 	bl	800cf24 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 800766e:	bf00      	nop
 8007670:	3798      	adds	r7, #152	; 0x98
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
	...

08007678 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8007678:	b590      	push	{r4, r7, lr}
 800767a:	b089      	sub	sp, #36	; 0x24
 800767c:	af00      	add	r7, sp, #0
 800767e:	60b9      	str	r1, [r7, #8]
 8007680:	607a      	str	r2, [r7, #4]
 8007682:	603b      	str	r3, [r7, #0]
 8007684:	4603      	mov	r3, r0
 8007686:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 800768c:	2300      	movs	r3, #0
 800768e:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8007690:	89fb      	ldrh	r3, [r7, #14]
 8007692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007696:	d006      	beq.n	80076a6 <BSP_AUDIO_IN_InitEx+0x2e>
 8007698:	89fb      	ldrh	r3, [r7, #14]
 800769a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800769e:	d002      	beq.n	80076a6 <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	77fb      	strb	r3, [r7, #31]
 80076a4:	e046      	b.n	8007734 <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 80076a6:	f000 f9f7 	bl	8007a98 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 80076aa:	2200      	movs	r2, #0
 80076ac:	68b9      	ldr	r1, [r7, #8]
 80076ae:	4824      	ldr	r0, [pc, #144]	; (8007740 <BSP_AUDIO_IN_InitEx+0xc8>)
 80076b0:	f7ff ff9e 	bl	80075f0 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80076b4:	4b22      	ldr	r3, [pc, #136]	; (8007740 <BSP_AUDIO_IN_InitEx+0xc8>)
 80076b6:	4a23      	ldr	r2, [pc, #140]	; (8007744 <BSP_AUDIO_IN_InitEx+0xcc>)
 80076b8:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 80076ba:	4821      	ldr	r0, [pc, #132]	; (8007740 <BSP_AUDIO_IN_InitEx+0xc8>)
 80076bc:	f006 fc96 	bl	800dfec <HAL_SAI_GetState>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d107      	bne.n	80076d6 <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 80076c6:	2100      	movs	r1, #0
 80076c8:	481d      	ldr	r0, [pc, #116]	; (8007740 <BSP_AUDIO_IN_InitEx+0xc8>)
 80076ca:	f7ff febb 	bl	8007444 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 80076ce:	2100      	movs	r1, #0
 80076d0:	481b      	ldr	r0, [pc, #108]	; (8007740 <BSP_AUDIO_IN_InitEx+0xc8>)
 80076d2:	f000 f87f 	bl	80077d4 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 80076d6:	89fb      	ldrh	r3, [r7, #14]
 80076d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076dc:	d102      	bne.n	80076e4 <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 80076de:	230a      	movs	r3, #10
 80076e0:	61bb      	str	r3, [r7, #24]
 80076e2:	e001      	b.n	80076e8 <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 80076e4:	2305      	movs	r3, #5
 80076e6:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	69b9      	ldr	r1, [r7, #24]
 80076ec:	2001      	movs	r0, #1
 80076ee:	f000 f91d 	bl	800792c <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80076f2:	4b15      	ldr	r3, [pc, #84]	; (8007748 <BSP_AUDIO_IN_InitEx+0xd0>)
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	2034      	movs	r0, #52	; 0x34
 80076f8:	4798      	blx	r3
 80076fa:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f648 1294 	movw	r2, #35220	; 0x8994
 8007702:	4293      	cmp	r3, r2
 8007704:	d109      	bne.n	800771a <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8007706:	4b10      	ldr	r3, [pc, #64]	; (8007748 <BSP_AUDIO_IN_InitEx+0xd0>)
 8007708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770a:	2034      	movs	r0, #52	; 0x34
 800770c:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 800770e:	4b0f      	ldr	r3, [pc, #60]	; (800774c <BSP_AUDIO_IN_InitEx+0xd4>)
 8007710:	4a0d      	ldr	r2, [pc, #52]	; (8007748 <BSP_AUDIO_IN_InitEx+0xd0>)
 8007712:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	77fb      	strb	r3, [r7, #31]
 8007718:	e001      	b.n	800771e <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 800771e:	7ffb      	ldrb	r3, [r7, #31]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d107      	bne.n	8007734 <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8007724:	4b09      	ldr	r3, [pc, #36]	; (800774c <BSP_AUDIO_IN_InitEx+0xd4>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681c      	ldr	r4, [r3, #0]
 800772a:	89f9      	ldrh	r1, [r7, #14]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2264      	movs	r2, #100	; 0x64
 8007730:	2034      	movs	r0, #52	; 0x34
 8007732:	47a0      	blx	r4
    }
  }
  return ret;
 8007734:	7ffb      	ldrb	r3, [r7, #31]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3724      	adds	r7, #36	; 0x24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd90      	pop	{r4, r7, pc}
 800773e:	bf00      	nop
 8007740:	2000083c 	.word	0x2000083c
 8007744:	40015c24 	.word	0x40015c24
 8007748:	20000000 	.word	0x20000000
 800774c:	2002cd54 	.word	0x2002cd54

08007750 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	b29b      	uxth	r3, r3
 8007762:	461a      	mov	r2, r3
 8007764:	6879      	ldr	r1, [r7, #4]
 8007766:	4805      	ldr	r0, [pc, #20]	; (800777c <BSP_AUDIO_IN_Record+0x2c>)
 8007768:	f006 fbb2 	bl	800ded0 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 800776c:	2300      	movs	r3, #0
 800776e:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	b2db      	uxtb	r3, r3
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	2000083c 	.word	0x2000083c

08007780 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8007788:	f000 f80e 	bl	80077a8 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800778c:	bf00      	nop
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 800779c:	f000 f80b 	bl	80077b6 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief  User callback when record buffer is filled.
  * @retval None
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 80077a8:	b480      	push	{r7}
 80077aa:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 80077ac:	bf00      	nop
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{ 
 80077b6:	b480      	push	{r7}
 80077b8:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 80077ba:	bf00      	nop
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 80077c4:	b480      	push	{r7}
 80077c6:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 80077c8:	bf00      	nop
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
	...

080077d4 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08c      	sub	sp, #48	; 0x30
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 80077de:	4b4d      	ldr	r3, [pc, #308]	; (8007914 <BSP_AUDIO_IN_MspInit+0x140>)
 80077e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e2:	4a4c      	ldr	r2, [pc, #304]	; (8007914 <BSP_AUDIO_IN_MspInit+0x140>)
 80077e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077e8:	6453      	str	r3, [r2, #68]	; 0x44
 80077ea:	4b4a      	ldr	r3, [pc, #296]	; (8007914 <BSP_AUDIO_IN_MspInit+0x140>)
 80077ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077f2:	61bb      	str	r3, [r7, #24]
 80077f4:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 80077f6:	4b47      	ldr	r3, [pc, #284]	; (8007914 <BSP_AUDIO_IN_MspInit+0x140>)
 80077f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fa:	4a46      	ldr	r2, [pc, #280]	; (8007914 <BSP_AUDIO_IN_MspInit+0x140>)
 80077fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007800:	6313      	str	r3, [r2, #48]	; 0x30
 8007802:	4b44      	ldr	r3, [pc, #272]	; (8007914 <BSP_AUDIO_IN_MspInit+0x140>)
 8007804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800780a:	617b      	str	r3, [r7, #20]
 800780c:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800780e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007812:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8007814:	2302      	movs	r3, #2
 8007816:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8007818:	2300      	movs	r3, #0
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800781c:	2302      	movs	r3, #2
 800781e:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8007820:	230a      	movs	r3, #10
 8007822:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8007824:	f107 031c 	add.w	r3, r7, #28
 8007828:	4619      	mov	r1, r3
 800782a:	483b      	ldr	r0, [pc, #236]	; (8007918 <BSP_AUDIO_IN_MspInit+0x144>)
 800782c:	f003 ff0c 	bl	800b648 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8007830:	4b38      	ldr	r3, [pc, #224]	; (8007914 <BSP_AUDIO_IN_MspInit+0x140>)
 8007832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007834:	4a37      	ldr	r2, [pc, #220]	; (8007914 <BSP_AUDIO_IN_MspInit+0x140>)
 8007836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800783a:	6313      	str	r3, [r2, #48]	; 0x30
 800783c:	4b35      	ldr	r3, [pc, #212]	; (8007914 <BSP_AUDIO_IN_MspInit+0x140>)
 800783e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007844:	613b      	str	r3, [r7, #16]
 8007846:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8007848:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800784c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800784e:	2300      	movs	r3, #0
 8007850:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8007852:	2300      	movs	r3, #0
 8007854:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8007856:	2302      	movs	r3, #2
 8007858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 800785a:	f107 031c 	add.w	r3, r7, #28
 800785e:	4619      	mov	r1, r3
 8007860:	482e      	ldr	r0, [pc, #184]	; (800791c <BSP_AUDIO_IN_MspInit+0x148>)
 8007862:	f003 fef1 	bl	800b648 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8007866:	4b2b      	ldr	r3, [pc, #172]	; (8007914 <BSP_AUDIO_IN_MspInit+0x140>)
 8007868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786a:	4a2a      	ldr	r2, [pc, #168]	; (8007914 <BSP_AUDIO_IN_MspInit+0x140>)
 800786c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007870:	6313      	str	r3, [r2, #48]	; 0x30
 8007872:	4b28      	ldr	r3, [pc, #160]	; (8007914 <BSP_AUDIO_IN_MspInit+0x140>)
 8007874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a27      	ldr	r2, [pc, #156]	; (8007920 <BSP_AUDIO_IN_MspInit+0x14c>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d137      	bne.n	80078f8 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8007888:	4b26      	ldr	r3, [pc, #152]	; (8007924 <BSP_AUDIO_IN_MspInit+0x150>)
 800788a:	2200      	movs	r2, #0
 800788c:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800788e:	4b25      	ldr	r3, [pc, #148]	; (8007924 <BSP_AUDIO_IN_MspInit+0x150>)
 8007890:	2200      	movs	r2, #0
 8007892:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8007894:	4b23      	ldr	r3, [pc, #140]	; (8007924 <BSP_AUDIO_IN_MspInit+0x150>)
 8007896:	2200      	movs	r2, #0
 8007898:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800789a:	4b22      	ldr	r3, [pc, #136]	; (8007924 <BSP_AUDIO_IN_MspInit+0x150>)
 800789c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80078a0:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 80078a2:	4b20      	ldr	r3, [pc, #128]	; (8007924 <BSP_AUDIO_IN_MspInit+0x150>)
 80078a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078a8:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 80078aa:	4b1e      	ldr	r3, [pc, #120]	; (8007924 <BSP_AUDIO_IN_MspInit+0x150>)
 80078ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80078b0:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 80078b2:	4b1c      	ldr	r3, [pc, #112]	; (8007924 <BSP_AUDIO_IN_MspInit+0x150>)
 80078b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078b8:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80078ba:	4b1a      	ldr	r3, [pc, #104]	; (8007924 <BSP_AUDIO_IN_MspInit+0x150>)
 80078bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80078c0:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80078c2:	4b18      	ldr	r3, [pc, #96]	; (8007924 <BSP_AUDIO_IN_MspInit+0x150>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80078c8:	4b16      	ldr	r3, [pc, #88]	; (8007924 <BSP_AUDIO_IN_MspInit+0x150>)
 80078ca:	2203      	movs	r2, #3
 80078cc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80078ce:	4b15      	ldr	r3, [pc, #84]	; (8007924 <BSP_AUDIO_IN_MspInit+0x150>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 80078d4:	4b13      	ldr	r3, [pc, #76]	; (8007924 <BSP_AUDIO_IN_MspInit+0x150>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 80078da:	4b12      	ldr	r3, [pc, #72]	; (8007924 <BSP_AUDIO_IN_MspInit+0x150>)
 80078dc:	4a12      	ldr	r2, [pc, #72]	; (8007928 <BSP_AUDIO_IN_MspInit+0x154>)
 80078de:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a10      	ldr	r2, [pc, #64]	; (8007924 <BSP_AUDIO_IN_MspInit+0x150>)
 80078e4:	671a      	str	r2, [r3, #112]	; 0x70
 80078e6:	4a0f      	ldr	r2, [pc, #60]	; (8007924 <BSP_AUDIO_IN_MspInit+0x150>)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 80078ec:	480d      	ldr	r0, [pc, #52]	; (8007924 <BSP_AUDIO_IN_MspInit+0x150>)
 80078ee:	f003 fb85 	bl	800affc <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 80078f2:	480c      	ldr	r0, [pc, #48]	; (8007924 <BSP_AUDIO_IN_MspInit+0x150>)
 80078f4:	f003 fad4 	bl	800aea0 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80078f8:	2200      	movs	r2, #0
 80078fa:	210f      	movs	r1, #15
 80078fc:	2046      	movs	r0, #70	; 0x46
 80078fe:	f003 f9ae 	bl	800ac5e <HAL_NVIC_SetPriority>
//  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8007902:	2200      	movs	r2, #0
 8007904:	210f      	movs	r1, #15
 8007906:	2028      	movs	r0, #40	; 0x28
 8007908:	f003 f9a9 	bl	800ac5e <HAL_NVIC_SetPriority>
//  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
}
 800790c:	bf00      	nop
 800790e:	3730      	adds	r7, #48	; 0x30
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	40023800 	.word	0x40023800
 8007918:	40021800 	.word	0x40021800
 800791c:	40021c00 	.word	0x40021c00
 8007920:	40015c24 	.word	0x40015c24
 8007924:	20000920 	.word	0x20000920
 8007928:	400264b8 	.word	0x400264b8

0800792c <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8007938:	4b53      	ldr	r3, [pc, #332]	; (8007a88 <SAIx_In_Init+0x15c>)
 800793a:	4a54      	ldr	r2, [pc, #336]	; (8007a8c <SAIx_In_Init+0x160>)
 800793c:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800793e:	4b52      	ldr	r3, [pc, #328]	; (8007a88 <SAIx_In_Init+0x15c>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	4b50      	ldr	r3, [pc, #320]	; (8007a88 <SAIx_In_Init+0x15c>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800794c:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 800794e:	4a4e      	ldr	r2, [pc, #312]	; (8007a88 <SAIx_In_Init+0x15c>)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8007954:	4a4c      	ldr	r2, [pc, #304]	; (8007a88 <SAIx_In_Init+0x15c>)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800795a:	4b4b      	ldr	r3, [pc, #300]	; (8007a88 <SAIx_In_Init+0x15c>)
 800795c:	2200      	movs	r2, #0
 800795e:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8007960:	4b49      	ldr	r3, [pc, #292]	; (8007a88 <SAIx_In_Init+0x15c>)
 8007962:	2200      	movs	r2, #0
 8007964:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8007966:	4b48      	ldr	r3, [pc, #288]	; (8007a88 <SAIx_In_Init+0x15c>)
 8007968:	2280      	movs	r2, #128	; 0x80
 800796a:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800796c:	4b46      	ldr	r3, [pc, #280]	; (8007a88 <SAIx_In_Init+0x15c>)
 800796e:	2200      	movs	r2, #0
 8007970:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8007972:	4b45      	ldr	r3, [pc, #276]	; (8007a88 <SAIx_In_Init+0x15c>)
 8007974:	2201      	movs	r2, #1
 8007976:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8007978:	4b43      	ldr	r3, [pc, #268]	; (8007a88 <SAIx_In_Init+0x15c>)
 800797a:	2200      	movs	r2, #0
 800797c:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 800797e:	4b42      	ldr	r3, [pc, #264]	; (8007a88 <SAIx_In_Init+0x15c>)
 8007980:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007984:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8007986:	4b40      	ldr	r3, [pc, #256]	; (8007a88 <SAIx_In_Init+0x15c>)
 8007988:	2201      	movs	r2, #1
 800798a:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 800798c:	4b3e      	ldr	r3, [pc, #248]	; (8007a88 <SAIx_In_Init+0x15c>)
 800798e:	2240      	movs	r2, #64	; 0x40
 8007990:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8007992:	4b3d      	ldr	r3, [pc, #244]	; (8007a88 <SAIx_In_Init+0x15c>)
 8007994:	2220      	movs	r2, #32
 8007996:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8007998:	4b3b      	ldr	r3, [pc, #236]	; (8007a88 <SAIx_In_Init+0x15c>)
 800799a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800799e:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80079a0:	4b39      	ldr	r3, [pc, #228]	; (8007a88 <SAIx_In_Init+0x15c>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80079a6:	4b38      	ldr	r3, [pc, #224]	; (8007a88 <SAIx_In_Init+0x15c>)
 80079a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80079ac:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80079ae:	4b36      	ldr	r3, [pc, #216]	; (8007a88 <SAIx_In_Init+0x15c>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80079b4:	4b34      	ldr	r3, [pc, #208]	; (8007a88 <SAIx_In_Init+0x15c>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 80079ba:	4b33      	ldr	r3, [pc, #204]	; (8007a88 <SAIx_In_Init+0x15c>)
 80079bc:	2204      	movs	r2, #4
 80079be:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 80079c0:	4a31      	ldr	r2, [pc, #196]	; (8007a88 <SAIx_In_Init+0x15c>)
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 80079c6:	4830      	ldr	r0, [pc, #192]	; (8007a88 <SAIx_In_Init+0x15c>)
 80079c8:	f006 f8da 	bl	800db80 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80079cc:	4b30      	ldr	r3, [pc, #192]	; (8007a90 <SAIx_In_Init+0x164>)
 80079ce:	4a31      	ldr	r2, [pc, #196]	; (8007a94 <SAIx_In_Init+0x168>)
 80079d0:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80079d2:	4b2f      	ldr	r3, [pc, #188]	; (8007a90 <SAIx_In_Init+0x164>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	4b2d      	ldr	r3, [pc, #180]	; (8007a90 <SAIx_In_Init+0x164>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80079e0:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 80079e2:	4a2b      	ldr	r2, [pc, #172]	; (8007a90 <SAIx_In_Init+0x164>)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 80079e8:	4b29      	ldr	r3, [pc, #164]	; (8007a90 <SAIx_In_Init+0x164>)
 80079ea:	2203      	movs	r2, #3
 80079ec:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80079ee:	4b28      	ldr	r3, [pc, #160]	; (8007a90 <SAIx_In_Init+0x164>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80079f4:	4b26      	ldr	r3, [pc, #152]	; (8007a90 <SAIx_In_Init+0x164>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 80079fa:	4b25      	ldr	r3, [pc, #148]	; (8007a90 <SAIx_In_Init+0x164>)
 80079fc:	2280      	movs	r2, #128	; 0x80
 80079fe:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8007a00:	4b23      	ldr	r3, [pc, #140]	; (8007a90 <SAIx_In_Init+0x164>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8007a06:	4b22      	ldr	r3, [pc, #136]	; (8007a90 <SAIx_In_Init+0x164>)
 8007a08:	2201      	movs	r2, #1
 8007a0a:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8007a0c:	4b20      	ldr	r3, [pc, #128]	; (8007a90 <SAIx_In_Init+0x164>)
 8007a0e:	2201      	movs	r2, #1
 8007a10:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8007a12:	4b1f      	ldr	r3, [pc, #124]	; (8007a90 <SAIx_In_Init+0x164>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8007a18:	4b1d      	ldr	r3, [pc, #116]	; (8007a90 <SAIx_In_Init+0x164>)
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 8007a1e:	4b1c      	ldr	r3, [pc, #112]	; (8007a90 <SAIx_In_Init+0x164>)
 8007a20:	2240      	movs	r2, #64	; 0x40
 8007a22:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8007a24:	4b1a      	ldr	r3, [pc, #104]	; (8007a90 <SAIx_In_Init+0x164>)
 8007a26:	2220      	movs	r2, #32
 8007a28:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8007a2a:	4b19      	ldr	r3, [pc, #100]	; (8007a90 <SAIx_In_Init+0x164>)
 8007a2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007a30:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007a32:	4b17      	ldr	r3, [pc, #92]	; (8007a90 <SAIx_In_Init+0x164>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8007a38:	4b15      	ldr	r3, [pc, #84]	; (8007a90 <SAIx_In_Init+0x164>)
 8007a3a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007a3e:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8007a40:	4b13      	ldr	r3, [pc, #76]	; (8007a90 <SAIx_In_Init+0x164>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8007a46:	4b12      	ldr	r3, [pc, #72]	; (8007a90 <SAIx_In_Init+0x164>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8007a4c:	4b10      	ldr	r3, [pc, #64]	; (8007a90 <SAIx_In_Init+0x164>)
 8007a4e:	2204      	movs	r2, #4
 8007a50:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8007a52:	4a0f      	ldr	r2, [pc, #60]	; (8007a90 <SAIx_In_Init+0x164>)
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8007a58:	480d      	ldr	r0, [pc, #52]	; (8007a90 <SAIx_In_Init+0x164>)
 8007a5a:	f006 f891 	bl	800db80 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8007a5e:	4b0a      	ldr	r3, [pc, #40]	; (8007a88 <SAIx_In_Init+0x15c>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	4b08      	ldr	r3, [pc, #32]	; (8007a88 <SAIx_In_Init+0x15c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007a6c:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8007a6e:	4b08      	ldr	r3, [pc, #32]	; (8007a90 <SAIx_In_Init+0x164>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	4b06      	ldr	r3, [pc, #24]	; (8007a90 <SAIx_In_Init+0x164>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007a7c:	601a      	str	r2, [r3, #0]
}
 8007a7e:	bf00      	nop
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	200007b8 	.word	0x200007b8
 8007a8c:	40015c04 	.word	0x40015c04
 8007a90:	2000083c 	.word	0x2000083c
 8007a94:	40015c24 	.word	0x40015c24

08007a98 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8007a9c:	4b07      	ldr	r3, [pc, #28]	; (8007abc <SAIx_In_DeInit+0x24>)
 8007a9e:	4a08      	ldr	r2, [pc, #32]	; (8007ac0 <SAIx_In_DeInit+0x28>)
 8007aa0:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8007aa2:	4b06      	ldr	r3, [pc, #24]	; (8007abc <SAIx_In_DeInit+0x24>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	4b04      	ldr	r3, [pc, #16]	; (8007abc <SAIx_In_DeInit+0x24>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007ab0:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8007ab2:	4802      	ldr	r0, [pc, #8]	; (8007abc <SAIx_In_DeInit+0x24>)
 8007ab4:	f006 f9d6 	bl	800de64 <HAL_SAI_DeInit>
}
 8007ab8:	bf00      	nop
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	2000083c 	.word	0x2000083c
 8007ac0:	40015c24 	.word	0x40015c24

08007ac4 <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
 8007ad0:	603b      	str	r3, [r7, #0]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8007ad2:	f04f 0300 	mov.w	r3, #0
 8007ad6:	617b      	str	r3, [r7, #20]

#if defined (ARM_MATH_DSP)

/* Run the below code for Cortex-M4 and Cortex-M3 */
  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	089b      	lsrs	r3, r3, #2
 8007adc:	613b      	str	r3, [r7, #16]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8007ade:	e04a      	b.n	8007b76 <arm_dot_prod_f32+0xb2>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer */
    sum += (*pSrcA++) * (*pSrcB++);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	1d1a      	adds	r2, r3, #4
 8007ae4:	60fa      	str	r2, [r7, #12]
 8007ae6:	ed93 7a00 	vldr	s14, [r3]
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	1d1a      	adds	r2, r3, #4
 8007aee:	60ba      	str	r2, [r7, #8]
 8007af0:	edd3 7a00 	vldr	s15, [r3]
 8007af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007af8:	ed97 7a05 	vldr	s14, [r7, #20]
 8007afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b00:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	1d1a      	adds	r2, r3, #4
 8007b08:	60fa      	str	r2, [r7, #12]
 8007b0a:	ed93 7a00 	vldr	s14, [r3]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	1d1a      	adds	r2, r3, #4
 8007b12:	60ba      	str	r2, [r7, #8]
 8007b14:	edd3 7a00 	vldr	s15, [r3]
 8007b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b1c:	ed97 7a05 	vldr	s14, [r7, #20]
 8007b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b24:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	1d1a      	adds	r2, r3, #4
 8007b2c:	60fa      	str	r2, [r7, #12]
 8007b2e:	ed93 7a00 	vldr	s14, [r3]
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	1d1a      	adds	r2, r3, #4
 8007b36:	60ba      	str	r2, [r7, #8]
 8007b38:	edd3 7a00 	vldr	s15, [r3]
 8007b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b40:	ed97 7a05 	vldr	s14, [r7, #20]
 8007b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b48:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	1d1a      	adds	r2, r3, #4
 8007b50:	60fa      	str	r2, [r7, #12]
 8007b52:	ed93 7a00 	vldr	s14, [r3]
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	1d1a      	adds	r2, r3, #4
 8007b5a:	60ba      	str	r2, [r7, #8]
 8007b5c:	edd3 7a00 	vldr	s15, [r3]
 8007b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b64:	ed97 7a05 	vldr	s14, [r7, #20]
 8007b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b6c:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	3b01      	subs	r3, #1
 8007b74:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1b1      	bne.n	8007ae0 <arm_dot_prod_f32+0x1c>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f003 0303 	and.w	r3, r3, #3
 8007b82:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 8007b84:	e014      	b.n	8007bb0 <arm_dot_prod_f32+0xec>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer. */
    sum += (*pSrcA++) * (*pSrcB++);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	1d1a      	adds	r2, r3, #4
 8007b8a:	60fa      	str	r2, [r7, #12]
 8007b8c:	ed93 7a00 	vldr	s14, [r3]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	1d1a      	adds	r2, r3, #4
 8007b94:	60ba      	str	r2, [r7, #8]
 8007b96:	edd3 7a00 	vldr	s15, [r3]
 8007b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b9e:	ed97 7a05 	vldr	s14, [r7, #20]
 8007ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ba6:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	3b01      	subs	r3, #1
 8007bae:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1e7      	bne.n	8007b86 <arm_dot_prod_f32+0xc2>
  }
  /* Store the result back in the destination buffer */
  *result = sum;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	601a      	str	r2, [r3, #0]
}
 8007bbc:	bf00      	nop
 8007bbe:	371c      	adds	r7, #28
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <arm_mult_f32>:
void arm_mult_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b093      	sub	sp, #76	; 0x4c
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
 8007bd4:	603b      	str	r3, [r7, #0]
  float32_t inA1, inA2, inA3, inA4;              /* temporary input variables */
  float32_t inB1, inB2, inB3, inB4;              /* temporary input variables */
  float32_t out1, out2, out3, out4;              /* temporary output variables */

  /* loop Unrolling */
  blkCnt = blockSize >> 2U;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	089b      	lsrs	r3, r3, #2
 8007bda:	647b      	str	r3, [r7, #68]	; 0x44

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8007bdc:	e052      	b.n	8007c84 <arm_mult_f32+0xbc>
  {
    /* C = A * B */
    /* Multiply the inputs and store the results in output buffer */
    /* read sample from sourceA */
    inA1 = *pSrcA;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	643b      	str	r3, [r7, #64]	; 0x40
    /* read sample from sourceB */
    inB1 = *pSrcB;
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* read sample from sourceA */
    inA2 = *(pSrcA + 1);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	63bb      	str	r3, [r7, #56]	; 0x38
    /* read sample from sourceB */
    inB2 = *(pSrcB + 1);
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	637b      	str	r3, [r7, #52]	; 0x34

    /* out = sourceA * sourceB */
    out1 = inA1 * inB1;
 8007bf6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8007bfa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c02:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    /* read sample from sourceA */
    inA3 = *(pSrcA + 2);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* read sample from sourceB */
    inB3 = *(pSrcB + 2);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	62bb      	str	r3, [r7, #40]	; 0x28

    /* out = sourceA * sourceB */
    out2 = inA2 * inB2;
 8007c12:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8007c16:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c1e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* read sample from sourceA */
    inA4 = *(pSrcA + 3);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	623b      	str	r3, [r7, #32]

    /* store result to destination buffer */
    *pDst = out1;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c2c:	601a      	str	r2, [r3, #0]

    /* read sample from sourceB */
    inB4 = *(pSrcB + 3);
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	61fb      	str	r3, [r7, #28]

    /* out = sourceA * sourceB */
    out3 = inA3 * inB3;
 8007c34:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007c38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c40:	edc7 7a06 	vstr	s15, [r7, #24]

    /* store result to destination buffer */
    *(pDst + 1) = out2;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3304      	adds	r3, #4
 8007c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c4a:	601a      	str	r2, [r3, #0]

    /* out = sourceA * sourceB */
    out4 = inA4 * inB4;
 8007c4c:	ed97 7a08 	vldr	s14, [r7, #32]
 8007c50:	edd7 7a07 	vldr	s15, [r7, #28]
 8007c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c58:	edc7 7a05 	vstr	s15, [r7, #20]
    /* store result to destination buffer */
    *(pDst + 2) = out3;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	3308      	adds	r3, #8
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	601a      	str	r2, [r3, #0]
    /* store result to destination buffer */
    *(pDst + 3) = out4;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	330c      	adds	r3, #12
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	601a      	str	r2, [r3, #0]


    /* update pointers to process next samples */
    pSrcA += 4U;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	3310      	adds	r3, #16
 8007c70:	60fb      	str	r3, [r7, #12]
    pSrcB += 4U;
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	3310      	adds	r3, #16
 8007c76:	60bb      	str	r3, [r7, #8]
    pDst += 4U;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	3310      	adds	r3, #16
 8007c7c:	607b      	str	r3, [r7, #4]

    /* Decrement the blockSize loop counter */
    blkCnt--;
 8007c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c80:	3b01      	subs	r3, #1
 8007c82:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 8007c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1a9      	bne.n	8007bde <arm_mult_f32+0x16>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	f003 0303 	and.w	r3, r3, #3
 8007c90:	647b      	str	r3, [r7, #68]	; 0x44
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8007c92:	e013      	b.n	8007cbc <arm_mult_f32+0xf4>
  {
    /* C = A * B */
    /* Multiply the inputs and store the results in output buffer */
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	1d1a      	adds	r2, r3, #4
 8007c98:	60fa      	str	r2, [r7, #12]
 8007c9a:	ed93 7a00 	vldr	s14, [r3]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	1d1a      	adds	r2, r3, #4
 8007ca2:	60ba      	str	r2, [r7, #8]
 8007ca4:	edd3 7a00 	vldr	s15, [r3]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	1d1a      	adds	r2, r3, #4
 8007cac:	607a      	str	r2, [r7, #4]
 8007cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb2:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the blockSize loop counter */
    blkCnt--;
 8007cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 8007cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e8      	bne.n	8007c94 <arm_mult_f32+0xcc>
  }
}
 8007cc2:	bf00      	nop
 8007cc4:	374c      	adds	r7, #76	; 0x4c
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <arm_offset_f32>:
void arm_offset_f32(
  float32_t * pSrc,
  float32_t offset,
  float32_t * pDst,
  uint32_t blockSize)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b08b      	sub	sp, #44	; 0x2c
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	60f8      	str	r0, [r7, #12]
 8007cd6:	ed87 0a02 	vstr	s0, [r7, #8]
 8007cda:	6079      	str	r1, [r7, #4]
 8007cdc:	603a      	str	r2, [r7, #0]

/* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	089b      	lsrs	r3, r3, #2
 8007ce2:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8007ce4:	e043      	b.n	8007d6e <arm_offset_f32+0xa0>
  {
    /* C = A + offset */
    /* Add offset and then store the results in the destination buffer. */
    /* read samples from source */
    in1 = *pSrc;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	623b      	str	r3, [r7, #32]
    in2 = *(pSrc + 1);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	61fb      	str	r3, [r7, #28]

    /* add offset to input */
    in1 = in1 + offset;
 8007cf2:	ed97 7a08 	vldr	s14, [r7, #32]
 8007cf6:	edd7 7a02 	vldr	s15, [r7, #8]
 8007cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cfe:	edc7 7a08 	vstr	s15, [r7, #32]

    /* read samples from source */
    in3 = *(pSrc + 2);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	61bb      	str	r3, [r7, #24]

    /* add offset to input */
    in2 = in2 + offset;
 8007d08:	ed97 7a07 	vldr	s14, [r7, #28]
 8007d0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d14:	edc7 7a07 	vstr	s15, [r7, #28]

    /* read samples from source */
    in4 = *(pSrc + 3);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	617b      	str	r3, [r7, #20]

    /* add offset to input */
    in3 = in3 + offset;
 8007d1e:	ed97 7a06 	vldr	s14, [r7, #24]
 8007d22:	edd7 7a02 	vldr	s15, [r7, #8]
 8007d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d2a:	edc7 7a06 	vstr	s15, [r7, #24]

    /* store result to destination */
    *pDst = in1;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a3a      	ldr	r2, [r7, #32]
 8007d32:	601a      	str	r2, [r3, #0]

    /* add offset to input */
    in4 = in4 + offset;
 8007d34:	ed97 7a05 	vldr	s14, [r7, #20]
 8007d38:	edd7 7a02 	vldr	s15, [r7, #8]
 8007d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d40:	edc7 7a05 	vstr	s15, [r7, #20]

    /* store result to destination */
    *(pDst + 1) = in2;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3304      	adds	r3, #4
 8007d48:	69fa      	ldr	r2, [r7, #28]
 8007d4a:	601a      	str	r2, [r3, #0]

    /* store result to destination */
    *(pDst + 2) = in3;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	3308      	adds	r3, #8
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	601a      	str	r2, [r3, #0]

    /* store result to destination */
    *(pDst + 3) = in4;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	330c      	adds	r3, #12
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	601a      	str	r2, [r3, #0]

    /* update pointers to process next samples */
    pSrc += 4U;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	3310      	adds	r3, #16
 8007d60:	60fb      	str	r3, [r7, #12]
    pDst += 4U;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	3310      	adds	r3, #16
 8007d66:	607b      	str	r3, [r7, #4]

    /* Decrement the loop counter */
    blkCnt--;
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1b8      	bne.n	8007ce6 <arm_offset_f32+0x18>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	f003 0303 	and.w	r3, r3, #3
 8007d7a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8007d7c:	e010      	b.n	8007da0 <arm_offset_f32+0xd2>
  {
    /* C = A + offset */
    /* Add offset and then store the result in the destination buffer. */
    *pDst++ = (*pSrc++) + offset;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	1d1a      	adds	r2, r3, #4
 8007d82:	60fa      	str	r2, [r7, #12]
 8007d84:	ed93 7a00 	vldr	s14, [r3]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	1d1a      	adds	r2, r3, #4
 8007d8c:	607a      	str	r2, [r7, #4]
 8007d8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d96:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the loop counter */
    blkCnt--;
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1eb      	bne.n	8007d7e <arm_offset_f32+0xb0>
  }
}
 8007da6:	bf00      	nop
 8007da8:	372c      	adds	r7, #44	; 0x2c
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <arm_scale_f32>:
void arm_scale_f32(
  float32_t * pSrc,
  float32_t scale,
  float32_t * pDst,
  uint32_t blockSize)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b08b      	sub	sp, #44	; 0x2c
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	ed87 0a02 	vstr	s0, [r7, #8]
 8007dbe:	6079      	str	r1, [r7, #4]
 8007dc0:	603a      	str	r2, [r7, #0]

/* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;                  /* temporary variabels */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	089b      	lsrs	r3, r3, #2
 8007dc6:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8007dc8:	e043      	b.n	8007e52 <arm_scale_f32+0xa0>
  {
    /* C = A * scale */
    /* Scale the input and then store the results in the destination buffer. */
    /* read input samples from source */
    in1 = *pSrc;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	623b      	str	r3, [r7, #32]
    in2 = *(pSrc + 1);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	61fb      	str	r3, [r7, #28]

    /* multiply with scaling factor */
    in1 = in1 * scale;
 8007dd6:	ed97 7a08 	vldr	s14, [r7, #32]
 8007dda:	edd7 7a02 	vldr	s15, [r7, #8]
 8007dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de2:	edc7 7a08 	vstr	s15, [r7, #32]

    /* read input sample from source */
    in3 = *(pSrc + 2);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	61bb      	str	r3, [r7, #24]

    /* multiply with scaling factor */
    in2 = in2 * scale;
 8007dec:	ed97 7a07 	vldr	s14, [r7, #28]
 8007df0:	edd7 7a02 	vldr	s15, [r7, #8]
 8007df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007df8:	edc7 7a07 	vstr	s15, [r7, #28]

    /* read input sample from source */
    in4 = *(pSrc + 3);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	617b      	str	r3, [r7, #20]

    /* multiply with scaling factor */
    in3 = in3 * scale;
 8007e02:	ed97 7a06 	vldr	s14, [r7, #24]
 8007e06:	edd7 7a02 	vldr	s15, [r7, #8]
 8007e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e0e:	edc7 7a06 	vstr	s15, [r7, #24]
    in4 = in4 * scale;
 8007e12:	ed97 7a05 	vldr	s14, [r7, #20]
 8007e16:	edd7 7a02 	vldr	s15, [r7, #8]
 8007e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e1e:	edc7 7a05 	vstr	s15, [r7, #20]
    /* store the result to destination */
    *pDst = in1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a3a      	ldr	r2, [r7, #32]
 8007e26:	601a      	str	r2, [r3, #0]
    *(pDst + 1) = in2;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	3304      	adds	r3, #4
 8007e2c:	69fa      	ldr	r2, [r7, #28]
 8007e2e:	601a      	str	r2, [r3, #0]
    *(pDst + 2) = in3;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	3308      	adds	r3, #8
 8007e34:	69ba      	ldr	r2, [r7, #24]
 8007e36:	601a      	str	r2, [r3, #0]
    *(pDst + 3) = in4;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	330c      	adds	r3, #12
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	601a      	str	r2, [r3, #0]

    /* update pointers to process next samples */
    pSrc += 4U;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	3310      	adds	r3, #16
 8007e44:	60fb      	str	r3, [r7, #12]
    pDst += 4U;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	3310      	adds	r3, #16
 8007e4a:	607b      	str	r3, [r7, #4]

    /* Decrement the loop counter */
    blkCnt--;
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8007e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1b8      	bne.n	8007dca <arm_scale_f32+0x18>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	f003 0303 	and.w	r3, r3, #3
 8007e5e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8007e60:	e010      	b.n	8007e84 <arm_scale_f32+0xd2>
  {
    /* C = A * scale */
    /* Scale the input and then store the result in the destination buffer. */
    *pDst++ = (*pSrc++) * scale;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	1d1a      	adds	r2, r3, #4
 8007e66:	60fa      	str	r2, [r7, #12]
 8007e68:	ed93 7a00 	vldr	s14, [r3]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	1d1a      	adds	r2, r3, #4
 8007e70:	607a      	str	r2, [r7, #4]
 8007e72:	edd7 7a02 	vldr	s15, [r7, #8]
 8007e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e7a:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the loop counter */
    blkCnt--;
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e80:	3b01      	subs	r3, #1
 8007e82:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1eb      	bne.n	8007e62 <arm_scale_f32+0xb0>
  }
}
 8007e8a:	bf00      	nop
 8007e8c:	372c      	adds	r7, #44	; 0x2c
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <arm_cmplx_mag_squared_f32>:

void arm_cmplx_mag_squared_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8007e96:	b480      	push	{r7}
 8007e98:	b09d      	sub	sp, #116	; 0x74
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	60f8      	str	r0, [r7, #12]
 8007e9e:	60b9      	str	r1, [r7, #8]
 8007ea0:	607a      	str	r2, [r7, #4]
  float32_t mul1, mul2, mul3, mul4;              /* Temporary variables */
  float32_t mul5, mul6, mul7, mul8;              /* Temporary variables */
  float32_t out1, out2, out3, out4;              /* Temporary variables to hold output values */

  /*loop Unrolling */
  blkCnt = numSamples >> 2U;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	089b      	lsrs	r3, r3, #2
 8007ea6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8007ea8:	e08f      	b.n	8007fca <arm_cmplx_mag_squared_f32+0x134>
  {
    /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
    /* read real input sample from source buffer */
    real1 = pSrc[0];
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	663b      	str	r3, [r7, #96]	; 0x60
    /* read imaginary input sample from source buffer */
    imag1 = pSrc[1];
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* calculate power of real value */
    mul1 = real1 * real1;
 8007eb6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8007eba:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8007ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ec2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

    /* read real input sample from source buffer */
    real2 = pSrc[2];
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	657b      	str	r3, [r7, #84]	; 0x54

    /* calculate power of imaginary value */
    mul2 = imag1 * imag1;
 8007ecc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8007ed0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8007ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

    /* read imaginary input sample from source buffer */
    imag2 = pSrc[3];
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* calculate power of real value */
    mul3 = real2 * real2;
 8007ee2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8007ee6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8007eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eee:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* read real input sample from source buffer */
    real3 = pSrc[4];
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	647b      	str	r3, [r7, #68]	; 0x44

    /* calculate power of imaginary value */
    mul4 = imag2 * imag2;
 8007ef8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007efc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8007f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f04:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

    /* read imaginary input sample from source buffer */
    imag3 = pSrc[5];
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* calculate power of real value */
    mul5 = real3 * real3;
 8007f0e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8007f12:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f1a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    /* calculate power of imaginary value */
    mul6 = imag3 * imag3;
 8007f1e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8007f22:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f2a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    /* read real input sample from source buffer */
    real4 = pSrc[6];
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	633b      	str	r3, [r7, #48]	; 0x30

    /* accumulate real and imaginary powers */
    out1 = mul1 + mul2;
 8007f34:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8007f38:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8007f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f40:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

    /* read imaginary input sample from source buffer */
    imag4 = pSrc[7];
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	69db      	ldr	r3, [r3, #28]
 8007f48:	62bb      	str	r3, [r7, #40]	; 0x28

    /* accumulate real and imaginary powers */
    out2 = mul3 + mul4;
 8007f4a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8007f4e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8007f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f56:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* calculate power of real value */
    mul7 = real4 * real4;
 8007f5a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8007f5e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f66:	edc7 7a08 	vstr	s15, [r7, #32]
    /* calculate power of imaginary value */
    mul8 = imag4 * imag4;
 8007f6a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8007f6e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f76:	edc7 7a07 	vstr	s15, [r7, #28]

    /* store output to destination */
    pDst[0] = out1;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f7e:	601a      	str	r2, [r3, #0]

    /* accumulate real and imaginary powers */
    out3 = mul5 + mul6;
 8007f80:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8007f84:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f8c:	edc7 7a06 	vstr	s15, [r7, #24]

    /* store output to destination */
    pDst[1] = out2;
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	3304      	adds	r3, #4
 8007f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f96:	601a      	str	r2, [r3, #0]

    /* accumulate real and imaginary powers */
    out4 = mul7 + mul8;
 8007f98:	ed97 7a08 	vldr	s14, [r7, #32]
 8007f9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8007fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fa4:	edc7 7a05 	vstr	s15, [r7, #20]

    /* store output to destination */
    pDst[2] = out3;
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	3308      	adds	r3, #8
 8007fac:	69ba      	ldr	r2, [r7, #24]
 8007fae:	601a      	str	r2, [r3, #0]

    /* increment destination pointer by 8 to process next samples */
    pSrc += 8U;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	3320      	adds	r3, #32
 8007fb4:	60fb      	str	r3, [r7, #12]

    /* store output to destination */
    pDst[3] = out4;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	330c      	adds	r3, #12
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	601a      	str	r2, [r3, #0]

    /* increment destination pointer by 4 to process next samples */
    pDst += 4U;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	3310      	adds	r3, #16
 8007fc2:	60bb      	str	r3, [r7, #8]

    /* Decrement the loop counter */
    blkCnt--;
 8007fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (blkCnt > 0U)
 8007fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f47f af6c 	bne.w	8007eaa <arm_cmplx_mag_squared_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4U;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f003 0303 	and.w	r3, r3, #3
 8007fd8:	66fb      	str	r3, [r7, #108]	; 0x6c

  blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8007fda:	e01f      	b.n	800801c <arm_cmplx_mag_squared_f32+0x186>
  {
    /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
    real = *pSrc++;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	1d1a      	adds	r2, r3, #4
 8007fe0:	60fa      	str	r2, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	66bb      	str	r3, [r7, #104]	; 0x68
    imag = *pSrc++;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	1d1a      	adds	r2, r3, #4
 8007fea:	60fa      	str	r2, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	667b      	str	r3, [r7, #100]	; 0x64

    /* out = (real * real) + (imag * imag) */
    /* store the result in the destination buffer. */
    *pDst++ = (real * real) + (imag * imag);
 8007ff0:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8007ff4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8007ff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007ffc:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8008000:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8008004:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	1d1a      	adds	r2, r3, #4
 800800c:	60ba      	str	r2, [r7, #8]
 800800e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008012:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the loop counter */
    blkCnt--;
 8008016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008018:	3b01      	subs	r3, #1
 800801a:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (blkCnt > 0U)
 800801c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1dc      	bne.n	8007fdc <arm_cmplx_mag_squared_f32+0x146>
  }
}
 8008022:	bf00      	nop
 8008024:	3774      	adds	r7, #116	; 0x74
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800802e:	b480      	push	{r7}
 8008030:	b085      	sub	sp, #20
 8008032:	af00      	add	r7, sp, #0
 8008034:	60f8      	str	r0, [r7, #12]
 8008036:	607b      	str	r3, [r7, #4]
 8008038:	460b      	mov	r3, r1
 800803a:	817b      	strh	r3, [r7, #10]
 800803c:	4613      	mov	r3, r2
 800803e:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	897a      	ldrh	r2, [r7, #10]
 8008044:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	893a      	ldrh	r2, [r7, #8]
 800804a:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	605a      	str	r2, [r3, #4]
}
 8008052:	bf00      	nop
 8008054:	3714      	adds	r7, #20
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 800805e:	b480      	push	{r7}
 8008060:	b08b      	sub	sp, #44	; 0x2c
 8008062:	af00      	add	r7, sp, #0
 8008064:	60f8      	str	r0, [r7, #12]
 8008066:	60b9      	str	r1, [r7, #8]
 8008068:	607a      	str	r2, [r7, #4]
 800806a:	603b      	str	r3, [r7, #0]

  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0U;
 8008070:	2300      	movs	r3, #0
 8008072:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	1d1a      	adds	r2, r3, #4
 8008078:	60fa      	str	r2, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1U) >> 2U;
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	3b01      	subs	r3, #1
 8008082:	089b      	lsrs	r3, r3, #2
 8008084:	623b      	str	r3, [r7, #32]

  while (blkCnt > 0U)
 8008086:	e051      	b.n	800812c <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	1d1a      	adds	r2, r3, #4
 800808c:	60fa      	str	r2, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	617b      	str	r3, [r7, #20]
    maxVal2 = *pSrc++;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	1d1a      	adds	r2, r3, #4
 8008096:	60fa      	str	r2, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal1)
 800809c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80080a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80080a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80080a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ac:	d504      	bpl.n	80080b8 <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1U;
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	3301      	adds	r3, #1
 80080b6:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if (out < maxVal2)
 80080b8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80080bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80080c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80080c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c8:	d504      	bpl.n	80080d4 <arm_max_f32+0x76>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2U;
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	3302      	adds	r3, #2
 80080d2:	61fb      	str	r3, [r7, #28]
    }

    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	1d1a      	adds	r2, r3, #4
 80080d8:	60fa      	str	r2, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	617b      	str	r3, [r7, #20]
    maxVal2 = *pSrc++;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	1d1a      	adds	r2, r3, #4
 80080e2:	60fa      	str	r2, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal1)
 80080e8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80080ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80080f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80080f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080f8:	d504      	bpl.n	8008104 <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3U;
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	3303      	adds	r3, #3
 8008102:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if (out < maxVal2)
 8008104:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008108:	edd7 7a04 	vldr	s15, [r7, #16]
 800810c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008114:	d504      	bpl.n	8008120 <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4U;
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	3304      	adds	r3, #4
 800811e:	61fb      	str	r3, [r7, #28]
    }

    count += 4U;
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	3304      	adds	r3, #4
 8008124:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 8008126:	6a3b      	ldr	r3, [r7, #32]
 8008128:	3b01      	subs	r3, #1
 800812a:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 800812c:	6a3b      	ldr	r3, [r7, #32]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1aa      	bne.n	8008088 <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1U) is not multiple of 4 */
  blkCnt = (blockSize - 1U) % 4U;
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	3b01      	subs	r3, #1
 8008136:	f003 0303 	and.w	r3, r3, #3
 800813a:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 800813c:	e016      	b.n	800816c <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	1d1a      	adds	r2, r3, #4
 8008142:	60fa      	str	r2, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if (out < maxVal1)
 8008148:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800814c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008150:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008158:	d505      	bpl.n	8008166 <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	61fb      	str	r3, [r7, #28]
    }

    /* Decrement the loop counter */
    blkCnt--;
 8008166:	6a3b      	ldr	r3, [r7, #32]
 8008168:	3b01      	subs	r3, #1
 800816a:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1e5      	bne.n	800813e <arm_max_f32+0xe0>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008176:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	69fa      	ldr	r2, [r7, #28]
 800817c:	601a      	str	r2, [r3, #0]
}
 800817e:	bf00      	nop
 8008180:	372c      	adds	r7, #44	; 0x2c
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <arm_min_f32>:
void arm_min_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 800818a:	b480      	push	{r7}
 800818c:	b08b      	sub	sp, #44	; 0x2c
 800818e:	af00      	add	r7, sp, #0
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	607a      	str	r2, [r7, #4]
 8008196:	603b      	str	r3, [r7, #0]

  float32_t minVal1, minVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0U;
 8008198:	2300      	movs	r3, #0
 800819a:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0U;
 800819c:	2300      	movs	r3, #0
 800819e:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	1d1a      	adds	r2, r3, #4
 80081a4:	60fa      	str	r2, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1U) >> 2U;
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	3b01      	subs	r3, #1
 80081ae:	089b      	lsrs	r3, r3, #2
 80081b0:	623b      	str	r3, [r7, #32]

  while (blkCnt > 0U)
 80081b2:	e051      	b.n	8008258 <arm_min_f32+0xce>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	1d1a      	adds	r2, r3, #4
 80081b8:	60fa      	str	r2, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	617b      	str	r3, [r7, #20]
    minVal2 = *pSrc++;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	1d1a      	adds	r2, r3, #4
 80081c2:	60fa      	str	r2, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if (out > minVal1)
 80081c8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80081cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80081d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80081d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081d8:	dd04      	ble.n	80081e4 <arm_min_f32+0x5a>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1U;
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	3301      	adds	r3, #1
 80081e2:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the minimum value */
    if (out > minVal2)
 80081e4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80081e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80081ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80081f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081f4:	dd04      	ble.n	8008200 <arm_min_f32+0x76>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2U;
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	3302      	adds	r3, #2
 80081fe:	61fb      	str	r3, [r7, #28]
    }

    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	1d1a      	adds	r2, r3, #4
 8008204:	60fa      	str	r2, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	617b      	str	r3, [r7, #20]
    minVal2 = *pSrc++;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	1d1a      	adds	r2, r3, #4
 800820e:	60fa      	str	r2, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if (out > minVal1)
 8008214:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008218:	edd7 7a05 	vldr	s15, [r7, #20]
 800821c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008224:	dd04      	ble.n	8008230 <arm_min_f32+0xa6>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3U;
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	3303      	adds	r3, #3
 800822e:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the minimum value */
    if (out > minVal2)
 8008230:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008234:	edd7 7a04 	vldr	s15, [r7, #16]
 8008238:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800823c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008240:	dd04      	ble.n	800824c <arm_min_f32+0xc2>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4U;
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	3304      	adds	r3, #4
 800824a:	61fb      	str	r3, [r7, #28]
    }

    count += 4U;
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	3304      	adds	r3, #4
 8008250:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	3b01      	subs	r3, #1
 8008256:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1aa      	bne.n	80081b4 <arm_min_f32+0x2a>
  }

  /* if (blockSize - 1U) is not multiple of 4 */
  blkCnt = (blockSize - 1U) % 4U;
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	3b01      	subs	r3, #1
 8008262:	f003 0303 	and.w	r3, r3, #3
 8008266:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8008268:	e016      	b.n	8008298 <arm_min_f32+0x10e>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	1d1a      	adds	r2, r3, #4
 800826e:	60fa      	str	r2, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if (out > minVal1)
 8008274:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008278:	edd7 7a05 	vldr	s15, [r7, #20]
 800827c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008284:	dd05      	ble.n	8008292 <arm_min_f32+0x108>
    {
      /* Update the minimum value and it's index */
      out = minVal1;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	6a3b      	ldr	r3, [r7, #32]
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	61fb      	str	r3, [r7, #28]
    }

    /* Decrement the loop counter */
    blkCnt--;
 8008292:	6a3b      	ldr	r3, [r7, #32]
 8008294:	3b01      	subs	r3, #1
 8008296:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 8008298:	6a3b      	ldr	r3, [r7, #32]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1e5      	bne.n	800826a <arm_min_f32+0xe0>
  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082a2:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	69fa      	ldr	r2, [r7, #28]
 80082a8:	601a      	str	r2, [r3, #0]
}
 80082aa:	bf00      	nop
 80082ac:	372c      	adds	r7, #44	; 0x2c
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <arm_cfft_radix8by2_f32>:
* \endcode
*
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b0a0      	sub	sp, #128	; 0x80
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	881b      	ldrh	r3, [r3, #0]
 80082c4:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 80082c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	4413      	add	r3, r2
 80082ce:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 80082da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082dc:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 80082de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082e0:	085b      	lsrs	r3, r3, #1
 80082e2:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 80082e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	683a      	ldr	r2, [r7, #0]
 80082ea:	4413      	add	r3, r2
 80082ec:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 80082ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80082f4:	4413      	add	r3, r2
 80082f6:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- )
 80082f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082fa:	089b      	lsrs	r3, r3, #2
 80082fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082fe:	e1b6      	b.n	800866e <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 8008318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 800831e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 8008324:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 800832a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 8008330:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 8008336:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 800833c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 8008342:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 8008348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 800834e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 8008354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 800835a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 8008360:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008364:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	1d1a      	adds	r2, r3, #4
 800836c:	603a      	str	r2, [r7, #0]
 800836e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008372:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 8008376:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800837a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	1d1a      	adds	r2, r3, #4
 8008382:	603a      	str	r2, [r7, #0]
 8008384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008388:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 800838c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008390:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	1d1a      	adds	r2, r3, #4
 8008398:	603a      	str	r2, [r7, #0]
 800839a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800839e:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 80083a2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80083a6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	1d1a      	adds	r2, r3, #4
 80083ae:	603a      	str	r2, [r7, #0]
 80083b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083b4:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 80083b8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80083bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80083c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083c4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 80083c8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80083cc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80083d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083d4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 80083d8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80083dc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80083e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083e4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 80083e8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80083ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80083f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083f4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 80083f8:	ed97 7a06 	vldr	s14, [r7, #24]
 80083fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8008400:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008402:	1d1a      	adds	r2, r3, #4
 8008404:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800840a:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 800840e:	ed97 7a07 	vldr	s14, [r7, #28]
 8008412:	edd7 7a03 	vldr	s15, [r7, #12]
 8008416:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008418:	1d1a      	adds	r2, r3, #4
 800841a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800841c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008420:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 8008424:	ed97 7a08 	vldr	s14, [r7, #32]
 8008428:	edd7 7a04 	vldr	s15, [r7, #16]
 800842c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800842e:	1d1a      	adds	r2, r3, #4
 8008430:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008436:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 800843a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800843e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008442:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008444:	1d1a      	adds	r2, r3, #4
 8008446:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800844c:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 8008450:	ed97 7a02 	vldr	s14, [r7, #8]
 8008454:	edd7 7a06 	vldr	s15, [r7, #24]
 8008458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800845c:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 8008460:	ed97 7a03 	vldr	s14, [r7, #12]
 8008464:	edd7 7a07 	vldr	s15, [r7, #28]
 8008468:	ee77 7a67 	vsub.f32	s15, s14, s15
 800846c:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 8008470:	ed97 7a04 	vldr	s14, [r7, #16]
 8008474:	edd7 7a08 	vldr	s15, [r7, #32]
 8008478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800847c:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 8008480:	ed97 7a05 	vldr	s14, [r7, #20]
 8008484:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800848c:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 8008490:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008492:	1d1a      	adds	r2, r3, #4
 8008494:	673a      	str	r2, [r7, #112]	; 0x70
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 800849a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800849c:	1d1a      	adds	r2, r3, #4
 800849e:	673a      	str	r2, [r7, #112]	; 0x70
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 80084a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80084a8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80084ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084b0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 80084b4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80084b8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80084bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084c0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 80084c4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80084c8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80084cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084d0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 80084d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80084d8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80084dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084e0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 80084e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084e6:	1d1a      	adds	r2, r3, #4
 80084e8:	677a      	str	r2, [r7, #116]	; 0x74
 80084ea:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80084ee:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80084f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084f6:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 80084fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084fc:	1d1a      	adds	r2, r3, #4
 80084fe:	677a      	str	r2, [r7, #116]	; 0x74
 8008500:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008504:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8008508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800850c:	edc3 7a00 	vstr	s15, [r3]

        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 8008510:	edd7 7a02 	vldr	s15, [r7, #8]
 8008514:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800851c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 8008520:	edd7 7a03 	vldr	s15, [r7, #12]
 8008524:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800852c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 8008530:	edd7 7a03 	vldr	s15, [r7, #12]
 8008534:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800853c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 8008540:	edd7 7a02 	vldr	s15, [r7, #8]
 8008544:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800854c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 8008550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008552:	1d1a      	adds	r2, r3, #4
 8008554:	67ba      	str	r2, [r7, #120]	; 0x78
 8008556:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800855a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800855e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008562:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8008566:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008568:	1d1a      	adds	r2, r3, #4
 800856a:	67ba      	str	r2, [r7, #120]	; 0x78
 800856c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008570:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8008574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008578:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 800857c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800857e:	1d1a      	adds	r2, r3, #4
 8008580:	673a      	str	r2, [r7, #112]	; 0x70
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8008586:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008588:	1d1a      	adds	r2, r3, #4
 800858a:	673a      	str	r2, [r7, #112]	; 0x70
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	65bb      	str	r3, [r7, #88]	; 0x58

        m0 = t2[2] * twR;
 8008590:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008594:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800859c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 80085a0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80085a4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80085a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ac:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 80085b0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80085b4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80085b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085bc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 80085c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80085c4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80085c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085cc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *p2++ = m0 + m1;
 80085d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085d2:	1d1a      	adds	r2, r3, #4
 80085d4:	677a      	str	r2, [r7, #116]	; 0x74
 80085d6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80085da:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80085de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085e2:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 80085e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085e8:	1d1a      	adds	r2, r3, #4
 80085ea:	677a      	str	r2, [r7, #116]	; 0x74
 80085ec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80085f0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80085f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085f8:	edc3 7a00 	vstr	s15, [r3]

        m0 = t4[2] * twI;
 80085fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8008600:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008608:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 800860c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008610:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008618:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 800861c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008620:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008628:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 800862c:	edd7 7a04 	vldr	s15, [r7, #16]
 8008630:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008638:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 800863c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800863e:	1d1a      	adds	r2, r3, #4
 8008640:	67ba      	str	r2, [r7, #120]	; 0x78
 8008642:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008646:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800864a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800864e:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8008652:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008654:	1d1a      	adds	r2, r3, #4
 8008656:	67ba      	str	r2, [r7, #120]	; 0x78
 8008658:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800865c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8008660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008664:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- )
 8008668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800866a:	3b01      	subs	r3, #1
 800866c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800866e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008670:	2b00      	cmp	r3, #0
 8008672:	f47f ae45 	bne.w	8008300 <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8008676:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008678:	b299      	uxth	r1, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	685a      	ldr	r2, [r3, #4]
 800867e:	2302      	movs	r3, #2
 8008680:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8008682:	f000 fedb 	bl	800943c <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8008686:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008688:	b299      	uxth	r1, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685a      	ldr	r2, [r3, #4]
 800868e:	2302      	movs	r3, #2
 8008690:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8008692:	f000 fed3 	bl	800943c <arm_radix8_butterfly_f32>
}
 8008696:	bf00      	nop
 8008698:	3780      	adds	r7, #128	; 0x80
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b0ac      	sub	sp, #176	; 0xb0
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	881b      	ldrh	r3, [r3, #0]
 80086ac:	085b      	lsrs	r3, r3, #1
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 80086b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	4413      	add	r3, r2
 80086be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 80086c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80086cc:	4413      	add	r3, r2
 80086ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 80086d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80086dc:	4413      	add	r3, r2
 80086de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 80086e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80086ea:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 80086ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086f0:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 80086f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80086f6:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 80086f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80086fc:	3b04      	subs	r3, #4
 80086fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8008702:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008706:	3b04      	subs	r3, #4
 8008708:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 800870c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008710:	3b04      	subs	r3, #4
 8008712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8008716:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008720:	4413      	add	r3, r2
 8008722:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800872e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008732:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008736:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800873a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 800873e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008742:	085b      	lsrs	r3, r3, #1
 8008744:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 8008748:	2302      	movs	r3, #2
 800874a:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 800874c:	2304      	movs	r3, #4
 800874e:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8008750:	2306      	movs	r3, #6
 8008752:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	ed93 7a00 	vldr	s14, [r3]
 800875a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800875e:	edd3 7a00 	vldr	s15, [r3]
 8008762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008766:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	ed93 7a00 	vldr	s14, [r3]
 8008770:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008774:	edd3 7a00 	vldr	s15, [r3]
 8008778:	ee77 7a67 	vsub.f32	s15, s14, s15
 800877c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	3304      	adds	r3, #4
 8008784:	ed93 7a00 	vldr	s14, [r3]
 8008788:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800878c:	3304      	adds	r3, #4
 800878e:	edd3 7a00 	vldr	s15, [r3]
 8008792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008796:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	3304      	adds	r3, #4
 800879e:	ed93 7a00 	vldr	s14, [r3]
 80087a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087a6:	3304      	adds	r3, #4
 80087a8:	edd3 7a00 	vldr	s15, [r3]
 80087ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087b0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80087b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087b8:	3304      	adds	r3, #4
 80087ba:	ed93 7a00 	vldr	s14, [r3]
 80087be:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80087c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80087c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087ca:	3304      	adds	r3, #4
 80087cc:	edd3 7a00 	vldr	s15, [r3]
 80087d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087d4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80087d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087dc:	edd3 7a00 	vldr	s15, [r3]
 80087e0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80087e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80087e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087ec:	edd3 7a00 	vldr	s15, [r3]
 80087f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087f4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80087f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087fc:	edd3 7a00 	vldr	s15, [r3]
 8008800:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8008804:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008808:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800880c:	edd3 7a00 	vldr	s15, [r3]
 8008810:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008814:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8008818:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800881c:	3304      	adds	r3, #4
 800881e:	edd3 7a00 	vldr	s15, [r3]
 8008822:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008826:	ee37 7a67 	vsub.f32	s14, s14, s15
 800882a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800882e:	3304      	adds	r3, #4
 8008830:	edd3 7a00 	vldr	s15, [r3]
 8008834:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008838:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800883c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008840:	3304      	adds	r3, #4
 8008842:	edd3 7a00 	vldr	s15, [r3]
 8008846:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800884a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800884e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008852:	3304      	adds	r3, #4
 8008854:	edd3 7a00 	vldr	s15, [r3]
 8008858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800885c:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8008860:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008864:	ed93 7a00 	vldr	s14, [r3]
 8008868:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800886c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008870:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008874:	edd3 7a00 	vldr	s15, [r3]
 8008878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800887c:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8008880:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008884:	ed93 7a00 	vldr	s14, [r3]
 8008888:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800888c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008890:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008894:	edd3 7a00 	vldr	s15, [r3]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	1d1a      	adds	r2, r3, #4
 800889c:	603a      	str	r2, [r7, #0]
 800889e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088a2:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80088a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088aa:	3304      	adds	r3, #4
 80088ac:	ed93 7a00 	vldr	s14, [r3]
 80088b0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80088b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80088b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088bc:	3304      	adds	r3, #4
 80088be:	edd3 7a00 	vldr	s15, [r3]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	1d1a      	adds	r2, r3, #4
 80088c6:	603a      	str	r2, [r7, #0]
 80088c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088cc:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 80088d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088d4:	1d1a      	adds	r2, r3, #4
 80088d6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80088da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088dc:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 80088de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088e2:	1d1a      	adds	r2, r3, #4
 80088e4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80088e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ea:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 80088ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088f0:	1d1a      	adds	r2, r3, #4
 80088f2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80088f6:	69fa      	ldr	r2, [r7, #28]
 80088f8:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 80088fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088fe:	1d1a      	adds	r2, r3, #4
 8008900:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008904:	6a3a      	ldr	r2, [r7, #32]
 8008906:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8008908:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800890c:	1d1a      	adds	r2, r3, #4
 800890e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8008916:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800891a:	1d1a      	adds	r2, r3, #4
 800891c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8008924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800892c:	4413      	add	r3, r2
 800892e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8008932:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800893a:	4413      	add	r3, r2
 800893c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8008940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008948:	4413      	add	r3, r2
 800894a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 800894e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008952:	3b02      	subs	r3, #2
 8008954:	085b      	lsrs	r3, r3, #1
 8008956:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800895a:	e31a      	b.n	8008f92 <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	ed93 7a00 	vldr	s14, [r3]
 8008962:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008966:	edd3 7a00 	vldr	s15, [r3]
 800896a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800896e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	ed93 7a00 	vldr	s14, [r3]
 8008978:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800897c:	edd3 7a00 	vldr	s15, [r3]
 8008980:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008984:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	3304      	adds	r3, #4
 800898c:	ed93 7a00 	vldr	s14, [r3]
 8008990:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008994:	3304      	adds	r3, #4
 8008996:	edd3 7a00 	vldr	s15, [r3]
 800899a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800899e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	3304      	adds	r3, #4
 80089a6:	ed93 7a00 	vldr	s14, [r3]
 80089aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089ae:	3304      	adds	r3, #4
 80089b0:	edd3 7a00 	vldr	s15, [r3]
 80089b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089b8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 80089bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089c0:	3304      	adds	r3, #4
 80089c2:	ed93 7a00 	vldr	s14, [r3]
 80089c6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80089ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80089ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089d2:	3304      	adds	r3, #4
 80089d4:	edd3 7a00 	vldr	s15, [r3]
 80089d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089dc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 80089e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089e4:	edd3 7a00 	vldr	s15, [r3]
 80089e8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80089ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80089f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089f4:	edd3 7a00 	vldr	s15, [r3]
 80089f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089fc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8008a00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a04:	edd3 7a00 	vldr	s15, [r3]
 8008a08:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8008a0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a14:	edd3 7a00 	vldr	s15, [r3]
 8008a18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a1c:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8008a20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a24:	3304      	adds	r3, #4
 8008a26:	edd3 7a00 	vldr	s15, [r3]
 8008a2a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008a2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a36:	3304      	adds	r3, #4
 8008a38:	edd3 7a00 	vldr	s15, [r3]
 8008a3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a40:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8008a44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a48:	3304      	adds	r3, #4
 8008a4a:	edd3 7a00 	vldr	s15, [r3]
 8008a4e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008a52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a5a:	3304      	adds	r3, #4
 8008a5c:	edd3 7a00 	vldr	s15, [r3]
 8008a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a64:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8008a68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a6c:	ed93 7a00 	vldr	s14, [r3]
 8008a70:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008a74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a7c:	edd3 7a00 	vldr	s15, [r3]
 8008a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a84:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8008a88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a8c:	ed93 7a00 	vldr	s14, [r3]
 8008a90:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8008a94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a9c:	edd3 7a00 	vldr	s15, [r3]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	1d1a      	adds	r2, r3, #4
 8008aa4:	603a      	str	r2, [r7, #0]
 8008aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008aaa:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8008aae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ab2:	3304      	adds	r3, #4
 8008ab4:	ed93 7a00 	vldr	s14, [r3]
 8008ab8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008abc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	edd3 7a00 	vldr	s15, [r3]
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	1d1a      	adds	r2, r3, #4
 8008ace:	603a      	str	r2, [r7, #0]
 8008ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ad4:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8008ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008adc:	3b04      	subs	r3, #4
 8008ade:	ed93 7a00 	vldr	s14, [r3]
 8008ae2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ae6:	3b04      	subs	r3, #4
 8008ae8:	edd3 7a00 	vldr	s15, [r3]
 8008aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008af0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8008af4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008af8:	3b04      	subs	r3, #4
 8008afa:	ed93 7a00 	vldr	s14, [r3]
 8008afe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b02:	3b04      	subs	r3, #4
 8008b04:	edd3 7a00 	vldr	s15, [r3]
 8008b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b0c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8008b10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b14:	ed93 7a00 	vldr	s14, [r3]
 8008b18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b1c:	edd3 7a00 	vldr	s15, [r3]
 8008b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b24:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8008b28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b2c:	ed93 7a00 	vldr	s14, [r3]
 8008b30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b34:	edd3 7a00 	vldr	s15, [r3]
 8008b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b3c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8008b40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b44:	ed93 7a00 	vldr	s14, [r3]
 8008b48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b4c:	edd3 7a00 	vldr	s15, [r3]
 8008b50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008b54:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b5c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8008b60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b64:	ed93 7a00 	vldr	s14, [r3]
 8008b68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b6c:	edd3 7a00 	vldr	s15, [r3]
 8008b70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008b74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b78:	3b04      	subs	r3, #4
 8008b7a:	edd3 7a00 	vldr	s15, [r3]
 8008b7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008b82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b86:	3b04      	subs	r3, #4
 8008b88:	edd3 7a00 	vldr	s15, [r3]
 8008b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b90:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8008b94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b98:	3b04      	subs	r3, #4
 8008b9a:	edd3 7a00 	vldr	s15, [r3]
 8008b9e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008ba2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008ba6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008baa:	3b04      	subs	r3, #4
 8008bac:	edd3 7a00 	vldr	s15, [r3]
 8008bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008bb4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8008bb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008bbc:	edd3 7a00 	vldr	s15, [r3]
 8008bc0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8008bc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008bc8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008bcc:	edd3 7a00 	vldr	s15, [r3]
 8008bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008bd4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8008bd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008bdc:	ed93 7a00 	vldr	s14, [r3]
 8008be0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008be4:	edd3 7a00 	vldr	s15, [r3]
 8008be8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008bec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008bf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008bf4:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8008bf8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008bfc:	3b04      	subs	r3, #4
 8008bfe:	ed93 7a00 	vldr	s14, [r3]
 8008c02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c06:	3b04      	subs	r3, #4
 8008c08:	edd3 7a00 	vldr	s15, [r3]
 8008c0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008c10:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8008c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c18:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8008c1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c20:	ed93 7a00 	vldr	s14, [r3]
 8008c24:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8008c28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008c2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c30:	edd3 7a00 	vldr	s15, [r3]
 8008c34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c38:	1f1a      	subs	r2, r3, #4
 8008c3a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c42:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8008c46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c4a:	3b04      	subs	r3, #4
 8008c4c:	ed93 7a00 	vldr	s14, [r3]
 8008c50:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008c54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008c58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c5c:	3b04      	subs	r3, #4
 8008c5e:	edd3 7a00 	vldr	s15, [r3]
 8008c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c66:	1f1a      	subs	r2, r3, #4
 8008c68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c70:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 8008c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c78:	1d1a      	adds	r2, r3, #4
 8008c7a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 8008c82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c86:	1d1a      	adds	r2, r3, #4
 8008c88:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)

        // Top
        m0 = t2[0] * twR;
 8008c90:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008c94:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c9c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 8008ca0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008ca4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cac:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 8008cb0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008cb4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cbc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 8008cc0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008cc4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ccc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p2++ = m0 + m1;
 8008cd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008cd4:	1d1a      	adds	r2, r3, #4
 8008cd6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008cda:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008cde:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ce6:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8008cea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008cee:	1d1a      	adds	r2, r3, #4
 8008cf0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008cf4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008cf8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d00:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8008d04:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008d08:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d10:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 8008d14:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008d18:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d20:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 8008d24:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008d28:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d30:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 8008d34:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008d38:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d40:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd2-- = m0 - m1;
 8008d44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d48:	1f1a      	subs	r2, r3, #4
 8008d4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008d4e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008d52:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d5a:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 8008d5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d62:	1f1a      	subs	r2, r3, #4
 8008d64:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008d68:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008d6c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d74:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8008d78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 8008d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8008d88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008d90:	4413      	add	r3, r2
 8008d92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8008d96:	edd7 7a07 	vldr	s15, [r7, #28]
 8008d9a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008da2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8008da6:	edd7 7a08 	vldr	s15, [r7, #32]
 8008daa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008db2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 8008db6:	edd7 7a08 	vldr	s15, [r7, #32]
 8008dba:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dc2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 8008dc6:	edd7 7a07 	vldr	s15, [r7, #28]
 8008dca:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p3++ = m0 + m1;
 8008dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008dda:	1d1a      	adds	r2, r3, #4
 8008ddc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008de0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008de4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dec:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 8008df0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008df4:	1d1a      	adds	r2, r3, #4
 8008df6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008dfa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008dfe:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e06:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8008e0a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008e0e:	eef1 7a67 	vneg.f32	s15, s15
 8008e12:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e1a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 8008e1e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e22:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e2a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 8008e2e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e32:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e3a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 8008e3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008e42:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e4a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd3-- = m0 - m1;
 8008e4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008e52:	1f1a      	subs	r2, r3, #4
 8008e54:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e58:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008e5c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008e60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e64:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 8008e68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008e6c:	1f1a      	subs	r2, r3, #4
 8008e6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e72:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008e76:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e7e:	edc3 7a00 	vstr	s15, [r3]

        // COL 4
        twR = tw4[0];
 8008e82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8008e8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 8008e92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 8008ea0:	edd7 7a03 	vldr	s15, [r7, #12]
 8008ea4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eac:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 8008eb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8008eb4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ebc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 8008ec0:	edd7 7a04 	vldr	s15, [r7, #16]
 8008ec4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ecc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8008ed0:	edd7 7a03 	vldr	s15, [r7, #12]
 8008ed4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008edc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p4++ = m0 + m1;
 8008ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ee4:	1d1a      	adds	r2, r3, #4
 8008ee6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008eea:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008eee:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ef6:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8008efa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008efe:	1d1a      	adds	r2, r3, #4
 8008f00:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008f04:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008f08:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f10:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8008f14:	edd7 7a06 	vldr	s15, [r7, #24]
 8008f18:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f20:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8008f24:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f28:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f30:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8008f34:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f38:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f40:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8008f44:	edd7 7a06 	vldr	s15, [r7, #24]
 8008f48:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f50:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd4-- = m0 - m1;
 8008f54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f58:	1f1a      	subs	r2, r3, #4
 8008f5a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8008f5e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008f62:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f6a:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 8008f6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f72:	1f1a      	subs	r2, r3, #4
 8008f74:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8008f78:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008f7c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f84:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8008f88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f47f ace0 	bne.w	800895c <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	ed93 7a00 	vldr	s14, [r3]
 8008fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fa6:	edd3 7a00 	vldr	s15, [r3]
 8008faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fae:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	ed93 7a00 	vldr	s14, [r3]
 8008fb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fbc:	edd3 7a00 	vldr	s15, [r3]
 8008fc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008fc4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	3304      	adds	r3, #4
 8008fcc:	ed93 7a00 	vldr	s14, [r3]
 8008fd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fd4:	3304      	adds	r3, #4
 8008fd6:	edd3 7a00 	vldr	s15, [r3]
 8008fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fde:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	3304      	adds	r3, #4
 8008fe6:	ed93 7a00 	vldr	s14, [r3]
 8008fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fee:	3304      	adds	r3, #4
 8008ff0:	edd3 7a00 	vldr	s15, [r3]
 8008ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ff8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8008ffc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009000:	3304      	adds	r3, #4
 8009002:	ed93 7a00 	vldr	s14, [r3]
 8009006:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800900a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800900e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009012:	3304      	adds	r3, #4
 8009014:	edd3 7a00 	vldr	s15, [r3]
 8009018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800901c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8009020:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009024:	edd3 7a00 	vldr	s15, [r3]
 8009028:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800902c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009030:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009034:	edd3 7a00 	vldr	s15, [r3]
 8009038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800903c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8009040:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009044:	edd3 7a00 	vldr	s15, [r3]
 8009048:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800904c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009050:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009054:	edd3 7a00 	vldr	s15, [r3]
 8009058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800905c:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8009060:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009064:	3304      	adds	r3, #4
 8009066:	edd3 7a00 	vldr	s15, [r3]
 800906a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800906e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009072:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009076:	3304      	adds	r3, #4
 8009078:	edd3 7a00 	vldr	s15, [r3]
 800907c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009080:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8009084:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009088:	3304      	adds	r3, #4
 800908a:	edd3 7a00 	vldr	s15, [r3]
 800908e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009092:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009096:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800909a:	3304      	adds	r3, #4
 800909c:	edd3 7a00 	vldr	s15, [r3]
 80090a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090a4:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80090a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090ac:	ed93 7a00 	vldr	s14, [r3]
 80090b0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80090b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80090b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090bc:	edd3 7a00 	vldr	s15, [r3]
 80090c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090c4:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80090c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090cc:	ed93 7a00 	vldr	s14, [r3]
 80090d0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80090d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80090d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090dc:	edd3 7a00 	vldr	s15, [r3]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	1d1a      	adds	r2, r3, #4
 80090e4:	603a      	str	r2, [r7, #0]
 80090e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090ea:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80090ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090f2:	3304      	adds	r3, #4
 80090f4:	ed93 7a00 	vldr	s14, [r3]
 80090f8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80090fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009100:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009104:	3304      	adds	r3, #4
 8009106:	edd3 7a00 	vldr	s15, [r3]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	1d1a      	adds	r2, r3, #4
 800910e:	603a      	str	r2, [r7, #0]
 8009110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009114:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8009118:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8009120:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8009128:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800912c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009134:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8009138:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800913c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009144:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8009148:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800914c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009154:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8009158:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800915c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009164:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8009168:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800916c:	1d1a      	adds	r2, r3, #4
 800916e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009172:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009176:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800917a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800917e:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8009182:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009186:	1d1a      	adds	r2, r3, #4
 8009188:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800918c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009190:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009194:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009198:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 800919c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 80091a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 80091ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80091b0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80091b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091b8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 80091bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80091c0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80091c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091c8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 80091cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80091d0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80091d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091d8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 80091dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80091e0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80091e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 80091ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091f0:	1d1a      	adds	r2, r3, #4
 80091f2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80091f6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80091fa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80091fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009202:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8009206:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800920a:	1d1a      	adds	r2, r3, #4
 800920c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009210:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009214:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800921c:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 8009220:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8009228:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8009230:	edd7 7a03 	vldr	s15, [r7, #12]
 8009234:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800923c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8009240:	edd7 7a04 	vldr	s15, [r7, #16]
 8009244:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800924c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8009250:	edd7 7a04 	vldr	s15, [r7, #16]
 8009254:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800925c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8009260:	edd7 7a03 	vldr	s15, [r7, #12]
 8009264:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800926c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8009270:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009274:	1d1a      	adds	r2, r3, #4
 8009276:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800927a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800927e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009286:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 800928a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800928e:	1d1a      	adds	r2, r3, #4
 8009290:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009294:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009298:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800929c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092a0:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4U);
 80092a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80092a8:	b299      	uxth	r1, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	685a      	ldr	r2, [r3, #4]
 80092ae:	2304      	movs	r3, #4
 80092b0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80092b2:	f000 f8c3 	bl	800943c <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4U);
 80092b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80092ba:	b299      	uxth	r1, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685a      	ldr	r2, [r3, #4]
 80092c0:	2304      	movs	r3, #4
 80092c2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80092c4:	f000 f8ba 	bl	800943c <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4U);
 80092c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80092cc:	b299      	uxth	r1, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	685a      	ldr	r2, [r3, #4]
 80092d2:	2304      	movs	r3, #4
 80092d4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80092d6:	f000 f8b1 	bl	800943c <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4U);
 80092da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80092de:	b299      	uxth	r1, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685a      	ldr	r2, [r3, #4]
 80092e4:	2304      	movs	r3, #4
 80092e6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80092e8:	f000 f8a8 	bl	800943c <arm_radix8_butterfly_f32>
}
 80092ec:	bf00      	nop
 80092ee:	37b0      	adds	r7, #176	; 0xb0
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <arm_cfft_f32>:
void arm_cfft_f32(
    const arm_cfft_instance_f32 * S,
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b088      	sub	sp, #32
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	4611      	mov	r1, r2
 8009300:	461a      	mov	r2, r3
 8009302:	460b      	mov	r3, r1
 8009304:	71fb      	strb	r3, [r7, #7]
 8009306:	4613      	mov	r3, r2
 8009308:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	881b      	ldrh	r3, [r3, #0]
 800930e:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if (ifftFlag == 1U)
 8009310:	79fb      	ldrb	r3, [r7, #7]
 8009312:	2b01      	cmp	r3, #1
 8009314:	d117      	bne.n	8009346 <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	3304      	adds	r3, #4
 800931a:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 800931c:	2300      	movs	r3, #0
 800931e:	61fb      	str	r3, [r7, #28]
 8009320:	e00d      	b.n	800933e <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	edd3 7a00 	vldr	s15, [r3]
 8009328:	eef1 7a67 	vneg.f32	s15, s15
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	3308      	adds	r3, #8
 8009336:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	3301      	adds	r3, #1
 800933c:	61fb      	str	r3, [r7, #28]
 800933e:	69fa      	ldr	r2, [r7, #28]
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	429a      	cmp	r2, r3
 8009344:	d3ed      	bcc.n	8009322 <arm_cfft_f32+0x2e>
        }
    }

    switch (L)
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800934c:	d024      	beq.n	8009398 <arm_cfft_f32+0xa4>
 800934e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009352:	d80b      	bhi.n	800936c <arm_cfft_f32+0x78>
 8009354:	2b20      	cmp	r3, #32
 8009356:	d01f      	beq.n	8009398 <arm_cfft_f32+0xa4>
 8009358:	2b20      	cmp	r3, #32
 800935a:	d802      	bhi.n	8009362 <arm_cfft_f32+0x6e>
 800935c:	2b10      	cmp	r3, #16
 800935e:	d016      	beq.n	800938e <arm_cfft_f32+0x9a>
 8009360:	e028      	b.n	80093b4 <arm_cfft_f32+0xc0>
 8009362:	2b40      	cmp	r3, #64	; 0x40
 8009364:	d01d      	beq.n	80093a2 <arm_cfft_f32+0xae>
 8009366:	2b80      	cmp	r3, #128	; 0x80
 8009368:	d011      	beq.n	800938e <arm_cfft_f32+0x9a>
 800936a:	e023      	b.n	80093b4 <arm_cfft_f32+0xc0>
 800936c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009370:	d00d      	beq.n	800938e <arm_cfft_f32+0x9a>
 8009372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009376:	d803      	bhi.n	8009380 <arm_cfft_f32+0x8c>
 8009378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800937c:	d011      	beq.n	80093a2 <arm_cfft_f32+0xae>
 800937e:	e019      	b.n	80093b4 <arm_cfft_f32+0xc0>
 8009380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009384:	d008      	beq.n	8009398 <arm_cfft_f32+0xa4>
 8009386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800938a:	d00a      	beq.n	80093a2 <arm_cfft_f32+0xae>
 800938c:	e012      	b.n	80093b4 <arm_cfft_f32+0xc0>
    {
    case 16:
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800938e:	68b9      	ldr	r1, [r7, #8]
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f7fe ff90 	bl	80082b6 <arm_cfft_radix8by2_f32>
        break;
 8009396:	e00d      	b.n	80093b4 <arm_cfft_f32+0xc0>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8009398:	68b9      	ldr	r1, [r7, #8]
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f7ff f97f 	bl	800869e <arm_cfft_radix8by4_f32>
        break;
 80093a0:	e008      	b.n	80093b4 <arm_cfft_f32+0xc0>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	b299      	uxth	r1, r3
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	685a      	ldr	r2, [r3, #4]
 80093aa:	2301      	movs	r3, #1
 80093ac:	68b8      	ldr	r0, [r7, #8]
 80093ae:	f000 f845 	bl	800943c <arm_radix8_butterfly_f32>
        break;
 80093b2:	bf00      	nop
    }

    if ( bitReverseFlag )
 80093b4:	79bb      	ldrb	r3, [r7, #6]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d007      	beq.n	80093ca <arm_cfft_f32+0xd6>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	8999      	ldrh	r1, [r3, #12]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	461a      	mov	r2, r3
 80093c4:	68b8      	ldr	r0, [r7, #8]
 80093c6:	f7f6 ff1f 	bl	8000208 <arm_bitreversal_32>

    if (ifftFlag == 1U)
 80093ca:	79fb      	ldrb	r3, [r7, #7]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d130      	bne.n	8009432 <arm_cfft_f32+0x13e>
    {
        invL = 1.0f/(float32_t)L;
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	ee07 3a90 	vmov	s15, r3
 80093d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80093da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093e2:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 80093ea:	2300      	movs	r3, #0
 80093ec:	61fb      	str	r3, [r7, #28]
 80093ee:	e01c      	b.n	800942a <arm_cfft_f32+0x136>
        {
            *pSrc++ *=   invL ;
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	1d1a      	adds	r2, r3, #4
 80093f4:	61ba      	str	r2, [r7, #24]
 80093f6:	ed93 7a00 	vldr	s14, [r3]
 80093fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80093fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009402:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	edd3 7a00 	vldr	s15, [r3]
 800940c:	eeb1 7a67 	vneg.f32	s14, s15
 8009410:	edd7 7a04 	vldr	s15, [r7, #16]
 8009414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	3304      	adds	r3, #4
 8009422:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	3301      	adds	r3, #1
 8009428:	61fb      	str	r3, [r7, #28]
 800942a:	69fa      	ldr	r2, [r7, #28]
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	429a      	cmp	r2, r3
 8009430:	d3de      	bcc.n	80093f0 <arm_cfft_f32+0xfc>
        }
    }
}
 8009432:	bf00      	nop
 8009434:	3720      	adds	r7, #32
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
	...

0800943c <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 800943c:	b480      	push	{r7}
 800943e:	b0bd      	sub	sp, #244	; 0xf4
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	607a      	str	r2, [r7, #4]
 8009446:	461a      	mov	r2, r3
 8009448:	460b      	mov	r3, r1
 800944a:	817b      	strh	r3, [r7, #10]
 800944c:	4613      	mov	r3, r2
 800944e:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8009450:	4b09      	ldr	r3, [pc, #36]	; (8009478 <arm_radix8_butterfly_f32+0x3c>)
 8009452:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8009456:	897b      	ldrh	r3, [r7, #10]
 8009458:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 800945c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009460:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8009464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009468:	08db      	lsrs	r3, r3, #3
 800946a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009474:	e002      	b.n	800947c <arm_radix8_butterfly_f32+0x40>
 8009476:	bf00      	nop
 8009478:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 800947c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8009480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009484:	4413      	add	r3, r2
 8009486:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 800948a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800948e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009492:	4413      	add	r3, r2
 8009494:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8009498:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800949c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094a0:	4413      	add	r3, r2
 80094a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 80094a6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80094aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ae:	4413      	add	r3, r2
 80094b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 80094b4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80094b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094bc:	4413      	add	r3, r2
 80094be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 80094c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80094c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ca:	4413      	add	r3, r2
 80094cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 80094d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80094d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094d8:	4413      	add	r3, r2
 80094da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80094de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80094e2:	00db      	lsls	r3, r3, #3
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	4413      	add	r3, r2
 80094e8:	ed93 7a00 	vldr	s14, [r3]
 80094ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094f0:	00db      	lsls	r3, r3, #3
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	4413      	add	r3, r2
 80094f6:	edd3 7a00 	vldr	s15, [r3]
 80094fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094fe:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8009502:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009506:	00db      	lsls	r3, r3, #3
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	4413      	add	r3, r2
 800950c:	ed93 7a00 	vldr	s14, [r3]
 8009510:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009514:	00db      	lsls	r3, r3, #3
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	4413      	add	r3, r2
 800951a:	edd3 7a00 	vldr	s15, [r3]
 800951e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009522:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8009526:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800952a:	00db      	lsls	r3, r3, #3
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	4413      	add	r3, r2
 8009530:	ed93 7a00 	vldr	s14, [r3]
 8009534:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009538:	00db      	lsls	r3, r3, #3
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	4413      	add	r3, r2
 800953e:	edd3 7a00 	vldr	s15, [r3]
 8009542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009546:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800954a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800954e:	00db      	lsls	r3, r3, #3
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	4413      	add	r3, r2
 8009554:	ed93 7a00 	vldr	s14, [r3]
 8009558:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800955c:	00db      	lsls	r3, r3, #3
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	4413      	add	r3, r2
 8009562:	edd3 7a00 	vldr	s15, [r3]
 8009566:	ee77 7a67 	vsub.f32	s15, s14, s15
 800956a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800956e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009572:	00db      	lsls	r3, r3, #3
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	4413      	add	r3, r2
 8009578:	ed93 7a00 	vldr	s14, [r3]
 800957c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009580:	00db      	lsls	r3, r3, #3
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	4413      	add	r3, r2
 8009586:	edd3 7a00 	vldr	s15, [r3]
 800958a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800958e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8009592:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009596:	00db      	lsls	r3, r3, #3
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	4413      	add	r3, r2
 800959c:	ed93 7a00 	vldr	s14, [r3]
 80095a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80095a4:	00db      	lsls	r3, r3, #3
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	4413      	add	r3, r2
 80095aa:	edd3 7a00 	vldr	s15, [r3]
 80095ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095b2:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80095b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80095ba:	00db      	lsls	r3, r3, #3
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	4413      	add	r3, r2
 80095c0:	ed93 7a00 	vldr	s14, [r3]
 80095c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80095c8:	00db      	lsls	r3, r3, #3
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	4413      	add	r3, r2
 80095ce:	edd3 7a00 	vldr	s15, [r3]
 80095d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095d6:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80095da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80095de:	00db      	lsls	r3, r3, #3
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	4413      	add	r3, r2
 80095e4:	ed93 7a00 	vldr	s14, [r3]
 80095e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80095ec:	00db      	lsls	r3, r3, #3
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	4413      	add	r3, r2
 80095f2:	edd3 7a00 	vldr	s15, [r3]
 80095f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095fa:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 80095fe:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009602:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8009606:	ee77 7a67 	vsub.f32	s15, s14, s15
 800960a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 800960e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009612:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8009616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800961a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 800961e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8009622:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8009626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800962a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 800962e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8009632:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8009636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800963a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 800963e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009642:	00db      	lsls	r3, r3, #3
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	4413      	add	r3, r2
 8009648:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800964c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8009650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009654:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8009658:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800965c:	00db      	lsls	r3, r3, #3
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	4413      	add	r3, r2
 8009662:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009666:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800966a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800966e:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8009672:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009676:	00db      	lsls	r3, r3, #3
 8009678:	3304      	adds	r3, #4
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	4413      	add	r3, r2
 800967e:	ed93 7a00 	vldr	s14, [r3]
 8009682:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009686:	00db      	lsls	r3, r3, #3
 8009688:	3304      	adds	r3, #4
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	4413      	add	r3, r2
 800968e:	edd3 7a00 	vldr	s15, [r3]
 8009692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009696:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800969a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800969e:	00db      	lsls	r3, r3, #3
 80096a0:	3304      	adds	r3, #4
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	4413      	add	r3, r2
 80096a6:	ed93 7a00 	vldr	s14, [r3]
 80096aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096ae:	00db      	lsls	r3, r3, #3
 80096b0:	3304      	adds	r3, #4
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	4413      	add	r3, r2
 80096b6:	edd3 7a00 	vldr	s15, [r3]
 80096ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096be:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80096c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80096c6:	00db      	lsls	r3, r3, #3
 80096c8:	3304      	adds	r3, #4
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	4413      	add	r3, r2
 80096ce:	ed93 7a00 	vldr	s14, [r3]
 80096d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80096d6:	00db      	lsls	r3, r3, #3
 80096d8:	3304      	adds	r3, #4
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	4413      	add	r3, r2
 80096de:	edd3 7a00 	vldr	s15, [r3]
 80096e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096e6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80096ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80096ee:	00db      	lsls	r3, r3, #3
 80096f0:	3304      	adds	r3, #4
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	4413      	add	r3, r2
 80096f6:	ed93 7a00 	vldr	s14, [r3]
 80096fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80096fe:	00db      	lsls	r3, r3, #3
 8009700:	3304      	adds	r3, #4
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	4413      	add	r3, r2
 8009706:	edd3 7a00 	vldr	s15, [r3]
 800970a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800970e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8009712:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009716:	00db      	lsls	r3, r3, #3
 8009718:	3304      	adds	r3, #4
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	4413      	add	r3, r2
 800971e:	ed93 7a00 	vldr	s14, [r3]
 8009722:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009726:	00db      	lsls	r3, r3, #3
 8009728:	3304      	adds	r3, #4
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	4413      	add	r3, r2
 800972e:	edd3 7a00 	vldr	s15, [r3]
 8009732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009736:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800973a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800973e:	00db      	lsls	r3, r3, #3
 8009740:	3304      	adds	r3, #4
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	4413      	add	r3, r2
 8009746:	ed93 7a00 	vldr	s14, [r3]
 800974a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800974e:	00db      	lsls	r3, r3, #3
 8009750:	3304      	adds	r3, #4
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	4413      	add	r3, r2
 8009756:	edd3 7a00 	vldr	s15, [r3]
 800975a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800975e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8009762:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009766:	00db      	lsls	r3, r3, #3
 8009768:	3304      	adds	r3, #4
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	4413      	add	r3, r2
 800976e:	ed93 7a00 	vldr	s14, [r3]
 8009772:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009776:	00db      	lsls	r3, r3, #3
 8009778:	3304      	adds	r3, #4
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	4413      	add	r3, r2
 800977e:	edd3 7a00 	vldr	s15, [r3]
 8009782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009786:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800978a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800978e:	00db      	lsls	r3, r3, #3
 8009790:	3304      	adds	r3, #4
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	4413      	add	r3, r2
 8009796:	ed93 7a00 	vldr	s14, [r3]
 800979a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800979e:	00db      	lsls	r3, r3, #3
 80097a0:	3304      	adds	r3, #4
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	4413      	add	r3, r2
 80097a6:	edd3 7a00 	vldr	s15, [r3]
 80097aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097ae:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 80097b2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80097b6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80097ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097be:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 80097c2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80097c6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80097ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097ce:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 80097d2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80097d6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80097da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097de:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 80097e2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80097e6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80097ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097ee:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 80097f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80097f6:	00db      	lsls	r3, r3, #3
 80097f8:	3304      	adds	r3, #4
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	4413      	add	r3, r2
 80097fe:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009802:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8009806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800980a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 800980e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009812:	00db      	lsls	r3, r3, #3
 8009814:	3304      	adds	r3, #4
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	4413      	add	r3, r2
 800981a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800981e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8009822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009826:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800982a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800982e:	00db      	lsls	r3, r3, #3
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	4413      	add	r3, r2
 8009834:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8009838:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800983c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009840:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8009844:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009848:	00db      	lsls	r3, r3, #3
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	4413      	add	r3, r2
 800984e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8009852:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8009856:	ee77 7a67 	vsub.f32	s15, s14, s15
 800985a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800985e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009862:	00db      	lsls	r3, r3, #3
 8009864:	3304      	adds	r3, #4
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	4413      	add	r3, r2
 800986a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800986e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8009872:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009876:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 800987a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800987e:	00db      	lsls	r3, r3, #3
 8009880:	3304      	adds	r3, #4
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	4413      	add	r3, r2
 8009886:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800988a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800988e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009892:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8009896:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800989a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800989e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098a2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80098a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098aa:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 80098ae:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80098b2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80098b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098ba:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80098be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098c2:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 80098c6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80098ca:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80098ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098d2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80098d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098da:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 80098de:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80098e2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80098e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098ea:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80098ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098f2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 80098f6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80098fa:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80098fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009902:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8009906:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800990a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800990e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009912:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8009916:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800991a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800991e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009922:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8009926:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800992a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800992e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009932:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8009936:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800993a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800993e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009942:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8009946:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800994a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800994e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009952:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8009956:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800995a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800995e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009962:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8009966:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800996a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800996e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009972:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8009976:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800997a:	00db      	lsls	r3, r3, #3
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	4413      	add	r3, r2
 8009980:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8009984:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8009988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800998c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8009990:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009994:	00db      	lsls	r3, r3, #3
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	4413      	add	r3, r2
 800999a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800999e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80099a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099a6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 80099aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80099ae:	00db      	lsls	r3, r3, #3
 80099b0:	68fa      	ldr	r2, [r7, #12]
 80099b2:	4413      	add	r3, r2
 80099b4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80099b8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80099bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099c0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 80099c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80099c8:	00db      	lsls	r3, r3, #3
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	4413      	add	r3, r2
 80099ce:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80099d2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80099d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099da:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 80099de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80099e2:	00db      	lsls	r3, r3, #3
 80099e4:	3304      	adds	r3, #4
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	4413      	add	r3, r2
 80099ea:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80099ee:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80099f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099f6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 80099fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80099fe:	00db      	lsls	r3, r3, #3
 8009a00:	3304      	adds	r3, #4
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	4413      	add	r3, r2
 8009a06:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8009a0a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8009a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a12:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8009a16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009a1a:	00db      	lsls	r3, r3, #3
 8009a1c:	3304      	adds	r3, #4
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	4413      	add	r3, r2
 8009a22:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8009a26:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8009a2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a2e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8009a32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009a36:	00db      	lsls	r3, r3, #3
 8009a38:	3304      	adds	r3, #4
 8009a3a:	68fa      	ldr	r2, [r7, #12]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8009a42:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8009a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a4a:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8009a4e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8009a52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a56:	4413      	add	r3, r2
 8009a58:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8009a5c:	897b      	ldrh	r3, [r7, #10]
 8009a5e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8009a62:	429a      	cmp	r2, r3
 8009a64:	f4ff ad0a 	bcc.w	800947c <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8009a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a6c:	2b07      	cmp	r3, #7
 8009a6e:	f240 84e3 	bls.w	800a438 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8009a72:	2300      	movs	r3, #0
 8009a74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8009a7e:	893b      	ldrh	r3, [r7, #8]
 8009a80:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009a84:	4413      	add	r3, r2
 8009a86:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8009a88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8009a8e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009a92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a94:	4413      	add	r3, r2
 8009a96:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8009a98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009a9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a9c:	4413      	add	r3, r2
 8009a9e:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8009aa0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009aa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009aa4:	4413      	add	r3, r2
 8009aa6:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8009aa8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009aaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009aac:	4413      	add	r3, r2
 8009aae:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8009ab0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ab2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009ab4:	4413      	add	r3, r2
 8009ab6:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8009ab8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009aba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009abc:	4413      	add	r3, r2
 8009abe:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8009ac0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009ac4:	00db      	lsls	r3, r3, #3
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	4413      	add	r3, r2
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8009ace:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ad0:	00db      	lsls	r3, r3, #3
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8009ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009adc:	00db      	lsls	r3, r3, #3
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8009ae6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ae8:	00db      	lsls	r3, r3, #3
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	4413      	add	r3, r2
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8009af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009af4:	00db      	lsls	r3, r3, #3
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	4413      	add	r3, r2
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8009afe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b00:	00db      	lsls	r3, r3, #3
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	4413      	add	r3, r2
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8009b0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b0c:	00db      	lsls	r3, r3, #3
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	4413      	add	r3, r2
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8009b16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009b1a:	00db      	lsls	r3, r3, #3
 8009b1c:	3304      	adds	r3, #4
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	4413      	add	r3, r2
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8009b26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b28:	00db      	lsls	r3, r3, #3
 8009b2a:	3304      	adds	r3, #4
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	4413      	add	r3, r2
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8009b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b36:	00db      	lsls	r3, r3, #3
 8009b38:	3304      	adds	r3, #4
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8009b42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b44:	00db      	lsls	r3, r3, #3
 8009b46:	3304      	adds	r3, #4
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8009b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b52:	00db      	lsls	r3, r3, #3
 8009b54:	3304      	adds	r3, #4
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	4413      	add	r3, r2
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8009b5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b60:	00db      	lsls	r3, r3, #3
 8009b62:	3304      	adds	r3, #4
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	4413      	add	r3, r2
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8009b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b6e:	00db      	lsls	r3, r3, #3
 8009b70:	3304      	adds	r3, #4
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	4413      	add	r3, r2
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8009b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8009b82:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8009b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b8a:	4413      	add	r3, r2
 8009b8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8009b90:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8009b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b98:	4413      	add	r3, r2
 8009b9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8009b9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8009bac:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8009bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8009bba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8009bc8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8009bd6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bde:	4413      	add	r3, r2
 8009be0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8009be4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009be8:	00db      	lsls	r3, r3, #3
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	4413      	add	r3, r2
 8009bee:	ed93 7a00 	vldr	s14, [r3]
 8009bf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009bf6:	00db      	lsls	r3, r3, #3
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	edd3 7a00 	vldr	s15, [r3]
 8009c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c04:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8009c08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009c0c:	00db      	lsls	r3, r3, #3
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	4413      	add	r3, r2
 8009c12:	ed93 7a00 	vldr	s14, [r3]
 8009c16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c1a:	00db      	lsls	r3, r3, #3
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	4413      	add	r3, r2
 8009c20:	edd3 7a00 	vldr	s15, [r3]
 8009c24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c28:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8009c2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009c30:	00db      	lsls	r3, r3, #3
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	4413      	add	r3, r2
 8009c36:	ed93 7a00 	vldr	s14, [r3]
 8009c3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009c3e:	00db      	lsls	r3, r3, #3
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	4413      	add	r3, r2
 8009c44:	edd3 7a00 	vldr	s15, [r3]
 8009c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c4c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8009c50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009c54:	00db      	lsls	r3, r3, #3
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	4413      	add	r3, r2
 8009c5a:	ed93 7a00 	vldr	s14, [r3]
 8009c5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009c62:	00db      	lsls	r3, r3, #3
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	4413      	add	r3, r2
 8009c68:	edd3 7a00 	vldr	s15, [r3]
 8009c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c70:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8009c74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009c78:	00db      	lsls	r3, r3, #3
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	ed93 7a00 	vldr	s14, [r3]
 8009c82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009c86:	00db      	lsls	r3, r3, #3
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	edd3 7a00 	vldr	s15, [r3]
 8009c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c94:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8009c98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009c9c:	00db      	lsls	r3, r3, #3
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	ed93 7a00 	vldr	s14, [r3]
 8009ca6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009caa:	00db      	lsls	r3, r3, #3
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	4413      	add	r3, r2
 8009cb0:	edd3 7a00 	vldr	s15, [r3]
 8009cb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009cb8:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8009cbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009cc0:	00db      	lsls	r3, r3, #3
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	ed93 7a00 	vldr	s14, [r3]
 8009cca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009cce:	00db      	lsls	r3, r3, #3
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	edd3 7a00 	vldr	s15, [r3]
 8009cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cdc:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8009ce0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009ce4:	00db      	lsls	r3, r3, #3
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	4413      	add	r3, r2
 8009cea:	ed93 7a00 	vldr	s14, [r3]
 8009cee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009cf2:	00db      	lsls	r3, r3, #3
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	edd3 7a00 	vldr	s15, [r3]
 8009cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d00:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8009d04:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009d08:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8009d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d10:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8009d14:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009d18:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8009d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d20:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8009d24:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8009d28:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8009d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d30:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8009d34:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8009d38:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8009d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d40:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8009d44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009d48:	00db      	lsls	r3, r3, #3
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009d52:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8009d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d5a:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8009d5e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009d62:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8009d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d6a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8009d6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009d72:	00db      	lsls	r3, r3, #3
 8009d74:	3304      	adds	r3, #4
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	4413      	add	r3, r2
 8009d7a:	ed93 7a00 	vldr	s14, [r3]
 8009d7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d82:	00db      	lsls	r3, r3, #3
 8009d84:	3304      	adds	r3, #4
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	4413      	add	r3, r2
 8009d8a:	edd3 7a00 	vldr	s15, [r3]
 8009d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d92:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8009d96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009d9a:	00db      	lsls	r3, r3, #3
 8009d9c:	3304      	adds	r3, #4
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	4413      	add	r3, r2
 8009da2:	ed93 7a00 	vldr	s14, [r3]
 8009da6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009daa:	00db      	lsls	r3, r3, #3
 8009dac:	3304      	adds	r3, #4
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	4413      	add	r3, r2
 8009db2:	edd3 7a00 	vldr	s15, [r3]
 8009db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009dba:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8009dbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009dc2:	00db      	lsls	r3, r3, #3
 8009dc4:	3304      	adds	r3, #4
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	4413      	add	r3, r2
 8009dca:	ed93 7a00 	vldr	s14, [r3]
 8009dce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009dd2:	00db      	lsls	r3, r3, #3
 8009dd4:	3304      	adds	r3, #4
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	4413      	add	r3, r2
 8009dda:	edd3 7a00 	vldr	s15, [r3]
 8009dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009de2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8009de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009dea:	00db      	lsls	r3, r3, #3
 8009dec:	3304      	adds	r3, #4
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	4413      	add	r3, r2
 8009df2:	ed93 7a00 	vldr	s14, [r3]
 8009df6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009dfa:	00db      	lsls	r3, r3, #3
 8009dfc:	3304      	adds	r3, #4
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	4413      	add	r3, r2
 8009e02:	edd3 7a00 	vldr	s15, [r3]
 8009e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e0a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8009e0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009e12:	00db      	lsls	r3, r3, #3
 8009e14:	3304      	adds	r3, #4
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	4413      	add	r3, r2
 8009e1a:	ed93 7a00 	vldr	s14, [r3]
 8009e1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e22:	00db      	lsls	r3, r3, #3
 8009e24:	3304      	adds	r3, #4
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	4413      	add	r3, r2
 8009e2a:	edd3 7a00 	vldr	s15, [r3]
 8009e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e32:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8009e36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009e3a:	00db      	lsls	r3, r3, #3
 8009e3c:	3304      	adds	r3, #4
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	4413      	add	r3, r2
 8009e42:	ed93 7a00 	vldr	s14, [r3]
 8009e46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e4a:	00db      	lsls	r3, r3, #3
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	4413      	add	r3, r2
 8009e52:	edd3 7a00 	vldr	s15, [r3]
 8009e56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e5a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8009e5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e62:	00db      	lsls	r3, r3, #3
 8009e64:	3304      	adds	r3, #4
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	4413      	add	r3, r2
 8009e6a:	ed93 7a00 	vldr	s14, [r3]
 8009e6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009e72:	00db      	lsls	r3, r3, #3
 8009e74:	3304      	adds	r3, #4
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	4413      	add	r3, r2
 8009e7a:	edd3 7a00 	vldr	s15, [r3]
 8009e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e82:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8009e86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e8a:	00db      	lsls	r3, r3, #3
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	4413      	add	r3, r2
 8009e92:	ed93 7a00 	vldr	s14, [r3]
 8009e96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009e9a:	00db      	lsls	r3, r3, #3
 8009e9c:	3304      	adds	r3, #4
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	edd3 7a00 	vldr	s15, [r3]
 8009ea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009eaa:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8009eae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009eb2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8009eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009eba:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8009ebe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009ec2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8009ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009eca:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8009ece:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8009ed2:	edd7 7a08 	vldr	s15, [r7, #32]
 8009ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009eda:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8009ede:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8009ee2:	edd7 7a08 	vldr	s15, [r7, #32]
 8009ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009eea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8009eee:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8009ef2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8009ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009efa:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8009efe:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8009f02:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8009f06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f0a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8009f0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009f12:	00db      	lsls	r3, r3, #3
 8009f14:	3304      	adds	r3, #4
 8009f16:	68fa      	ldr	r2, [r7, #12]
 8009f18:	4413      	add	r3, r2
 8009f1a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009f1e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f26:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8009f2a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009f2e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f36:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8009f3a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8009f3e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8009f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f46:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8009f4a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8009f4e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8009f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f56:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8009f5a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009f5e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8009f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f66:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8009f6a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009f6e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f76:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8009f7a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009f7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f86:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8009f8a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009f8e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8009f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f96:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8009f9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f9e:	00db      	lsls	r3, r3, #3
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	ed97 7a07 	vldr	s14, [r7, #28]
 8009fa8:	edd7 7a06 	vldr	s15, [r7, #24]
 8009fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009fb0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8009fb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009fb8:	00db      	lsls	r3, r3, #3
 8009fba:	3304      	adds	r3, #4
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	ed97 7a05 	vldr	s14, [r7, #20]
 8009fc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8009fc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fcc:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8009fd0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009fd4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fdc:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8009fe0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009fe4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fec:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8009ff0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009ff4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ffc:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 800a000:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a004:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a00c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800a010:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a014:	00db      	lsls	r3, r3, #3
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	4413      	add	r3, r2
 800a01a:	ed97 7a07 	vldr	s14, [r7, #28]
 800a01e:	edd7 7a06 	vldr	s15, [r7, #24]
 800a022:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a026:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800a02a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a02e:	00db      	lsls	r3, r3, #3
 800a030:	3304      	adds	r3, #4
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	4413      	add	r3, r2
 800a036:	ed97 7a05 	vldr	s14, [r7, #20]
 800a03a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a03e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a042:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 800a046:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a04a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800a04e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a052:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800a056:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800a05a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a062:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800a066:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a06a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a06e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a072:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800a076:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800a07a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800a07e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a082:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800a086:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a08a:	00db      	lsls	r3, r3, #3
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	4413      	add	r3, r2
 800a090:	ed97 7a07 	vldr	s14, [r7, #28]
 800a094:	edd7 7a06 	vldr	s15, [r7, #24]
 800a098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a09c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800a0a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a0a4:	00db      	lsls	r3, r3, #3
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	ed97 7a05 	vldr	s14, [r7, #20]
 800a0b0:	edd7 7a04 	vldr	s15, [r7, #16]
 800a0b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0b8:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 800a0bc:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800a0c0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a0c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0c8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a0cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0d0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 800a0d4:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800a0d8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a0dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0e0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a0e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0e8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 800a0ec:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800a0f0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a0f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0f8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a0fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a100:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 800a104:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800a108:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a10c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a110:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a114:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a118:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 800a11c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a120:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a124:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a128:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 800a12c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a130:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a134:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a138:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 800a13c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800a140:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a144:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a148:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 800a14c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800a150:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a154:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a158:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 800a15c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a160:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a164:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a168:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 800a16c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a170:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a174:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a178:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 800a17c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800a180:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a184:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a188:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 800a18c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800a190:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a194:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a198:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 800a19c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a1a0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800a1a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1a8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 800a1ac:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a1b0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800a1b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1b8:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 800a1bc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a1c0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a1c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1c8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 800a1cc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a1d0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a1d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1d8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 800a1dc:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a1e0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800a1e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1e8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 800a1ec:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a1f0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800a1f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1f8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 800a1fc:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a200:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a204:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a208:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 800a20c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a210:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a214:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a218:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 800a21c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800a220:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a224:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a228:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 800a22c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800a230:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a234:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a238:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 800a23c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800a240:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a244:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a248:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 800a24c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800a250:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a254:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a258:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 800a25c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a260:	00db      	lsls	r3, r3, #3
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	4413      	add	r3, r2
 800a266:	ed97 7a07 	vldr	s14, [r7, #28]
 800a26a:	edd7 7a06 	vldr	s15, [r7, #24]
 800a26e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a272:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800a276:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a27a:	00db      	lsls	r3, r3, #3
 800a27c:	3304      	adds	r3, #4
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	4413      	add	r3, r2
 800a282:	ed97 7a05 	vldr	s14, [r7, #20]
 800a286:	edd7 7a04 	vldr	s15, [r7, #16]
 800a28a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a28e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800a292:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a296:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800a29a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a29e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800a2a2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a2a6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800a2aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ae:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800a2b2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a2b6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800a2ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2be:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800a2c2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a2c6:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800a2ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ce:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800a2d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a2d6:	00db      	lsls	r3, r3, #3
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	4413      	add	r3, r2
 800a2dc:	ed97 7a07 	vldr	s14, [r7, #28]
 800a2e0:	edd7 7a06 	vldr	s15, [r7, #24]
 800a2e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2e8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 800a2ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a2f0:	00db      	lsls	r3, r3, #3
 800a2f2:	3304      	adds	r3, #4
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	ed97 7a05 	vldr	s14, [r7, #20]
 800a2fc:	edd7 7a04 	vldr	s15, [r7, #16]
 800a300:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a304:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800a308:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a30c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a310:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a314:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800a318:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a31c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a320:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a324:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800a328:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a32c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a330:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a334:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800a338:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a33c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a340:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a344:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800a348:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a34c:	00db      	lsls	r3, r3, #3
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	4413      	add	r3, r2
 800a352:	ed97 7a07 	vldr	s14, [r7, #28]
 800a356:	edd7 7a06 	vldr	s15, [r7, #24]
 800a35a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a35e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800a362:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a366:	00db      	lsls	r3, r3, #3
 800a368:	3304      	adds	r3, #4
 800a36a:	68fa      	ldr	r2, [r7, #12]
 800a36c:	4413      	add	r3, r2
 800a36e:	ed97 7a05 	vldr	s14, [r7, #20]
 800a372:	edd7 7a04 	vldr	s15, [r7, #16]
 800a376:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a37a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800a37e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a382:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800a386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a38a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800a38e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a392:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a39a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800a39e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a3a2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a3a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3aa:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800a3ae:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a3b2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800a3b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ba:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800a3be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a3c2:	00db      	lsls	r3, r3, #3
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	ed97 7a07 	vldr	s14, [r7, #28]
 800a3cc:	edd7 7a06 	vldr	s15, [r7, #24]
 800a3d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3d4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800a3d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a3dc:	00db      	lsls	r3, r3, #3
 800a3de:	3304      	adds	r3, #4
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	ed97 7a05 	vldr	s14, [r7, #20]
 800a3e8:	edd7 7a04 	vldr	s15, [r7, #16]
 800a3ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3f0:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 800a3f4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a3f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3fc:	4413      	add	r3, r2
 800a3fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 800a402:	897b      	ldrh	r3, [r7, #10]
 800a404:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a408:	429a      	cmp	r2, r3
 800a40a:	f4ff abba 	bcc.w	8009b82 <arm_radix8_butterfly_f32+0x746>

         j++;
 800a40e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a412:	3301      	adds	r3, #1
 800a414:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 800a418:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a41c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a420:	429a      	cmp	r2, r3
 800a422:	f4ff ab2c 	bcc.w	8009a7e <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 800a426:	893b      	ldrh	r3, [r7, #8]
 800a428:	00db      	lsls	r3, r3, #3
 800a42a:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 800a42c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a430:	2b07      	cmp	r3, #7
 800a432:	f63f a813 	bhi.w	800945c <arm_radix8_butterfly_f32+0x20>
}
 800a436:	e000      	b.n	800a43a <arm_radix8_butterfly_f32+0xffe>
         break;
 800a438:	bf00      	nop
}
 800a43a:	bf00      	nop
 800a43c:	37f4      	adds	r7, #244	; 0xf4
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop

0800a448 <stage_rfft_f32>:
#include "arm_math.h"

void stage_rfft_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p, float32_t * pOut)
{
 800a448:	b480      	push	{r7}
 800a44a:	b095      	sub	sp, #84	; 0x54
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	607a      	str	r2, [r7, #4]
   uint32_t  k;								   /* Loop Counter                     */
   float32_t twR, twI;						   /* RFFT Twiddle coefficients        */
   float32_t * pCoeff = S->pTwiddleRFFT;  /* Points to RFFT Twiddle factors   */
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	695b      	ldr	r3, [r3, #20]
 800a458:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						   /* increasing pointer               */
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						   /* decreasing pointer               */
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;				/* temporary variables              */
   float32_t t1a, t1b;				         /* temporary variables              */
   float32_t p0, p1, p2, p3;				   /* temporary variables              */


   k = (S->Sint).fftLen - 1;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	881b      	ldrh	r3, [r3, #0]
 800a466:	3b01      	subs	r3, #1
 800a468:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 800a46a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 800a470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 800a476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 800a47c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800a482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a484:	1d1a      	adds	r2, r3, #4
 800a486:	64ba      	str	r2, [r7, #72]	; 0x48
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 800a48c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a48e:	1d1a      	adds	r2, r3, #4
 800a490:	64ba      	str	r2, [r7, #72]	; 0x48
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	62bb      	str	r3, [r7, #40]	; 0x28

   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 800a496:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a49a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a49e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4a2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800a4a6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a4aa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a4ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4b2:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 800a4b6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a4ba:	edd7 7a08 	vldr	s15, [r7, #32]
 800a4be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	1d1a      	adds	r2, r3, #4
 800a4c6:	607a      	str	r2, [r7, #4]
 800a4c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a4cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a4d0:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 800a4d4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a4d8:	edd7 7a08 	vldr	s15, [r7, #32]
 800a4dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	1d1a      	adds	r2, r3, #4
 800a4e4:	607a      	str	r2, [r7, #4]
 800a4e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a4ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a4ee:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 800a4f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4f4:	00db      	lsls	r3, r3, #3
 800a4f6:	68ba      	ldr	r2, [r7, #8]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 800a4fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4fe:	3308      	adds	r3, #8
 800a500:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 800a502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 800a508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 800a50e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 800a514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 800a51a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a51c:	1d1a      	adds	r2, r3, #4
 800a51e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800a524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a526:	1d1a      	adds	r2, r3, #4
 800a528:	64ba      	str	r2, [r7, #72]	; 0x48
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 800a52e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a532:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a53a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 800a53e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a542:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a54a:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 800a54e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a552:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a55a:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 800a55e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a562:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a56a:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 800a56e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a572:	edd7 7a08 	vldr	s15, [r7, #32]
 800a576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a57a:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 800a57e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a582:	edd7 7a08 	vldr	s15, [r7, #32]
 800a586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a58a:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 800a58e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a592:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a596:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a59a:	edd7 7a07 	vldr	s15, [r7, #28]
 800a59e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a5a2:	edd7 7a04 	vldr	s15, [r7, #16]
 800a5a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	1d1a      	adds	r2, r3, #4
 800a5ae:	607a      	str	r2, [r7, #4]
 800a5b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a5b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a5b8:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 800a5bc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800a5c0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a5c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a5c8:	edd7 7a06 	vldr	s15, [r7, #24]
 800a5cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a5d0:	edd7 7a05 	vldr	s15, [r7, #20]
 800a5d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	1d1a      	adds	r2, r3, #4
 800a5dc:	607a      	str	r2, [r7, #4]
 800a5de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a5e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a5e6:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 800a5ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5ec:	3308      	adds	r3, #8
 800a5ee:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800a5f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5f2:	3b08      	subs	r3, #8
 800a5f4:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800a5f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5f8:	3b01      	subs	r3, #1
 800a5fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0U);
 800a5fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f47f af7f 	bne.w	800a502 <stage_rfft_f32+0xba>
}
 800a604:	bf00      	nop
 800a606:	3754      	adds	r7, #84	; 0x54
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <merge_rfft_f32>:

/* Prepares data for inverse cfft */
void merge_rfft_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut)
{
 800a610:	b480      	push	{r7}
 800a612:	b095      	sub	sp, #84	; 0x54
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	607a      	str	r2, [r7, #4]
   uint32_t  k;								/* Loop Counter                     */
   float32_t twR, twI;						/* RFFT Twiddle coefficients        */
   float32_t *pCoeff = S->pTwiddleRFFT;		/* Points to RFFT Twiddle factors   */
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	695b      	ldr	r3, [r3, #20]
 800a620:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						/* increasing pointer               */
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						/* decreasing pointer               */
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;			/* temporary variables              */
   float32_t t1a, t1b, r, s, t, u;			/* temporary variables              */

   k = (S->Sint).fftLen - 1;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	881b      	ldrh	r3, [r3, #0]
 800a62e:	3b01      	subs	r3, #1
 800a630:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 800a632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 800a638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 800a63e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a640:	3308      	adds	r3, #8
 800a642:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800a644:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a648:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a64c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	1d1a      	adds	r2, r3, #4
 800a654:	607a      	str	r2, [r7, #4]
 800a656:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a65a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a65e:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 800a662:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a666:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a66a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	1d1a      	adds	r2, r3, #4
 800a672:	607a      	str	r2, [r7, #4]
 800a674:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a678:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a67c:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800a680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a682:	00db      	lsls	r3, r3, #3
 800a684:	68ba      	ldr	r2, [r7, #8]
 800a686:	4413      	add	r3, r2
 800a688:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 800a68a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a68c:	3308      	adds	r3, #8
 800a68e:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0U)
 800a690:	e07c      	b.n	800a78c <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 800a692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 800a698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 800a69e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 800a6a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 800a6aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6ac:	1d1a      	adds	r2, r3, #4
 800a6ae:	64ba      	str	r2, [r7, #72]	; 0x48
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800a6b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6b6:	1d1a      	adds	r2, r3, #4
 800a6b8:	64ba      	str	r2, [r7, #72]	; 0x48
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 800a6be:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a6c2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a6c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6ca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 800a6ce:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a6d2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a6d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6da:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 800a6de:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a6e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a6e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6ea:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 800a6ee:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a6f2:	edd7 7a08 	vldr	s15, [r7, #32]
 800a6f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6fa:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 800a6fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a702:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a70a:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 800a70e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a712:	edd7 7a08 	vldr	s15, [r7, #32]
 800a716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a71a:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800a71e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a722:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a726:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a72a:	edd7 7a07 	vldr	s15, [r7, #28]
 800a72e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a732:	edd7 7a06 	vldr	s15, [r7, #24]
 800a736:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	1d1a      	adds	r2, r3, #4
 800a73e:	607a      	str	r2, [r7, #4]
 800a740:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a744:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a748:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800a74c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a750:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a754:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a758:	edd7 7a05 	vldr	s15, [r7, #20]
 800a75c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a760:	edd7 7a04 	vldr	s15, [r7, #16]
 800a764:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	1d1a      	adds	r2, r3, #4
 800a76c:	607a      	str	r2, [r7, #4]
 800a76e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a772:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a776:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 800a77a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a77c:	3308      	adds	r3, #8
 800a77e:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800a780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a782:	3b08      	subs	r3, #8
 800a784:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800a786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a788:	3b01      	subs	r3, #1
 800a78a:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0U)
 800a78c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f47f af7f 	bne.w	800a692 <merge_rfft_f32+0x82>
   }

}
 800a794:	bf00      	nop
 800a796:	3754      	adds	r7, #84	; 0x54
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <arm_rfft_fast_f32>:

void arm_rfft_fast_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut,
uint8_t ifftFlag)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	607a      	str	r2, [r7, #4]
 800a7ac:	70fb      	strb	r3, [r7, #3]
   arm_cfft_instance_f32 * Sint = &(S->Sint);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	617b      	str	r3, [r7, #20]
   Sint->fftLen = S->fftLenRFFT / 2;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	8a1b      	ldrh	r3, [r3, #16]
 800a7b6:	085b      	lsrs	r3, r3, #1
 800a7b8:	b29a      	uxth	r2, r3
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	801a      	strh	r2, [r3, #0]

   /* Calculation of Real FFT */
   if (ifftFlag)
 800a7be:	78fb      	ldrb	r3, [r7, #3]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d00b      	beq.n	800a7dc <arm_rfft_fast_f32+0x3c>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	68b9      	ldr	r1, [r7, #8]
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f7ff ff21 	bl	800a610 <merge_rfft_f32>

      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800a7ce:	78fa      	ldrb	r2, [r7, #3]
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	6879      	ldr	r1, [r7, #4]
 800a7d4:	6978      	ldr	r0, [r7, #20]
 800a7d6:	f7fe fd8d 	bl	80092f4 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 800a7da:	e00a      	b.n	800a7f2 <arm_rfft_fast_f32+0x52>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 800a7dc:	78fa      	ldrb	r2, [r7, #3]
 800a7de:	2301      	movs	r3, #1
 800a7e0:	68b9      	ldr	r1, [r7, #8]
 800a7e2:	6978      	ldr	r0, [r7, #20]
 800a7e4:	f7fe fd86 	bl	80092f4 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	68b9      	ldr	r1, [r7, #8]
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f7ff fe2b 	bl	800a448 <stage_rfft_f32>
}
 800a7f2:	bf00      	nop
 800a7f4:	3718      	adds	r7, #24
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
	...

0800a7fc <arm_rfft_fast_init_f32>:
* This Function also initializes Twiddle factor table pointer and Bit reversal table pointer.
*/
arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b085      	sub	sp, #20
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	460b      	mov	r3, r1
 800a806:	807b      	strh	r3, [r7, #2]
  arm_cfft_instance_f32 * Sint;
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
 800a808:	2300      	movs	r3, #0
 800a80a:	73fb      	strb	r3, [r7, #15]
  /*  Initialise the FFT length */
  Sint = &(S->Sint);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	60bb      	str	r3, [r7, #8]
  Sint->fftLen = fftLen/2;
 800a810:	887b      	ldrh	r3, [r7, #2]
 800a812:	085b      	lsrs	r3, r3, #1
 800a814:	b29a      	uxth	r2, r3
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = fftLen;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	887a      	ldrh	r2, [r7, #2]
 800a81e:	821a      	strh	r2, [r3, #16]

  /*  Initializations of structure parameters depending on the FFT length */
  switch (Sint->fftLen)
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	881b      	ldrh	r3, [r3, #0]
 800a824:	2b80      	cmp	r3, #128	; 0x80
 800a826:	d050      	beq.n	800a8ca <arm_rfft_fast_init_f32+0xce>
 800a828:	2b80      	cmp	r3, #128	; 0x80
 800a82a:	dc06      	bgt.n	800a83a <arm_rfft_fast_init_f32+0x3e>
 800a82c:	2b20      	cmp	r3, #32
 800a82e:	d066      	beq.n	800a8fe <arm_rfft_fast_init_f32+0x102>
 800a830:	2b40      	cmp	r3, #64	; 0x40
 800a832:	d057      	beq.n	800a8e4 <arm_rfft_fast_init_f32+0xe8>
 800a834:	2b10      	cmp	r3, #16
 800a836:	d06f      	beq.n	800a918 <arm_rfft_fast_init_f32+0x11c>
 800a838:	e07b      	b.n	800a932 <arm_rfft_fast_init_f32+0x136>
 800a83a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a83e:	d028      	beq.n	800a892 <arm_rfft_fast_init_f32+0x96>
 800a840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a844:	dc03      	bgt.n	800a84e <arm_rfft_fast_init_f32+0x52>
 800a846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a84a:	d030      	beq.n	800a8ae <arm_rfft_fast_init_f32+0xb2>
 800a84c:	e071      	b.n	800a932 <arm_rfft_fast_init_f32+0x136>
 800a84e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a852:	d010      	beq.n	800a876 <arm_rfft_fast_init_f32+0x7a>
 800a854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a858:	d16b      	bne.n	800a932 <arm_rfft_fast_init_f32+0x136>
  {
  case 2048U:
    /*  Initializations of structure parameters for 2048 point FFT */
    /*  Initialise the bit reversal table length */
    Sint->bitRevLength = ARMBITREVINDEXTABLE_2048_TABLE_LENGTH;
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	f44f 626e 	mov.w	r2, #3808	; 0xee0
 800a860:	819a      	strh	r2, [r3, #12]
    /*  Initialise the bit reversal table pointer */
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	4a38      	ldr	r2, [pc, #224]	; (800a948 <arm_rfft_fast_init_f32+0x14c>)
 800a866:	609a      	str	r2, [r3, #8]
    /*  Initialise the Twiddle coefficient pointers */
		Sint->pTwiddle     = (float32_t *) twiddleCoef_2048;
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	4a38      	ldr	r2, [pc, #224]	; (800a94c <arm_rfft_fast_init_f32+0x150>)
 800a86c:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4a37      	ldr	r2, [pc, #220]	; (800a950 <arm_rfft_fast_init_f32+0x154>)
 800a872:	615a      	str	r2, [r3, #20]
    break;
 800a874:	e060      	b.n	800a938 <arm_rfft_fast_init_f32+0x13c>
  case 1024U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_1024_TABLE_LENGTH;
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800a87c:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	4a34      	ldr	r2, [pc, #208]	; (800a954 <arm_rfft_fast_init_f32+0x158>)
 800a882:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_1024;
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	4a34      	ldr	r2, [pc, #208]	; (800a958 <arm_rfft_fast_init_f32+0x15c>)
 800a888:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4a33      	ldr	r2, [pc, #204]	; (800a95c <arm_rfft_fast_init_f32+0x160>)
 800a88e:	615a      	str	r2, [r3, #20]
    break;
 800a890:	e052      	b.n	800a938 <arm_rfft_fast_init_f32+0x13c>
  case 512U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_512_TABLE_LENGTH;
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800a898:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	4a30      	ldr	r2, [pc, #192]	; (800a960 <arm_rfft_fast_init_f32+0x164>)
 800a89e:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_512;
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	4a30      	ldr	r2, [pc, #192]	; (800a964 <arm_rfft_fast_init_f32+0x168>)
 800a8a4:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4a2f      	ldr	r2, [pc, #188]	; (800a968 <arm_rfft_fast_init_f32+0x16c>)
 800a8aa:	615a      	str	r2, [r3, #20]
    break;
 800a8ac:	e044      	b.n	800a938 <arm_rfft_fast_init_f32+0x13c>
  case 256U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_256_TABLE_LENGTH;
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a8b4:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	4a2c      	ldr	r2, [pc, #176]	; (800a96c <arm_rfft_fast_init_f32+0x170>)
 800a8ba:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_256;
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	4a2c      	ldr	r2, [pc, #176]	; (800a970 <arm_rfft_fast_init_f32+0x174>)
 800a8c0:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	4a2b      	ldr	r2, [pc, #172]	; (800a974 <arm_rfft_fast_init_f32+0x178>)
 800a8c6:	615a      	str	r2, [r3, #20]
    break;
 800a8c8:	e036      	b.n	800a938 <arm_rfft_fast_init_f32+0x13c>
  case 128U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_128_TABLE_LENGTH;
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	22d0      	movs	r2, #208	; 0xd0
 800a8ce:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	4a29      	ldr	r2, [pc, #164]	; (800a978 <arm_rfft_fast_init_f32+0x17c>)
 800a8d4:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_128;
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	4a28      	ldr	r2, [pc, #160]	; (800a97c <arm_rfft_fast_init_f32+0x180>)
 800a8da:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4a28      	ldr	r2, [pc, #160]	; (800a980 <arm_rfft_fast_init_f32+0x184>)
 800a8e0:	615a      	str	r2, [r3, #20]
    break;
 800a8e2:	e029      	b.n	800a938 <arm_rfft_fast_init_f32+0x13c>
  case 64U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_64_TABLE_LENGTH;
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	2238      	movs	r2, #56	; 0x38
 800a8e8:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	4a25      	ldr	r2, [pc, #148]	; (800a984 <arm_rfft_fast_init_f32+0x188>)
 800a8ee:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_64;
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	4a25      	ldr	r2, [pc, #148]	; (800a988 <arm_rfft_fast_init_f32+0x18c>)
 800a8f4:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a24      	ldr	r2, [pc, #144]	; (800a98c <arm_rfft_fast_init_f32+0x190>)
 800a8fa:	615a      	str	r2, [r3, #20]
    break;
 800a8fc:	e01c      	b.n	800a938 <arm_rfft_fast_init_f32+0x13c>
  case 32U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_32_TABLE_LENGTH;
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	2230      	movs	r2, #48	; 0x30
 800a902:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	4a22      	ldr	r2, [pc, #136]	; (800a990 <arm_rfft_fast_init_f32+0x194>)
 800a908:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	4a21      	ldr	r2, [pc, #132]	; (800a994 <arm_rfft_fast_init_f32+0x198>)
 800a90e:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a21      	ldr	r2, [pc, #132]	; (800a998 <arm_rfft_fast_init_f32+0x19c>)
 800a914:	615a      	str	r2, [r3, #20]
    break;
 800a916:	e00f      	b.n	800a938 <arm_rfft_fast_init_f32+0x13c>
  case 16U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_16_TABLE_LENGTH;
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	2214      	movs	r2, #20
 800a91c:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	4a1e      	ldr	r2, [pc, #120]	; (800a99c <arm_rfft_fast_init_f32+0x1a0>)
 800a922:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	4a1e      	ldr	r2, [pc, #120]	; (800a9a0 <arm_rfft_fast_init_f32+0x1a4>)
 800a928:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4a1d      	ldr	r2, [pc, #116]	; (800a9a4 <arm_rfft_fast_init_f32+0x1a8>)
 800a92e:	615a      	str	r2, [r3, #20]
    break;
 800a930:	e002      	b.n	800a938 <arm_rfft_fast_init_f32+0x13c>
  default:
    /*  Reporting argument error if fftSize is not valid value */
    status = ARM_MATH_ARGUMENT_ERROR;
 800a932:	23ff      	movs	r3, #255	; 0xff
 800a934:	73fb      	strb	r3, [r7, #15]
    break;
 800a936:	bf00      	nop
  }

  return (status);
 800a938:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3714      	adds	r7, #20
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	0801ba24 	.word	0x0801ba24
 800a94c:	0801628c 	.word	0x0801628c
 800a950:	08021764 	.word	0x08021764
 800a954:	0801ac14 	.word	0x0801ac14
 800a958:	0801428c 	.word	0x0801428c
 800a95c:	0801f764 	.word	0x0801f764
 800a960:	0801a894 	.word	0x0801a894
 800a964:	0801328c 	.word	0x0801328c
 800a968:	0801e764 	.word	0x0801e764
 800a96c:	0801a524 	.word	0x0801a524
 800a970:	08012a8c 	.word	0x08012a8c
 800a974:	0801df64 	.word	0x0801df64
 800a978:	0801a384 	.word	0x0801a384
 800a97c:	0801268c 	.word	0x0801268c
 800a980:	0801db64 	.word	0x0801db64
 800a984:	0801a314 	.word	0x0801a314
 800a988:	0801248c 	.word	0x0801248c
 800a98c:	0801d964 	.word	0x0801d964
 800a990:	0801a2b4 	.word	0x0801a2b4
 800a994:	0801238c 	.word	0x0801238c
 800a998:	0801d864 	.word	0x0801d864
 800a99c:	0801a28c 	.word	0x0801a28c
 800a9a0:	0801230c 	.word	0x0801230c
 800a9a4:	0801d7e4 	.word	0x0801d7e4

0800a9a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a9ac:	2003      	movs	r0, #3
 800a9ae:	f000 f94b 	bl	800ac48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a9b2:	2000      	movs	r0, #0
 800a9b4:	f000 f806 	bl	800a9c4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800a9b8:	f005 ff8e 	bl	80108d8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	bd80      	pop	{r7, pc}
	...

0800a9c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a9cc:	4b12      	ldr	r3, [pc, #72]	; (800aa18 <HAL_InitTick+0x54>)
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	4b12      	ldr	r3, [pc, #72]	; (800aa1c <HAL_InitTick+0x58>)
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a9da:	fbb3 f3f1 	udiv	r3, r3, r1
 800a9de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f000 f965 	bl	800acb2 <HAL_SYSTICK_Config>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d001      	beq.n	800a9f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e00e      	b.n	800aa10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2b0f      	cmp	r3, #15
 800a9f6:	d80a      	bhi.n	800aa0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	6879      	ldr	r1, [r7, #4]
 800a9fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa00:	f000 f92d 	bl	800ac5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800aa04:	4a06      	ldr	r2, [pc, #24]	; (800aa20 <HAL_InitTick+0x5c>)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	e000      	b.n	800aa10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3708      	adds	r7, #8
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	200006dc 	.word	0x200006dc
 800aa1c:	20000038 	.word	0x20000038
 800aa20:	20000034 	.word	0x20000034

0800aa24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800aa24:	b480      	push	{r7}
 800aa26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800aa28:	4b06      	ldr	r3, [pc, #24]	; (800aa44 <HAL_IncTick+0x20>)
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	4b06      	ldr	r3, [pc, #24]	; (800aa48 <HAL_IncTick+0x24>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4413      	add	r3, r2
 800aa34:	4a04      	ldr	r2, [pc, #16]	; (800aa48 <HAL_IncTick+0x24>)
 800aa36:	6013      	str	r3, [r2, #0]
}
 800aa38:	bf00      	nop
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	20000038 	.word	0x20000038
 800aa48:	2002cd58 	.word	0x2002cd58

0800aa4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	af00      	add	r7, sp, #0
  return uwTick;
 800aa50:	4b03      	ldr	r3, [pc, #12]	; (800aa60 <HAL_GetTick+0x14>)
 800aa52:	681b      	ldr	r3, [r3, #0]
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	2002cd58 	.word	0x2002cd58

0800aa64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800aa6c:	f7ff ffee 	bl	800aa4c <HAL_GetTick>
 800aa70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa7c:	d005      	beq.n	800aa8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800aa7e:	4b09      	ldr	r3, [pc, #36]	; (800aaa4 <HAL_Delay+0x40>)
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	461a      	mov	r2, r3
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	4413      	add	r3, r2
 800aa88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800aa8a:	bf00      	nop
 800aa8c:	f7ff ffde 	bl	800aa4c <HAL_GetTick>
 800aa90:	4602      	mov	r2, r0
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d8f7      	bhi.n	800aa8c <HAL_Delay+0x28>
  {
  }
}
 800aa9c:	bf00      	nop
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	20000038 	.word	0x20000038

0800aaa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b085      	sub	sp, #20
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f003 0307 	and.w	r3, r3, #7
 800aab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800aab8:	4b0b      	ldr	r3, [pc, #44]	; (800aae8 <__NVIC_SetPriorityGrouping+0x40>)
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800aabe:	68ba      	ldr	r2, [r7, #8]
 800aac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800aac4:	4013      	ands	r3, r2
 800aac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800aad0:	4b06      	ldr	r3, [pc, #24]	; (800aaec <__NVIC_SetPriorityGrouping+0x44>)
 800aad2:	4313      	orrs	r3, r2
 800aad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800aad6:	4a04      	ldr	r2, [pc, #16]	; (800aae8 <__NVIC_SetPriorityGrouping+0x40>)
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	60d3      	str	r3, [r2, #12]
}
 800aadc:	bf00      	nop
 800aade:	3714      	adds	r7, #20
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr
 800aae8:	e000ed00 	.word	0xe000ed00
 800aaec:	05fa0000 	.word	0x05fa0000

0800aaf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800aaf4:	4b04      	ldr	r3, [pc, #16]	; (800ab08 <__NVIC_GetPriorityGrouping+0x18>)
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	0a1b      	lsrs	r3, r3, #8
 800aafa:	f003 0307 	and.w	r3, r3, #7
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr
 800ab08:	e000ed00 	.word	0xe000ed00

0800ab0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	4603      	mov	r3, r0
 800ab14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	db0b      	blt.n	800ab36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ab1e:	79fb      	ldrb	r3, [r7, #7]
 800ab20:	f003 021f 	and.w	r2, r3, #31
 800ab24:	4907      	ldr	r1, [pc, #28]	; (800ab44 <__NVIC_EnableIRQ+0x38>)
 800ab26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab2a:	095b      	lsrs	r3, r3, #5
 800ab2c:	2001      	movs	r0, #1
 800ab2e:	fa00 f202 	lsl.w	r2, r0, r2
 800ab32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ab36:	bf00      	nop
 800ab38:	370c      	adds	r7, #12
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	e000e100 	.word	0xe000e100

0800ab48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	4603      	mov	r3, r0
 800ab50:	6039      	str	r1, [r7, #0]
 800ab52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	db0a      	blt.n	800ab72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	b2da      	uxtb	r2, r3
 800ab60:	490c      	ldr	r1, [pc, #48]	; (800ab94 <__NVIC_SetPriority+0x4c>)
 800ab62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab66:	0112      	lsls	r2, r2, #4
 800ab68:	b2d2      	uxtb	r2, r2
 800ab6a:	440b      	add	r3, r1
 800ab6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ab70:	e00a      	b.n	800ab88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	b2da      	uxtb	r2, r3
 800ab76:	4908      	ldr	r1, [pc, #32]	; (800ab98 <__NVIC_SetPriority+0x50>)
 800ab78:	79fb      	ldrb	r3, [r7, #7]
 800ab7a:	f003 030f 	and.w	r3, r3, #15
 800ab7e:	3b04      	subs	r3, #4
 800ab80:	0112      	lsls	r2, r2, #4
 800ab82:	b2d2      	uxtb	r2, r2
 800ab84:	440b      	add	r3, r1
 800ab86:	761a      	strb	r2, [r3, #24]
}
 800ab88:	bf00      	nop
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr
 800ab94:	e000e100 	.word	0xe000e100
 800ab98:	e000ed00 	.word	0xe000ed00

0800ab9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b089      	sub	sp, #36	; 0x24
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f003 0307 	and.w	r3, r3, #7
 800abae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	f1c3 0307 	rsb	r3, r3, #7
 800abb6:	2b04      	cmp	r3, #4
 800abb8:	bf28      	it	cs
 800abba:	2304      	movcs	r3, #4
 800abbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	3304      	adds	r3, #4
 800abc2:	2b06      	cmp	r3, #6
 800abc4:	d902      	bls.n	800abcc <NVIC_EncodePriority+0x30>
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	3b03      	subs	r3, #3
 800abca:	e000      	b.n	800abce <NVIC_EncodePriority+0x32>
 800abcc:	2300      	movs	r3, #0
 800abce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800abd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	fa02 f303 	lsl.w	r3, r2, r3
 800abda:	43da      	mvns	r2, r3
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	401a      	ands	r2, r3
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800abe4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	fa01 f303 	lsl.w	r3, r1, r3
 800abee:	43d9      	mvns	r1, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800abf4:	4313      	orrs	r3, r2
         );
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3724      	adds	r7, #36	; 0x24
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr
	...

0800ac04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ac14:	d301      	bcc.n	800ac1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ac16:	2301      	movs	r3, #1
 800ac18:	e00f      	b.n	800ac3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ac1a:	4a0a      	ldr	r2, [pc, #40]	; (800ac44 <SysTick_Config+0x40>)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	3b01      	subs	r3, #1
 800ac20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ac22:	210f      	movs	r1, #15
 800ac24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac28:	f7ff ff8e 	bl	800ab48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ac2c:	4b05      	ldr	r3, [pc, #20]	; (800ac44 <SysTick_Config+0x40>)
 800ac2e:	2200      	movs	r2, #0
 800ac30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ac32:	4b04      	ldr	r3, [pc, #16]	; (800ac44 <SysTick_Config+0x40>)
 800ac34:	2207      	movs	r2, #7
 800ac36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ac38:	2300      	movs	r3, #0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	e000e010 	.word	0xe000e010

0800ac48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f7ff ff29 	bl	800aaa8 <__NVIC_SetPriorityGrouping>
}
 800ac56:	bf00      	nop
 800ac58:	3708      	adds	r7, #8
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b086      	sub	sp, #24
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	4603      	mov	r3, r0
 800ac66:	60b9      	str	r1, [r7, #8]
 800ac68:	607a      	str	r2, [r7, #4]
 800ac6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ac70:	f7ff ff3e 	bl	800aaf0 <__NVIC_GetPriorityGrouping>
 800ac74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	68b9      	ldr	r1, [r7, #8]
 800ac7a:	6978      	ldr	r0, [r7, #20]
 800ac7c:	f7ff ff8e 	bl	800ab9c <NVIC_EncodePriority>
 800ac80:	4602      	mov	r2, r0
 800ac82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac86:	4611      	mov	r1, r2
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7ff ff5d 	bl	800ab48 <__NVIC_SetPriority>
}
 800ac8e:	bf00      	nop
 800ac90:	3718      	adds	r7, #24
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b082      	sub	sp, #8
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800aca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7ff ff31 	bl	800ab0c <__NVIC_EnableIRQ>
}
 800acaa:	bf00      	nop
 800acac:	3708      	adds	r7, #8
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b082      	sub	sp, #8
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f7ff ffa2 	bl	800ac04 <SysTick_Config>
 800acc0:	4603      	mov	r3, r0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3708      	adds	r7, #8
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
	...

0800accc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d101      	bne.n	800acde <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	e054      	b.n	800ad88 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	7f5b      	ldrb	r3, [r3, #29]
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d105      	bne.n	800acf4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f005 fe16 	bl	8010920 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2202      	movs	r2, #2
 800acf8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	791b      	ldrb	r3, [r3, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d10c      	bne.n	800ad1c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a22      	ldr	r2, [pc, #136]	; (800ad90 <HAL_CRC_Init+0xc4>)
 800ad08:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	689a      	ldr	r2, [r3, #8]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f022 0218 	bic.w	r2, r2, #24
 800ad18:	609a      	str	r2, [r3, #8]
 800ad1a:	e00c      	b.n	800ad36 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6899      	ldr	r1, [r3, #8]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	461a      	mov	r2, r3
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 f834 	bl	800ad94 <HAL_CRCEx_Polynomial_Set>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d001      	beq.n	800ad36 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800ad32:	2301      	movs	r3, #1
 800ad34:	e028      	b.n	800ad88 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	795b      	ldrb	r3, [r3, #5]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d105      	bne.n	800ad4a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad46:	611a      	str	r2, [r3, #16]
 800ad48:	e004      	b.n	800ad54 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	6912      	ldr	r2, [r2, #16]
 800ad52:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	695a      	ldr	r2, [r3, #20]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	430a      	orrs	r2, r1
 800ad68:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	699a      	ldr	r2, [r3, #24]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	430a      	orrs	r2, r1
 800ad7e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2201      	movs	r2, #1
 800ad84:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	04c11db7 	.word	0x04c11db7

0800ad94 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b087      	sub	sp, #28
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ada0:	2300      	movs	r3, #0
 800ada2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800ada4:	231f      	movs	r3, #31
 800ada6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800ada8:	bf00      	nop
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	1e5a      	subs	r2, r3, #1
 800adae:	613a      	str	r2, [r7, #16]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d009      	beq.n	800adc8 <HAL_CRCEx_Polynomial_Set+0x34>
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	f003 031f 	and.w	r3, r3, #31
 800adba:	68ba      	ldr	r2, [r7, #8]
 800adbc:	fa22 f303 	lsr.w	r3, r2, r3
 800adc0:	f003 0301 	and.w	r3, r3, #1
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d0f0      	beq.n	800adaa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2b18      	cmp	r3, #24
 800adcc:	d846      	bhi.n	800ae5c <HAL_CRCEx_Polynomial_Set+0xc8>
 800adce:	a201      	add	r2, pc, #4	; (adr r2, 800add4 <HAL_CRCEx_Polynomial_Set+0x40>)
 800add0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add4:	0800ae63 	.word	0x0800ae63
 800add8:	0800ae5d 	.word	0x0800ae5d
 800addc:	0800ae5d 	.word	0x0800ae5d
 800ade0:	0800ae5d 	.word	0x0800ae5d
 800ade4:	0800ae5d 	.word	0x0800ae5d
 800ade8:	0800ae5d 	.word	0x0800ae5d
 800adec:	0800ae5d 	.word	0x0800ae5d
 800adf0:	0800ae5d 	.word	0x0800ae5d
 800adf4:	0800ae51 	.word	0x0800ae51
 800adf8:	0800ae5d 	.word	0x0800ae5d
 800adfc:	0800ae5d 	.word	0x0800ae5d
 800ae00:	0800ae5d 	.word	0x0800ae5d
 800ae04:	0800ae5d 	.word	0x0800ae5d
 800ae08:	0800ae5d 	.word	0x0800ae5d
 800ae0c:	0800ae5d 	.word	0x0800ae5d
 800ae10:	0800ae5d 	.word	0x0800ae5d
 800ae14:	0800ae45 	.word	0x0800ae45
 800ae18:	0800ae5d 	.word	0x0800ae5d
 800ae1c:	0800ae5d 	.word	0x0800ae5d
 800ae20:	0800ae5d 	.word	0x0800ae5d
 800ae24:	0800ae5d 	.word	0x0800ae5d
 800ae28:	0800ae5d 	.word	0x0800ae5d
 800ae2c:	0800ae5d 	.word	0x0800ae5d
 800ae30:	0800ae5d 	.word	0x0800ae5d
 800ae34:	0800ae39 	.word	0x0800ae39
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	2b06      	cmp	r3, #6
 800ae3c:	d913      	bls.n	800ae66 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ae42:	e010      	b.n	800ae66 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	2b07      	cmp	r3, #7
 800ae48:	d90f      	bls.n	800ae6a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ae4e:	e00c      	b.n	800ae6a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	2b0f      	cmp	r3, #15
 800ae54:	d90b      	bls.n	800ae6e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800ae56:	2301      	movs	r3, #1
 800ae58:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ae5a:	e008      	b.n	800ae6e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	75fb      	strb	r3, [r7, #23]
      break;
 800ae60:	e006      	b.n	800ae70 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800ae62:	bf00      	nop
 800ae64:	e004      	b.n	800ae70 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800ae66:	bf00      	nop
 800ae68:	e002      	b.n	800ae70 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800ae6a:	bf00      	nop
 800ae6c:	e000      	b.n	800ae70 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800ae6e:	bf00      	nop
  }
  if (status == HAL_OK)
 800ae70:	7dfb      	ldrb	r3, [r7, #23]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d10d      	bne.n	800ae92 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	f023 0118 	bic.w	r1, r3, #24
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	430a      	orrs	r2, r1
 800ae90:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800ae92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	371c      	adds	r7, #28
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b086      	sub	sp, #24
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800aeac:	f7ff fdce 	bl	800aa4c <HAL_GetTick>
 800aeb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d101      	bne.n	800aebc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	e099      	b.n	800aff0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2202      	movs	r2, #2
 800aec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f022 0201 	bic.w	r2, r2, #1
 800aeda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800aedc:	e00f      	b.n	800aefe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800aede:	f7ff fdb5 	bl	800aa4c <HAL_GetTick>
 800aee2:	4602      	mov	r2, r0
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	1ad3      	subs	r3, r2, r3
 800aee8:	2b05      	cmp	r3, #5
 800aeea:	d908      	bls.n	800aefe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2220      	movs	r2, #32
 800aef0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2203      	movs	r2, #3
 800aef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800aefa:	2303      	movs	r3, #3
 800aefc:	e078      	b.n	800aff0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f003 0301 	and.w	r3, r3, #1
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d1e8      	bne.n	800aede <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800af14:	697a      	ldr	r2, [r7, #20]
 800af16:	4b38      	ldr	r3, [pc, #224]	; (800aff8 <HAL_DMA_Init+0x158>)
 800af18:	4013      	ands	r3, r2
 800af1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	685a      	ldr	r2, [r3, #4]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800af2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	691b      	ldr	r3, [r3, #16]
 800af30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800af36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	699b      	ldr	r3, [r3, #24]
 800af3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800af42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6a1b      	ldr	r3, [r3, #32]
 800af48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800af4a:	697a      	ldr	r2, [r7, #20]
 800af4c:	4313      	orrs	r3, r2
 800af4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af54:	2b04      	cmp	r3, #4
 800af56:	d107      	bne.n	800af68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af60:	4313      	orrs	r3, r2
 800af62:	697a      	ldr	r2, [r7, #20]
 800af64:	4313      	orrs	r3, r2
 800af66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	697a      	ldr	r2, [r7, #20]
 800af6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	695b      	ldr	r3, [r3, #20]
 800af76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	f023 0307 	bic.w	r3, r3, #7
 800af7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af84:	697a      	ldr	r2, [r7, #20]
 800af86:	4313      	orrs	r3, r2
 800af88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8e:	2b04      	cmp	r3, #4
 800af90:	d117      	bne.n	800afc2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af96:	697a      	ldr	r2, [r7, #20]
 800af98:	4313      	orrs	r3, r2
 800af9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d00e      	beq.n	800afc2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 fad5 	bl	800b554 <DMA_CheckFifoParam>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d008      	beq.n	800afc2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2240      	movs	r2, #64	; 0x40
 800afb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2201      	movs	r2, #1
 800afba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800afbe:	2301      	movs	r3, #1
 800afc0:	e016      	b.n	800aff0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	697a      	ldr	r2, [r7, #20]
 800afc8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 fa8c 	bl	800b4e8 <DMA_CalcBaseAndBitshift>
 800afd0:	4603      	mov	r3, r0
 800afd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afd8:	223f      	movs	r2, #63	; 0x3f
 800afda:	409a      	lsls	r2, r3
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2201      	movs	r2, #1
 800afea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800afee:	2300      	movs	r3, #0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3718      	adds	r7, #24
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	f010803f 	.word	0xf010803f

0800affc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d101      	bne.n	800b00e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800b00a:	2301      	movs	r3, #1
 800b00c:	e050      	b.n	800b0b0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b02      	cmp	r3, #2
 800b018:	d101      	bne.n	800b01e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800b01a:	2302      	movs	r3, #2
 800b01c:	e048      	b.n	800b0b0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f022 0201 	bic.w	r2, r2, #1
 800b02c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2200      	movs	r2, #0
 800b034:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2200      	movs	r2, #0
 800b03c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2200      	movs	r2, #0
 800b044:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2200      	movs	r2, #0
 800b04c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2200      	movs	r2, #0
 800b054:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2221      	movs	r2, #33	; 0x21
 800b05c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 fa42 	bl	800b4e8 <DMA_CalcBaseAndBitshift>
 800b064:	4603      	mov	r3, r0
 800b066:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b06c:	223f      	movs	r2, #63	; 0x3f
 800b06e:	409a      	lsls	r2, r3
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2200      	movs	r2, #0
 800b078:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2200      	movs	r2, #0
 800b09c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3710      	adds	r7, #16
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
 800b0c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	d101      	bne.n	800b0de <HAL_DMA_Start_IT+0x26>
 800b0da:	2302      	movs	r3, #2
 800b0dc:	e048      	b.n	800b170 <HAL_DMA_Start_IT+0xb8>
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	d137      	bne.n	800b162 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2202      	movs	r2, #2
 800b0f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	68b9      	ldr	r1, [r7, #8]
 800b106:	68f8      	ldr	r0, [r7, #12]
 800b108:	f000 f9c0 	bl	800b48c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b110:	223f      	movs	r2, #63	; 0x3f
 800b112:	409a      	lsls	r2, r3
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f042 0216 	orr.w	r2, r2, #22
 800b126:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	695a      	ldr	r2, [r3, #20]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b136:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d007      	beq.n	800b150 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f042 0208 	orr.w	r2, r2, #8
 800b14e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f042 0201 	orr.w	r2, r2, #1
 800b15e:	601a      	str	r2, [r3, #0]
 800b160:	e005      	b.n	800b16e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2200      	movs	r2, #0
 800b166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b16a:	2302      	movs	r3, #2
 800b16c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b16e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b170:	4618      	mov	r0, r3
 800b172:	3718      	adds	r7, #24
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b086      	sub	sp, #24
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800b180:	2300      	movs	r3, #0
 800b182:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800b184:	4b92      	ldr	r3, [pc, #584]	; (800b3d0 <HAL_DMA_IRQHandler+0x258>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4a92      	ldr	r2, [pc, #584]	; (800b3d4 <HAL_DMA_IRQHandler+0x25c>)
 800b18a:	fba2 2303 	umull	r2, r3, r2, r3
 800b18e:	0a9b      	lsrs	r3, r3, #10
 800b190:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b196:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1a2:	2208      	movs	r2, #8
 800b1a4:	409a      	lsls	r2, r3
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	4013      	ands	r3, r2
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d01a      	beq.n	800b1e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f003 0304 	and.w	r3, r3, #4
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d013      	beq.n	800b1e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f022 0204 	bic.w	r2, r2, #4
 800b1ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1d0:	2208      	movs	r2, #8
 800b1d2:	409a      	lsls	r2, r3
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1dc:	f043 0201 	orr.w	r2, r3, #1
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	409a      	lsls	r2, r3
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	4013      	ands	r3, r2
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d012      	beq.n	800b21a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	695b      	ldr	r3, [r3, #20]
 800b1fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d00b      	beq.n	800b21a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b206:	2201      	movs	r2, #1
 800b208:	409a      	lsls	r2, r3
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b212:	f043 0202 	orr.w	r2, r3, #2
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b21e:	2204      	movs	r2, #4
 800b220:	409a      	lsls	r2, r3
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	4013      	ands	r3, r2
 800b226:	2b00      	cmp	r3, #0
 800b228:	d012      	beq.n	800b250 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f003 0302 	and.w	r3, r3, #2
 800b234:	2b00      	cmp	r3, #0
 800b236:	d00b      	beq.n	800b250 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b23c:	2204      	movs	r2, #4
 800b23e:	409a      	lsls	r2, r3
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b248:	f043 0204 	orr.w	r2, r3, #4
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b254:	2210      	movs	r2, #16
 800b256:	409a      	lsls	r2, r3
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	4013      	ands	r3, r2
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d043      	beq.n	800b2e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f003 0308 	and.w	r3, r3, #8
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d03c      	beq.n	800b2e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b272:	2210      	movs	r2, #16
 800b274:	409a      	lsls	r2, r3
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b284:	2b00      	cmp	r3, #0
 800b286:	d018      	beq.n	800b2ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b292:	2b00      	cmp	r3, #0
 800b294:	d108      	bne.n	800b2a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d024      	beq.n	800b2e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	4798      	blx	r3
 800b2a6:	e01f      	b.n	800b2e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d01b      	beq.n	800b2e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	4798      	blx	r3
 800b2b8:	e016      	b.n	800b2e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d107      	bne.n	800b2d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f022 0208 	bic.w	r2, r2, #8
 800b2d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d003      	beq.n	800b2e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2ec:	2220      	movs	r2, #32
 800b2ee:	409a      	lsls	r2, r3
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	4013      	ands	r3, r2
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	f000 808e 	beq.w	800b416 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f003 0310 	and.w	r3, r3, #16
 800b304:	2b00      	cmp	r3, #0
 800b306:	f000 8086 	beq.w	800b416 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b30e:	2220      	movs	r2, #32
 800b310:	409a      	lsls	r2, r3
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	2b05      	cmp	r3, #5
 800b320:	d136      	bne.n	800b390 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f022 0216 	bic.w	r2, r2, #22
 800b330:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	695a      	ldr	r2, [r3, #20]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b340:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b346:	2b00      	cmp	r3, #0
 800b348:	d103      	bne.n	800b352 <HAL_DMA_IRQHandler+0x1da>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d007      	beq.n	800b362 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f022 0208 	bic.w	r2, r2, #8
 800b360:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b366:	223f      	movs	r2, #63	; 0x3f
 800b368:	409a      	lsls	r2, r3
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2200      	movs	r2, #0
 800b372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2201      	movs	r2, #1
 800b37a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b382:	2b00      	cmp	r3, #0
 800b384:	d07d      	beq.n	800b482 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	4798      	blx	r3
        }
        return;
 800b38e:	e078      	b.n	800b482 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d01c      	beq.n	800b3d8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d108      	bne.n	800b3be <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d030      	beq.n	800b416 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	4798      	blx	r3
 800b3bc:	e02b      	b.n	800b416 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d027      	beq.n	800b416 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	4798      	blx	r3
 800b3ce:	e022      	b.n	800b416 <HAL_DMA_IRQHandler+0x29e>
 800b3d0:	200006dc 	.word	0x200006dc
 800b3d4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d10f      	bne.n	800b406 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f022 0210 	bic.w	r2, r2, #16
 800b3f4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2201      	movs	r2, #1
 800b402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d003      	beq.n	800b416 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d032      	beq.n	800b484 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b422:	f003 0301 	and.w	r3, r3, #1
 800b426:	2b00      	cmp	r3, #0
 800b428:	d022      	beq.n	800b470 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2205      	movs	r2, #5
 800b42e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f022 0201 	bic.w	r2, r2, #1
 800b440:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	3301      	adds	r3, #1
 800b446:	60bb      	str	r3, [r7, #8]
 800b448:	697a      	ldr	r2, [r7, #20]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d307      	bcc.n	800b45e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 0301 	and.w	r3, r3, #1
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d1f2      	bne.n	800b442 <HAL_DMA_IRQHandler+0x2ca>
 800b45c:	e000      	b.n	800b460 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800b45e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2200      	movs	r2, #0
 800b464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b474:	2b00      	cmp	r3, #0
 800b476:	d005      	beq.n	800b484 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	4798      	blx	r3
 800b480:	e000      	b.n	800b484 <HAL_DMA_IRQHandler+0x30c>
        return;
 800b482:	bf00      	nop
    }
  }
}
 800b484:	3718      	adds	r7, #24
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop

0800b48c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	60b9      	str	r1, [r7, #8]
 800b496:	607a      	str	r2, [r7, #4]
 800b498:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b4a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	2b40      	cmp	r3, #64	; 0x40
 800b4b8:	d108      	bne.n	800b4cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	68ba      	ldr	r2, [r7, #8]
 800b4c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b4ca:	e007      	b.n	800b4dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68ba      	ldr	r2, [r7, #8]
 800b4d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	60da      	str	r2, [r3, #12]
}
 800b4dc:	bf00      	nop
 800b4de:	3714      	adds	r7, #20
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr

0800b4e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	3b10      	subs	r3, #16
 800b4f8:	4a13      	ldr	r2, [pc, #76]	; (800b548 <DMA_CalcBaseAndBitshift+0x60>)
 800b4fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b4fe:	091b      	lsrs	r3, r3, #4
 800b500:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b502:	4a12      	ldr	r2, [pc, #72]	; (800b54c <DMA_CalcBaseAndBitshift+0x64>)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	4413      	add	r3, r2
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	461a      	mov	r2, r3
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2b03      	cmp	r3, #3
 800b514:	d908      	bls.n	800b528 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	461a      	mov	r2, r3
 800b51c:	4b0c      	ldr	r3, [pc, #48]	; (800b550 <DMA_CalcBaseAndBitshift+0x68>)
 800b51e:	4013      	ands	r3, r2
 800b520:	1d1a      	adds	r2, r3, #4
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	659a      	str	r2, [r3, #88]	; 0x58
 800b526:	e006      	b.n	800b536 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	461a      	mov	r2, r3
 800b52e:	4b08      	ldr	r3, [pc, #32]	; (800b550 <DMA_CalcBaseAndBitshift+0x68>)
 800b530:	4013      	ands	r3, r2
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3714      	adds	r7, #20
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	aaaaaaab 	.word	0xaaaaaaab
 800b54c:	08025764 	.word	0x08025764
 800b550:	fffffc00 	.word	0xfffffc00

0800b554 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b55c:	2300      	movs	r3, #0
 800b55e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b564:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	699b      	ldr	r3, [r3, #24]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d11f      	bne.n	800b5ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	2b03      	cmp	r3, #3
 800b572:	d855      	bhi.n	800b620 <DMA_CheckFifoParam+0xcc>
 800b574:	a201      	add	r2, pc, #4	; (adr r2, 800b57c <DMA_CheckFifoParam+0x28>)
 800b576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b57a:	bf00      	nop
 800b57c:	0800b58d 	.word	0x0800b58d
 800b580:	0800b59f 	.word	0x0800b59f
 800b584:	0800b58d 	.word	0x0800b58d
 800b588:	0800b621 	.word	0x0800b621
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b590:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b594:	2b00      	cmp	r3, #0
 800b596:	d045      	beq.n	800b624 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800b598:	2301      	movs	r3, #1
 800b59a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b59c:	e042      	b.n	800b624 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b5a6:	d13f      	bne.n	800b628 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b5ac:	e03c      	b.n	800b628 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	699b      	ldr	r3, [r3, #24]
 800b5b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5b6:	d121      	bne.n	800b5fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	2b03      	cmp	r3, #3
 800b5bc:	d836      	bhi.n	800b62c <DMA_CheckFifoParam+0xd8>
 800b5be:	a201      	add	r2, pc, #4	; (adr r2, 800b5c4 <DMA_CheckFifoParam+0x70>)
 800b5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c4:	0800b5d5 	.word	0x0800b5d5
 800b5c8:	0800b5db 	.word	0x0800b5db
 800b5cc:	0800b5d5 	.word	0x0800b5d5
 800b5d0:	0800b5ed 	.word	0x0800b5ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	73fb      	strb	r3, [r7, #15]
      break;
 800b5d8:	e02f      	b.n	800b63a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d024      	beq.n	800b630 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b5ea:	e021      	b.n	800b630 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b5f4:	d11e      	bne.n	800b634 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b5fa:	e01b      	b.n	800b634 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	2b02      	cmp	r3, #2
 800b600:	d902      	bls.n	800b608 <DMA_CheckFifoParam+0xb4>
 800b602:	2b03      	cmp	r3, #3
 800b604:	d003      	beq.n	800b60e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b606:	e018      	b.n	800b63a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800b608:	2301      	movs	r3, #1
 800b60a:	73fb      	strb	r3, [r7, #15]
      break;
 800b60c:	e015      	b.n	800b63a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b612:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00e      	beq.n	800b638 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800b61a:	2301      	movs	r3, #1
 800b61c:	73fb      	strb	r3, [r7, #15]
      break;
 800b61e:	e00b      	b.n	800b638 <DMA_CheckFifoParam+0xe4>
      break;
 800b620:	bf00      	nop
 800b622:	e00a      	b.n	800b63a <DMA_CheckFifoParam+0xe6>
      break;
 800b624:	bf00      	nop
 800b626:	e008      	b.n	800b63a <DMA_CheckFifoParam+0xe6>
      break;
 800b628:	bf00      	nop
 800b62a:	e006      	b.n	800b63a <DMA_CheckFifoParam+0xe6>
      break;
 800b62c:	bf00      	nop
 800b62e:	e004      	b.n	800b63a <DMA_CheckFifoParam+0xe6>
      break;
 800b630:	bf00      	nop
 800b632:	e002      	b.n	800b63a <DMA_CheckFifoParam+0xe6>
      break;   
 800b634:	bf00      	nop
 800b636:	e000      	b.n	800b63a <DMA_CheckFifoParam+0xe6>
      break;
 800b638:	bf00      	nop
    }
  } 
  
  return status; 
 800b63a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3714      	adds	r7, #20
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b648:	b480      	push	{r7}
 800b64a:	b089      	sub	sp, #36	; 0x24
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800b652:	2300      	movs	r3, #0
 800b654:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800b656:	2300      	movs	r3, #0
 800b658:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800b65a:	2300      	movs	r3, #0
 800b65c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800b65e:	2300      	movs	r3, #0
 800b660:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800b662:	2300      	movs	r3, #0
 800b664:	61fb      	str	r3, [r7, #28]
 800b666:	e175      	b.n	800b954 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800b668:	2201      	movs	r2, #1
 800b66a:	69fb      	ldr	r3, [r7, #28]
 800b66c:	fa02 f303 	lsl.w	r3, r2, r3
 800b670:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	697a      	ldr	r2, [r7, #20]
 800b678:	4013      	ands	r3, r2
 800b67a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b67c:	693a      	ldr	r2, [r7, #16]
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	429a      	cmp	r2, r3
 800b682:	f040 8164 	bne.w	800b94e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	2b02      	cmp	r3, #2
 800b68c:	d003      	beq.n	800b696 <HAL_GPIO_Init+0x4e>
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	2b12      	cmp	r3, #18
 800b694:	d123      	bne.n	800b6de <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	08da      	lsrs	r2, r3, #3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	3208      	adds	r2, #8
 800b69e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b6a4:	69fb      	ldr	r3, [r7, #28]
 800b6a6:	f003 0307 	and.w	r3, r3, #7
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	220f      	movs	r2, #15
 800b6ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b2:	43db      	mvns	r3, r3
 800b6b4:	69ba      	ldr	r2, [r7, #24]
 800b6b6:	4013      	ands	r3, r2
 800b6b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	691a      	ldr	r2, [r3, #16]
 800b6be:	69fb      	ldr	r3, [r7, #28]
 800b6c0:	f003 0307 	and.w	r3, r3, #7
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ca:	69ba      	ldr	r2, [r7, #24]
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800b6d0:	69fb      	ldr	r3, [r7, #28]
 800b6d2:	08da      	lsrs	r2, r3, #3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	3208      	adds	r2, #8
 800b6d8:	69b9      	ldr	r1, [r7, #24]
 800b6da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	005b      	lsls	r3, r3, #1
 800b6e8:	2203      	movs	r2, #3
 800b6ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ee:	43db      	mvns	r3, r3
 800b6f0:	69ba      	ldr	r2, [r7, #24]
 800b6f2:	4013      	ands	r3, r2
 800b6f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	f003 0203 	and.w	r2, r3, #3
 800b6fe:	69fb      	ldr	r3, [r7, #28]
 800b700:	005b      	lsls	r3, r3, #1
 800b702:	fa02 f303 	lsl.w	r3, r2, r3
 800b706:	69ba      	ldr	r2, [r7, #24]
 800b708:	4313      	orrs	r3, r2
 800b70a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	69ba      	ldr	r2, [r7, #24]
 800b710:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	2b01      	cmp	r3, #1
 800b718:	d00b      	beq.n	800b732 <HAL_GPIO_Init+0xea>
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	2b02      	cmp	r3, #2
 800b720:	d007      	beq.n	800b732 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b726:	2b11      	cmp	r3, #17
 800b728:	d003      	beq.n	800b732 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	2b12      	cmp	r3, #18
 800b730:	d130      	bne.n	800b794 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	005b      	lsls	r3, r3, #1
 800b73c:	2203      	movs	r2, #3
 800b73e:	fa02 f303 	lsl.w	r3, r2, r3
 800b742:	43db      	mvns	r3, r3
 800b744:	69ba      	ldr	r2, [r7, #24]
 800b746:	4013      	ands	r3, r2
 800b748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	68da      	ldr	r2, [r3, #12]
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	005b      	lsls	r3, r3, #1
 800b752:	fa02 f303 	lsl.w	r3, r2, r3
 800b756:	69ba      	ldr	r2, [r7, #24]
 800b758:	4313      	orrs	r3, r2
 800b75a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	69ba      	ldr	r2, [r7, #24]
 800b760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b768:	2201      	movs	r2, #1
 800b76a:	69fb      	ldr	r3, [r7, #28]
 800b76c:	fa02 f303 	lsl.w	r3, r2, r3
 800b770:	43db      	mvns	r3, r3
 800b772:	69ba      	ldr	r2, [r7, #24]
 800b774:	4013      	ands	r3, r2
 800b776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	091b      	lsrs	r3, r3, #4
 800b77e:	f003 0201 	and.w	r2, r3, #1
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	fa02 f303 	lsl.w	r3, r2, r3
 800b788:	69ba      	ldr	r2, [r7, #24]
 800b78a:	4313      	orrs	r3, r2
 800b78c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	69ba      	ldr	r2, [r7, #24]
 800b792:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	005b      	lsls	r3, r3, #1
 800b79e:	2203      	movs	r2, #3
 800b7a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b7a4:	43db      	mvns	r3, r3
 800b7a6:	69ba      	ldr	r2, [r7, #24]
 800b7a8:	4013      	ands	r3, r2
 800b7aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	689a      	ldr	r2, [r3, #8]
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	005b      	lsls	r3, r3, #1
 800b7b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b7b8:	69ba      	ldr	r2, [r7, #24]
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	69ba      	ldr	r2, [r7, #24]
 800b7c2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f000 80be 	beq.w	800b94e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b7d2:	4b65      	ldr	r3, [pc, #404]	; (800b968 <HAL_GPIO_Init+0x320>)
 800b7d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7d6:	4a64      	ldr	r2, [pc, #400]	; (800b968 <HAL_GPIO_Init+0x320>)
 800b7d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b7dc:	6453      	str	r3, [r2, #68]	; 0x44
 800b7de:	4b62      	ldr	r3, [pc, #392]	; (800b968 <HAL_GPIO_Init+0x320>)
 800b7e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7e6:	60fb      	str	r3, [r7, #12]
 800b7e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800b7ea:	4a60      	ldr	r2, [pc, #384]	; (800b96c <HAL_GPIO_Init+0x324>)
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	089b      	lsrs	r3, r3, #2
 800b7f0:	3302      	adds	r3, #2
 800b7f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b7f8:	69fb      	ldr	r3, [r7, #28]
 800b7fa:	f003 0303 	and.w	r3, r3, #3
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	220f      	movs	r2, #15
 800b802:	fa02 f303 	lsl.w	r3, r2, r3
 800b806:	43db      	mvns	r3, r3
 800b808:	69ba      	ldr	r2, [r7, #24]
 800b80a:	4013      	ands	r3, r2
 800b80c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	4a57      	ldr	r2, [pc, #348]	; (800b970 <HAL_GPIO_Init+0x328>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d037      	beq.n	800b886 <HAL_GPIO_Init+0x23e>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	4a56      	ldr	r2, [pc, #344]	; (800b974 <HAL_GPIO_Init+0x32c>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d031      	beq.n	800b882 <HAL_GPIO_Init+0x23a>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	4a55      	ldr	r2, [pc, #340]	; (800b978 <HAL_GPIO_Init+0x330>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d02b      	beq.n	800b87e <HAL_GPIO_Init+0x236>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	4a54      	ldr	r2, [pc, #336]	; (800b97c <HAL_GPIO_Init+0x334>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d025      	beq.n	800b87a <HAL_GPIO_Init+0x232>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	4a53      	ldr	r2, [pc, #332]	; (800b980 <HAL_GPIO_Init+0x338>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d01f      	beq.n	800b876 <HAL_GPIO_Init+0x22e>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	4a52      	ldr	r2, [pc, #328]	; (800b984 <HAL_GPIO_Init+0x33c>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d019      	beq.n	800b872 <HAL_GPIO_Init+0x22a>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4a51      	ldr	r2, [pc, #324]	; (800b988 <HAL_GPIO_Init+0x340>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d013      	beq.n	800b86e <HAL_GPIO_Init+0x226>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	4a50      	ldr	r2, [pc, #320]	; (800b98c <HAL_GPIO_Init+0x344>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d00d      	beq.n	800b86a <HAL_GPIO_Init+0x222>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4a4f      	ldr	r2, [pc, #316]	; (800b990 <HAL_GPIO_Init+0x348>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d007      	beq.n	800b866 <HAL_GPIO_Init+0x21e>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	4a4e      	ldr	r2, [pc, #312]	; (800b994 <HAL_GPIO_Init+0x34c>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d101      	bne.n	800b862 <HAL_GPIO_Init+0x21a>
 800b85e:	2309      	movs	r3, #9
 800b860:	e012      	b.n	800b888 <HAL_GPIO_Init+0x240>
 800b862:	230a      	movs	r3, #10
 800b864:	e010      	b.n	800b888 <HAL_GPIO_Init+0x240>
 800b866:	2308      	movs	r3, #8
 800b868:	e00e      	b.n	800b888 <HAL_GPIO_Init+0x240>
 800b86a:	2307      	movs	r3, #7
 800b86c:	e00c      	b.n	800b888 <HAL_GPIO_Init+0x240>
 800b86e:	2306      	movs	r3, #6
 800b870:	e00a      	b.n	800b888 <HAL_GPIO_Init+0x240>
 800b872:	2305      	movs	r3, #5
 800b874:	e008      	b.n	800b888 <HAL_GPIO_Init+0x240>
 800b876:	2304      	movs	r3, #4
 800b878:	e006      	b.n	800b888 <HAL_GPIO_Init+0x240>
 800b87a:	2303      	movs	r3, #3
 800b87c:	e004      	b.n	800b888 <HAL_GPIO_Init+0x240>
 800b87e:	2302      	movs	r3, #2
 800b880:	e002      	b.n	800b888 <HAL_GPIO_Init+0x240>
 800b882:	2301      	movs	r3, #1
 800b884:	e000      	b.n	800b888 <HAL_GPIO_Init+0x240>
 800b886:	2300      	movs	r3, #0
 800b888:	69fa      	ldr	r2, [r7, #28]
 800b88a:	f002 0203 	and.w	r2, r2, #3
 800b88e:	0092      	lsls	r2, r2, #2
 800b890:	4093      	lsls	r3, r2
 800b892:	69ba      	ldr	r2, [r7, #24]
 800b894:	4313      	orrs	r3, r2
 800b896:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800b898:	4934      	ldr	r1, [pc, #208]	; (800b96c <HAL_GPIO_Init+0x324>)
 800b89a:	69fb      	ldr	r3, [r7, #28]
 800b89c:	089b      	lsrs	r3, r3, #2
 800b89e:	3302      	adds	r3, #2
 800b8a0:	69ba      	ldr	r2, [r7, #24]
 800b8a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b8a6:	4b3c      	ldr	r3, [pc, #240]	; (800b998 <HAL_GPIO_Init+0x350>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	43db      	mvns	r3, r3
 800b8b0:	69ba      	ldr	r2, [r7, #24]
 800b8b2:	4013      	ands	r3, r2
 800b8b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d003      	beq.n	800b8ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b8c2:	69ba      	ldr	r2, [r7, #24]
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b8ca:	4a33      	ldr	r2, [pc, #204]	; (800b998 <HAL_GPIO_Init+0x350>)
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b8d0:	4b31      	ldr	r3, [pc, #196]	; (800b998 <HAL_GPIO_Init+0x350>)
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	43db      	mvns	r3, r3
 800b8da:	69ba      	ldr	r2, [r7, #24]
 800b8dc:	4013      	ands	r3, r2
 800b8de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d003      	beq.n	800b8f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b8ec:	69ba      	ldr	r2, [r7, #24]
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b8f4:	4a28      	ldr	r2, [pc, #160]	; (800b998 <HAL_GPIO_Init+0x350>)
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b8fa:	4b27      	ldr	r3, [pc, #156]	; (800b998 <HAL_GPIO_Init+0x350>)
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	43db      	mvns	r3, r3
 800b904:	69ba      	ldr	r2, [r7, #24]
 800b906:	4013      	ands	r3, r2
 800b908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b912:	2b00      	cmp	r3, #0
 800b914:	d003      	beq.n	800b91e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b916:	69ba      	ldr	r2, [r7, #24]
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	4313      	orrs	r3, r2
 800b91c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b91e:	4a1e      	ldr	r2, [pc, #120]	; (800b998 <HAL_GPIO_Init+0x350>)
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b924:	4b1c      	ldr	r3, [pc, #112]	; (800b998 <HAL_GPIO_Init+0x350>)
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	43db      	mvns	r3, r3
 800b92e:	69ba      	ldr	r2, [r7, #24]
 800b930:	4013      	ands	r3, r2
 800b932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d003      	beq.n	800b948 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b940:	69ba      	ldr	r2, [r7, #24]
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	4313      	orrs	r3, r2
 800b946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b948:	4a13      	ldr	r2, [pc, #76]	; (800b998 <HAL_GPIO_Init+0x350>)
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	3301      	adds	r3, #1
 800b952:	61fb      	str	r3, [r7, #28]
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	2b0f      	cmp	r3, #15
 800b958:	f67f ae86 	bls.w	800b668 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800b95c:	bf00      	nop
 800b95e:	3724      	adds	r7, #36	; 0x24
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr
 800b968:	40023800 	.word	0x40023800
 800b96c:	40013800 	.word	0x40013800
 800b970:	40020000 	.word	0x40020000
 800b974:	40020400 	.word	0x40020400
 800b978:	40020800 	.word	0x40020800
 800b97c:	40020c00 	.word	0x40020c00
 800b980:	40021000 	.word	0x40021000
 800b984:	40021400 	.word	0x40021400
 800b988:	40021800 	.word	0x40021800
 800b98c:	40021c00 	.word	0x40021c00
 800b990:	40022000 	.word	0x40022000
 800b994:	40022400 	.word	0x40022400
 800b998:	40013c00 	.word	0x40013c00

0800b99c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b087      	sub	sp, #28
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	617b      	str	r3, [r7, #20]
 800b9b6:	e0d9      	b.n	800bb6c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b9c0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800b9c2:	683a      	ldr	r2, [r7, #0]
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	4013      	ands	r3, r2
 800b9c8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800b9ca:	68fa      	ldr	r2, [r7, #12]
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	f040 80c9 	bne.w	800bb66 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800b9d4:	4a6a      	ldr	r2, [pc, #424]	; (800bb80 <HAL_GPIO_DeInit+0x1e4>)
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	089b      	lsrs	r3, r3, #2
 800b9da:	3302      	adds	r3, #2
 800b9dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9e0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	f003 0303 	and.w	r3, r3, #3
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	220f      	movs	r2, #15
 800b9ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b9f0:	68ba      	ldr	r2, [r7, #8]
 800b9f2:	4013      	ands	r3, r2
 800b9f4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	4a62      	ldr	r2, [pc, #392]	; (800bb84 <HAL_GPIO_DeInit+0x1e8>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d037      	beq.n	800ba6e <HAL_GPIO_DeInit+0xd2>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	4a61      	ldr	r2, [pc, #388]	; (800bb88 <HAL_GPIO_DeInit+0x1ec>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d031      	beq.n	800ba6a <HAL_GPIO_DeInit+0xce>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	4a60      	ldr	r2, [pc, #384]	; (800bb8c <HAL_GPIO_DeInit+0x1f0>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d02b      	beq.n	800ba66 <HAL_GPIO_DeInit+0xca>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	4a5f      	ldr	r2, [pc, #380]	; (800bb90 <HAL_GPIO_DeInit+0x1f4>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d025      	beq.n	800ba62 <HAL_GPIO_DeInit+0xc6>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	4a5e      	ldr	r2, [pc, #376]	; (800bb94 <HAL_GPIO_DeInit+0x1f8>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d01f      	beq.n	800ba5e <HAL_GPIO_DeInit+0xc2>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	4a5d      	ldr	r2, [pc, #372]	; (800bb98 <HAL_GPIO_DeInit+0x1fc>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d019      	beq.n	800ba5a <HAL_GPIO_DeInit+0xbe>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	4a5c      	ldr	r2, [pc, #368]	; (800bb9c <HAL_GPIO_DeInit+0x200>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d013      	beq.n	800ba56 <HAL_GPIO_DeInit+0xba>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4a5b      	ldr	r2, [pc, #364]	; (800bba0 <HAL_GPIO_DeInit+0x204>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d00d      	beq.n	800ba52 <HAL_GPIO_DeInit+0xb6>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	4a5a      	ldr	r2, [pc, #360]	; (800bba4 <HAL_GPIO_DeInit+0x208>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d007      	beq.n	800ba4e <HAL_GPIO_DeInit+0xb2>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	4a59      	ldr	r2, [pc, #356]	; (800bba8 <HAL_GPIO_DeInit+0x20c>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d101      	bne.n	800ba4a <HAL_GPIO_DeInit+0xae>
 800ba46:	2309      	movs	r3, #9
 800ba48:	e012      	b.n	800ba70 <HAL_GPIO_DeInit+0xd4>
 800ba4a:	230a      	movs	r3, #10
 800ba4c:	e010      	b.n	800ba70 <HAL_GPIO_DeInit+0xd4>
 800ba4e:	2308      	movs	r3, #8
 800ba50:	e00e      	b.n	800ba70 <HAL_GPIO_DeInit+0xd4>
 800ba52:	2307      	movs	r3, #7
 800ba54:	e00c      	b.n	800ba70 <HAL_GPIO_DeInit+0xd4>
 800ba56:	2306      	movs	r3, #6
 800ba58:	e00a      	b.n	800ba70 <HAL_GPIO_DeInit+0xd4>
 800ba5a:	2305      	movs	r3, #5
 800ba5c:	e008      	b.n	800ba70 <HAL_GPIO_DeInit+0xd4>
 800ba5e:	2304      	movs	r3, #4
 800ba60:	e006      	b.n	800ba70 <HAL_GPIO_DeInit+0xd4>
 800ba62:	2303      	movs	r3, #3
 800ba64:	e004      	b.n	800ba70 <HAL_GPIO_DeInit+0xd4>
 800ba66:	2302      	movs	r3, #2
 800ba68:	e002      	b.n	800ba70 <HAL_GPIO_DeInit+0xd4>
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	e000      	b.n	800ba70 <HAL_GPIO_DeInit+0xd4>
 800ba6e:	2300      	movs	r3, #0
 800ba70:	697a      	ldr	r2, [r7, #20]
 800ba72:	f002 0203 	and.w	r2, r2, #3
 800ba76:	0092      	lsls	r2, r2, #2
 800ba78:	4093      	lsls	r3, r2
 800ba7a:	68ba      	ldr	r2, [r7, #8]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d132      	bne.n	800bae6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	f003 0303 	and.w	r3, r3, #3
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	220f      	movs	r2, #15
 800ba8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba8e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800ba90:	4a3b      	ldr	r2, [pc, #236]	; (800bb80 <HAL_GPIO_DeInit+0x1e4>)
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	089b      	lsrs	r3, r3, #2
 800ba96:	3302      	adds	r3, #2
 800ba98:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	43da      	mvns	r2, r3
 800baa0:	4837      	ldr	r0, [pc, #220]	; (800bb80 <HAL_GPIO_DeInit+0x1e4>)
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	089b      	lsrs	r3, r3, #2
 800baa6:	400a      	ands	r2, r1
 800baa8:	3302      	adds	r3, #2
 800baaa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800baae:	4b3f      	ldr	r3, [pc, #252]	; (800bbac <HAL_GPIO_DeInit+0x210>)
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	43db      	mvns	r3, r3
 800bab6:	493d      	ldr	r1, [pc, #244]	; (800bbac <HAL_GPIO_DeInit+0x210>)
 800bab8:	4013      	ands	r3, r2
 800baba:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800babc:	4b3b      	ldr	r3, [pc, #236]	; (800bbac <HAL_GPIO_DeInit+0x210>)
 800babe:	685a      	ldr	r2, [r3, #4]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	43db      	mvns	r3, r3
 800bac4:	4939      	ldr	r1, [pc, #228]	; (800bbac <HAL_GPIO_DeInit+0x210>)
 800bac6:	4013      	ands	r3, r2
 800bac8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800baca:	4b38      	ldr	r3, [pc, #224]	; (800bbac <HAL_GPIO_DeInit+0x210>)
 800bacc:	689a      	ldr	r2, [r3, #8]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	43db      	mvns	r3, r3
 800bad2:	4936      	ldr	r1, [pc, #216]	; (800bbac <HAL_GPIO_DeInit+0x210>)
 800bad4:	4013      	ands	r3, r2
 800bad6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800bad8:	4b34      	ldr	r3, [pc, #208]	; (800bbac <HAL_GPIO_DeInit+0x210>)
 800bada:	68da      	ldr	r2, [r3, #12]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	43db      	mvns	r3, r3
 800bae0:	4932      	ldr	r1, [pc, #200]	; (800bbac <HAL_GPIO_DeInit+0x210>)
 800bae2:	4013      	ands	r3, r2
 800bae4:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	005b      	lsls	r3, r3, #1
 800baee:	2103      	movs	r1, #3
 800baf0:	fa01 f303 	lsl.w	r3, r1, r3
 800baf4:	43db      	mvns	r3, r3
 800baf6:	401a      	ands	r2, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	08da      	lsrs	r2, r3, #3
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	3208      	adds	r2, #8
 800bb04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	f003 0307 	and.w	r3, r3, #7
 800bb0e:	009b      	lsls	r3, r3, #2
 800bb10:	220f      	movs	r2, #15
 800bb12:	fa02 f303 	lsl.w	r3, r2, r3
 800bb16:	43db      	mvns	r3, r3
 800bb18:	697a      	ldr	r2, [r7, #20]
 800bb1a:	08d2      	lsrs	r2, r2, #3
 800bb1c:	4019      	ands	r1, r3
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	3208      	adds	r2, #8
 800bb22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	689a      	ldr	r2, [r3, #8]
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	005b      	lsls	r3, r3, #1
 800bb2e:	2103      	movs	r1, #3
 800bb30:	fa01 f303 	lsl.w	r3, r1, r3
 800bb34:	43db      	mvns	r3, r3
 800bb36:	401a      	ands	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	685a      	ldr	r2, [r3, #4]
 800bb40:	2101      	movs	r1, #1
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	fa01 f303 	lsl.w	r3, r1, r3
 800bb48:	43db      	mvns	r3, r3
 800bb4a:	401a      	ands	r2, r3
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	68da      	ldr	r2, [r3, #12]
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	005b      	lsls	r3, r3, #1
 800bb58:	2103      	movs	r1, #3
 800bb5a:	fa01 f303 	lsl.w	r3, r1, r3
 800bb5e:	43db      	mvns	r3, r3
 800bb60:	401a      	ands	r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	617b      	str	r3, [r7, #20]
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	2b0f      	cmp	r3, #15
 800bb70:	f67f af22 	bls.w	800b9b8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800bb74:	bf00      	nop
 800bb76:	371c      	adds	r7, #28
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr
 800bb80:	40013800 	.word	0x40013800
 800bb84:	40020000 	.word	0x40020000
 800bb88:	40020400 	.word	0x40020400
 800bb8c:	40020800 	.word	0x40020800
 800bb90:	40020c00 	.word	0x40020c00
 800bb94:	40021000 	.word	0x40021000
 800bb98:	40021400 	.word	0x40021400
 800bb9c:	40021800 	.word	0x40021800
 800bba0:	40021c00 	.word	0x40021c00
 800bba4:	40022000 	.word	0x40022000
 800bba8:	40022400 	.word	0x40022400
 800bbac:	40013c00 	.word	0x40013c00

0800bbb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d101      	bne.n	800bbc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	e07f      	b.n	800bcc2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d106      	bne.n	800bbdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f8a9 	bl	800bd2e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2224      	movs	r2, #36	; 0x24
 800bbe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f022 0201 	bic.w	r2, r2, #1
 800bbf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	685a      	ldr	r2, [r3, #4]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bc00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	689a      	ldr	r2, [r3, #8]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bc10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	68db      	ldr	r3, [r3, #12]
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d107      	bne.n	800bc2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	689a      	ldr	r2, [r3, #8]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc26:	609a      	str	r2, [r3, #8]
 800bc28:	e006      	b.n	800bc38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	689a      	ldr	r2, [r3, #8]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800bc36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	2b02      	cmp	r3, #2
 800bc3e:	d104      	bne.n	800bc4a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	6859      	ldr	r1, [r3, #4]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	4b1d      	ldr	r3, [pc, #116]	; (800bccc <HAL_I2C_Init+0x11c>)
 800bc56:	430b      	orrs	r3, r1
 800bc58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	68da      	ldr	r2, [r3, #12]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bc68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	691a      	ldr	r2, [r3, #16]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	695b      	ldr	r3, [r3, #20]
 800bc72:	ea42 0103 	orr.w	r1, r2, r3
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	699b      	ldr	r3, [r3, #24]
 800bc7a:	021a      	lsls	r2, r3, #8
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	430a      	orrs	r2, r1
 800bc82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	69d9      	ldr	r1, [r3, #28]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6a1a      	ldr	r2, [r3, #32]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	430a      	orrs	r2, r1
 800bc92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f042 0201 	orr.w	r2, r2, #1
 800bca2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2220      	movs	r2, #32
 800bcae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3708      	adds	r7, #8
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	02008000 	.word	0x02008000

0800bcd0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d101      	bne.n	800bce2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800bcde:	2301      	movs	r3, #1
 800bce0:	e021      	b.n	800bd26 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2224      	movs	r2, #36	; 0x24
 800bce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	681a      	ldr	r2, [r3, #0]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f022 0201 	bic.w	r2, r2, #1
 800bcf8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 f821 	bl	800bd42 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bd24:	2300      	movs	r3, #0
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3708      	adds	r7, #8
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}

0800bd2e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800bd2e:	b480      	push	{r7}
 800bd30:	b083      	sub	sp, #12
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800bd36:	bf00      	nop
 800bd38:	370c      	adds	r7, #12
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr

0800bd42 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800bd42:	b480      	push	{r7}
 800bd44:	b083      	sub	sp, #12
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800bd4a:	bf00      	nop
 800bd4c:	370c      	adds	r7, #12
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
	...

0800bd58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b088      	sub	sp, #32
 800bd5c:	af02      	add	r7, sp, #8
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	4608      	mov	r0, r1
 800bd62:	4611      	mov	r1, r2
 800bd64:	461a      	mov	r2, r3
 800bd66:	4603      	mov	r3, r0
 800bd68:	817b      	strh	r3, [r7, #10]
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	813b      	strh	r3, [r7, #8]
 800bd6e:	4613      	mov	r3, r2
 800bd70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	2b20      	cmp	r3, #32
 800bd7c:	f040 80f9 	bne.w	800bf72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd80:	6a3b      	ldr	r3, [r7, #32]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d002      	beq.n	800bd8c <HAL_I2C_Mem_Write+0x34>
 800bd86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d105      	bne.n	800bd98 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	e0ed      	b.n	800bf74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d101      	bne.n	800bda6 <HAL_I2C_Mem_Write+0x4e>
 800bda2:	2302      	movs	r3, #2
 800bda4:	e0e6      	b.n	800bf74 <HAL_I2C_Mem_Write+0x21c>
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bdae:	f7fe fe4d 	bl	800aa4c <HAL_GetTick>
 800bdb2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	9300      	str	r3, [sp, #0]
 800bdb8:	2319      	movs	r3, #25
 800bdba:	2201      	movs	r2, #1
 800bdbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bdc0:	68f8      	ldr	r0, [r7, #12]
 800bdc2:	f000 fad1 	bl	800c368 <I2C_WaitOnFlagUntilTimeout>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d001      	beq.n	800bdd0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	e0d1      	b.n	800bf74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2221      	movs	r2, #33	; 0x21
 800bdd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2240      	movs	r2, #64	; 0x40
 800bddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2200      	movs	r2, #0
 800bde4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	6a3a      	ldr	r2, [r7, #32]
 800bdea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bdf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bdf8:	88f8      	ldrh	r0, [r7, #6]
 800bdfa:	893a      	ldrh	r2, [r7, #8]
 800bdfc:	8979      	ldrh	r1, [r7, #10]
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	9301      	str	r3, [sp, #4]
 800be02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	4603      	mov	r3, r0
 800be08:	68f8      	ldr	r0, [r7, #12]
 800be0a:	f000 f9e1 	bl	800c1d0 <I2C_RequestMemoryWrite>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d005      	beq.n	800be20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2200      	movs	r2, #0
 800be18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800be1c:	2301      	movs	r3, #1
 800be1e:	e0a9      	b.n	800bf74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be24:	b29b      	uxth	r3, r3
 800be26:	2bff      	cmp	r3, #255	; 0xff
 800be28:	d90e      	bls.n	800be48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	22ff      	movs	r2, #255	; 0xff
 800be2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be34:	b2da      	uxtb	r2, r3
 800be36:	8979      	ldrh	r1, [r7, #10]
 800be38:	2300      	movs	r3, #0
 800be3a:	9300      	str	r3, [sp, #0]
 800be3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800be40:	68f8      	ldr	r0, [r7, #12]
 800be42:	f000 fbb3 	bl	800c5ac <I2C_TransferConfig>
 800be46:	e00f      	b.n	800be68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be4c:	b29a      	uxth	r2, r3
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be56:	b2da      	uxtb	r2, r3
 800be58:	8979      	ldrh	r1, [r7, #10]
 800be5a:	2300      	movs	r3, #0
 800be5c:	9300      	str	r3, [sp, #0]
 800be5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800be62:	68f8      	ldr	r0, [r7, #12]
 800be64:	f000 fba2 	bl	800c5ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800be68:	697a      	ldr	r2, [r7, #20]
 800be6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be6c:	68f8      	ldr	r0, [r7, #12]
 800be6e:	f000 fabb 	bl	800c3e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	d001      	beq.n	800be7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800be78:	2301      	movs	r3, #1
 800be7a:	e07b      	b.n	800bf74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be80:	781a      	ldrb	r2, [r3, #0]
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8c:	1c5a      	adds	r2, r3, #1
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be96:	b29b      	uxth	r3, r3
 800be98:	3b01      	subs	r3, #1
 800be9a:	b29a      	uxth	r2, r3
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bea4:	3b01      	subs	r3, #1
 800bea6:	b29a      	uxth	r2, r3
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d034      	beq.n	800bf20 <HAL_I2C_Mem_Write+0x1c8>
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d130      	bne.n	800bf20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	9300      	str	r3, [sp, #0]
 800bec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec4:	2200      	movs	r2, #0
 800bec6:	2180      	movs	r1, #128	; 0x80
 800bec8:	68f8      	ldr	r0, [r7, #12]
 800beca:	f000 fa4d 	bl	800c368 <I2C_WaitOnFlagUntilTimeout>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d001      	beq.n	800bed8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800bed4:	2301      	movs	r3, #1
 800bed6:	e04d      	b.n	800bf74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bedc:	b29b      	uxth	r3, r3
 800bede:	2bff      	cmp	r3, #255	; 0xff
 800bee0:	d90e      	bls.n	800bf00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	22ff      	movs	r2, #255	; 0xff
 800bee6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800beec:	b2da      	uxtb	r2, r3
 800beee:	8979      	ldrh	r1, [r7, #10]
 800bef0:	2300      	movs	r3, #0
 800bef2:	9300      	str	r3, [sp, #0]
 800bef4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bef8:	68f8      	ldr	r0, [r7, #12]
 800befa:	f000 fb57 	bl	800c5ac <I2C_TransferConfig>
 800befe:	e00f      	b.n	800bf20 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf0e:	b2da      	uxtb	r2, r3
 800bf10:	8979      	ldrh	r1, [r7, #10]
 800bf12:	2300      	movs	r3, #0
 800bf14:	9300      	str	r3, [sp, #0]
 800bf16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bf1a:	68f8      	ldr	r0, [r7, #12]
 800bf1c:	f000 fb46 	bl	800c5ac <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d19e      	bne.n	800be68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bf2a:	697a      	ldr	r2, [r7, #20]
 800bf2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f000 fa9a 	bl	800c468 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d001      	beq.n	800bf3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e01a      	b.n	800bf74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2220      	movs	r2, #32
 800bf44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	6859      	ldr	r1, [r3, #4]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	4b0a      	ldr	r3, [pc, #40]	; (800bf7c <HAL_I2C_Mem_Write+0x224>)
 800bf52:	400b      	ands	r3, r1
 800bf54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2220      	movs	r2, #32
 800bf5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2200      	movs	r2, #0
 800bf62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	e000      	b.n	800bf74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800bf72:	2302      	movs	r3, #2
  }
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3718      	adds	r7, #24
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	fe00e800 	.word	0xfe00e800

0800bf80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b088      	sub	sp, #32
 800bf84:	af02      	add	r7, sp, #8
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	4608      	mov	r0, r1
 800bf8a:	4611      	mov	r1, r2
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	4603      	mov	r3, r0
 800bf90:	817b      	strh	r3, [r7, #10]
 800bf92:	460b      	mov	r3, r1
 800bf94:	813b      	strh	r3, [r7, #8]
 800bf96:	4613      	mov	r3, r2
 800bf98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	2b20      	cmp	r3, #32
 800bfa4:	f040 80fd 	bne.w	800c1a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800bfa8:	6a3b      	ldr	r3, [r7, #32]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d002      	beq.n	800bfb4 <HAL_I2C_Mem_Read+0x34>
 800bfae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d105      	bne.n	800bfc0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	e0f1      	b.n	800c1a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d101      	bne.n	800bfce <HAL_I2C_Mem_Read+0x4e>
 800bfca:	2302      	movs	r3, #2
 800bfcc:	e0ea      	b.n	800c1a4 <HAL_I2C_Mem_Read+0x224>
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bfd6:	f7fe fd39 	bl	800aa4c <HAL_GetTick>
 800bfda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	9300      	str	r3, [sp, #0]
 800bfe0:	2319      	movs	r3, #25
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bfe8:	68f8      	ldr	r0, [r7, #12]
 800bfea:	f000 f9bd 	bl	800c368 <I2C_WaitOnFlagUntilTimeout>
 800bfee:	4603      	mov	r3, r0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d001      	beq.n	800bff8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800bff4:	2301      	movs	r3, #1
 800bff6:	e0d5      	b.n	800c1a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2222      	movs	r2, #34	; 0x22
 800bffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2240      	movs	r2, #64	; 0x40
 800c004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2200      	movs	r2, #0
 800c00c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	6a3a      	ldr	r2, [r7, #32]
 800c012:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c018:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2200      	movs	r2, #0
 800c01e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c020:	88f8      	ldrh	r0, [r7, #6]
 800c022:	893a      	ldrh	r2, [r7, #8]
 800c024:	8979      	ldrh	r1, [r7, #10]
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	9301      	str	r3, [sp, #4]
 800c02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02c:	9300      	str	r3, [sp, #0]
 800c02e:	4603      	mov	r3, r0
 800c030:	68f8      	ldr	r0, [r7, #12]
 800c032:	f000 f921 	bl	800c278 <I2C_RequestMemoryRead>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d005      	beq.n	800c048 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2200      	movs	r2, #0
 800c040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c044:	2301      	movs	r3, #1
 800c046:	e0ad      	b.n	800c1a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	2bff      	cmp	r3, #255	; 0xff
 800c050:	d90e      	bls.n	800c070 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	22ff      	movs	r2, #255	; 0xff
 800c056:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c05c:	b2da      	uxtb	r2, r3
 800c05e:	8979      	ldrh	r1, [r7, #10]
 800c060:	4b52      	ldr	r3, [pc, #328]	; (800c1ac <HAL_I2C_Mem_Read+0x22c>)
 800c062:	9300      	str	r3, [sp, #0]
 800c064:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f000 fa9f 	bl	800c5ac <I2C_TransferConfig>
 800c06e:	e00f      	b.n	800c090 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c074:	b29a      	uxth	r2, r3
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c07e:	b2da      	uxtb	r2, r3
 800c080:	8979      	ldrh	r1, [r7, #10]
 800c082:	4b4a      	ldr	r3, [pc, #296]	; (800c1ac <HAL_I2C_Mem_Read+0x22c>)
 800c084:	9300      	str	r3, [sp, #0]
 800c086:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	f000 fa8e 	bl	800c5ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c096:	2200      	movs	r2, #0
 800c098:	2104      	movs	r1, #4
 800c09a:	68f8      	ldr	r0, [r7, #12]
 800c09c:	f000 f964 	bl	800c368 <I2C_WaitOnFlagUntilTimeout>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d001      	beq.n	800c0aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e07c      	b.n	800c1a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b4:	b2d2      	uxtb	r2, r2
 800c0b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0bc:	1c5a      	adds	r2, r3, #1
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0c6:	3b01      	subs	r3, #1
 800c0c8:	b29a      	uxth	r2, r3
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	3b01      	subs	r3, #1
 800c0d6:	b29a      	uxth	r2, r3
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d034      	beq.n	800c150 <HAL_I2C_Mem_Read+0x1d0>
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d130      	bne.n	800c150 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	9300      	str	r3, [sp, #0]
 800c0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	2180      	movs	r1, #128	; 0x80
 800c0f8:	68f8      	ldr	r0, [r7, #12]
 800c0fa:	f000 f935 	bl	800c368 <I2C_WaitOnFlagUntilTimeout>
 800c0fe:	4603      	mov	r3, r0
 800c100:	2b00      	cmp	r3, #0
 800c102:	d001      	beq.n	800c108 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800c104:	2301      	movs	r3, #1
 800c106:	e04d      	b.n	800c1a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	2bff      	cmp	r3, #255	; 0xff
 800c110:	d90e      	bls.n	800c130 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	22ff      	movs	r2, #255	; 0xff
 800c116:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c11c:	b2da      	uxtb	r2, r3
 800c11e:	8979      	ldrh	r1, [r7, #10]
 800c120:	2300      	movs	r3, #0
 800c122:	9300      	str	r3, [sp, #0]
 800c124:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c128:	68f8      	ldr	r0, [r7, #12]
 800c12a:	f000 fa3f 	bl	800c5ac <I2C_TransferConfig>
 800c12e:	e00f      	b.n	800c150 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c134:	b29a      	uxth	r2, r3
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c13e:	b2da      	uxtb	r2, r3
 800c140:	8979      	ldrh	r1, [r7, #10]
 800c142:	2300      	movs	r3, #0
 800c144:	9300      	str	r3, [sp, #0]
 800c146:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c14a:	68f8      	ldr	r0, [r7, #12]
 800c14c:	f000 fa2e 	bl	800c5ac <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c154:	b29b      	uxth	r3, r3
 800c156:	2b00      	cmp	r3, #0
 800c158:	d19a      	bne.n	800c090 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c15a:	697a      	ldr	r2, [r7, #20]
 800c15c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c15e:	68f8      	ldr	r0, [r7, #12]
 800c160:	f000 f982 	bl	800c468 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d001      	beq.n	800c16e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800c16a:	2301      	movs	r3, #1
 800c16c:	e01a      	b.n	800c1a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2220      	movs	r2, #32
 800c174:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	6859      	ldr	r1, [r3, #4]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	4b0b      	ldr	r3, [pc, #44]	; (800c1b0 <HAL_I2C_Mem_Read+0x230>)
 800c182:	400b      	ands	r3, r1
 800c184:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2220      	movs	r2, #32
 800c18a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2200      	movs	r2, #0
 800c192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2200      	movs	r2, #0
 800c19a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	e000      	b.n	800c1a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800c1a2:	2302      	movs	r3, #2
  }
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3718      	adds	r7, #24
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	80002400 	.word	0x80002400
 800c1b0:	fe00e800 	.word	0xfe00e800

0800c1b4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1c2:	b2db      	uxtb	r3, r3
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	370c      	adds	r7, #12
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b086      	sub	sp, #24
 800c1d4:	af02      	add	r7, sp, #8
 800c1d6:	60f8      	str	r0, [r7, #12]
 800c1d8:	4608      	mov	r0, r1
 800c1da:	4611      	mov	r1, r2
 800c1dc:	461a      	mov	r2, r3
 800c1de:	4603      	mov	r3, r0
 800c1e0:	817b      	strh	r3, [r7, #10]
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	813b      	strh	r3, [r7, #8]
 800c1e6:	4613      	mov	r3, r2
 800c1e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c1ea:	88fb      	ldrh	r3, [r7, #6]
 800c1ec:	b2da      	uxtb	r2, r3
 800c1ee:	8979      	ldrh	r1, [r7, #10]
 800c1f0:	4b20      	ldr	r3, [pc, #128]	; (800c274 <I2C_RequestMemoryWrite+0xa4>)
 800c1f2:	9300      	str	r3, [sp, #0]
 800c1f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c1f8:	68f8      	ldr	r0, [r7, #12]
 800c1fa:	f000 f9d7 	bl	800c5ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c1fe:	69fa      	ldr	r2, [r7, #28]
 800c200:	69b9      	ldr	r1, [r7, #24]
 800c202:	68f8      	ldr	r0, [r7, #12]
 800c204:	f000 f8f0 	bl	800c3e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d001      	beq.n	800c212 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800c20e:	2301      	movs	r3, #1
 800c210:	e02c      	b.n	800c26c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c212:	88fb      	ldrh	r3, [r7, #6]
 800c214:	2b01      	cmp	r3, #1
 800c216:	d105      	bne.n	800c224 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c218:	893b      	ldrh	r3, [r7, #8]
 800c21a:	b2da      	uxtb	r2, r3
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	629a      	str	r2, [r3, #40]	; 0x28
 800c222:	e015      	b.n	800c250 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c224:	893b      	ldrh	r3, [r7, #8]
 800c226:	0a1b      	lsrs	r3, r3, #8
 800c228:	b29b      	uxth	r3, r3
 800c22a:	b2da      	uxtb	r2, r3
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c232:	69fa      	ldr	r2, [r7, #28]
 800c234:	69b9      	ldr	r1, [r7, #24]
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	f000 f8d6 	bl	800c3e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d001      	beq.n	800c246 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800c242:	2301      	movs	r3, #1
 800c244:	e012      	b.n	800c26c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c246:	893b      	ldrh	r3, [r7, #8]
 800c248:	b2da      	uxtb	r2, r3
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c250:	69fb      	ldr	r3, [r7, #28]
 800c252:	9300      	str	r3, [sp, #0]
 800c254:	69bb      	ldr	r3, [r7, #24]
 800c256:	2200      	movs	r2, #0
 800c258:	2180      	movs	r1, #128	; 0x80
 800c25a:	68f8      	ldr	r0, [r7, #12]
 800c25c:	f000 f884 	bl	800c368 <I2C_WaitOnFlagUntilTimeout>
 800c260:	4603      	mov	r3, r0
 800c262:	2b00      	cmp	r3, #0
 800c264:	d001      	beq.n	800c26a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800c266:	2301      	movs	r3, #1
 800c268:	e000      	b.n	800c26c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800c26a:	2300      	movs	r3, #0
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3710      	adds	r7, #16
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	80002000 	.word	0x80002000

0800c278 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b086      	sub	sp, #24
 800c27c:	af02      	add	r7, sp, #8
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	4608      	mov	r0, r1
 800c282:	4611      	mov	r1, r2
 800c284:	461a      	mov	r2, r3
 800c286:	4603      	mov	r3, r0
 800c288:	817b      	strh	r3, [r7, #10]
 800c28a:	460b      	mov	r3, r1
 800c28c:	813b      	strh	r3, [r7, #8]
 800c28e:	4613      	mov	r3, r2
 800c290:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c292:	88fb      	ldrh	r3, [r7, #6]
 800c294:	b2da      	uxtb	r2, r3
 800c296:	8979      	ldrh	r1, [r7, #10]
 800c298:	4b20      	ldr	r3, [pc, #128]	; (800c31c <I2C_RequestMemoryRead+0xa4>)
 800c29a:	9300      	str	r3, [sp, #0]
 800c29c:	2300      	movs	r3, #0
 800c29e:	68f8      	ldr	r0, [r7, #12]
 800c2a0:	f000 f984 	bl	800c5ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c2a4:	69fa      	ldr	r2, [r7, #28]
 800c2a6:	69b9      	ldr	r1, [r7, #24]
 800c2a8:	68f8      	ldr	r0, [r7, #12]
 800c2aa:	f000 f89d 	bl	800c3e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d001      	beq.n	800c2b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	e02c      	b.n	800c312 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c2b8:	88fb      	ldrh	r3, [r7, #6]
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d105      	bne.n	800c2ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c2be:	893b      	ldrh	r3, [r7, #8]
 800c2c0:	b2da      	uxtb	r2, r3
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	629a      	str	r2, [r3, #40]	; 0x28
 800c2c8:	e015      	b.n	800c2f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c2ca:	893b      	ldrh	r3, [r7, #8]
 800c2cc:	0a1b      	lsrs	r3, r3, #8
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	b2da      	uxtb	r2, r3
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c2d8:	69fa      	ldr	r2, [r7, #28]
 800c2da:	69b9      	ldr	r1, [r7, #24]
 800c2dc:	68f8      	ldr	r0, [r7, #12]
 800c2de:	f000 f883 	bl	800c3e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d001      	beq.n	800c2ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	e012      	b.n	800c312 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c2ec:	893b      	ldrh	r3, [r7, #8]
 800c2ee:	b2da      	uxtb	r2, r3
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	9300      	str	r3, [sp, #0]
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	2140      	movs	r1, #64	; 0x40
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	f000 f831 	bl	800c368 <I2C_WaitOnFlagUntilTimeout>
 800c306:	4603      	mov	r3, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d001      	beq.n	800c310 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
 800c30e:	e000      	b.n	800c312 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c310:	2300      	movs	r3, #0
}
 800c312:	4618      	mov	r0, r3
 800c314:	3710      	adds	r7, #16
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	80002000 	.word	0x80002000

0800c320 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c320:	b480      	push	{r7}
 800c322:	b083      	sub	sp, #12
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	699b      	ldr	r3, [r3, #24]
 800c32e:	f003 0302 	and.w	r3, r3, #2
 800c332:	2b02      	cmp	r3, #2
 800c334:	d103      	bne.n	800c33e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2200      	movs	r2, #0
 800c33c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	699b      	ldr	r3, [r3, #24]
 800c344:	f003 0301 	and.w	r3, r3, #1
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d007      	beq.n	800c35c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	699a      	ldr	r2, [r3, #24]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f042 0201 	orr.w	r2, r2, #1
 800c35a:	619a      	str	r2, [r3, #24]
  }
}
 800c35c:	bf00      	nop
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	603b      	str	r3, [r7, #0]
 800c374:	4613      	mov	r3, r2
 800c376:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c378:	e022      	b.n	800c3c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c380:	d01e      	beq.n	800c3c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c382:	f7fe fb63 	bl	800aa4c <HAL_GetTick>
 800c386:	4602      	mov	r2, r0
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	1ad3      	subs	r3, r2, r3
 800c38c:	683a      	ldr	r2, [r7, #0]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d302      	bcc.n	800c398 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d113      	bne.n	800c3c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c39c:	f043 0220 	orr.w	r2, r3, #32
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2220      	movs	r2, #32
 800c3a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	e00f      	b.n	800c3e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	699a      	ldr	r2, [r3, #24]
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	4013      	ands	r3, r2
 800c3ca:	68ba      	ldr	r2, [r7, #8]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	bf0c      	ite	eq
 800c3d0:	2301      	moveq	r3, #1
 800c3d2:	2300      	movne	r3, #0
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	79fb      	ldrb	r3, [r7, #7]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d0cd      	beq.n	800c37a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c3de:	2300      	movs	r3, #0
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3710      	adds	r7, #16
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c3f4:	e02c      	b.n	800c450 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	68b9      	ldr	r1, [r7, #8]
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f000 f870 	bl	800c4e0 <I2C_IsAcknowledgeFailed>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d001      	beq.n	800c40a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c406:	2301      	movs	r3, #1
 800c408:	e02a      	b.n	800c460 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c410:	d01e      	beq.n	800c450 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c412:	f7fe fb1b 	bl	800aa4c <HAL_GetTick>
 800c416:	4602      	mov	r2, r0
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	1ad3      	subs	r3, r2, r3
 800c41c:	68ba      	ldr	r2, [r7, #8]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d302      	bcc.n	800c428 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d113      	bne.n	800c450 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c42c:	f043 0220 	orr.w	r2, r3, #32
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2220      	movs	r2, #32
 800c438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2200      	movs	r2, #0
 800c440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2200      	movs	r2, #0
 800c448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c44c:	2301      	movs	r3, #1
 800c44e:	e007      	b.n	800c460 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	699b      	ldr	r3, [r3, #24]
 800c456:	f003 0302 	and.w	r3, r3, #2
 800c45a:	2b02      	cmp	r3, #2
 800c45c:	d1cb      	bne.n	800c3f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c45e:	2300      	movs	r3, #0
}
 800c460:	4618      	mov	r0, r3
 800c462:	3710      	adds	r7, #16
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	60b9      	str	r1, [r7, #8]
 800c472:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c474:	e028      	b.n	800c4c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	68b9      	ldr	r1, [r7, #8]
 800c47a:	68f8      	ldr	r0, [r7, #12]
 800c47c:	f000 f830 	bl	800c4e0 <I2C_IsAcknowledgeFailed>
 800c480:	4603      	mov	r3, r0
 800c482:	2b00      	cmp	r3, #0
 800c484:	d001      	beq.n	800c48a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c486:	2301      	movs	r3, #1
 800c488:	e026      	b.n	800c4d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c48a:	f7fe fadf 	bl	800aa4c <HAL_GetTick>
 800c48e:	4602      	mov	r2, r0
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	1ad3      	subs	r3, r2, r3
 800c494:	68ba      	ldr	r2, [r7, #8]
 800c496:	429a      	cmp	r2, r3
 800c498:	d302      	bcc.n	800c4a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d113      	bne.n	800c4c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4a4:	f043 0220 	orr.w	r2, r3, #32
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2220      	movs	r2, #32
 800c4b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	e007      	b.n	800c4d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	699b      	ldr	r3, [r3, #24]
 800c4ce:	f003 0320 	and.w	r3, r3, #32
 800c4d2:	2b20      	cmp	r3, #32
 800c4d4:	d1cf      	bne.n	800c476 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c4d6:	2300      	movs	r3, #0
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3710      	adds	r7, #16
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	699b      	ldr	r3, [r3, #24]
 800c4f2:	f003 0310 	and.w	r3, r3, #16
 800c4f6:	2b10      	cmp	r3, #16
 800c4f8:	d151      	bne.n	800c59e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c4fa:	e022      	b.n	800c542 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c502:	d01e      	beq.n	800c542 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c504:	f7fe faa2 	bl	800aa4c <HAL_GetTick>
 800c508:	4602      	mov	r2, r0
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	1ad3      	subs	r3, r2, r3
 800c50e:	68ba      	ldr	r2, [r7, #8]
 800c510:	429a      	cmp	r2, r3
 800c512:	d302      	bcc.n	800c51a <I2C_IsAcknowledgeFailed+0x3a>
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d113      	bne.n	800c542 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c51e:	f043 0220 	orr.w	r2, r3, #32
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2220      	movs	r2, #32
 800c52a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2200      	movs	r2, #0
 800c532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2200      	movs	r2, #0
 800c53a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800c53e:	2301      	movs	r3, #1
 800c540:	e02e      	b.n	800c5a0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	699b      	ldr	r3, [r3, #24]
 800c548:	f003 0320 	and.w	r3, r3, #32
 800c54c:	2b20      	cmp	r3, #32
 800c54e:	d1d5      	bne.n	800c4fc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	2210      	movs	r2, #16
 800c556:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	2220      	movs	r2, #32
 800c55e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c560:	68f8      	ldr	r0, [r7, #12]
 800c562:	f7ff fedd 	bl	800c320 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	6859      	ldr	r1, [r3, #4]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681a      	ldr	r2, [r3, #0]
 800c570:	4b0d      	ldr	r3, [pc, #52]	; (800c5a8 <I2C_IsAcknowledgeFailed+0xc8>)
 800c572:	400b      	ands	r3, r1
 800c574:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c57a:	f043 0204 	orr.w	r2, r3, #4
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2220      	movs	r2, #32
 800c586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2200      	movs	r2, #0
 800c58e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2200      	movs	r2, #0
 800c596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800c59a:	2301      	movs	r3, #1
 800c59c:	e000      	b.n	800c5a0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800c59e:	2300      	movs	r3, #0
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3710      	adds	r7, #16
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	fe00e800 	.word	0xfe00e800

0800c5ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b085      	sub	sp, #20
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	607b      	str	r3, [r7, #4]
 800c5b6:	460b      	mov	r3, r1
 800c5b8:	817b      	strh	r3, [r7, #10]
 800c5ba:	4613      	mov	r3, r2
 800c5bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	685a      	ldr	r2, [r3, #4]
 800c5c4:	69bb      	ldr	r3, [r7, #24]
 800c5c6:	0d5b      	lsrs	r3, r3, #21
 800c5c8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c5cc:	4b0d      	ldr	r3, [pc, #52]	; (800c604 <I2C_TransferConfig+0x58>)
 800c5ce:	430b      	orrs	r3, r1
 800c5d0:	43db      	mvns	r3, r3
 800c5d2:	ea02 0103 	and.w	r1, r2, r3
 800c5d6:	897b      	ldrh	r3, [r7, #10]
 800c5d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c5dc:	7a7b      	ldrb	r3, [r7, #9]
 800c5de:	041b      	lsls	r3, r3, #16
 800c5e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c5e4:	431a      	orrs	r2, r3
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	431a      	orrs	r2, r3
 800c5ea:	69bb      	ldr	r3, [r7, #24]
 800c5ec:	431a      	orrs	r2, r3
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	430a      	orrs	r2, r1
 800c5f4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800c5f6:	bf00      	nop
 800c5f8:	3714      	adds	r7, #20
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop
 800c604:	03ff63ff 	.word	0x03ff63ff

0800c608 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800c60e:	2300      	movs	r3, #0
 800c610:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c612:	4b23      	ldr	r3, [pc, #140]	; (800c6a0 <HAL_PWREx_EnableOverDrive+0x98>)
 800c614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c616:	4a22      	ldr	r2, [pc, #136]	; (800c6a0 <HAL_PWREx_EnableOverDrive+0x98>)
 800c618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c61c:	6413      	str	r3, [r2, #64]	; 0x40
 800c61e:	4b20      	ldr	r3, [pc, #128]	; (800c6a0 <HAL_PWREx_EnableOverDrive+0x98>)
 800c620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c626:	603b      	str	r3, [r7, #0]
 800c628:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c62a:	4b1e      	ldr	r3, [pc, #120]	; (800c6a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4a1d      	ldr	r2, [pc, #116]	; (800c6a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c634:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c636:	f7fe fa09 	bl	800aa4c <HAL_GetTick>
 800c63a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c63c:	e009      	b.n	800c652 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c63e:	f7fe fa05 	bl	800aa4c <HAL_GetTick>
 800c642:	4602      	mov	r2, r0
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	1ad3      	subs	r3, r2, r3
 800c648:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c64c:	d901      	bls.n	800c652 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800c64e:	2303      	movs	r3, #3
 800c650:	e022      	b.n	800c698 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c652:	4b14      	ldr	r3, [pc, #80]	; (800c6a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c65a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c65e:	d1ee      	bne.n	800c63e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c660:	4b10      	ldr	r3, [pc, #64]	; (800c6a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4a0f      	ldr	r2, [pc, #60]	; (800c6a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c66a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c66c:	f7fe f9ee 	bl	800aa4c <HAL_GetTick>
 800c670:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c672:	e009      	b.n	800c688 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c674:	f7fe f9ea 	bl	800aa4c <HAL_GetTick>
 800c678:	4602      	mov	r2, r0
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	1ad3      	subs	r3, r2, r3
 800c67e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c682:	d901      	bls.n	800c688 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800c684:	2303      	movs	r3, #3
 800c686:	e007      	b.n	800c698 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c688:	4b06      	ldr	r3, [pc, #24]	; (800c6a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c690:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c694:	d1ee      	bne.n	800c674 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800c696:	2300      	movs	r3, #0
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3708      	adds	r7, #8
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}
 800c6a0:	40023800 	.word	0x40023800
 800c6a4:	40007000 	.word	0x40007000

0800c6a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b086      	sub	sp, #24
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d101      	bne.n	800c6be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	e25c      	b.n	800cb78 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f003 0301 	and.w	r3, r3, #1
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f000 8087 	beq.w	800c7da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c6cc:	4b96      	ldr	r3, [pc, #600]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	f003 030c 	and.w	r3, r3, #12
 800c6d4:	2b04      	cmp	r3, #4
 800c6d6:	d00c      	beq.n	800c6f2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c6d8:	4b93      	ldr	r3, [pc, #588]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c6da:	689b      	ldr	r3, [r3, #8]
 800c6dc:	f003 030c 	and.w	r3, r3, #12
 800c6e0:	2b08      	cmp	r3, #8
 800c6e2:	d112      	bne.n	800c70a <HAL_RCC_OscConfig+0x62>
 800c6e4:	4b90      	ldr	r3, [pc, #576]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6f0:	d10b      	bne.n	800c70a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c6f2:	4b8d      	ldr	r3, [pc, #564]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d06c      	beq.n	800c7d8 <HAL_RCC_OscConfig+0x130>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d168      	bne.n	800c7d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c706:	2301      	movs	r3, #1
 800c708:	e236      	b.n	800cb78 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c712:	d106      	bne.n	800c722 <HAL_RCC_OscConfig+0x7a>
 800c714:	4b84      	ldr	r3, [pc, #528]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4a83      	ldr	r2, [pc, #524]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c71a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c71e:	6013      	str	r3, [r2, #0]
 800c720:	e02e      	b.n	800c780 <HAL_RCC_OscConfig+0xd8>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d10c      	bne.n	800c744 <HAL_RCC_OscConfig+0x9c>
 800c72a:	4b7f      	ldr	r3, [pc, #508]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a7e      	ldr	r2, [pc, #504]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c734:	6013      	str	r3, [r2, #0]
 800c736:	4b7c      	ldr	r3, [pc, #496]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a7b      	ldr	r2, [pc, #492]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c73c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c740:	6013      	str	r3, [r2, #0]
 800c742:	e01d      	b.n	800c780 <HAL_RCC_OscConfig+0xd8>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c74c:	d10c      	bne.n	800c768 <HAL_RCC_OscConfig+0xc0>
 800c74e:	4b76      	ldr	r3, [pc, #472]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4a75      	ldr	r2, [pc, #468]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c758:	6013      	str	r3, [r2, #0]
 800c75a:	4b73      	ldr	r3, [pc, #460]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4a72      	ldr	r2, [pc, #456]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c764:	6013      	str	r3, [r2, #0]
 800c766:	e00b      	b.n	800c780 <HAL_RCC_OscConfig+0xd8>
 800c768:	4b6f      	ldr	r3, [pc, #444]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a6e      	ldr	r2, [pc, #440]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c76e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c772:	6013      	str	r3, [r2, #0]
 800c774:	4b6c      	ldr	r3, [pc, #432]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4a6b      	ldr	r2, [pc, #428]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c77a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c77e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d013      	beq.n	800c7b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c788:	f7fe f960 	bl	800aa4c <HAL_GetTick>
 800c78c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c78e:	e008      	b.n	800c7a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c790:	f7fe f95c 	bl	800aa4c <HAL_GetTick>
 800c794:	4602      	mov	r2, r0
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	1ad3      	subs	r3, r2, r3
 800c79a:	2b64      	cmp	r3, #100	; 0x64
 800c79c:	d901      	bls.n	800c7a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c79e:	2303      	movs	r3, #3
 800c7a0:	e1ea      	b.n	800cb78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c7a2:	4b61      	ldr	r3, [pc, #388]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d0f0      	beq.n	800c790 <HAL_RCC_OscConfig+0xe8>
 800c7ae:	e014      	b.n	800c7da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7b0:	f7fe f94c 	bl	800aa4c <HAL_GetTick>
 800c7b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c7b6:	e008      	b.n	800c7ca <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c7b8:	f7fe f948 	bl	800aa4c <HAL_GetTick>
 800c7bc:	4602      	mov	r2, r0
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	1ad3      	subs	r3, r2, r3
 800c7c2:	2b64      	cmp	r3, #100	; 0x64
 800c7c4:	d901      	bls.n	800c7ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c7c6:	2303      	movs	r3, #3
 800c7c8:	e1d6      	b.n	800cb78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c7ca:	4b57      	ldr	r3, [pc, #348]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d1f0      	bne.n	800c7b8 <HAL_RCC_OscConfig+0x110>
 800c7d6:	e000      	b.n	800c7da <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c7d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f003 0302 	and.w	r3, r3, #2
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d069      	beq.n	800c8ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c7e6:	4b50      	ldr	r3, [pc, #320]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c7e8:	689b      	ldr	r3, [r3, #8]
 800c7ea:	f003 030c 	and.w	r3, r3, #12
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d00b      	beq.n	800c80a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c7f2:	4b4d      	ldr	r3, [pc, #308]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	f003 030c 	and.w	r3, r3, #12
 800c7fa:	2b08      	cmp	r3, #8
 800c7fc:	d11c      	bne.n	800c838 <HAL_RCC_OscConfig+0x190>
 800c7fe:	4b4a      	ldr	r3, [pc, #296]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c806:	2b00      	cmp	r3, #0
 800c808:	d116      	bne.n	800c838 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c80a:	4b47      	ldr	r3, [pc, #284]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f003 0302 	and.w	r3, r3, #2
 800c812:	2b00      	cmp	r3, #0
 800c814:	d005      	beq.n	800c822 <HAL_RCC_OscConfig+0x17a>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	68db      	ldr	r3, [r3, #12]
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d001      	beq.n	800c822 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c81e:	2301      	movs	r3, #1
 800c820:	e1aa      	b.n	800cb78 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c822:	4b41      	ldr	r3, [pc, #260]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	691b      	ldr	r3, [r3, #16]
 800c82e:	00db      	lsls	r3, r3, #3
 800c830:	493d      	ldr	r1, [pc, #244]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c832:	4313      	orrs	r3, r2
 800c834:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c836:	e040      	b.n	800c8ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d023      	beq.n	800c888 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c840:	4b39      	ldr	r3, [pc, #228]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a38      	ldr	r2, [pc, #224]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c846:	f043 0301 	orr.w	r3, r3, #1
 800c84a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c84c:	f7fe f8fe 	bl	800aa4c <HAL_GetTick>
 800c850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c852:	e008      	b.n	800c866 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c854:	f7fe f8fa 	bl	800aa4c <HAL_GetTick>
 800c858:	4602      	mov	r2, r0
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	1ad3      	subs	r3, r2, r3
 800c85e:	2b02      	cmp	r3, #2
 800c860:	d901      	bls.n	800c866 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c862:	2303      	movs	r3, #3
 800c864:	e188      	b.n	800cb78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c866:	4b30      	ldr	r3, [pc, #192]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f003 0302 	and.w	r3, r3, #2
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d0f0      	beq.n	800c854 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c872:	4b2d      	ldr	r3, [pc, #180]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	691b      	ldr	r3, [r3, #16]
 800c87e:	00db      	lsls	r3, r3, #3
 800c880:	4929      	ldr	r1, [pc, #164]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c882:	4313      	orrs	r3, r2
 800c884:	600b      	str	r3, [r1, #0]
 800c886:	e018      	b.n	800c8ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c888:	4b27      	ldr	r3, [pc, #156]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4a26      	ldr	r2, [pc, #152]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c88e:	f023 0301 	bic.w	r3, r3, #1
 800c892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c894:	f7fe f8da 	bl	800aa4c <HAL_GetTick>
 800c898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c89a:	e008      	b.n	800c8ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c89c:	f7fe f8d6 	bl	800aa4c <HAL_GetTick>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	1ad3      	subs	r3, r2, r3
 800c8a6:	2b02      	cmp	r3, #2
 800c8a8:	d901      	bls.n	800c8ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c8aa:	2303      	movs	r3, #3
 800c8ac:	e164      	b.n	800cb78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c8ae:	4b1e      	ldr	r3, [pc, #120]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f003 0302 	and.w	r3, r3, #2
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d1f0      	bne.n	800c89c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f003 0308 	and.w	r3, r3, #8
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d038      	beq.n	800c938 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	695b      	ldr	r3, [r3, #20]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d019      	beq.n	800c902 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c8ce:	4b16      	ldr	r3, [pc, #88]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c8d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8d2:	4a15      	ldr	r2, [pc, #84]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c8d4:	f043 0301 	orr.w	r3, r3, #1
 800c8d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8da:	f7fe f8b7 	bl	800aa4c <HAL_GetTick>
 800c8de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c8e0:	e008      	b.n	800c8f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c8e2:	f7fe f8b3 	bl	800aa4c <HAL_GetTick>
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	1ad3      	subs	r3, r2, r3
 800c8ec:	2b02      	cmp	r3, #2
 800c8ee:	d901      	bls.n	800c8f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c8f0:	2303      	movs	r3, #3
 800c8f2:	e141      	b.n	800cb78 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c8f4:	4b0c      	ldr	r3, [pc, #48]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c8f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8f8:	f003 0302 	and.w	r3, r3, #2
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d0f0      	beq.n	800c8e2 <HAL_RCC_OscConfig+0x23a>
 800c900:	e01a      	b.n	800c938 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c902:	4b09      	ldr	r3, [pc, #36]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c906:	4a08      	ldr	r2, [pc, #32]	; (800c928 <HAL_RCC_OscConfig+0x280>)
 800c908:	f023 0301 	bic.w	r3, r3, #1
 800c90c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c90e:	f7fe f89d 	bl	800aa4c <HAL_GetTick>
 800c912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c914:	e00a      	b.n	800c92c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c916:	f7fe f899 	bl	800aa4c <HAL_GetTick>
 800c91a:	4602      	mov	r2, r0
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	1ad3      	subs	r3, r2, r3
 800c920:	2b02      	cmp	r3, #2
 800c922:	d903      	bls.n	800c92c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c924:	2303      	movs	r3, #3
 800c926:	e127      	b.n	800cb78 <HAL_RCC_OscConfig+0x4d0>
 800c928:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c92c:	4b94      	ldr	r3, [pc, #592]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800c92e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c930:	f003 0302 	and.w	r3, r3, #2
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1ee      	bne.n	800c916 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f003 0304 	and.w	r3, r3, #4
 800c940:	2b00      	cmp	r3, #0
 800c942:	f000 80a4 	beq.w	800ca8e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c946:	4b8e      	ldr	r3, [pc, #568]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800c948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c94a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d10d      	bne.n	800c96e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c952:	4b8b      	ldr	r3, [pc, #556]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800c954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c956:	4a8a      	ldr	r2, [pc, #552]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800c958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c95c:	6413      	str	r3, [r2, #64]	; 0x40
 800c95e:	4b88      	ldr	r3, [pc, #544]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800c960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c966:	60fb      	str	r3, [r7, #12]
 800c968:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c96a:	2301      	movs	r3, #1
 800c96c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c96e:	4b85      	ldr	r3, [pc, #532]	; (800cb84 <HAL_RCC_OscConfig+0x4dc>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c976:	2b00      	cmp	r3, #0
 800c978:	d118      	bne.n	800c9ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c97a:	4b82      	ldr	r3, [pc, #520]	; (800cb84 <HAL_RCC_OscConfig+0x4dc>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	4a81      	ldr	r2, [pc, #516]	; (800cb84 <HAL_RCC_OscConfig+0x4dc>)
 800c980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c986:	f7fe f861 	bl	800aa4c <HAL_GetTick>
 800c98a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c98c:	e008      	b.n	800c9a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c98e:	f7fe f85d 	bl	800aa4c <HAL_GetTick>
 800c992:	4602      	mov	r2, r0
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	1ad3      	subs	r3, r2, r3
 800c998:	2b64      	cmp	r3, #100	; 0x64
 800c99a:	d901      	bls.n	800c9a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c99c:	2303      	movs	r3, #3
 800c99e:	e0eb      	b.n	800cb78 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c9a0:	4b78      	ldr	r3, [pc, #480]	; (800cb84 <HAL_RCC_OscConfig+0x4dc>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d0f0      	beq.n	800c98e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	689b      	ldr	r3, [r3, #8]
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d106      	bne.n	800c9c2 <HAL_RCC_OscConfig+0x31a>
 800c9b4:	4b72      	ldr	r3, [pc, #456]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800c9b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9b8:	4a71      	ldr	r2, [pc, #452]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800c9ba:	f043 0301 	orr.w	r3, r3, #1
 800c9be:	6713      	str	r3, [r2, #112]	; 0x70
 800c9c0:	e02d      	b.n	800ca1e <HAL_RCC_OscConfig+0x376>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	689b      	ldr	r3, [r3, #8]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d10c      	bne.n	800c9e4 <HAL_RCC_OscConfig+0x33c>
 800c9ca:	4b6d      	ldr	r3, [pc, #436]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800c9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9ce:	4a6c      	ldr	r2, [pc, #432]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800c9d0:	f023 0301 	bic.w	r3, r3, #1
 800c9d4:	6713      	str	r3, [r2, #112]	; 0x70
 800c9d6:	4b6a      	ldr	r3, [pc, #424]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800c9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9da:	4a69      	ldr	r2, [pc, #420]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800c9dc:	f023 0304 	bic.w	r3, r3, #4
 800c9e0:	6713      	str	r3, [r2, #112]	; 0x70
 800c9e2:	e01c      	b.n	800ca1e <HAL_RCC_OscConfig+0x376>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	689b      	ldr	r3, [r3, #8]
 800c9e8:	2b05      	cmp	r3, #5
 800c9ea:	d10c      	bne.n	800ca06 <HAL_RCC_OscConfig+0x35e>
 800c9ec:	4b64      	ldr	r3, [pc, #400]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800c9ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9f0:	4a63      	ldr	r2, [pc, #396]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800c9f2:	f043 0304 	orr.w	r3, r3, #4
 800c9f6:	6713      	str	r3, [r2, #112]	; 0x70
 800c9f8:	4b61      	ldr	r3, [pc, #388]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800c9fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9fc:	4a60      	ldr	r2, [pc, #384]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800c9fe:	f043 0301 	orr.w	r3, r3, #1
 800ca02:	6713      	str	r3, [r2, #112]	; 0x70
 800ca04:	e00b      	b.n	800ca1e <HAL_RCC_OscConfig+0x376>
 800ca06:	4b5e      	ldr	r3, [pc, #376]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800ca08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca0a:	4a5d      	ldr	r2, [pc, #372]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800ca0c:	f023 0301 	bic.w	r3, r3, #1
 800ca10:	6713      	str	r3, [r2, #112]	; 0x70
 800ca12:	4b5b      	ldr	r3, [pc, #364]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800ca14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca16:	4a5a      	ldr	r2, [pc, #360]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800ca18:	f023 0304 	bic.w	r3, r3, #4
 800ca1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	689b      	ldr	r3, [r3, #8]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d015      	beq.n	800ca52 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca26:	f7fe f811 	bl	800aa4c <HAL_GetTick>
 800ca2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca2c:	e00a      	b.n	800ca44 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ca2e:	f7fe f80d 	bl	800aa4c <HAL_GetTick>
 800ca32:	4602      	mov	r2, r0
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	1ad3      	subs	r3, r2, r3
 800ca38:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d901      	bls.n	800ca44 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800ca40:	2303      	movs	r3, #3
 800ca42:	e099      	b.n	800cb78 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca44:	4b4e      	ldr	r3, [pc, #312]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800ca46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca48:	f003 0302 	and.w	r3, r3, #2
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d0ee      	beq.n	800ca2e <HAL_RCC_OscConfig+0x386>
 800ca50:	e014      	b.n	800ca7c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca52:	f7fd fffb 	bl	800aa4c <HAL_GetTick>
 800ca56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ca58:	e00a      	b.n	800ca70 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ca5a:	f7fd fff7 	bl	800aa4c <HAL_GetTick>
 800ca5e:	4602      	mov	r2, r0
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	1ad3      	subs	r3, r2, r3
 800ca64:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d901      	bls.n	800ca70 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800ca6c:	2303      	movs	r3, #3
 800ca6e:	e083      	b.n	800cb78 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ca70:	4b43      	ldr	r3, [pc, #268]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800ca72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca74:	f003 0302 	and.w	r3, r3, #2
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1ee      	bne.n	800ca5a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ca7c:	7dfb      	ldrb	r3, [r7, #23]
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d105      	bne.n	800ca8e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ca82:	4b3f      	ldr	r3, [pc, #252]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800ca84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca86:	4a3e      	ldr	r2, [pc, #248]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800ca88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	699b      	ldr	r3, [r3, #24]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d06f      	beq.n	800cb76 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ca96:	4b3a      	ldr	r3, [pc, #232]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800ca98:	689b      	ldr	r3, [r3, #8]
 800ca9a:	f003 030c 	and.w	r3, r3, #12
 800ca9e:	2b08      	cmp	r3, #8
 800caa0:	d067      	beq.n	800cb72 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	699b      	ldr	r3, [r3, #24]
 800caa6:	2b02      	cmp	r3, #2
 800caa8:	d149      	bne.n	800cb3e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800caaa:	4b35      	ldr	r3, [pc, #212]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	4a34      	ldr	r2, [pc, #208]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800cab0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cab6:	f7fd ffc9 	bl	800aa4c <HAL_GetTick>
 800caba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cabc:	e008      	b.n	800cad0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cabe:	f7fd ffc5 	bl	800aa4c <HAL_GetTick>
 800cac2:	4602      	mov	r2, r0
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	1ad3      	subs	r3, r2, r3
 800cac8:	2b02      	cmp	r3, #2
 800caca:	d901      	bls.n	800cad0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800cacc:	2303      	movs	r3, #3
 800cace:	e053      	b.n	800cb78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cad0:	4b2b      	ldr	r3, [pc, #172]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d1f0      	bne.n	800cabe <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	69da      	ldr	r2, [r3, #28]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6a1b      	ldr	r3, [r3, #32]
 800cae4:	431a      	orrs	r2, r3
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caea:	019b      	lsls	r3, r3, #6
 800caec:	431a      	orrs	r2, r3
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caf2:	085b      	lsrs	r3, r3, #1
 800caf4:	3b01      	subs	r3, #1
 800caf6:	041b      	lsls	r3, r3, #16
 800caf8:	431a      	orrs	r2, r3
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cafe:	061b      	lsls	r3, r3, #24
 800cb00:	4313      	orrs	r3, r2
 800cb02:	4a1f      	ldr	r2, [pc, #124]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800cb04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cb08:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cb0a:	4b1d      	ldr	r3, [pc, #116]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4a1c      	ldr	r2, [pc, #112]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800cb10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cb14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb16:	f7fd ff99 	bl	800aa4c <HAL_GetTick>
 800cb1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb1c:	e008      	b.n	800cb30 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb1e:	f7fd ff95 	bl	800aa4c <HAL_GetTick>
 800cb22:	4602      	mov	r2, r0
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	1ad3      	subs	r3, r2, r3
 800cb28:	2b02      	cmp	r3, #2
 800cb2a:	d901      	bls.n	800cb30 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 800cb2c:	2303      	movs	r3, #3
 800cb2e:	e023      	b.n	800cb78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb30:	4b13      	ldr	r3, [pc, #76]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d0f0      	beq.n	800cb1e <HAL_RCC_OscConfig+0x476>
 800cb3c:	e01b      	b.n	800cb76 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cb3e:	4b10      	ldr	r3, [pc, #64]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4a0f      	ldr	r2, [pc, #60]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800cb44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cb48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb4a:	f7fd ff7f 	bl	800aa4c <HAL_GetTick>
 800cb4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb50:	e008      	b.n	800cb64 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb52:	f7fd ff7b 	bl	800aa4c <HAL_GetTick>
 800cb56:	4602      	mov	r2, r0
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	1ad3      	subs	r3, r2, r3
 800cb5c:	2b02      	cmp	r3, #2
 800cb5e:	d901      	bls.n	800cb64 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800cb60:	2303      	movs	r3, #3
 800cb62:	e009      	b.n	800cb78 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb64:	4b06      	ldr	r3, [pc, #24]	; (800cb80 <HAL_RCC_OscConfig+0x4d8>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d1f0      	bne.n	800cb52 <HAL_RCC_OscConfig+0x4aa>
 800cb70:	e001      	b.n	800cb76 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800cb72:	2301      	movs	r3, #1
 800cb74:	e000      	b.n	800cb78 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 800cb76:	2300      	movs	r3, #0
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3718      	adds	r7, #24
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}
 800cb80:	40023800 	.word	0x40023800
 800cb84:	40007000 	.word	0x40007000

0800cb88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800cb92:	2300      	movs	r3, #0
 800cb94:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d101      	bne.n	800cba0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	e0ce      	b.n	800cd3e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cba0:	4b69      	ldr	r3, [pc, #420]	; (800cd48 <HAL_RCC_ClockConfig+0x1c0>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f003 030f 	and.w	r3, r3, #15
 800cba8:	683a      	ldr	r2, [r7, #0]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d910      	bls.n	800cbd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cbae:	4b66      	ldr	r3, [pc, #408]	; (800cd48 <HAL_RCC_ClockConfig+0x1c0>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f023 020f 	bic.w	r2, r3, #15
 800cbb6:	4964      	ldr	r1, [pc, #400]	; (800cd48 <HAL_RCC_ClockConfig+0x1c0>)
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cbbe:	4b62      	ldr	r3, [pc, #392]	; (800cd48 <HAL_RCC_ClockConfig+0x1c0>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f003 030f 	and.w	r3, r3, #15
 800cbc6:	683a      	ldr	r2, [r7, #0]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d001      	beq.n	800cbd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800cbcc:	2301      	movs	r3, #1
 800cbce:	e0b6      	b.n	800cd3e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f003 0302 	and.w	r3, r3, #2
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d020      	beq.n	800cc1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f003 0304 	and.w	r3, r3, #4
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d005      	beq.n	800cbf4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cbe8:	4b58      	ldr	r3, [pc, #352]	; (800cd4c <HAL_RCC_ClockConfig+0x1c4>)
 800cbea:	689b      	ldr	r3, [r3, #8]
 800cbec:	4a57      	ldr	r2, [pc, #348]	; (800cd4c <HAL_RCC_ClockConfig+0x1c4>)
 800cbee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800cbf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f003 0308 	and.w	r3, r3, #8
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d005      	beq.n	800cc0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cc00:	4b52      	ldr	r3, [pc, #328]	; (800cd4c <HAL_RCC_ClockConfig+0x1c4>)
 800cc02:	689b      	ldr	r3, [r3, #8]
 800cc04:	4a51      	ldr	r2, [pc, #324]	; (800cd4c <HAL_RCC_ClockConfig+0x1c4>)
 800cc06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cc0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cc0c:	4b4f      	ldr	r3, [pc, #316]	; (800cd4c <HAL_RCC_ClockConfig+0x1c4>)
 800cc0e:	689b      	ldr	r3, [r3, #8]
 800cc10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	494c      	ldr	r1, [pc, #304]	; (800cd4c <HAL_RCC_ClockConfig+0x1c4>)
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f003 0301 	and.w	r3, r3, #1
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d040      	beq.n	800ccac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	d107      	bne.n	800cc42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc32:	4b46      	ldr	r3, [pc, #280]	; (800cd4c <HAL_RCC_ClockConfig+0x1c4>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d115      	bne.n	800cc6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	e07d      	b.n	800cd3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	2b02      	cmp	r3, #2
 800cc48:	d107      	bne.n	800cc5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cc4a:	4b40      	ldr	r3, [pc, #256]	; (800cd4c <HAL_RCC_ClockConfig+0x1c4>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d109      	bne.n	800cc6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cc56:	2301      	movs	r3, #1
 800cc58:	e071      	b.n	800cd3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cc5a:	4b3c      	ldr	r3, [pc, #240]	; (800cd4c <HAL_RCC_ClockConfig+0x1c4>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f003 0302 	and.w	r3, r3, #2
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d101      	bne.n	800cc6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cc66:	2301      	movs	r3, #1
 800cc68:	e069      	b.n	800cd3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cc6a:	4b38      	ldr	r3, [pc, #224]	; (800cd4c <HAL_RCC_ClockConfig+0x1c4>)
 800cc6c:	689b      	ldr	r3, [r3, #8]
 800cc6e:	f023 0203 	bic.w	r2, r3, #3
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	4935      	ldr	r1, [pc, #212]	; (800cd4c <HAL_RCC_ClockConfig+0x1c4>)
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc7c:	f7fd fee6 	bl	800aa4c <HAL_GetTick>
 800cc80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc82:	e00a      	b.n	800cc9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc84:	f7fd fee2 	bl	800aa4c <HAL_GetTick>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	1ad3      	subs	r3, r2, r3
 800cc8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d901      	bls.n	800cc9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800cc96:	2303      	movs	r3, #3
 800cc98:	e051      	b.n	800cd3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc9a:	4b2c      	ldr	r3, [pc, #176]	; (800cd4c <HAL_RCC_ClockConfig+0x1c4>)
 800cc9c:	689b      	ldr	r3, [r3, #8]
 800cc9e:	f003 020c 	and.w	r2, r3, #12
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d1eb      	bne.n	800cc84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ccac:	4b26      	ldr	r3, [pc, #152]	; (800cd48 <HAL_RCC_ClockConfig+0x1c0>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f003 030f 	and.w	r3, r3, #15
 800ccb4:	683a      	ldr	r2, [r7, #0]
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d210      	bcs.n	800ccdc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ccba:	4b23      	ldr	r3, [pc, #140]	; (800cd48 <HAL_RCC_ClockConfig+0x1c0>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f023 020f 	bic.w	r2, r3, #15
 800ccc2:	4921      	ldr	r1, [pc, #132]	; (800cd48 <HAL_RCC_ClockConfig+0x1c0>)
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ccca:	4b1f      	ldr	r3, [pc, #124]	; (800cd48 <HAL_RCC_ClockConfig+0x1c0>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f003 030f 	and.w	r3, r3, #15
 800ccd2:	683a      	ldr	r2, [r7, #0]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d001      	beq.n	800ccdc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800ccd8:	2301      	movs	r3, #1
 800ccda:	e030      	b.n	800cd3e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f003 0304 	and.w	r3, r3, #4
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d008      	beq.n	800ccfa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cce8:	4b18      	ldr	r3, [pc, #96]	; (800cd4c <HAL_RCC_ClockConfig+0x1c4>)
 800ccea:	689b      	ldr	r3, [r3, #8]
 800ccec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	68db      	ldr	r3, [r3, #12]
 800ccf4:	4915      	ldr	r1, [pc, #84]	; (800cd4c <HAL_RCC_ClockConfig+0x1c4>)
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f003 0308 	and.w	r3, r3, #8
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d009      	beq.n	800cd1a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cd06:	4b11      	ldr	r3, [pc, #68]	; (800cd4c <HAL_RCC_ClockConfig+0x1c4>)
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	691b      	ldr	r3, [r3, #16]
 800cd12:	00db      	lsls	r3, r3, #3
 800cd14:	490d      	ldr	r1, [pc, #52]	; (800cd4c <HAL_RCC_ClockConfig+0x1c4>)
 800cd16:	4313      	orrs	r3, r2
 800cd18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800cd1a:	f000 f81d 	bl	800cd58 <HAL_RCC_GetSysClockFreq>
 800cd1e:	4601      	mov	r1, r0
 800cd20:	4b0a      	ldr	r3, [pc, #40]	; (800cd4c <HAL_RCC_ClockConfig+0x1c4>)
 800cd22:	689b      	ldr	r3, [r3, #8]
 800cd24:	091b      	lsrs	r3, r3, #4
 800cd26:	f003 030f 	and.w	r3, r3, #15
 800cd2a:	4a09      	ldr	r2, [pc, #36]	; (800cd50 <HAL_RCC_ClockConfig+0x1c8>)
 800cd2c:	5cd3      	ldrb	r3, [r2, r3]
 800cd2e:	fa21 f303 	lsr.w	r3, r1, r3
 800cd32:	4a08      	ldr	r2, [pc, #32]	; (800cd54 <HAL_RCC_ClockConfig+0x1cc>)
 800cd34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800cd36:	2000      	movs	r0, #0
 800cd38:	f7fd fe44 	bl	800a9c4 <HAL_InitTick>

  return HAL_OK;
 800cd3c:	2300      	movs	r3, #0
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3710      	adds	r7, #16
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	40023c00 	.word	0x40023c00
 800cd4c:	40023800 	.word	0x40023800
 800cd50:	0802a40c 	.word	0x0802a40c
 800cd54:	200006dc 	.word	0x200006dc

0800cd58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cd58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd5a:	b085      	sub	sp, #20
 800cd5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	607b      	str	r3, [r7, #4]
 800cd62:	2300      	movs	r3, #0
 800cd64:	60fb      	str	r3, [r7, #12]
 800cd66:	2300      	movs	r3, #0
 800cd68:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cd6e:	4b50      	ldr	r3, [pc, #320]	; (800ceb0 <HAL_RCC_GetSysClockFreq+0x158>)
 800cd70:	689b      	ldr	r3, [r3, #8]
 800cd72:	f003 030c 	and.w	r3, r3, #12
 800cd76:	2b04      	cmp	r3, #4
 800cd78:	d007      	beq.n	800cd8a <HAL_RCC_GetSysClockFreq+0x32>
 800cd7a:	2b08      	cmp	r3, #8
 800cd7c:	d008      	beq.n	800cd90 <HAL_RCC_GetSysClockFreq+0x38>
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	f040 808d 	bne.w	800ce9e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cd84:	4b4b      	ldr	r3, [pc, #300]	; (800ceb4 <HAL_RCC_GetSysClockFreq+0x15c>)
 800cd86:	60bb      	str	r3, [r7, #8]
       break;
 800cd88:	e08c      	b.n	800cea4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cd8a:	4b4b      	ldr	r3, [pc, #300]	; (800ceb8 <HAL_RCC_GetSysClockFreq+0x160>)
 800cd8c:	60bb      	str	r3, [r7, #8]
      break;
 800cd8e:	e089      	b.n	800cea4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cd90:	4b47      	ldr	r3, [pc, #284]	; (800ceb0 <HAL_RCC_GetSysClockFreq+0x158>)
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd98:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800cd9a:	4b45      	ldr	r3, [pc, #276]	; (800ceb0 <HAL_RCC_GetSysClockFreq+0x158>)
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d023      	beq.n	800cdee <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cda6:	4b42      	ldr	r3, [pc, #264]	; (800ceb0 <HAL_RCC_GetSysClockFreq+0x158>)
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	099b      	lsrs	r3, r3, #6
 800cdac:	f04f 0400 	mov.w	r4, #0
 800cdb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cdb4:	f04f 0200 	mov.w	r2, #0
 800cdb8:	ea03 0501 	and.w	r5, r3, r1
 800cdbc:	ea04 0602 	and.w	r6, r4, r2
 800cdc0:	4a3d      	ldr	r2, [pc, #244]	; (800ceb8 <HAL_RCC_GetSysClockFreq+0x160>)
 800cdc2:	fb02 f106 	mul.w	r1, r2, r6
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	fb02 f205 	mul.w	r2, r2, r5
 800cdcc:	440a      	add	r2, r1
 800cdce:	493a      	ldr	r1, [pc, #232]	; (800ceb8 <HAL_RCC_GetSysClockFreq+0x160>)
 800cdd0:	fba5 0101 	umull	r0, r1, r5, r1
 800cdd4:	1853      	adds	r3, r2, r1
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f04f 0400 	mov.w	r4, #0
 800cdde:	461a      	mov	r2, r3
 800cde0:	4623      	mov	r3, r4
 800cde2:	f7f8 fccd 	bl	8005780 <__aeabi_uldivmod>
 800cde6:	4603      	mov	r3, r0
 800cde8:	460c      	mov	r4, r1
 800cdea:	60fb      	str	r3, [r7, #12]
 800cdec:	e049      	b.n	800ce82 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cdee:	4b30      	ldr	r3, [pc, #192]	; (800ceb0 <HAL_RCC_GetSysClockFreq+0x158>)
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	099b      	lsrs	r3, r3, #6
 800cdf4:	f04f 0400 	mov.w	r4, #0
 800cdf8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cdfc:	f04f 0200 	mov.w	r2, #0
 800ce00:	ea03 0501 	and.w	r5, r3, r1
 800ce04:	ea04 0602 	and.w	r6, r4, r2
 800ce08:	4629      	mov	r1, r5
 800ce0a:	4632      	mov	r2, r6
 800ce0c:	f04f 0300 	mov.w	r3, #0
 800ce10:	f04f 0400 	mov.w	r4, #0
 800ce14:	0154      	lsls	r4, r2, #5
 800ce16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ce1a:	014b      	lsls	r3, r1, #5
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	4622      	mov	r2, r4
 800ce20:	1b49      	subs	r1, r1, r5
 800ce22:	eb62 0206 	sbc.w	r2, r2, r6
 800ce26:	f04f 0300 	mov.w	r3, #0
 800ce2a:	f04f 0400 	mov.w	r4, #0
 800ce2e:	0194      	lsls	r4, r2, #6
 800ce30:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800ce34:	018b      	lsls	r3, r1, #6
 800ce36:	1a5b      	subs	r3, r3, r1
 800ce38:	eb64 0402 	sbc.w	r4, r4, r2
 800ce3c:	f04f 0100 	mov.w	r1, #0
 800ce40:	f04f 0200 	mov.w	r2, #0
 800ce44:	00e2      	lsls	r2, r4, #3
 800ce46:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800ce4a:	00d9      	lsls	r1, r3, #3
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	4614      	mov	r4, r2
 800ce50:	195b      	adds	r3, r3, r5
 800ce52:	eb44 0406 	adc.w	r4, r4, r6
 800ce56:	f04f 0100 	mov.w	r1, #0
 800ce5a:	f04f 0200 	mov.w	r2, #0
 800ce5e:	02a2      	lsls	r2, r4, #10
 800ce60:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800ce64:	0299      	lsls	r1, r3, #10
 800ce66:	460b      	mov	r3, r1
 800ce68:	4614      	mov	r4, r2
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	4621      	mov	r1, r4
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f04f 0400 	mov.w	r4, #0
 800ce74:	461a      	mov	r2, r3
 800ce76:	4623      	mov	r3, r4
 800ce78:	f7f8 fc82 	bl	8005780 <__aeabi_uldivmod>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	460c      	mov	r4, r1
 800ce80:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800ce82:	4b0b      	ldr	r3, [pc, #44]	; (800ceb0 <HAL_RCC_GetSysClockFreq+0x158>)
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	0c1b      	lsrs	r3, r3, #16
 800ce88:	f003 0303 	and.w	r3, r3, #3
 800ce8c:	3301      	adds	r3, #1
 800ce8e:	005b      	lsls	r3, r3, #1
 800ce90:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800ce92:	68fa      	ldr	r2, [r7, #12]
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce9a:	60bb      	str	r3, [r7, #8]
      break;
 800ce9c:	e002      	b.n	800cea4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ce9e:	4b05      	ldr	r3, [pc, #20]	; (800ceb4 <HAL_RCC_GetSysClockFreq+0x15c>)
 800cea0:	60bb      	str	r3, [r7, #8]
      break;
 800cea2:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cea4:	68bb      	ldr	r3, [r7, #8]
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3714      	adds	r7, #20
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	40023800 	.word	0x40023800
 800ceb4:	00f42400 	.word	0x00f42400
 800ceb8:	017d7840 	.word	0x017d7840

0800cebc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cebc:	b480      	push	{r7}
 800cebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cec0:	4b03      	ldr	r3, [pc, #12]	; (800ced0 <HAL_RCC_GetHCLKFreq+0x14>)
 800cec2:	681b      	ldr	r3, [r3, #0]
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	46bd      	mov	sp, r7
 800cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cecc:	4770      	bx	lr
 800cece:	bf00      	nop
 800ced0:	200006dc 	.word	0x200006dc

0800ced4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ced8:	f7ff fff0 	bl	800cebc <HAL_RCC_GetHCLKFreq>
 800cedc:	4601      	mov	r1, r0
 800cede:	4b05      	ldr	r3, [pc, #20]	; (800cef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cee0:	689b      	ldr	r3, [r3, #8]
 800cee2:	0a9b      	lsrs	r3, r3, #10
 800cee4:	f003 0307 	and.w	r3, r3, #7
 800cee8:	4a03      	ldr	r2, [pc, #12]	; (800cef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ceea:	5cd3      	ldrb	r3, [r2, r3]
 800ceec:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	40023800 	.word	0x40023800
 800cef8:	0802a41c 	.word	0x0802a41c

0800cefc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800cf00:	f7ff ffdc 	bl	800cebc <HAL_RCC_GetHCLKFreq>
 800cf04:	4601      	mov	r1, r0
 800cf06:	4b05      	ldr	r3, [pc, #20]	; (800cf1c <HAL_RCC_GetPCLK2Freq+0x20>)
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	0b5b      	lsrs	r3, r3, #13
 800cf0c:	f003 0307 	and.w	r3, r3, #7
 800cf10:	4a03      	ldr	r2, [pc, #12]	; (800cf20 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cf12:	5cd3      	ldrb	r3, [r2, r3]
 800cf14:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	40023800 	.word	0x40023800
 800cf20:	0802a41c 	.word	0x0802a41c

0800cf24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b088      	sub	sp, #32
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800cf30:	2300      	movs	r3, #0
 800cf32:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800cf34:	2300      	movs	r3, #0
 800cf36:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f003 0301 	and.w	r3, r3, #1
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d012      	beq.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cf4c:	4b69      	ldr	r3, [pc, #420]	; (800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	4a68      	ldr	r2, [pc, #416]	; (800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf52:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cf56:	6093      	str	r3, [r2, #8]
 800cf58:	4b66      	ldr	r3, [pc, #408]	; (800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf5a:	689a      	ldr	r2, [r3, #8]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf60:	4964      	ldr	r1, [pc, #400]	; (800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf62:	4313      	orrs	r3, r2
 800cf64:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d101      	bne.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d017      	beq.n	800cfae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cf7e:	4b5d      	ldr	r3, [pc, #372]	; (800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf8c:	4959      	ldr	r1, [pc, #356]	; (800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf8e:	4313      	orrs	r3, r2
 800cf90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf9c:	d101      	bne.n	800cfa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d101      	bne.n	800cfae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d017      	beq.n	800cfea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cfba:	4b4e      	ldr	r3, [pc, #312]	; (800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cfbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfc0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfc8:	494a      	ldr	r1, [pc, #296]	; (800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cfd8:	d101      	bne.n	800cfde <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800cfda:	2301      	movs	r3, #1
 800cfdc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d101      	bne.n	800cfea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d001      	beq.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800cff6:	2301      	movs	r3, #1
 800cff8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f003 0320 	and.w	r3, r3, #32
 800d002:	2b00      	cmp	r3, #0
 800d004:	f000 808b 	beq.w	800d11e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800d008:	4b3a      	ldr	r3, [pc, #232]	; (800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d00a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d00c:	4a39      	ldr	r2, [pc, #228]	; (800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d00e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d012:	6413      	str	r3, [r2, #64]	; 0x40
 800d014:	4b37      	ldr	r3, [pc, #220]	; (800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d01c:	60bb      	str	r3, [r7, #8]
 800d01e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d020:	4b35      	ldr	r3, [pc, #212]	; (800d0f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4a34      	ldr	r2, [pc, #208]	; (800d0f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d02a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d02c:	f7fd fd0e 	bl	800aa4c <HAL_GetTick>
 800d030:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d032:	e008      	b.n	800d046 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d034:	f7fd fd0a 	bl	800aa4c <HAL_GetTick>
 800d038:	4602      	mov	r2, r0
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	1ad3      	subs	r3, r2, r3
 800d03e:	2b64      	cmp	r3, #100	; 0x64
 800d040:	d901      	bls.n	800d046 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800d042:	2303      	movs	r3, #3
 800d044:	e355      	b.n	800d6f2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d046:	4b2c      	ldr	r3, [pc, #176]	; (800d0f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d0f0      	beq.n	800d034 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d052:	4b28      	ldr	r3, [pc, #160]	; (800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d05a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d035      	beq.n	800d0ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d06a:	693a      	ldr	r2, [r7, #16]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d02e      	beq.n	800d0ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d070:	4b20      	ldr	r3, [pc, #128]	; (800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d078:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d07a:	4b1e      	ldr	r3, [pc, #120]	; (800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d07c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d07e:	4a1d      	ldr	r2, [pc, #116]	; (800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d084:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d086:	4b1b      	ldr	r3, [pc, #108]	; (800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d08a:	4a1a      	ldr	r2, [pc, #104]	; (800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d08c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d090:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800d092:	4a18      	ldr	r2, [pc, #96]	; (800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d098:	4b16      	ldr	r3, [pc, #88]	; (800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d09a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d09c:	f003 0301 	and.w	r3, r3, #1
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d114      	bne.n	800d0ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0a4:	f7fd fcd2 	bl	800aa4c <HAL_GetTick>
 800d0a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d0aa:	e00a      	b.n	800d0c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d0ac:	f7fd fcce 	bl	800aa4c <HAL_GetTick>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	1ad3      	subs	r3, r2, r3
 800d0b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d901      	bls.n	800d0c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800d0be:	2303      	movs	r3, #3
 800d0c0:	e317      	b.n	800d6f2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d0c2:	4b0c      	ldr	r3, [pc, #48]	; (800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d0c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0c6:	f003 0302 	and.w	r3, r3, #2
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d0ee      	beq.n	800d0ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d0d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d0da:	d111      	bne.n	800d100 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800d0dc:	4b05      	ldr	r3, [pc, #20]	; (800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d0de:	689b      	ldr	r3, [r3, #8]
 800d0e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d0e8:	4b04      	ldr	r3, [pc, #16]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800d0ea:	400b      	ands	r3, r1
 800d0ec:	4901      	ldr	r1, [pc, #4]	; (800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	608b      	str	r3, [r1, #8]
 800d0f2:	e00b      	b.n	800d10c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800d0f4:	40023800 	.word	0x40023800
 800d0f8:	40007000 	.word	0x40007000
 800d0fc:	0ffffcff 	.word	0x0ffffcff
 800d100:	4bb0      	ldr	r3, [pc, #704]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d102:	689b      	ldr	r3, [r3, #8]
 800d104:	4aaf      	ldr	r2, [pc, #700]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d106:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800d10a:	6093      	str	r3, [r2, #8]
 800d10c:	4bad      	ldr	r3, [pc, #692]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d10e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d118:	49aa      	ldr	r1, [pc, #680]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d11a:	4313      	orrs	r3, r2
 800d11c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f003 0310 	and.w	r3, r3, #16
 800d126:	2b00      	cmp	r3, #0
 800d128:	d010      	beq.n	800d14c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d12a:	4ba6      	ldr	r3, [pc, #664]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d12c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d130:	4aa4      	ldr	r2, [pc, #656]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d136:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800d13a:	4ba2      	ldr	r3, [pc, #648]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d13c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d144:	499f      	ldr	r1, [pc, #636]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d146:	4313      	orrs	r3, r2
 800d148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d154:	2b00      	cmp	r3, #0
 800d156:	d00a      	beq.n	800d16e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d158:	4b9a      	ldr	r3, [pc, #616]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d15a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d15e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d166:	4997      	ldr	r1, [pc, #604]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d168:	4313      	orrs	r3, r2
 800d16a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00a      	beq.n	800d190 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d17a:	4b92      	ldr	r3, [pc, #584]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d17c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d180:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d188:	498e      	ldr	r1, [pc, #568]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d18a:	4313      	orrs	r3, r2
 800d18c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d00a      	beq.n	800d1b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d19c:	4b89      	ldr	r3, [pc, #548]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d19e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1aa:	4986      	ldr	r1, [pc, #536]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d1ac:	4313      	orrs	r3, r2
 800d1ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d00a      	beq.n	800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d1be:	4b81      	ldr	r3, [pc, #516]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d1c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1cc:	497d      	ldr	r1, [pc, #500]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d00a      	beq.n	800d1f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d1e0:	4b78      	ldr	r3, [pc, #480]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d1e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1e6:	f023 0203 	bic.w	r2, r3, #3
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1ee:	4975      	ldr	r1, [pc, #468]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d00a      	beq.n	800d218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d202:	4b70      	ldr	r3, [pc, #448]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d208:	f023 020c 	bic.w	r2, r3, #12
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d210:	496c      	ldr	r1, [pc, #432]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d212:	4313      	orrs	r3, r2
 800d214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d220:	2b00      	cmp	r3, #0
 800d222:	d00a      	beq.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d224:	4b67      	ldr	r3, [pc, #412]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d22a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d232:	4964      	ldr	r1, [pc, #400]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d234:	4313      	orrs	r3, r2
 800d236:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d242:	2b00      	cmp	r3, #0
 800d244:	d00a      	beq.n	800d25c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d246:	4b5f      	ldr	r3, [pc, #380]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d24c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d254:	495b      	ldr	r1, [pc, #364]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d256:	4313      	orrs	r3, r2
 800d258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d264:	2b00      	cmp	r3, #0
 800d266:	d00a      	beq.n	800d27e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d268:	4b56      	ldr	r3, [pc, #344]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d26a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d26e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d276:	4953      	ldr	r1, [pc, #332]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d278:	4313      	orrs	r3, r2
 800d27a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d286:	2b00      	cmp	r3, #0
 800d288:	d00a      	beq.n	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d28a:	4b4e      	ldr	r3, [pc, #312]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d28c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d290:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d298:	494a      	ldr	r1, [pc, #296]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d29a:	4313      	orrs	r3, r2
 800d29c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d00a      	beq.n	800d2c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d2ac:	4b45      	ldr	r3, [pc, #276]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d2ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2ba:	4942      	ldr	r1, [pc, #264]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d00a      	beq.n	800d2e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d2ce:	4b3d      	ldr	r3, [pc, #244]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d2d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2dc:	4939      	ldr	r1, [pc, #228]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d2de:	4313      	orrs	r3, r2
 800d2e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d00a      	beq.n	800d306 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d2f0:	4b34      	ldr	r3, [pc, #208]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d2f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2fe:	4931      	ldr	r1, [pc, #196]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d300:	4313      	orrs	r3, r2
 800d302:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d011      	beq.n	800d336 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d312:	4b2c      	ldr	r3, [pc, #176]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d318:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d320:	4928      	ldr	r1, [pc, #160]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d322:	4313      	orrs	r3, r2
 800d324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d32c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d330:	d101      	bne.n	800d336 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800d332:	2301      	movs	r3, #1
 800d334:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f003 0308 	and.w	r3, r3, #8
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d001      	beq.n	800d346 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800d342:	2301      	movs	r3, #1
 800d344:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00a      	beq.n	800d368 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d352:	4b1c      	ldr	r3, [pc, #112]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d358:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d360:	4918      	ldr	r1, [pc, #96]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d362:	4313      	orrs	r3, r2
 800d364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d370:	2b00      	cmp	r3, #0
 800d372:	d00b      	beq.n	800d38c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d374:	4b13      	ldr	r3, [pc, #76]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d37a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d384:	490f      	ldr	r1, [pc, #60]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d386:	4313      	orrs	r3, r2
 800d388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d005      	beq.n	800d39e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d39a:	f040 80d8 	bne.w	800d54e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d39e:	4b09      	ldr	r3, [pc, #36]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	4a08      	ldr	r2, [pc, #32]	; (800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d3a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d3a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3aa:	f7fd fb4f 	bl	800aa4c <HAL_GetTick>
 800d3ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d3b0:	e00a      	b.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d3b2:	f7fd fb4b 	bl	800aa4c <HAL_GetTick>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	1ad3      	subs	r3, r2, r3
 800d3bc:	2b64      	cmp	r3, #100	; 0x64
 800d3be:	d903      	bls.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d3c0:	2303      	movs	r3, #3
 800d3c2:	e196      	b.n	800d6f2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800d3c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d3c8:	4b6c      	ldr	r3, [pc, #432]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d1ee      	bne.n	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f003 0301 	and.w	r3, r3, #1
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d021      	beq.n	800d424 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d11d      	bne.n	800d424 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d3e8:	4b64      	ldr	r3, [pc, #400]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d3ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3ee:	0c1b      	lsrs	r3, r3, #16
 800d3f0:	f003 0303 	and.w	r3, r3, #3
 800d3f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d3f6:	4b61      	ldr	r3, [pc, #388]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d3f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3fc:	0e1b      	lsrs	r3, r3, #24
 800d3fe:	f003 030f 	and.w	r3, r3, #15
 800d402:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	019a      	lsls	r2, r3, #6
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	041b      	lsls	r3, r3, #16
 800d40e:	431a      	orrs	r2, r3
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	061b      	lsls	r3, r3, #24
 800d414:	431a      	orrs	r2, r3
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	689b      	ldr	r3, [r3, #8]
 800d41a:	071b      	lsls	r3, r3, #28
 800d41c:	4957      	ldr	r1, [pc, #348]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d41e:	4313      	orrs	r3, r2
 800d420:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d004      	beq.n	800d43a <HAL_RCCEx_PeriphCLKConfig+0x516>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d438:	d00a      	beq.n	800d450 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d442:	2b00      	cmp	r3, #0
 800d444:	d02e      	beq.n	800d4a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d44a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d44e:	d129      	bne.n	800d4a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d450:	4b4a      	ldr	r3, [pc, #296]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d456:	0c1b      	lsrs	r3, r3, #16
 800d458:	f003 0303 	and.w	r3, r3, #3
 800d45c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d45e:	4b47      	ldr	r3, [pc, #284]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d464:	0f1b      	lsrs	r3, r3, #28
 800d466:	f003 0307 	and.w	r3, r3, #7
 800d46a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	685b      	ldr	r3, [r3, #4]
 800d470:	019a      	lsls	r2, r3, #6
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	041b      	lsls	r3, r3, #16
 800d476:	431a      	orrs	r2, r3
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	68db      	ldr	r3, [r3, #12]
 800d47c:	061b      	lsls	r3, r3, #24
 800d47e:	431a      	orrs	r2, r3
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	071b      	lsls	r3, r3, #28
 800d484:	493d      	ldr	r1, [pc, #244]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d486:	4313      	orrs	r3, r2
 800d488:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d48c:	4b3b      	ldr	r3, [pc, #236]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d48e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d492:	f023 021f 	bic.w	r2, r3, #31
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d49a:	3b01      	subs	r3, #1
 800d49c:	4937      	ldr	r1, [pc, #220]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d49e:	4313      	orrs	r3, r2
 800d4a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d01d      	beq.n	800d4ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d4b0:	4b32      	ldr	r3, [pc, #200]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d4b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4b6:	0e1b      	lsrs	r3, r3, #24
 800d4b8:	f003 030f 	and.w	r3, r3, #15
 800d4bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d4be:	4b2f      	ldr	r3, [pc, #188]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d4c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4c4:	0f1b      	lsrs	r3, r3, #28
 800d4c6:	f003 0307 	and.w	r3, r3, #7
 800d4ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	685b      	ldr	r3, [r3, #4]
 800d4d0:	019a      	lsls	r2, r3, #6
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	691b      	ldr	r3, [r3, #16]
 800d4d6:	041b      	lsls	r3, r3, #16
 800d4d8:	431a      	orrs	r2, r3
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	061b      	lsls	r3, r3, #24
 800d4de:	431a      	orrs	r2, r3
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	071b      	lsls	r3, r3, #28
 800d4e4:	4925      	ldr	r1, [pc, #148]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d011      	beq.n	800d51c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	019a      	lsls	r2, r3, #6
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	691b      	ldr	r3, [r3, #16]
 800d502:	041b      	lsls	r3, r3, #16
 800d504:	431a      	orrs	r2, r3
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	68db      	ldr	r3, [r3, #12]
 800d50a:	061b      	lsls	r3, r3, #24
 800d50c:	431a      	orrs	r2, r3
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	689b      	ldr	r3, [r3, #8]
 800d512:	071b      	lsls	r3, r3, #28
 800d514:	4919      	ldr	r1, [pc, #100]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d516:	4313      	orrs	r3, r2
 800d518:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d51c:	4b17      	ldr	r3, [pc, #92]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4a16      	ldr	r2, [pc, #88]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d522:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d526:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d528:	f7fd fa90 	bl	800aa4c <HAL_GetTick>
 800d52c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d52e:	e008      	b.n	800d542 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d530:	f7fd fa8c 	bl	800aa4c <HAL_GetTick>
 800d534:	4602      	mov	r2, r0
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	1ad3      	subs	r3, r2, r3
 800d53a:	2b64      	cmp	r3, #100	; 0x64
 800d53c:	d901      	bls.n	800d542 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d53e:	2303      	movs	r3, #3
 800d540:	e0d7      	b.n	800d6f2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d542:	4b0e      	ldr	r3, [pc, #56]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d0f0      	beq.n	800d530 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d54e:	69bb      	ldr	r3, [r7, #24]
 800d550:	2b01      	cmp	r3, #1
 800d552:	f040 80cd 	bne.w	800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d556:	4b09      	ldr	r3, [pc, #36]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	4a08      	ldr	r2, [pc, #32]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d55c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d562:	f7fd fa73 	bl	800aa4c <HAL_GetTick>
 800d566:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d568:	e00a      	b.n	800d580 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d56a:	f7fd fa6f 	bl	800aa4c <HAL_GetTick>
 800d56e:	4602      	mov	r2, r0
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	1ad3      	subs	r3, r2, r3
 800d574:	2b64      	cmp	r3, #100	; 0x64
 800d576:	d903      	bls.n	800d580 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d578:	2303      	movs	r3, #3
 800d57a:	e0ba      	b.n	800d6f2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800d57c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d580:	4b5e      	ldr	r3, [pc, #376]	; (800d6fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d58c:	d0ed      	beq.n	800d56a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d596:	2b00      	cmp	r3, #0
 800d598:	d003      	beq.n	800d5a2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d009      	beq.n	800d5b6 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d02e      	beq.n	800d60c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d12a      	bne.n	800d60c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d5b6:	4b51      	ldr	r3, [pc, #324]	; (800d6fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d5b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5bc:	0c1b      	lsrs	r3, r3, #16
 800d5be:	f003 0303 	and.w	r3, r3, #3
 800d5c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d5c4:	4b4d      	ldr	r3, [pc, #308]	; (800d6fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d5c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5ca:	0f1b      	lsrs	r3, r3, #28
 800d5cc:	f003 0307 	and.w	r3, r3, #7
 800d5d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	695b      	ldr	r3, [r3, #20]
 800d5d6:	019a      	lsls	r2, r3, #6
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	041b      	lsls	r3, r3, #16
 800d5dc:	431a      	orrs	r2, r3
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	699b      	ldr	r3, [r3, #24]
 800d5e2:	061b      	lsls	r3, r3, #24
 800d5e4:	431a      	orrs	r2, r3
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	071b      	lsls	r3, r3, #28
 800d5ea:	4944      	ldr	r1, [pc, #272]	; (800d6fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d5ec:	4313      	orrs	r3, r2
 800d5ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d5f2:	4b42      	ldr	r3, [pc, #264]	; (800d6fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d5f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d600:	3b01      	subs	r3, #1
 800d602:	021b      	lsls	r3, r3, #8
 800d604:	493d      	ldr	r1, [pc, #244]	; (800d6fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d606:	4313      	orrs	r3, r2
 800d608:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d614:	2b00      	cmp	r3, #0
 800d616:	d022      	beq.n	800d65e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d61c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d620:	d11d      	bne.n	800d65e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d622:	4b36      	ldr	r3, [pc, #216]	; (800d6fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d628:	0e1b      	lsrs	r3, r3, #24
 800d62a:	f003 030f 	and.w	r3, r3, #15
 800d62e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d630:	4b32      	ldr	r3, [pc, #200]	; (800d6fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d636:	0f1b      	lsrs	r3, r3, #28
 800d638:	f003 0307 	and.w	r3, r3, #7
 800d63c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	695b      	ldr	r3, [r3, #20]
 800d642:	019a      	lsls	r2, r3, #6
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6a1b      	ldr	r3, [r3, #32]
 800d648:	041b      	lsls	r3, r3, #16
 800d64a:	431a      	orrs	r2, r3
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	061b      	lsls	r3, r3, #24
 800d650:	431a      	orrs	r2, r3
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	071b      	lsls	r3, r3, #28
 800d656:	4929      	ldr	r1, [pc, #164]	; (800d6fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d658:	4313      	orrs	r3, r2
 800d65a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f003 0308 	and.w	r3, r3, #8
 800d666:	2b00      	cmp	r3, #0
 800d668:	d028      	beq.n	800d6bc <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d66a:	4b24      	ldr	r3, [pc, #144]	; (800d6fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d66c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d670:	0e1b      	lsrs	r3, r3, #24
 800d672:	f003 030f 	and.w	r3, r3, #15
 800d676:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d678:	4b20      	ldr	r3, [pc, #128]	; (800d6fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d67a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d67e:	0c1b      	lsrs	r3, r3, #16
 800d680:	f003 0303 	and.w	r3, r3, #3
 800d684:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	695b      	ldr	r3, [r3, #20]
 800d68a:	019a      	lsls	r2, r3, #6
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	041b      	lsls	r3, r3, #16
 800d690:	431a      	orrs	r2, r3
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	061b      	lsls	r3, r3, #24
 800d696:	431a      	orrs	r2, r3
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	69db      	ldr	r3, [r3, #28]
 800d69c:	071b      	lsls	r3, r3, #28
 800d69e:	4917      	ldr	r1, [pc, #92]	; (800d6fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d6a0:	4313      	orrs	r3, r2
 800d6a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d6a6:	4b15      	ldr	r3, [pc, #84]	; (800d6fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d6a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b4:	4911      	ldr	r1, [pc, #68]	; (800d6fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d6bc:	4b0f      	ldr	r3, [pc, #60]	; (800d6fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	4a0e      	ldr	r2, [pc, #56]	; (800d6fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d6c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6c8:	f7fd f9c0 	bl	800aa4c <HAL_GetTick>
 800d6cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d6ce:	e008      	b.n	800d6e2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d6d0:	f7fd f9bc 	bl	800aa4c <HAL_GetTick>
 800d6d4:	4602      	mov	r2, r0
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	1ad3      	subs	r3, r2, r3
 800d6da:	2b64      	cmp	r3, #100	; 0x64
 800d6dc:	d901      	bls.n	800d6e2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d6de:	2303      	movs	r3, #3
 800d6e0:	e007      	b.n	800d6f2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d6e2:	4b06      	ldr	r3, [pc, #24]	; (800d6fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d6ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d6ee:	d1ef      	bne.n	800d6d0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800d6f0:	2300      	movs	r3, #0
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3720      	adds	r7, #32
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}
 800d6fa:	bf00      	nop
 800d6fc:	40023800 	.word	0x40023800

0800d700 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d700:	b480      	push	{r7}
 800d702:	b085      	sub	sp, #20
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800d708:	2300      	movs	r3, #0
 800d70a:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	4a80      	ldr	r2, [pc, #512]	; (800d910 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800d710:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800d712:	4b80      	ldr	r3, [pc, #512]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d718:	099b      	lsrs	r3, r3, #6
 800d71a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d722:	4b7c      	ldr	r3, [pc, #496]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d728:	0c1b      	lsrs	r3, r3, #16
 800d72a:	f003 0203 	and.w	r2, r3, #3
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d732:	4b78      	ldr	r3, [pc, #480]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d738:	0e1b      	lsrs	r3, r3, #24
 800d73a:	f003 020f 	and.w	r2, r3, #15
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d742:	4b74      	ldr	r3, [pc, #464]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d748:	0f1b      	lsrs	r3, r3, #28
 800d74a:	f003 0207 	and.w	r2, r3, #7
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800d752:	4b70      	ldr	r3, [pc, #448]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d758:	099b      	lsrs	r3, r3, #6
 800d75a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d762:	4b6c      	ldr	r3, [pc, #432]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d768:	0c1b      	lsrs	r3, r3, #16
 800d76a:	f003 0203 	and.w	r2, r3, #3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d772:	4b68      	ldr	r3, [pc, #416]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d778:	0e1b      	lsrs	r3, r3, #24
 800d77a:	f003 020f 	and.w	r2, r3, #15
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d782:	4b64      	ldr	r3, [pc, #400]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d788:	0f1b      	lsrs	r3, r3, #28
 800d78a:	f003 0207 	and.w	r2, r3, #7
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800d792:	4b60      	ldr	r3, [pc, #384]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d798:	f003 021f 	and.w	r2, r3, #31
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800d7a0:	4b5c      	ldr	r3, [pc, #368]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d7a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7a6:	0a1b      	lsrs	r3, r3, #8
 800d7a8:	f003 021f 	and.w	r2, r3, #31
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800d7b0:	4b58      	ldr	r3, [pc, #352]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d7b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7b6:	0c1b      	lsrs	r3, r3, #16
 800d7b8:	f003 0203 	and.w	r2, r3, #3
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800d7c0:	4b54      	ldr	r3, [pc, #336]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d7c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7c6:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800d7ce:	4b51      	ldr	r3, [pc, #324]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d7d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7d4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800d7dc:	4b4d      	ldr	r3, [pc, #308]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d7de:	689b      	ldr	r3, [r3, #8]
 800d7e0:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800d7e8:	4b4a      	ldr	r3, [pc, #296]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d7ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800d7f6:	4b47      	ldr	r3, [pc, #284]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d7f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7fc:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800d804:	4b43      	ldr	r3, [pc, #268]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d80a:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800d812:	4b40      	ldr	r3, [pc, #256]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d818:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800d820:	4b3c      	ldr	r3, [pc, #240]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d826:	f003 0203 	and.w	r2, r3, #3
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800d82e:	4b39      	ldr	r3, [pc, #228]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d834:	f003 020c 	and.w	r2, r3, #12
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800d83c:	4b35      	ldr	r3, [pc, #212]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d83e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d842:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800d84a:	4b32      	ldr	r3, [pc, #200]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d84c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d850:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800d858:	4b2e      	ldr	r3, [pc, #184]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d85a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d85e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800d866:	4b2b      	ldr	r3, [pc, #172]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d86c:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800d874:	4b27      	ldr	r3, [pc, #156]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d87a:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800d882:	4b24      	ldr	r3, [pc, #144]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d888:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800d890:	4b20      	ldr	r3, [pc, #128]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d896:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800d89e:	4b1d      	ldr	r3, [pc, #116]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d8a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8a4:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800d8ac:	4b19      	ldr	r3, [pc, #100]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d8ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8b2:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800d8ba:	4b16      	ldr	r3, [pc, #88]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d8bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8c0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800d8ca:	4b12      	ldr	r3, [pc, #72]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d8cc:	689b      	ldr	r3, [r3, #8]
 800d8ce:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d8d2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800d8d4:	4b0f      	ldr	r3, [pc, #60]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d8d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8d8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	431a      	orrs	r2, r3
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800d8e4:	4b0b      	ldr	r3, [pc, #44]	; (800d914 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d8e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d103      	bne.n	800d8fa <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800d8f8:	e003      	b.n	800d902 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d900:	639a      	str	r2, [r3, #56]	; 0x38
}
 800d902:	bf00      	nop
 800d904:	3714      	adds	r7, #20
 800d906:	46bd      	mov	sp, r7
 800d908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90c:	4770      	bx	lr
 800d90e:	bf00      	nop
 800d910:	00fffff1 	.word	0x00fffff1
 800d914:	40023800 	.word	0x40023800

0800d918 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800d918:	b480      	push	{r7}
 800d91a:	b087      	sub	sp, #28
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800d920:	2300      	movs	r3, #0
 800d922:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800d924:	2300      	movs	r3, #0
 800d926:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800d928:	2300      	movs	r3, #0
 800d92a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800d92c:	2300      	movs	r3, #0
 800d92e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d936:	f040 8086 	bne.w	800da46 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 800d93a:	4b8d      	ldr	r3, [pc, #564]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d93c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d940:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800d948:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d950:	d03e      	beq.n	800d9d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 800d952:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d956:	d073      	beq.n	800da40 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d000      	beq.n	800d95e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800d95c:	e074      	b.n	800da48 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d95e:	4b84      	ldr	r3, [pc, #528]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d960:	685b      	ldr	r3, [r3, #4]
 800d962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d966:	2b00      	cmp	r3, #0
 800d968:	d108      	bne.n	800d97c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d96a:	4b81      	ldr	r3, [pc, #516]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d972:	4a80      	ldr	r2, [pc, #512]	; (800db74 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800d974:	fbb2 f3f3 	udiv	r3, r2, r3
 800d978:	613b      	str	r3, [r7, #16]
 800d97a:	e007      	b.n	800d98c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d97c:	4b7c      	ldr	r3, [pc, #496]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d984:	4a7c      	ldr	r2, [pc, #496]	; (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800d986:	fbb2 f3f3 	udiv	r3, r2, r3
 800d98a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800d98c:	4b78      	ldr	r3, [pc, #480]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d98e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d992:	0e1b      	lsrs	r3, r3, #24
 800d994:	f003 030f 	and.w	r3, r3, #15
 800d998:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800d99a:	4b75      	ldr	r3, [pc, #468]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d99c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9a0:	099b      	lsrs	r3, r3, #6
 800d9a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9a6:	693a      	ldr	r2, [r7, #16]
 800d9a8:	fb02 f203 	mul.w	r2, r2, r3
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9b2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800d9b4:	4b6e      	ldr	r3, [pc, #440]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d9b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d9ba:	0a1b      	lsrs	r3, r3, #8
 800d9bc:	f003 031f 	and.w	r3, r3, #31
 800d9c0:	3301      	adds	r3, #1
 800d9c2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d9c4:	697a      	ldr	r2, [r7, #20]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9cc:	617b      	str	r3, [r7, #20]
        break;
 800d9ce:	e03b      	b.n	800da48 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d9d0:	4b67      	ldr	r3, [pc, #412]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d9d2:	685b      	ldr	r3, [r3, #4]
 800d9d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d108      	bne.n	800d9ee <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d9dc:	4b64      	ldr	r3, [pc, #400]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d9e4:	4a63      	ldr	r2, [pc, #396]	; (800db74 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800d9e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9ea:	613b      	str	r3, [r7, #16]
 800d9ec:	e007      	b.n	800d9fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d9ee:	4b60      	ldr	r3, [pc, #384]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d9f6:	4a60      	ldr	r2, [pc, #384]	; (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800d9f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9fc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800d9fe:	4b5c      	ldr	r3, [pc, #368]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800da00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da04:	0e1b      	lsrs	r3, r3, #24
 800da06:	f003 030f 	and.w	r3, r3, #15
 800da0a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800da0c:	4b58      	ldr	r3, [pc, #352]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800da0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da12:	099b      	lsrs	r3, r3, #6
 800da14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da18:	693a      	ldr	r2, [r7, #16]
 800da1a:	fb02 f203 	mul.w	r2, r2, r3
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	fbb2 f3f3 	udiv	r3, r2, r3
 800da24:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800da26:	4b52      	ldr	r3, [pc, #328]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800da28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da2c:	f003 031f 	and.w	r3, r3, #31
 800da30:	3301      	adds	r3, #1
 800da32:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800da34:	697a      	ldr	r2, [r7, #20]
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	fbb2 f3f3 	udiv	r3, r2, r3
 800da3c:	617b      	str	r3, [r7, #20]
        break;
 800da3e:	e003      	b.n	800da48 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 800da40:	4b4e      	ldr	r3, [pc, #312]	; (800db7c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800da42:	617b      	str	r3, [r7, #20]
        break;
 800da44:	e000      	b.n	800da48 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 800da46:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da4e:	f040 8086 	bne.w	800db5e <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 800da52:	4b47      	ldr	r3, [pc, #284]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800da54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da58:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800da60:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800da68:	d03e      	beq.n	800dae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800da6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800da6e:	d073      	beq.n	800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800da70:	2b00      	cmp	r3, #0
 800da72:	d000      	beq.n	800da76 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800da74:	e074      	b.n	800db60 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800da76:	4b3e      	ldr	r3, [pc, #248]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800da78:	685b      	ldr	r3, [r3, #4]
 800da7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d108      	bne.n	800da94 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800da82:	4b3b      	ldr	r3, [pc, #236]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800da84:	685b      	ldr	r3, [r3, #4]
 800da86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da8a:	4a3a      	ldr	r2, [pc, #232]	; (800db74 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800da8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800da90:	613b      	str	r3, [r7, #16]
 800da92:	e007      	b.n	800daa4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800da94:	4b36      	ldr	r3, [pc, #216]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800da96:	685b      	ldr	r3, [r3, #4]
 800da98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da9c:	4a36      	ldr	r2, [pc, #216]	; (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800da9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800daa2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800daa4:	4b32      	ldr	r3, [pc, #200]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800daa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800daaa:	0e1b      	lsrs	r3, r3, #24
 800daac:	f003 030f 	and.w	r3, r3, #15
 800dab0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800dab2:	4b2f      	ldr	r3, [pc, #188]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800dab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dab8:	099b      	lsrs	r3, r3, #6
 800daba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dabe:	693a      	ldr	r2, [r7, #16]
 800dac0:	fb02 f203 	mul.w	r2, r2, r3
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	fbb2 f3f3 	udiv	r3, r2, r3
 800daca:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800dacc:	4b28      	ldr	r3, [pc, #160]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800dace:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dad2:	0a1b      	lsrs	r3, r3, #8
 800dad4:	f003 031f 	and.w	r3, r3, #31
 800dad8:	3301      	adds	r3, #1
 800dada:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800dadc:	697a      	ldr	r2, [r7, #20]
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dae4:	617b      	str	r3, [r7, #20]
        break;
 800dae6:	e03b      	b.n	800db60 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800dae8:	4b21      	ldr	r3, [pc, #132]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d108      	bne.n	800db06 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800daf4:	4b1e      	ldr	r3, [pc, #120]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dafc:	4a1d      	ldr	r2, [pc, #116]	; (800db74 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800dafe:	fbb2 f3f3 	udiv	r3, r2, r3
 800db02:	613b      	str	r3, [r7, #16]
 800db04:	e007      	b.n	800db16 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800db06:	4b1a      	ldr	r3, [pc, #104]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db0e:	4a1a      	ldr	r2, [pc, #104]	; (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800db10:	fbb2 f3f3 	udiv	r3, r2, r3
 800db14:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800db16:	4b16      	ldr	r3, [pc, #88]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800db18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db1c:	0e1b      	lsrs	r3, r3, #24
 800db1e:	f003 030f 	and.w	r3, r3, #15
 800db22:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800db24:	4b12      	ldr	r3, [pc, #72]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800db26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db2a:	099b      	lsrs	r3, r3, #6
 800db2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db30:	693a      	ldr	r2, [r7, #16]
 800db32:	fb02 f203 	mul.w	r2, r2, r3
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	fbb2 f3f3 	udiv	r3, r2, r3
 800db3c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800db3e:	4b0c      	ldr	r3, [pc, #48]	; (800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800db40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db44:	f003 031f 	and.w	r3, r3, #31
 800db48:	3301      	adds	r3, #1
 800db4a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800db4c:	697a      	ldr	r2, [r7, #20]
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	fbb2 f3f3 	udiv	r3, r2, r3
 800db54:	617b      	str	r3, [r7, #20]
        break;
 800db56:	e003      	b.n	800db60 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 800db58:	4b08      	ldr	r3, [pc, #32]	; (800db7c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800db5a:	617b      	str	r3, [r7, #20]
        break;
 800db5c:	e000      	b.n	800db60 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800db5e:	bf00      	nop

  return frequency;
 800db60:	697b      	ldr	r3, [r7, #20]
}
 800db62:	4618      	mov	r0, r3
 800db64:	371c      	adds	r7, #28
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	40023800 	.word	0x40023800
 800db74:	00f42400 	.word	0x00f42400
 800db78:	017d7840 	.word	0x017d7840
 800db7c:	00bb8000 	.word	0x00bb8000

0800db80 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b088      	sub	sp, #32
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800db88:	2300      	movs	r3, #0
 800db8a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800db8c:	2300      	movs	r3, #0
 800db8e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800db90:	2300      	movs	r3, #0
 800db92:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d101      	bne.n	800db9e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800db9a:	2301      	movs	r3, #1
 800db9c:	e149      	b.n	800de32 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d106      	bne.n	800dbb8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2200      	movs	r2, #0
 800dbae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f002 ff5c 	bl	8010a70 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2202      	movs	r2, #2
 800dbbc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 fa57 	bl	800e074 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d007      	beq.n	800dbde <HAL_SAI_Init+0x5e>
 800dbce:	2b01      	cmp	r3, #1
 800dbd0:	d302      	bcc.n	800dbd8 <HAL_SAI_Init+0x58>
 800dbd2:	2b02      	cmp	r3, #2
 800dbd4:	d006      	beq.n	800dbe4 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 800dbd6:	e008      	b.n	800dbea <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	61fb      	str	r3, [r7, #28]
      break;
 800dbdc:	e005      	b.n	800dbea <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800dbde:	2310      	movs	r3, #16
 800dbe0:	61fb      	str	r3, [r7, #28]
      break;
 800dbe2:	e002      	b.n	800dbea <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800dbe4:	2320      	movs	r3, #32
 800dbe6:	61fb      	str	r3, [r7, #28]
      break;
 800dbe8:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	689b      	ldr	r3, [r3, #8]
 800dbee:	2b03      	cmp	r3, #3
 800dbf0:	d81d      	bhi.n	800dc2e <HAL_SAI_Init+0xae>
 800dbf2:	a201      	add	r2, pc, #4	; (adr r2, 800dbf8 <HAL_SAI_Init+0x78>)
 800dbf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbf8:	0800dc09 	.word	0x0800dc09
 800dbfc:	0800dc0f 	.word	0x0800dc0f
 800dc00:	0800dc17 	.word	0x0800dc17
 800dc04:	0800dc1f 	.word	0x0800dc1f
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	617b      	str	r3, [r7, #20]
      }
      break;
 800dc0c:	e010      	b.n	800dc30 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800dc0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc12:	617b      	str	r3, [r7, #20]
      }
      break;
 800dc14:	e00c      	b.n	800dc30 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800dc16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dc1a:	617b      	str	r3, [r7, #20]
      }
      break;
 800dc1c:	e008      	b.n	800dc30 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800dc1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dc22:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	f043 0301 	orr.w	r3, r3, #1
 800dc2a:	61fb      	str	r3, [r7, #28]
      }
      break;
 800dc2c:	e000      	b.n	800dc30 <HAL_SAI_Init+0xb0>
  default:
    break;
 800dc2e:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4a81      	ldr	r2, [pc, #516]	; (800de3c <HAL_SAI_Init+0x2bc>)
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d004      	beq.n	800dc44 <HAL_SAI_Init+0xc4>
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	4a80      	ldr	r2, [pc, #512]	; (800de40 <HAL_SAI_Init+0x2c0>)
 800dc40:	4293      	cmp	r3, r2
 800dc42:	d103      	bne.n	800dc4c <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800dc44:	4a7f      	ldr	r2, [pc, #508]	; (800de44 <HAL_SAI_Init+0x2c4>)
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	6013      	str	r3, [r2, #0]
 800dc4a:	e002      	b.n	800dc52 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800dc4c:	4a7e      	ldr	r2, [pc, #504]	; (800de48 <HAL_SAI_Init+0x2c8>)
 800dc4e:	69fb      	ldr	r3, [r7, #28]
 800dc50:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	69db      	ldr	r3, [r3, #28]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d043      	beq.n	800dce2 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	4a76      	ldr	r2, [pc, #472]	; (800de3c <HAL_SAI_Init+0x2bc>)
 800dc64:	4293      	cmp	r3, r2
 800dc66:	d004      	beq.n	800dc72 <HAL_SAI_Init+0xf2>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4a74      	ldr	r2, [pc, #464]	; (800de40 <HAL_SAI_Init+0x2c0>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d104      	bne.n	800dc7c <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800dc72:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800dc76:	f7ff fe4f 	bl	800d918 <HAL_RCCEx_GetPeriphCLKFreq>
 800dc7a:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a72      	ldr	r2, [pc, #456]	; (800de4c <HAL_SAI_Init+0x2cc>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d004      	beq.n	800dc90 <HAL_SAI_Init+0x110>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4a71      	ldr	r2, [pc, #452]	; (800de50 <HAL_SAI_Init+0x2d0>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d104      	bne.n	800dc9a <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800dc90:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800dc94:	f7ff fe40 	bl	800d918 <HAL_RCCEx_GetPeriphCLKFreq>
 800dc98:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800dc9a:	693a      	ldr	r2, [r7, #16]
 800dc9c:	4613      	mov	r3, r2
 800dc9e:	009b      	lsls	r3, r3, #2
 800dca0:	4413      	add	r3, r2
 800dca2:	005b      	lsls	r3, r3, #1
 800dca4:	461a      	mov	r2, r3
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	69db      	ldr	r3, [r3, #28]
 800dcaa:	025b      	lsls	r3, r3, #9
 800dcac:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcb0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	4a67      	ldr	r2, [pc, #412]	; (800de54 <HAL_SAI_Init+0x2d4>)
 800dcb6:	fba2 2303 	umull	r2, r3, r2, r3
 800dcba:	08da      	lsrs	r2, r3, #3
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 800dcc0:	68f9      	ldr	r1, [r7, #12]
 800dcc2:	4b64      	ldr	r3, [pc, #400]	; (800de54 <HAL_SAI_Init+0x2d4>)
 800dcc4:	fba3 2301 	umull	r2, r3, r3, r1
 800dcc8:	08da      	lsrs	r2, r3, #3
 800dcca:	4613      	mov	r3, r2
 800dccc:	009b      	lsls	r3, r3, #2
 800dcce:	4413      	add	r3, r2
 800dcd0:	005b      	lsls	r3, r3, #1
 800dcd2:	1aca      	subs	r2, r1, r3
 800dcd4:	2a08      	cmp	r2, #8
 800dcd6:	d904      	bls.n	800dce2 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6a1b      	ldr	r3, [r3, #32]
 800dcdc:	1c5a      	adds	r2, r3, #1
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d003      	beq.n	800dcf2 <HAL_SAI_Init+0x172>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	2b02      	cmp	r3, #2
 800dcf0:	d109      	bne.n	800dd06 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	d101      	bne.n	800dcfe <HAL_SAI_Init+0x17e>
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	e001      	b.n	800dd02 <HAL_SAI_Init+0x182>
 800dcfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd02:	61bb      	str	r3, [r7, #24]
 800dd04:	e008      	b.n	800dd18 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd0a:	2b01      	cmp	r3, #1
 800dd0c:	d102      	bne.n	800dd14 <HAL_SAI_Init+0x194>
 800dd0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd12:	e000      	b.n	800dd16 <HAL_SAI_Init+0x196>
 800dd14:	2300      	movs	r3, #0
 800dd16:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	6819      	ldr	r1, [r3, #0]
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	4b4d      	ldr	r3, [pc, #308]	; (800de58 <HAL_SAI_Init+0x2d8>)
 800dd24:	400b      	ands	r3, r1
 800dd26:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	6819      	ldr	r1, [r3, #0]
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	685a      	ldr	r2, [r3, #4]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd36:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dd3c:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd42:	431a      	orrs	r2, r3
 800dd44:	69bb      	ldr	r3, [r7, #24]
 800dd46:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 800dd50:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	691b      	ldr	r3, [r3, #16]
 800dd56:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dd5c:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6a1b      	ldr	r3, [r3, #32]
 800dd62:	051b      	lsls	r3, r3, #20
 800dd64:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	430a      	orrs	r2, r1
 800dd6c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	6859      	ldr	r1, [r3, #4]
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681a      	ldr	r2, [r3, #0]
 800dd78:	4b38      	ldr	r3, [pc, #224]	; (800de5c <HAL_SAI_Init+0x2dc>)
 800dd7a:	400b      	ands	r3, r1
 800dd7c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	6859      	ldr	r1, [r3, #4]
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	699a      	ldr	r2, [r3, #24]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd8c:	431a      	orrs	r2, r3
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd92:	431a      	orrs	r2, r3
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	430a      	orrs	r2, r1
 800dd9a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	6899      	ldr	r1, [r3, #8]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681a      	ldr	r2, [r3, #0]
 800dda6:	4b2e      	ldr	r3, [pc, #184]	; (800de60 <HAL_SAI_Init+0x2e0>)
 800dda8:	400b      	ands	r3, r1
 800ddaa:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	6899      	ldr	r1, [r3, #8]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddb6:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800ddbc:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800ddc2:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 800ddc8:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddce:	3b01      	subs	r3, #1
 800ddd0:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 800ddd2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	430a      	orrs	r2, r1
 800ddda:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	68d9      	ldr	r1, [r3, #12]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681a      	ldr	r2, [r3, #0]
 800dde6:	f24f 0320 	movw	r3, #61472	; 0xf020
 800ddea:	400b      	ands	r3, r1
 800ddec:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	68d9      	ldr	r1, [r3, #12]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddfc:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de02:	041b      	lsls	r3, r3, #16
 800de04:	431a      	orrs	r2, r3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de0a:	3b01      	subs	r3, #1
 800de0c:	021b      	lsls	r3, r3, #8
 800de0e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	430a      	orrs	r2, r1
 800de16:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2200      	movs	r2, #0
 800de1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2201      	movs	r2, #1
 800de24:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2200      	movs	r2, #0
 800de2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800de30:	2300      	movs	r3, #0
}
 800de32:	4618      	mov	r0, r3
 800de34:	3720      	adds	r7, #32
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	40015804 	.word	0x40015804
 800de40:	40015824 	.word	0x40015824
 800de44:	40015800 	.word	0x40015800
 800de48:	40015c00 	.word	0x40015c00
 800de4c:	40015c04 	.word	0x40015c04
 800de50:	40015c24 	.word	0x40015c24
 800de54:	cccccccd 	.word	0xcccccccd
 800de58:	ff05c010 	.word	0xff05c010
 800de5c:	ffff1ff0 	.word	0xffff1ff0
 800de60:	fff88000 	.word	0xfff88000

0800de64 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d101      	bne.n	800de76 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800de72:	2301      	movs	r3, #1
 800de74:	e027      	b.n	800dec6 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2202      	movs	r2, #2
 800de7a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2200      	movs	r2, #0
 800de84:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de8e:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f000 f8ef 	bl	800e074 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	685a      	ldr	r2, [r3, #4]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f042 0208 	orr.w	r2, r2, #8
 800dea4:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f002 fe56 	bl	8010b58 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2200      	movs	r2, #0
 800deb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2200      	movs	r2, #0
 800deb8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2200      	movs	r2, #0
 800dec0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800dec4:	2300      	movs	r3, #0
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3708      	adds	r7, #8
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
	...

0800ded0 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b084      	sub	sp, #16
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	60f8      	str	r0, [r7, #12]
 800ded8:	60b9      	str	r1, [r7, #8]
 800deda:	4613      	mov	r3, r2
 800dedc:	80fb      	strh	r3, [r7, #6]

  if((pData == NULL) || (Size == 0))
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d002      	beq.n	800deea <HAL_SAI_Receive_DMA+0x1a>
 800dee4:	88fb      	ldrh	r3, [r7, #6]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d101      	bne.n	800deee <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800deea:	2301      	movs	r3, #1
 800deec:	e074      	b.n	800dfd8 <HAL_SAI_Receive_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800def4:	b2db      	uxtb	r3, r3
 800def6:	2b01      	cmp	r3, #1
 800def8:	d16d      	bne.n	800dfd6 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800df00:	2b01      	cmp	r3, #1
 800df02:	d101      	bne.n	800df08 <HAL_SAI_Receive_DMA+0x38>
 800df04:	2302      	movs	r3, #2
 800df06:	e067      	b.n	800dfd8 <HAL_SAI_Receive_DMA+0x108>
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2201      	movs	r2, #1
 800df0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	68ba      	ldr	r2, [r7, #8]
 800df14:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	88fa      	ldrh	r2, [r7, #6]
 800df1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	88fa      	ldrh	r2, [r7, #6]
 800df22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2200      	movs	r2, #0
 800df2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2222      	movs	r2, #34	; 0x22
 800df32:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df3a:	4a29      	ldr	r2, [pc, #164]	; (800dfe0 <HAL_SAI_Receive_DMA+0x110>)
 800df3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df42:	4a28      	ldr	r2, [pc, #160]	; (800dfe4 <HAL_SAI_Receive_DMA+0x114>)
 800df44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df4a:	4a27      	ldr	r2, [pc, #156]	; (800dfe8 <HAL_SAI_Receive_DMA+0x118>)
 800df4c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df52:	2200      	movs	r2, #0
 800df54:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	331c      	adds	r3, #28
 800df60:	4619      	mov	r1, r3
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df66:	461a      	mov	r2, r3
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800df6e:	f7fd f8a3 	bl	800b0b8 <HAL_DMA_Start_IT>
 800df72:	4603      	mov	r3, r0
 800df74:	2b00      	cmp	r3, #0
 800df76:	d005      	beq.n	800df84 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2200      	movs	r2, #0
 800df7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800df80:	2301      	movs	r3, #1
 800df82:	e029      	b.n	800dfd8 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d107      	bne.n	800dfa2 <HAL_SAI_Receive_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	681a      	ldr	r2, [r3, #0]
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800dfa0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800dfa2:	2100      	movs	r1, #0
 800dfa4:	68f8      	ldr	r0, [r7, #12]
 800dfa6:	f000 f82f 	bl	800e008 <SAI_InterruptFlag>
 800dfaa:	4601      	mov	r1, r0
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	691a      	ldr	r2, [r3, #16]
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	430a      	orrs	r2, r1
 800dfb8:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800dfc8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	e000      	b.n	800dfd8 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800dfd6:	2302      	movs	r3, #2
  }
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3710      	adds	r7, #16
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	0800e145 	.word	0x0800e145
 800dfe4:	0800e0e1 	.word	0x0800e0e1
 800dfe8:	0800e161 	.word	0x0800e161

0800dfec <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800dffa:	b2db      	uxtb	r3, r3
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	370c      	adds	r7, #12
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr

0800e008 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800e008:	b480      	push	{r7}
 800e00a:	b085      	sub	sp, #20
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800e012:	2301      	movs	r3, #1
 800e014:	60fb      	str	r3, [r7, #12]

  if(mode == SAI_MODE_IT)
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d103      	bne.n	800e024 <SAI_InterruptFlag+0x1c>
  {
    tmpIT|= SAI_IT_FREQ;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	f043 0308 	orr.w	r3, r3, #8
 800e022:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e028:	2b08      	cmp	r3, #8
 800e02a:	d10b      	bne.n	800e044 <SAI_InterruptFlag+0x3c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	685b      	ldr	r3, [r3, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e030:	2b03      	cmp	r3, #3
 800e032:	d003      	beq.n	800e03c <SAI_InterruptFlag+0x34>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	685b      	ldr	r3, [r3, #4]
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d103      	bne.n	800e044 <SAI_InterruptFlag+0x3c>
  {
    tmpIT|= SAI_IT_CNRDY;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f043 0310 	orr.w	r3, r3, #16
 800e042:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	2b03      	cmp	r3, #3
 800e04a:	d003      	beq.n	800e054 <SAI_InterruptFlag+0x4c>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	685b      	ldr	r3, [r3, #4]
 800e050:	2b02      	cmp	r3, #2
 800e052:	d104      	bne.n	800e05e <SAI_InterruptFlag+0x56>
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800e05a:	60fb      	str	r3, [r7, #12]
 800e05c:	e003      	b.n	800e066 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	f043 0304 	orr.w	r3, r3, #4
 800e064:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800e066:	68fb      	ldr	r3, [r7, #12]
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3714      	adds	r7, #20
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800e074:	b490      	push	{r4, r7}
 800e076:	b084      	sub	sp, #16
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800e07c:	4b16      	ldr	r3, [pc, #88]	; (800e0d8 <SAI_Disable+0x64>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	4a16      	ldr	r2, [pc, #88]	; (800e0dc <SAI_Disable+0x68>)
 800e082:	fba2 2303 	umull	r2, r3, r2, r3
 800e086:	0b1b      	lsrs	r3, r3, #12
 800e088:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800e08a:	2300      	movs	r3, #0
 800e08c:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	681a      	ldr	r2, [r3, #0]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e09c:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800e09e:	4623      	mov	r3, r4
 800e0a0:	1e5c      	subs	r4, r3, #1
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d10a      	bne.n	800e0bc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800e0b6:	2303      	movs	r3, #3
 800e0b8:	73fb      	strb	r3, [r7, #15]
      break;
 800e0ba:	e006      	b.n	800e0ca <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d1e9      	bne.n	800e09e <SAI_Disable+0x2a>

  return status;
 800e0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3710      	adds	r7, #16
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bc90      	pop	{r4, r7}
 800e0d4:	4770      	bx	lr
 800e0d6:	bf00      	nop
 800e0d8:	200006dc 	.word	0x200006dc
 800e0dc:	95cbec1b 	.word	0x95cbec1b

0800e0e0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b084      	sub	sp, #16
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ec:	60fb      	str	r3, [r7, #12]

 if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d11c      	bne.n	800e136 <SAI_DMARxCplt+0x56>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e10a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	2200      	movs	r2, #0
 800e110:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e114:	2100      	movs	r1, #0
 800e116:	68f8      	ldr	r0, [r7, #12]
 800e118:	f7ff ff76 	bl	800e008 <SAI_InterruptFlag>
 800e11c:	4603      	mov	r3, r0
 800e11e:	43d9      	mvns	r1, r3
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	691a      	ldr	r2, [r3, #16]
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	400a      	ands	r2, r1
 800e12c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2201      	movs	r2, #1
 800e132:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800e136:	68f8      	ldr	r0, [r7, #12]
 800e138:	f7f9 fb22 	bl	8007780 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e13c:	bf00      	nop
 800e13e:	3710      	adds	r7, #16
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b084      	sub	sp, #16
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e150:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800e152:	68f8      	ldr	r0, [r7, #12]
 800e154:	f7f9 fb1e 	bl	8007794 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e158:	bf00      	nop
 800e15a:	3710      	adds	r7, #16
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b084      	sub	sp, #16
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e16c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e174:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e184:	2b01      	cmp	r3, #1
 800e186:	d004      	beq.n	800e192 <SAI_DMAError+0x32>
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e18c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d112      	bne.n	800e1b8 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	681a      	ldr	r2, [r3, #0]
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e1a0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800e1a2:	68f8      	ldr	r0, [r7, #12]
 800e1a4:	f7ff ff66 	bl	800e074 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800e1b8:	68f8      	ldr	r0, [r7, #12]
 800e1ba:	f7f9 f915 	bl	80073e8 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e1be:	bf00      	nop
 800e1c0:	3710      	adds	r7, #16
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}

0800e1c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e1c6:	b580      	push	{r7, lr}
 800e1c8:	b082      	sub	sp, #8
 800e1ca:	af00      	add	r7, sp, #0
 800e1cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d101      	bne.n	800e1d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	e01d      	b.n	800e214 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1de:	b2db      	uxtb	r3, r3
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d106      	bne.n	800e1f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f002 fbb7 	bl	8010960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2202      	movs	r2, #2
 800e1f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681a      	ldr	r2, [r3, #0]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	3304      	adds	r3, #4
 800e202:	4619      	mov	r1, r3
 800e204:	4610      	mov	r0, r2
 800e206:	f000 f995 	bl	800e534 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2201      	movs	r2, #1
 800e20e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e212:	2300      	movs	r3, #0
}
 800e214:	4618      	mov	r0, r3
 800e216:	3708      	adds	r7, #8
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}

0800e21c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b082      	sub	sp, #8
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d101      	bne.n	800e22e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800e22a:	2301      	movs	r3, #1
 800e22c:	e01d      	b.n	800e26a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e234:	b2db      	uxtb	r3, r3
 800e236:	2b00      	cmp	r3, #0
 800e238:	d106      	bne.n	800e248 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2200      	movs	r2, #0
 800e23e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f000 f815 	bl	800e272 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2202      	movs	r2, #2
 800e24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	3304      	adds	r3, #4
 800e258:	4619      	mov	r1, r3
 800e25a:	4610      	mov	r0, r2
 800e25c:	f000 f96a 	bl	800e534 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2201      	movs	r2, #1
 800e264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e268:	2300      	movs	r3, #0
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3708      	adds	r7, #8
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}

0800e272 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800e272:	b480      	push	{r7}
 800e274:	b083      	sub	sp, #12
 800e276:	af00      	add	r7, sp, #0
 800e278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800e27a:	bf00      	nop
 800e27c:	370c      	adds	r7, #12
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr

0800e286 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800e286:	b580      	push	{r7, lr}
 800e288:	b084      	sub	sp, #16
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	60f8      	str	r0, [r7, #12]
 800e28e:	60b9      	str	r1, [r7, #8]
 800e290:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d101      	bne.n	800e2a0 <HAL_TIM_IC_ConfigChannel+0x1a>
 800e29c:	2302      	movs	r3, #2
 800e29e:	e08a      	b.n	800e3b6 <HAL_TIM_IC_ConfigChannel+0x130>
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	2202      	movs	r2, #2
 800e2ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d11b      	bne.n	800e2ee <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	6818      	ldr	r0, [r3, #0]
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	6819      	ldr	r1, [r3, #0]
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	685a      	ldr	r2, [r3, #4]
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	68db      	ldr	r3, [r3, #12]
 800e2c6:	f000 f9d5 	bl	800e674 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	699a      	ldr	r2, [r3, #24]
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	f022 020c 	bic.w	r2, r2, #12
 800e2d8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	6999      	ldr	r1, [r3, #24]
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	689a      	ldr	r2, [r3, #8]
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	430a      	orrs	r2, r1
 800e2ea:	619a      	str	r2, [r3, #24]
 800e2ec:	e05a      	b.n	800e3a4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2b04      	cmp	r3, #4
 800e2f2:	d11c      	bne.n	800e32e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	6818      	ldr	r0, [r3, #0]
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	6819      	ldr	r1, [r3, #0]
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	685a      	ldr	r2, [r3, #4]
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	68db      	ldr	r3, [r3, #12]
 800e304:	f000 fa59 	bl	800e7ba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	699a      	ldr	r2, [r3, #24]
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e316:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	6999      	ldr	r1, [r3, #24]
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	689b      	ldr	r3, [r3, #8]
 800e322:	021a      	lsls	r2, r3, #8
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	430a      	orrs	r2, r1
 800e32a:	619a      	str	r2, [r3, #24]
 800e32c:	e03a      	b.n	800e3a4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2b08      	cmp	r3, #8
 800e332:	d11b      	bne.n	800e36c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	6818      	ldr	r0, [r3, #0]
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	6819      	ldr	r1, [r3, #0]
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	685a      	ldr	r2, [r3, #4]
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	68db      	ldr	r3, [r3, #12]
 800e344:	f000 faa6 	bl	800e894 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	69da      	ldr	r2, [r3, #28]
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	f022 020c 	bic.w	r2, r2, #12
 800e356:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	69d9      	ldr	r1, [r3, #28]
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	689a      	ldr	r2, [r3, #8]
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	430a      	orrs	r2, r1
 800e368:	61da      	str	r2, [r3, #28]
 800e36a:	e01b      	b.n	800e3a4 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	6818      	ldr	r0, [r3, #0]
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	6819      	ldr	r1, [r3, #0]
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	685a      	ldr	r2, [r3, #4]
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	68db      	ldr	r3, [r3, #12]
 800e37c:	f000 fac6 	bl	800e90c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	69da      	ldr	r2, [r3, #28]
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e38e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	69d9      	ldr	r1, [r3, #28]
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	689b      	ldr	r3, [r3, #8]
 800e39a:	021a      	lsls	r2, r3, #8
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	430a      	orrs	r2, r1
 800e3a2:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e3b4:	2300      	movs	r3, #0
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3710      	adds	r7, #16
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}
	...

0800e3c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e3d0:	2b01      	cmp	r3, #1
 800e3d2:	d101      	bne.n	800e3d8 <HAL_TIM_ConfigClockSource+0x18>
 800e3d4:	2302      	movs	r3, #2
 800e3d6:	e0a6      	b.n	800e526 <HAL_TIM_ConfigClockSource+0x166>
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2201      	movs	r2, #1
 800e3dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2202      	movs	r2, #2
 800e3e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	689b      	ldr	r3, [r3, #8]
 800e3ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e3f0:	68fa      	ldr	r2, [r7, #12]
 800e3f2:	4b4f      	ldr	r3, [pc, #316]	; (800e530 <HAL_TIM_ConfigClockSource+0x170>)
 800e3f4:	4013      	ands	r3, r2
 800e3f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e3fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	68fa      	ldr	r2, [r7, #12]
 800e406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	2b40      	cmp	r3, #64	; 0x40
 800e40e:	d067      	beq.n	800e4e0 <HAL_TIM_ConfigClockSource+0x120>
 800e410:	2b40      	cmp	r3, #64	; 0x40
 800e412:	d80b      	bhi.n	800e42c <HAL_TIM_ConfigClockSource+0x6c>
 800e414:	2b10      	cmp	r3, #16
 800e416:	d073      	beq.n	800e500 <HAL_TIM_ConfigClockSource+0x140>
 800e418:	2b10      	cmp	r3, #16
 800e41a:	d802      	bhi.n	800e422 <HAL_TIM_ConfigClockSource+0x62>
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d06f      	beq.n	800e500 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e420:	e078      	b.n	800e514 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e422:	2b20      	cmp	r3, #32
 800e424:	d06c      	beq.n	800e500 <HAL_TIM_ConfigClockSource+0x140>
 800e426:	2b30      	cmp	r3, #48	; 0x30
 800e428:	d06a      	beq.n	800e500 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800e42a:	e073      	b.n	800e514 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e42c:	2b70      	cmp	r3, #112	; 0x70
 800e42e:	d00d      	beq.n	800e44c <HAL_TIM_ConfigClockSource+0x8c>
 800e430:	2b70      	cmp	r3, #112	; 0x70
 800e432:	d804      	bhi.n	800e43e <HAL_TIM_ConfigClockSource+0x7e>
 800e434:	2b50      	cmp	r3, #80	; 0x50
 800e436:	d033      	beq.n	800e4a0 <HAL_TIM_ConfigClockSource+0xe0>
 800e438:	2b60      	cmp	r3, #96	; 0x60
 800e43a:	d041      	beq.n	800e4c0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800e43c:	e06a      	b.n	800e514 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e43e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e442:	d066      	beq.n	800e512 <HAL_TIM_ConfigClockSource+0x152>
 800e444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e448:	d017      	beq.n	800e47a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800e44a:	e063      	b.n	800e514 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6818      	ldr	r0, [r3, #0]
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	6899      	ldr	r1, [r3, #8]
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	685a      	ldr	r2, [r3, #4]
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	f000 faae 	bl	800e9bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	689b      	ldr	r3, [r3, #8]
 800e466:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e46e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	68fa      	ldr	r2, [r7, #12]
 800e476:	609a      	str	r2, [r3, #8]
      break;
 800e478:	e04c      	b.n	800e514 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6818      	ldr	r0, [r3, #0]
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	6899      	ldr	r1, [r3, #8]
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	685a      	ldr	r2, [r3, #4]
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	68db      	ldr	r3, [r3, #12]
 800e48a:	f000 fa97 	bl	800e9bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	689a      	ldr	r2, [r3, #8]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e49c:	609a      	str	r2, [r3, #8]
      break;
 800e49e:	e039      	b.n	800e514 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6818      	ldr	r0, [r3, #0]
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	6859      	ldr	r1, [r3, #4]
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	68db      	ldr	r3, [r3, #12]
 800e4ac:	461a      	mov	r2, r3
 800e4ae:	f000 f955 	bl	800e75c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	2150      	movs	r1, #80	; 0x50
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f000 fa64 	bl	800e986 <TIM_ITRx_SetConfig>
      break;
 800e4be:	e029      	b.n	800e514 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6818      	ldr	r0, [r3, #0]
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	6859      	ldr	r1, [r3, #4]
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	68db      	ldr	r3, [r3, #12]
 800e4cc:	461a      	mov	r2, r3
 800e4ce:	f000 f9b1 	bl	800e834 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2160      	movs	r1, #96	; 0x60
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f000 fa54 	bl	800e986 <TIM_ITRx_SetConfig>
      break;
 800e4de:	e019      	b.n	800e514 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	6818      	ldr	r0, [r3, #0]
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	6859      	ldr	r1, [r3, #4]
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	68db      	ldr	r3, [r3, #12]
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	f000 f935 	bl	800e75c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2140      	movs	r1, #64	; 0x40
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f000 fa44 	bl	800e986 <TIM_ITRx_SetConfig>
      break;
 800e4fe:	e009      	b.n	800e514 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681a      	ldr	r2, [r3, #0]
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	4619      	mov	r1, r3
 800e50a:	4610      	mov	r0, r2
 800e50c:	f000 fa3b 	bl	800e986 <TIM_ITRx_SetConfig>
      break;
 800e510:	e000      	b.n	800e514 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800e512:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2201      	movs	r2, #1
 800e518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2200      	movs	r2, #0
 800e520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e524:	2300      	movs	r3, #0
}
 800e526:	4618      	mov	r0, r3
 800e528:	3710      	adds	r7, #16
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	fffeff88 	.word	0xfffeff88

0800e534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e534:	b480      	push	{r7}
 800e536:	b085      	sub	sp, #20
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	4a40      	ldr	r2, [pc, #256]	; (800e648 <TIM_Base_SetConfig+0x114>)
 800e548:	4293      	cmp	r3, r2
 800e54a:	d013      	beq.n	800e574 <TIM_Base_SetConfig+0x40>
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e552:	d00f      	beq.n	800e574 <TIM_Base_SetConfig+0x40>
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	4a3d      	ldr	r2, [pc, #244]	; (800e64c <TIM_Base_SetConfig+0x118>)
 800e558:	4293      	cmp	r3, r2
 800e55a:	d00b      	beq.n	800e574 <TIM_Base_SetConfig+0x40>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	4a3c      	ldr	r2, [pc, #240]	; (800e650 <TIM_Base_SetConfig+0x11c>)
 800e560:	4293      	cmp	r3, r2
 800e562:	d007      	beq.n	800e574 <TIM_Base_SetConfig+0x40>
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	4a3b      	ldr	r2, [pc, #236]	; (800e654 <TIM_Base_SetConfig+0x120>)
 800e568:	4293      	cmp	r3, r2
 800e56a:	d003      	beq.n	800e574 <TIM_Base_SetConfig+0x40>
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	4a3a      	ldr	r2, [pc, #232]	; (800e658 <TIM_Base_SetConfig+0x124>)
 800e570:	4293      	cmp	r3, r2
 800e572:	d108      	bne.n	800e586 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e57a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	68fa      	ldr	r2, [r7, #12]
 800e582:	4313      	orrs	r3, r2
 800e584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	4a2f      	ldr	r2, [pc, #188]	; (800e648 <TIM_Base_SetConfig+0x114>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d02b      	beq.n	800e5e6 <TIM_Base_SetConfig+0xb2>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e594:	d027      	beq.n	800e5e6 <TIM_Base_SetConfig+0xb2>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	4a2c      	ldr	r2, [pc, #176]	; (800e64c <TIM_Base_SetConfig+0x118>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d023      	beq.n	800e5e6 <TIM_Base_SetConfig+0xb2>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	4a2b      	ldr	r2, [pc, #172]	; (800e650 <TIM_Base_SetConfig+0x11c>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d01f      	beq.n	800e5e6 <TIM_Base_SetConfig+0xb2>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	4a2a      	ldr	r2, [pc, #168]	; (800e654 <TIM_Base_SetConfig+0x120>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d01b      	beq.n	800e5e6 <TIM_Base_SetConfig+0xb2>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	4a29      	ldr	r2, [pc, #164]	; (800e658 <TIM_Base_SetConfig+0x124>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d017      	beq.n	800e5e6 <TIM_Base_SetConfig+0xb2>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	4a28      	ldr	r2, [pc, #160]	; (800e65c <TIM_Base_SetConfig+0x128>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d013      	beq.n	800e5e6 <TIM_Base_SetConfig+0xb2>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	4a27      	ldr	r2, [pc, #156]	; (800e660 <TIM_Base_SetConfig+0x12c>)
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d00f      	beq.n	800e5e6 <TIM_Base_SetConfig+0xb2>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	4a26      	ldr	r2, [pc, #152]	; (800e664 <TIM_Base_SetConfig+0x130>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d00b      	beq.n	800e5e6 <TIM_Base_SetConfig+0xb2>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	4a25      	ldr	r2, [pc, #148]	; (800e668 <TIM_Base_SetConfig+0x134>)
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d007      	beq.n	800e5e6 <TIM_Base_SetConfig+0xb2>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	4a24      	ldr	r2, [pc, #144]	; (800e66c <TIM_Base_SetConfig+0x138>)
 800e5da:	4293      	cmp	r3, r2
 800e5dc:	d003      	beq.n	800e5e6 <TIM_Base_SetConfig+0xb2>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	4a23      	ldr	r2, [pc, #140]	; (800e670 <TIM_Base_SetConfig+0x13c>)
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	d108      	bne.n	800e5f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e5ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	68db      	ldr	r3, [r3, #12]
 800e5f2:	68fa      	ldr	r2, [r7, #12]
 800e5f4:	4313      	orrs	r3, r2
 800e5f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	695b      	ldr	r3, [r3, #20]
 800e602:	4313      	orrs	r3, r2
 800e604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	68fa      	ldr	r2, [r7, #12]
 800e60a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	689a      	ldr	r2, [r3, #8]
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	681a      	ldr	r2, [r3, #0]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	4a0a      	ldr	r2, [pc, #40]	; (800e648 <TIM_Base_SetConfig+0x114>)
 800e620:	4293      	cmp	r3, r2
 800e622:	d003      	beq.n	800e62c <TIM_Base_SetConfig+0xf8>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	4a0c      	ldr	r2, [pc, #48]	; (800e658 <TIM_Base_SetConfig+0x124>)
 800e628:	4293      	cmp	r3, r2
 800e62a:	d103      	bne.n	800e634 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	691a      	ldr	r2, [r3, #16]
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2201      	movs	r2, #1
 800e638:	615a      	str	r2, [r3, #20]
}
 800e63a:	bf00      	nop
 800e63c:	3714      	adds	r7, #20
 800e63e:	46bd      	mov	sp, r7
 800e640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e644:	4770      	bx	lr
 800e646:	bf00      	nop
 800e648:	40010000 	.word	0x40010000
 800e64c:	40000400 	.word	0x40000400
 800e650:	40000800 	.word	0x40000800
 800e654:	40000c00 	.word	0x40000c00
 800e658:	40010400 	.word	0x40010400
 800e65c:	40014000 	.word	0x40014000
 800e660:	40014400 	.word	0x40014400
 800e664:	40014800 	.word	0x40014800
 800e668:	40001800 	.word	0x40001800
 800e66c:	40001c00 	.word	0x40001c00
 800e670:	40002000 	.word	0x40002000

0800e674 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800e674:	b480      	push	{r7}
 800e676:	b087      	sub	sp, #28
 800e678:	af00      	add	r7, sp, #0
 800e67a:	60f8      	str	r0, [r7, #12]
 800e67c:	60b9      	str	r1, [r7, #8]
 800e67e:	607a      	str	r2, [r7, #4]
 800e680:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	6a1b      	ldr	r3, [r3, #32]
 800e686:	f023 0201 	bic.w	r2, r3, #1
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	699b      	ldr	r3, [r3, #24]
 800e692:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	6a1b      	ldr	r3, [r3, #32]
 800e698:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	4a28      	ldr	r2, [pc, #160]	; (800e740 <TIM_TI1_SetConfig+0xcc>)
 800e69e:	4293      	cmp	r3, r2
 800e6a0:	d01b      	beq.n	800e6da <TIM_TI1_SetConfig+0x66>
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6a8:	d017      	beq.n	800e6da <TIM_TI1_SetConfig+0x66>
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	4a25      	ldr	r2, [pc, #148]	; (800e744 <TIM_TI1_SetConfig+0xd0>)
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	d013      	beq.n	800e6da <TIM_TI1_SetConfig+0x66>
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	4a24      	ldr	r2, [pc, #144]	; (800e748 <TIM_TI1_SetConfig+0xd4>)
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d00f      	beq.n	800e6da <TIM_TI1_SetConfig+0x66>
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	4a23      	ldr	r2, [pc, #140]	; (800e74c <TIM_TI1_SetConfig+0xd8>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d00b      	beq.n	800e6da <TIM_TI1_SetConfig+0x66>
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	4a22      	ldr	r2, [pc, #136]	; (800e750 <TIM_TI1_SetConfig+0xdc>)
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d007      	beq.n	800e6da <TIM_TI1_SetConfig+0x66>
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	4a21      	ldr	r2, [pc, #132]	; (800e754 <TIM_TI1_SetConfig+0xe0>)
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d003      	beq.n	800e6da <TIM_TI1_SetConfig+0x66>
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	4a20      	ldr	r2, [pc, #128]	; (800e758 <TIM_TI1_SetConfig+0xe4>)
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	d101      	bne.n	800e6de <TIM_TI1_SetConfig+0x6a>
 800e6da:	2301      	movs	r3, #1
 800e6dc:	e000      	b.n	800e6e0 <TIM_TI1_SetConfig+0x6c>
 800e6de:	2300      	movs	r3, #0
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d008      	beq.n	800e6f6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	f023 0303 	bic.w	r3, r3, #3
 800e6ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800e6ec:	697a      	ldr	r2, [r7, #20]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	4313      	orrs	r3, r2
 800e6f2:	617b      	str	r3, [r7, #20]
 800e6f4:	e003      	b.n	800e6fe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	f043 0301 	orr.w	r3, r3, #1
 800e6fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e704:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	011b      	lsls	r3, r3, #4
 800e70a:	b2db      	uxtb	r3, r3
 800e70c:	697a      	ldr	r2, [r7, #20]
 800e70e:	4313      	orrs	r3, r2
 800e710:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	f023 030a 	bic.w	r3, r3, #10
 800e718:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	f003 030a 	and.w	r3, r3, #10
 800e720:	693a      	ldr	r2, [r7, #16]
 800e722:	4313      	orrs	r3, r2
 800e724:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	697a      	ldr	r2, [r7, #20]
 800e72a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	693a      	ldr	r2, [r7, #16]
 800e730:	621a      	str	r2, [r3, #32]
}
 800e732:	bf00      	nop
 800e734:	371c      	adds	r7, #28
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr
 800e73e:	bf00      	nop
 800e740:	40010000 	.word	0x40010000
 800e744:	40000400 	.word	0x40000400
 800e748:	40000800 	.word	0x40000800
 800e74c:	40000c00 	.word	0x40000c00
 800e750:	40010400 	.word	0x40010400
 800e754:	40014000 	.word	0x40014000
 800e758:	40001800 	.word	0x40001800

0800e75c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b087      	sub	sp, #28
 800e760:	af00      	add	r7, sp, #0
 800e762:	60f8      	str	r0, [r7, #12]
 800e764:	60b9      	str	r1, [r7, #8]
 800e766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	6a1b      	ldr	r3, [r3, #32]
 800e76c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	6a1b      	ldr	r3, [r3, #32]
 800e772:	f023 0201 	bic.w	r2, r3, #1
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	699b      	ldr	r3, [r3, #24]
 800e77e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	011b      	lsls	r3, r3, #4
 800e78c:	693a      	ldr	r2, [r7, #16]
 800e78e:	4313      	orrs	r3, r2
 800e790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	f023 030a 	bic.w	r3, r3, #10
 800e798:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e79a:	697a      	ldr	r2, [r7, #20]
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	693a      	ldr	r2, [r7, #16]
 800e7a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	697a      	ldr	r2, [r7, #20]
 800e7ac:	621a      	str	r2, [r3, #32]
}
 800e7ae:	bf00      	nop
 800e7b0:	371c      	adds	r7, #28
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr

0800e7ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e7ba:	b480      	push	{r7}
 800e7bc:	b087      	sub	sp, #28
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	60f8      	str	r0, [r7, #12]
 800e7c2:	60b9      	str	r1, [r7, #8]
 800e7c4:	607a      	str	r2, [r7, #4]
 800e7c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	6a1b      	ldr	r3, [r3, #32]
 800e7cc:	f023 0210 	bic.w	r2, r3, #16
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	699b      	ldr	r3, [r3, #24]
 800e7d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	6a1b      	ldr	r3, [r3, #32]
 800e7de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e7e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	021b      	lsls	r3, r3, #8
 800e7ec:	697a      	ldr	r2, [r7, #20]
 800e7ee:	4313      	orrs	r3, r2
 800e7f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e7f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	031b      	lsls	r3, r3, #12
 800e7fe:	b29b      	uxth	r3, r3
 800e800:	697a      	ldr	r2, [r7, #20]
 800e802:	4313      	orrs	r3, r2
 800e804:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e80c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	011b      	lsls	r3, r3, #4
 800e812:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e816:	693a      	ldr	r2, [r7, #16]
 800e818:	4313      	orrs	r3, r2
 800e81a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	697a      	ldr	r2, [r7, #20]
 800e820:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	693a      	ldr	r2, [r7, #16]
 800e826:	621a      	str	r2, [r3, #32]
}
 800e828:	bf00      	nop
 800e82a:	371c      	adds	r7, #28
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr

0800e834 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e834:	b480      	push	{r7}
 800e836:	b087      	sub	sp, #28
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	60b9      	str	r1, [r7, #8]
 800e83e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	6a1b      	ldr	r3, [r3, #32]
 800e844:	f023 0210 	bic.w	r2, r3, #16
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	699b      	ldr	r3, [r3, #24]
 800e850:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	6a1b      	ldr	r3, [r3, #32]
 800e856:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e85e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	031b      	lsls	r3, r3, #12
 800e864:	697a      	ldr	r2, [r7, #20]
 800e866:	4313      	orrs	r3, r2
 800e868:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e870:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	011b      	lsls	r3, r3, #4
 800e876:	693a      	ldr	r2, [r7, #16]
 800e878:	4313      	orrs	r3, r2
 800e87a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	697a      	ldr	r2, [r7, #20]
 800e880:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	693a      	ldr	r2, [r7, #16]
 800e886:	621a      	str	r2, [r3, #32]
}
 800e888:	bf00      	nop
 800e88a:	371c      	adds	r7, #28
 800e88c:	46bd      	mov	sp, r7
 800e88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e892:	4770      	bx	lr

0800e894 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e894:	b480      	push	{r7}
 800e896:	b087      	sub	sp, #28
 800e898:	af00      	add	r7, sp, #0
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	607a      	str	r2, [r7, #4]
 800e8a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	6a1b      	ldr	r3, [r3, #32]
 800e8a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	69db      	ldr	r3, [r3, #28]
 800e8b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	6a1b      	ldr	r3, [r3, #32]
 800e8b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	f023 0303 	bic.w	r3, r3, #3
 800e8c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800e8c2:	697a      	ldr	r2, [r7, #20]
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	4313      	orrs	r3, r2
 800e8c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e8d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	011b      	lsls	r3, r3, #4
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	697a      	ldr	r2, [r7, #20]
 800e8da:	4313      	orrs	r3, r2
 800e8dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800e8e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	021b      	lsls	r3, r3, #8
 800e8ea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800e8ee:	693a      	ldr	r2, [r7, #16]
 800e8f0:	4313      	orrs	r3, r2
 800e8f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	697a      	ldr	r2, [r7, #20]
 800e8f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	693a      	ldr	r2, [r7, #16]
 800e8fe:	621a      	str	r2, [r3, #32]
}
 800e900:	bf00      	nop
 800e902:	371c      	adds	r7, #28
 800e904:	46bd      	mov	sp, r7
 800e906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90a:	4770      	bx	lr

0800e90c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e90c:	b480      	push	{r7}
 800e90e:	b087      	sub	sp, #28
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	60b9      	str	r1, [r7, #8]
 800e916:	607a      	str	r2, [r7, #4]
 800e918:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	6a1b      	ldr	r3, [r3, #32]
 800e91e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	69db      	ldr	r3, [r3, #28]
 800e92a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	6a1b      	ldr	r3, [r3, #32]
 800e930:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e938:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	021b      	lsls	r3, r3, #8
 800e93e:	697a      	ldr	r2, [r7, #20]
 800e940:	4313      	orrs	r3, r2
 800e942:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e94a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	031b      	lsls	r3, r3, #12
 800e950:	b29b      	uxth	r3, r3
 800e952:	697a      	ldr	r2, [r7, #20]
 800e954:	4313      	orrs	r3, r2
 800e956:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800e95e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	031b      	lsls	r3, r3, #12
 800e964:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800e968:	693a      	ldr	r2, [r7, #16]
 800e96a:	4313      	orrs	r3, r2
 800e96c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	697a      	ldr	r2, [r7, #20]
 800e972:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	693a      	ldr	r2, [r7, #16]
 800e978:	621a      	str	r2, [r3, #32]
}
 800e97a:	bf00      	nop
 800e97c:	371c      	adds	r7, #28
 800e97e:	46bd      	mov	sp, r7
 800e980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e984:	4770      	bx	lr

0800e986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e986:	b480      	push	{r7}
 800e988:	b085      	sub	sp, #20
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	6078      	str	r0, [r7, #4]
 800e98e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	689b      	ldr	r3, [r3, #8]
 800e994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e99c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e99e:	683a      	ldr	r2, [r7, #0]
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	4313      	orrs	r3, r2
 800e9a4:	f043 0307 	orr.w	r3, r3, #7
 800e9a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	68fa      	ldr	r2, [r7, #12]
 800e9ae:	609a      	str	r2, [r3, #8]
}
 800e9b0:	bf00      	nop
 800e9b2:	3714      	adds	r7, #20
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr

0800e9bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b087      	sub	sp, #28
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	60f8      	str	r0, [r7, #12]
 800e9c4:	60b9      	str	r1, [r7, #8]
 800e9c6:	607a      	str	r2, [r7, #4]
 800e9c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	689b      	ldr	r3, [r3, #8]
 800e9ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e9d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	021a      	lsls	r2, r3, #8
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	431a      	orrs	r2, r3
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	4313      	orrs	r3, r2
 800e9e4:	697a      	ldr	r2, [r7, #20]
 800e9e6:	4313      	orrs	r3, r2
 800e9e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	697a      	ldr	r2, [r7, #20]
 800e9ee:	609a      	str	r2, [r3, #8]
}
 800e9f0:	bf00      	nop
 800e9f2:	371c      	adds	r7, #28
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr

0800e9fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e9fc:	b480      	push	{r7}
 800e9fe:	b085      	sub	sp, #20
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	d101      	bne.n	800ea14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ea10:	2302      	movs	r3, #2
 800ea12:	e045      	b.n	800eaa0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2201      	movs	r2, #1
 800ea18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2202      	movs	r2, #2
 800ea20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	689b      	ldr	r3, [r3, #8]
 800ea32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	4a1c      	ldr	r2, [pc, #112]	; (800eaac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800ea3a:	4293      	cmp	r3, r2
 800ea3c:	d004      	beq.n	800ea48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	4a1b      	ldr	r2, [pc, #108]	; (800eab0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800ea44:	4293      	cmp	r3, r2
 800ea46:	d108      	bne.n	800ea5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ea4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	68fa      	ldr	r2, [r7, #12]
 800ea56:	4313      	orrs	r3, r2
 800ea58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	68fa      	ldr	r2, [r7, #12]
 800ea68:	4313      	orrs	r3, r2
 800ea6a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea72:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	689b      	ldr	r3, [r3, #8]
 800ea78:	68ba      	ldr	r2, [r7, #8]
 800ea7a:	4313      	orrs	r3, r2
 800ea7c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	68fa      	ldr	r2, [r7, #12]
 800ea84:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	68ba      	ldr	r2, [r7, #8]
 800ea8c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2201      	movs	r2, #1
 800ea92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea9e:	2300      	movs	r3, #0
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3714      	adds	r7, #20
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr
 800eaac:	40010000 	.word	0x40010000
 800eab0:	40010400 	.word	0x40010400

0800eab4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b082      	sub	sp, #8
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d101      	bne.n	800eac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eac2:	2301      	movs	r3, #1
 800eac4:	e040      	b.n	800eb48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d106      	bne.n	800eadc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2200      	movs	r2, #0
 800ead2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f001 ff86 	bl	80109e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2224      	movs	r2, #36	; 0x24
 800eae0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	681a      	ldr	r2, [r3, #0]
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f022 0201 	bic.w	r2, r2, #1
 800eaf0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f000 f82c 	bl	800eb50 <UART_SetConfig>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	2b01      	cmp	r3, #1
 800eafc:	d101      	bne.n	800eb02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800eafe:	2301      	movs	r3, #1
 800eb00:	e022      	b.n	800eb48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d002      	beq.n	800eb10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f000 fac4 	bl	800f098 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	685a      	ldr	r2, [r3, #4]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eb1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	689a      	ldr	r2, [r3, #8]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eb2e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	681a      	ldr	r2, [r3, #0]
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	f042 0201 	orr.w	r2, r2, #1
 800eb3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f000 fb4b 	bl	800f1dc <UART_CheckIdleState>
 800eb46:	4603      	mov	r3, r0
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3708      	adds	r7, #8
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b088      	sub	sp, #32
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	689a      	ldr	r2, [r3, #8]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	691b      	ldr	r3, [r3, #16]
 800eb68:	431a      	orrs	r2, r3
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	695b      	ldr	r3, [r3, #20]
 800eb6e:	431a      	orrs	r2, r3
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	69db      	ldr	r3, [r3, #28]
 800eb74:	4313      	orrs	r3, r2
 800eb76:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	681a      	ldr	r2, [r3, #0]
 800eb7e:	4bb1      	ldr	r3, [pc, #708]	; (800ee44 <UART_SetConfig+0x2f4>)
 800eb80:	4013      	ands	r3, r2
 800eb82:	687a      	ldr	r2, [r7, #4]
 800eb84:	6812      	ldr	r2, [r2, #0]
 800eb86:	6939      	ldr	r1, [r7, #16]
 800eb88:	430b      	orrs	r3, r1
 800eb8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	685b      	ldr	r3, [r3, #4]
 800eb92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	68da      	ldr	r2, [r3, #12]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	430a      	orrs	r2, r1
 800eba0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	699b      	ldr	r3, [r3, #24]
 800eba6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	6a1b      	ldr	r3, [r3, #32]
 800ebac:	693a      	ldr	r2, [r7, #16]
 800ebae:	4313      	orrs	r3, r2
 800ebb0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	689b      	ldr	r3, [r3, #8]
 800ebb8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	693a      	ldr	r2, [r7, #16]
 800ebc2:	430a      	orrs	r2, r1
 800ebc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	4a9f      	ldr	r2, [pc, #636]	; (800ee48 <UART_SetConfig+0x2f8>)
 800ebcc:	4293      	cmp	r3, r2
 800ebce:	d121      	bne.n	800ec14 <UART_SetConfig+0xc4>
 800ebd0:	4b9e      	ldr	r3, [pc, #632]	; (800ee4c <UART_SetConfig+0x2fc>)
 800ebd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebd6:	f003 0303 	and.w	r3, r3, #3
 800ebda:	2b03      	cmp	r3, #3
 800ebdc:	d816      	bhi.n	800ec0c <UART_SetConfig+0xbc>
 800ebde:	a201      	add	r2, pc, #4	; (adr r2, 800ebe4 <UART_SetConfig+0x94>)
 800ebe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebe4:	0800ebf5 	.word	0x0800ebf5
 800ebe8:	0800ec01 	.word	0x0800ec01
 800ebec:	0800ebfb 	.word	0x0800ebfb
 800ebf0:	0800ec07 	.word	0x0800ec07
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	77fb      	strb	r3, [r7, #31]
 800ebf8:	e151      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ebfa:	2302      	movs	r3, #2
 800ebfc:	77fb      	strb	r3, [r7, #31]
 800ebfe:	e14e      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ec00:	2304      	movs	r3, #4
 800ec02:	77fb      	strb	r3, [r7, #31]
 800ec04:	e14b      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ec06:	2308      	movs	r3, #8
 800ec08:	77fb      	strb	r3, [r7, #31]
 800ec0a:	e148      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ec0c:	2310      	movs	r3, #16
 800ec0e:	77fb      	strb	r3, [r7, #31]
 800ec10:	bf00      	nop
 800ec12:	e144      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	4a8d      	ldr	r2, [pc, #564]	; (800ee50 <UART_SetConfig+0x300>)
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d134      	bne.n	800ec88 <UART_SetConfig+0x138>
 800ec1e:	4b8b      	ldr	r3, [pc, #556]	; (800ee4c <UART_SetConfig+0x2fc>)
 800ec20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec24:	f003 030c 	and.w	r3, r3, #12
 800ec28:	2b0c      	cmp	r3, #12
 800ec2a:	d829      	bhi.n	800ec80 <UART_SetConfig+0x130>
 800ec2c:	a201      	add	r2, pc, #4	; (adr r2, 800ec34 <UART_SetConfig+0xe4>)
 800ec2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec32:	bf00      	nop
 800ec34:	0800ec69 	.word	0x0800ec69
 800ec38:	0800ec81 	.word	0x0800ec81
 800ec3c:	0800ec81 	.word	0x0800ec81
 800ec40:	0800ec81 	.word	0x0800ec81
 800ec44:	0800ec75 	.word	0x0800ec75
 800ec48:	0800ec81 	.word	0x0800ec81
 800ec4c:	0800ec81 	.word	0x0800ec81
 800ec50:	0800ec81 	.word	0x0800ec81
 800ec54:	0800ec6f 	.word	0x0800ec6f
 800ec58:	0800ec81 	.word	0x0800ec81
 800ec5c:	0800ec81 	.word	0x0800ec81
 800ec60:	0800ec81 	.word	0x0800ec81
 800ec64:	0800ec7b 	.word	0x0800ec7b
 800ec68:	2300      	movs	r3, #0
 800ec6a:	77fb      	strb	r3, [r7, #31]
 800ec6c:	e117      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ec6e:	2302      	movs	r3, #2
 800ec70:	77fb      	strb	r3, [r7, #31]
 800ec72:	e114      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ec74:	2304      	movs	r3, #4
 800ec76:	77fb      	strb	r3, [r7, #31]
 800ec78:	e111      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ec7a:	2308      	movs	r3, #8
 800ec7c:	77fb      	strb	r3, [r7, #31]
 800ec7e:	e10e      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ec80:	2310      	movs	r3, #16
 800ec82:	77fb      	strb	r3, [r7, #31]
 800ec84:	bf00      	nop
 800ec86:	e10a      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	4a71      	ldr	r2, [pc, #452]	; (800ee54 <UART_SetConfig+0x304>)
 800ec8e:	4293      	cmp	r3, r2
 800ec90:	d120      	bne.n	800ecd4 <UART_SetConfig+0x184>
 800ec92:	4b6e      	ldr	r3, [pc, #440]	; (800ee4c <UART_SetConfig+0x2fc>)
 800ec94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ec9c:	2b10      	cmp	r3, #16
 800ec9e:	d00f      	beq.n	800ecc0 <UART_SetConfig+0x170>
 800eca0:	2b10      	cmp	r3, #16
 800eca2:	d802      	bhi.n	800ecaa <UART_SetConfig+0x15a>
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d005      	beq.n	800ecb4 <UART_SetConfig+0x164>
 800eca8:	e010      	b.n	800eccc <UART_SetConfig+0x17c>
 800ecaa:	2b20      	cmp	r3, #32
 800ecac:	d005      	beq.n	800ecba <UART_SetConfig+0x16a>
 800ecae:	2b30      	cmp	r3, #48	; 0x30
 800ecb0:	d009      	beq.n	800ecc6 <UART_SetConfig+0x176>
 800ecb2:	e00b      	b.n	800eccc <UART_SetConfig+0x17c>
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	77fb      	strb	r3, [r7, #31]
 800ecb8:	e0f1      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ecba:	2302      	movs	r3, #2
 800ecbc:	77fb      	strb	r3, [r7, #31]
 800ecbe:	e0ee      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ecc0:	2304      	movs	r3, #4
 800ecc2:	77fb      	strb	r3, [r7, #31]
 800ecc4:	e0eb      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ecc6:	2308      	movs	r3, #8
 800ecc8:	77fb      	strb	r3, [r7, #31]
 800ecca:	e0e8      	b.n	800ee9e <UART_SetConfig+0x34e>
 800eccc:	2310      	movs	r3, #16
 800ecce:	77fb      	strb	r3, [r7, #31]
 800ecd0:	bf00      	nop
 800ecd2:	e0e4      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	4a5f      	ldr	r2, [pc, #380]	; (800ee58 <UART_SetConfig+0x308>)
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	d120      	bne.n	800ed20 <UART_SetConfig+0x1d0>
 800ecde:	4b5b      	ldr	r3, [pc, #364]	; (800ee4c <UART_SetConfig+0x2fc>)
 800ece0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ece4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ece8:	2b40      	cmp	r3, #64	; 0x40
 800ecea:	d00f      	beq.n	800ed0c <UART_SetConfig+0x1bc>
 800ecec:	2b40      	cmp	r3, #64	; 0x40
 800ecee:	d802      	bhi.n	800ecf6 <UART_SetConfig+0x1a6>
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d005      	beq.n	800ed00 <UART_SetConfig+0x1b0>
 800ecf4:	e010      	b.n	800ed18 <UART_SetConfig+0x1c8>
 800ecf6:	2b80      	cmp	r3, #128	; 0x80
 800ecf8:	d005      	beq.n	800ed06 <UART_SetConfig+0x1b6>
 800ecfa:	2bc0      	cmp	r3, #192	; 0xc0
 800ecfc:	d009      	beq.n	800ed12 <UART_SetConfig+0x1c2>
 800ecfe:	e00b      	b.n	800ed18 <UART_SetConfig+0x1c8>
 800ed00:	2300      	movs	r3, #0
 800ed02:	77fb      	strb	r3, [r7, #31]
 800ed04:	e0cb      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ed06:	2302      	movs	r3, #2
 800ed08:	77fb      	strb	r3, [r7, #31]
 800ed0a:	e0c8      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ed0c:	2304      	movs	r3, #4
 800ed0e:	77fb      	strb	r3, [r7, #31]
 800ed10:	e0c5      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ed12:	2308      	movs	r3, #8
 800ed14:	77fb      	strb	r3, [r7, #31]
 800ed16:	e0c2      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ed18:	2310      	movs	r3, #16
 800ed1a:	77fb      	strb	r3, [r7, #31]
 800ed1c:	bf00      	nop
 800ed1e:	e0be      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	4a4d      	ldr	r2, [pc, #308]	; (800ee5c <UART_SetConfig+0x30c>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d124      	bne.n	800ed74 <UART_SetConfig+0x224>
 800ed2a:	4b48      	ldr	r3, [pc, #288]	; (800ee4c <UART_SetConfig+0x2fc>)
 800ed2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed38:	d012      	beq.n	800ed60 <UART_SetConfig+0x210>
 800ed3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed3e:	d802      	bhi.n	800ed46 <UART_SetConfig+0x1f6>
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d007      	beq.n	800ed54 <UART_SetConfig+0x204>
 800ed44:	e012      	b.n	800ed6c <UART_SetConfig+0x21c>
 800ed46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed4a:	d006      	beq.n	800ed5a <UART_SetConfig+0x20a>
 800ed4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ed50:	d009      	beq.n	800ed66 <UART_SetConfig+0x216>
 800ed52:	e00b      	b.n	800ed6c <UART_SetConfig+0x21c>
 800ed54:	2300      	movs	r3, #0
 800ed56:	77fb      	strb	r3, [r7, #31]
 800ed58:	e0a1      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ed5a:	2302      	movs	r3, #2
 800ed5c:	77fb      	strb	r3, [r7, #31]
 800ed5e:	e09e      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ed60:	2304      	movs	r3, #4
 800ed62:	77fb      	strb	r3, [r7, #31]
 800ed64:	e09b      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ed66:	2308      	movs	r3, #8
 800ed68:	77fb      	strb	r3, [r7, #31]
 800ed6a:	e098      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ed6c:	2310      	movs	r3, #16
 800ed6e:	77fb      	strb	r3, [r7, #31]
 800ed70:	bf00      	nop
 800ed72:	e094      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	4a39      	ldr	r2, [pc, #228]	; (800ee60 <UART_SetConfig+0x310>)
 800ed7a:	4293      	cmp	r3, r2
 800ed7c:	d124      	bne.n	800edc8 <UART_SetConfig+0x278>
 800ed7e:	4b33      	ldr	r3, [pc, #204]	; (800ee4c <UART_SetConfig+0x2fc>)
 800ed80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ed88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed8c:	d012      	beq.n	800edb4 <UART_SetConfig+0x264>
 800ed8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed92:	d802      	bhi.n	800ed9a <UART_SetConfig+0x24a>
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d007      	beq.n	800eda8 <UART_SetConfig+0x258>
 800ed98:	e012      	b.n	800edc0 <UART_SetConfig+0x270>
 800ed9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed9e:	d006      	beq.n	800edae <UART_SetConfig+0x25e>
 800eda0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800eda4:	d009      	beq.n	800edba <UART_SetConfig+0x26a>
 800eda6:	e00b      	b.n	800edc0 <UART_SetConfig+0x270>
 800eda8:	2301      	movs	r3, #1
 800edaa:	77fb      	strb	r3, [r7, #31]
 800edac:	e077      	b.n	800ee9e <UART_SetConfig+0x34e>
 800edae:	2302      	movs	r3, #2
 800edb0:	77fb      	strb	r3, [r7, #31]
 800edb2:	e074      	b.n	800ee9e <UART_SetConfig+0x34e>
 800edb4:	2304      	movs	r3, #4
 800edb6:	77fb      	strb	r3, [r7, #31]
 800edb8:	e071      	b.n	800ee9e <UART_SetConfig+0x34e>
 800edba:	2308      	movs	r3, #8
 800edbc:	77fb      	strb	r3, [r7, #31]
 800edbe:	e06e      	b.n	800ee9e <UART_SetConfig+0x34e>
 800edc0:	2310      	movs	r3, #16
 800edc2:	77fb      	strb	r3, [r7, #31]
 800edc4:	bf00      	nop
 800edc6:	e06a      	b.n	800ee9e <UART_SetConfig+0x34e>
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	4a25      	ldr	r2, [pc, #148]	; (800ee64 <UART_SetConfig+0x314>)
 800edce:	4293      	cmp	r3, r2
 800edd0:	d124      	bne.n	800ee1c <UART_SetConfig+0x2cc>
 800edd2:	4b1e      	ldr	r3, [pc, #120]	; (800ee4c <UART_SetConfig+0x2fc>)
 800edd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edd8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800eddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ede0:	d012      	beq.n	800ee08 <UART_SetConfig+0x2b8>
 800ede2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ede6:	d802      	bhi.n	800edee <UART_SetConfig+0x29e>
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d007      	beq.n	800edfc <UART_SetConfig+0x2ac>
 800edec:	e012      	b.n	800ee14 <UART_SetConfig+0x2c4>
 800edee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800edf2:	d006      	beq.n	800ee02 <UART_SetConfig+0x2b2>
 800edf4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800edf8:	d009      	beq.n	800ee0e <UART_SetConfig+0x2be>
 800edfa:	e00b      	b.n	800ee14 <UART_SetConfig+0x2c4>
 800edfc:	2300      	movs	r3, #0
 800edfe:	77fb      	strb	r3, [r7, #31]
 800ee00:	e04d      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ee02:	2302      	movs	r3, #2
 800ee04:	77fb      	strb	r3, [r7, #31]
 800ee06:	e04a      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ee08:	2304      	movs	r3, #4
 800ee0a:	77fb      	strb	r3, [r7, #31]
 800ee0c:	e047      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ee0e:	2308      	movs	r3, #8
 800ee10:	77fb      	strb	r3, [r7, #31]
 800ee12:	e044      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ee14:	2310      	movs	r3, #16
 800ee16:	77fb      	strb	r3, [r7, #31]
 800ee18:	bf00      	nop
 800ee1a:	e040      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	4a11      	ldr	r2, [pc, #68]	; (800ee68 <UART_SetConfig+0x318>)
 800ee22:	4293      	cmp	r3, r2
 800ee24:	d139      	bne.n	800ee9a <UART_SetConfig+0x34a>
 800ee26:	4b09      	ldr	r3, [pc, #36]	; (800ee4c <UART_SetConfig+0x2fc>)
 800ee28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ee30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee34:	d027      	beq.n	800ee86 <UART_SetConfig+0x336>
 800ee36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee3a:	d817      	bhi.n	800ee6c <UART_SetConfig+0x31c>
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d01c      	beq.n	800ee7a <UART_SetConfig+0x32a>
 800ee40:	e027      	b.n	800ee92 <UART_SetConfig+0x342>
 800ee42:	bf00      	nop
 800ee44:	efff69f3 	.word	0xefff69f3
 800ee48:	40011000 	.word	0x40011000
 800ee4c:	40023800 	.word	0x40023800
 800ee50:	40004400 	.word	0x40004400
 800ee54:	40004800 	.word	0x40004800
 800ee58:	40004c00 	.word	0x40004c00
 800ee5c:	40005000 	.word	0x40005000
 800ee60:	40011400 	.word	0x40011400
 800ee64:	40007800 	.word	0x40007800
 800ee68:	40007c00 	.word	0x40007c00
 800ee6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee70:	d006      	beq.n	800ee80 <UART_SetConfig+0x330>
 800ee72:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ee76:	d009      	beq.n	800ee8c <UART_SetConfig+0x33c>
 800ee78:	e00b      	b.n	800ee92 <UART_SetConfig+0x342>
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	77fb      	strb	r3, [r7, #31]
 800ee7e:	e00e      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ee80:	2302      	movs	r3, #2
 800ee82:	77fb      	strb	r3, [r7, #31]
 800ee84:	e00b      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ee86:	2304      	movs	r3, #4
 800ee88:	77fb      	strb	r3, [r7, #31]
 800ee8a:	e008      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ee8c:	2308      	movs	r3, #8
 800ee8e:	77fb      	strb	r3, [r7, #31]
 800ee90:	e005      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ee92:	2310      	movs	r3, #16
 800ee94:	77fb      	strb	r3, [r7, #31]
 800ee96:	bf00      	nop
 800ee98:	e001      	b.n	800ee9e <UART_SetConfig+0x34e>
 800ee9a:	2310      	movs	r3, #16
 800ee9c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	69db      	ldr	r3, [r3, #28]
 800eea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eea6:	d17c      	bne.n	800efa2 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800eea8:	7ffb      	ldrb	r3, [r7, #31]
 800eeaa:	2b08      	cmp	r3, #8
 800eeac:	d859      	bhi.n	800ef62 <UART_SetConfig+0x412>
 800eeae:	a201      	add	r2, pc, #4	; (adr r2, 800eeb4 <UART_SetConfig+0x364>)
 800eeb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb4:	0800eed9 	.word	0x0800eed9
 800eeb8:	0800eef7 	.word	0x0800eef7
 800eebc:	0800ef15 	.word	0x0800ef15
 800eec0:	0800ef63 	.word	0x0800ef63
 800eec4:	0800ef2d 	.word	0x0800ef2d
 800eec8:	0800ef63 	.word	0x0800ef63
 800eecc:	0800ef63 	.word	0x0800ef63
 800eed0:	0800ef63 	.word	0x0800ef63
 800eed4:	0800ef4b 	.word	0x0800ef4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800eed8:	f7fd fffc 	bl	800ced4 <HAL_RCC_GetPCLK1Freq>
 800eedc:	4603      	mov	r3, r0
 800eede:	005a      	lsls	r2, r3, #1
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	085b      	lsrs	r3, r3, #1
 800eee6:	441a      	add	r2, r3
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	685b      	ldr	r3, [r3, #4]
 800eeec:	fbb2 f3f3 	udiv	r3, r2, r3
 800eef0:	b29b      	uxth	r3, r3
 800eef2:	61bb      	str	r3, [r7, #24]
        break;
 800eef4:	e038      	b.n	800ef68 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800eef6:	f7fe f801 	bl	800cefc <HAL_RCC_GetPCLK2Freq>
 800eefa:	4603      	mov	r3, r0
 800eefc:	005a      	lsls	r2, r3, #1
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	085b      	lsrs	r3, r3, #1
 800ef04:	441a      	add	r2, r3
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef0e:	b29b      	uxth	r3, r3
 800ef10:	61bb      	str	r3, [r7, #24]
        break;
 800ef12:	e029      	b.n	800ef68 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	085a      	lsrs	r2, r3, #1
 800ef1a:	4b5d      	ldr	r3, [pc, #372]	; (800f090 <UART_SetConfig+0x540>)
 800ef1c:	4413      	add	r3, r2
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	6852      	ldr	r2, [r2, #4]
 800ef22:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	61bb      	str	r3, [r7, #24]
        break;
 800ef2a:	e01d      	b.n	800ef68 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800ef2c:	f7fd ff14 	bl	800cd58 <HAL_RCC_GetSysClockFreq>
 800ef30:	4603      	mov	r3, r0
 800ef32:	005a      	lsls	r2, r3, #1
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	685b      	ldr	r3, [r3, #4]
 800ef38:	085b      	lsrs	r3, r3, #1
 800ef3a:	441a      	add	r2, r3
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	685b      	ldr	r3, [r3, #4]
 800ef40:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef44:	b29b      	uxth	r3, r3
 800ef46:	61bb      	str	r3, [r7, #24]
        break;
 800ef48:	e00e      	b.n	800ef68 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	085b      	lsrs	r3, r3, #1
 800ef50:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef5c:	b29b      	uxth	r3, r3
 800ef5e:	61bb      	str	r3, [r7, #24]
        break;
 800ef60:	e002      	b.n	800ef68 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800ef62:	2301      	movs	r3, #1
 800ef64:	75fb      	strb	r3, [r7, #23]
        break;
 800ef66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ef68:	69bb      	ldr	r3, [r7, #24]
 800ef6a:	2b0f      	cmp	r3, #15
 800ef6c:	d916      	bls.n	800ef9c <UART_SetConfig+0x44c>
 800ef6e:	69bb      	ldr	r3, [r7, #24]
 800ef70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef74:	d212      	bcs.n	800ef9c <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ef76:	69bb      	ldr	r3, [r7, #24]
 800ef78:	b29b      	uxth	r3, r3
 800ef7a:	f023 030f 	bic.w	r3, r3, #15
 800ef7e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ef80:	69bb      	ldr	r3, [r7, #24]
 800ef82:	085b      	lsrs	r3, r3, #1
 800ef84:	b29b      	uxth	r3, r3
 800ef86:	f003 0307 	and.w	r3, r3, #7
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	89fb      	ldrh	r3, [r7, #14]
 800ef8e:	4313      	orrs	r3, r2
 800ef90:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	89fa      	ldrh	r2, [r7, #14]
 800ef98:	60da      	str	r2, [r3, #12]
 800ef9a:	e06e      	b.n	800f07a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	75fb      	strb	r3, [r7, #23]
 800efa0:	e06b      	b.n	800f07a <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800efa2:	7ffb      	ldrb	r3, [r7, #31]
 800efa4:	2b08      	cmp	r3, #8
 800efa6:	d857      	bhi.n	800f058 <UART_SetConfig+0x508>
 800efa8:	a201      	add	r2, pc, #4	; (adr r2, 800efb0 <UART_SetConfig+0x460>)
 800efaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efae:	bf00      	nop
 800efb0:	0800efd5 	.word	0x0800efd5
 800efb4:	0800eff1 	.word	0x0800eff1
 800efb8:	0800f00d 	.word	0x0800f00d
 800efbc:	0800f059 	.word	0x0800f059
 800efc0:	0800f025 	.word	0x0800f025
 800efc4:	0800f059 	.word	0x0800f059
 800efc8:	0800f059 	.word	0x0800f059
 800efcc:	0800f059 	.word	0x0800f059
 800efd0:	0800f041 	.word	0x0800f041
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800efd4:	f7fd ff7e 	bl	800ced4 <HAL_RCC_GetPCLK1Freq>
 800efd8:	4602      	mov	r2, r0
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	085b      	lsrs	r3, r3, #1
 800efe0:	441a      	add	r2, r3
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	685b      	ldr	r3, [r3, #4]
 800efe6:	fbb2 f3f3 	udiv	r3, r2, r3
 800efea:	b29b      	uxth	r3, r3
 800efec:	61bb      	str	r3, [r7, #24]
        break;
 800efee:	e036      	b.n	800f05e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800eff0:	f7fd ff84 	bl	800cefc <HAL_RCC_GetPCLK2Freq>
 800eff4:	4602      	mov	r2, r0
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	085b      	lsrs	r3, r3, #1
 800effc:	441a      	add	r2, r3
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	fbb2 f3f3 	udiv	r3, r2, r3
 800f006:	b29b      	uxth	r3, r3
 800f008:	61bb      	str	r3, [r7, #24]
        break;
 800f00a:	e028      	b.n	800f05e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	685b      	ldr	r3, [r3, #4]
 800f010:	085a      	lsrs	r2, r3, #1
 800f012:	4b20      	ldr	r3, [pc, #128]	; (800f094 <UART_SetConfig+0x544>)
 800f014:	4413      	add	r3, r2
 800f016:	687a      	ldr	r2, [r7, #4]
 800f018:	6852      	ldr	r2, [r2, #4]
 800f01a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f01e:	b29b      	uxth	r3, r3
 800f020:	61bb      	str	r3, [r7, #24]
        break;
 800f022:	e01c      	b.n	800f05e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800f024:	f7fd fe98 	bl	800cd58 <HAL_RCC_GetSysClockFreq>
 800f028:	4602      	mov	r2, r0
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	685b      	ldr	r3, [r3, #4]
 800f02e:	085b      	lsrs	r3, r3, #1
 800f030:	441a      	add	r2, r3
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	685b      	ldr	r3, [r3, #4]
 800f036:	fbb2 f3f3 	udiv	r3, r2, r3
 800f03a:	b29b      	uxth	r3, r3
 800f03c:	61bb      	str	r3, [r7, #24]
        break;
 800f03e:	e00e      	b.n	800f05e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	085b      	lsrs	r3, r3, #1
 800f046:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	685b      	ldr	r3, [r3, #4]
 800f04e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f052:	b29b      	uxth	r3, r3
 800f054:	61bb      	str	r3, [r7, #24]
        break;
 800f056:	e002      	b.n	800f05e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800f058:	2301      	movs	r3, #1
 800f05a:	75fb      	strb	r3, [r7, #23]
        break;
 800f05c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f05e:	69bb      	ldr	r3, [r7, #24]
 800f060:	2b0f      	cmp	r3, #15
 800f062:	d908      	bls.n	800f076 <UART_SetConfig+0x526>
 800f064:	69bb      	ldr	r3, [r7, #24]
 800f066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f06a:	d204      	bcs.n	800f076 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	69ba      	ldr	r2, [r7, #24]
 800f072:	60da      	str	r2, [r3, #12]
 800f074:	e001      	b.n	800f07a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800f076:	2301      	movs	r3, #1
 800f078:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2200      	movs	r2, #0
 800f07e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2200      	movs	r2, #0
 800f084:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800f086:	7dfb      	ldrb	r3, [r7, #23]
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3720      	adds	r7, #32
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}
 800f090:	01e84800 	.word	0x01e84800
 800f094:	00f42400 	.word	0x00f42400

0800f098 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f098:	b480      	push	{r7}
 800f09a:	b083      	sub	sp, #12
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0a4:	f003 0301 	and.w	r3, r3, #1
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d00a      	beq.n	800f0c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	685b      	ldr	r3, [r3, #4]
 800f0b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	430a      	orrs	r2, r1
 800f0c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0c6:	f003 0302 	and.w	r3, r3, #2
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d00a      	beq.n	800f0e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	685b      	ldr	r3, [r3, #4]
 800f0d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	430a      	orrs	r2, r1
 800f0e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0e8:	f003 0304 	and.w	r3, r3, #4
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d00a      	beq.n	800f106 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	685b      	ldr	r3, [r3, #4]
 800f0f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	430a      	orrs	r2, r1
 800f104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f10a:	f003 0308 	and.w	r3, r3, #8
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d00a      	beq.n	800f128 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	430a      	orrs	r2, r1
 800f126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f12c:	f003 0310 	and.w	r3, r3, #16
 800f130:	2b00      	cmp	r3, #0
 800f132:	d00a      	beq.n	800f14a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	689b      	ldr	r3, [r3, #8]
 800f13a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	430a      	orrs	r2, r1
 800f148:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f14e:	f003 0320 	and.w	r3, r3, #32
 800f152:	2b00      	cmp	r3, #0
 800f154:	d00a      	beq.n	800f16c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	689b      	ldr	r3, [r3, #8]
 800f15c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	430a      	orrs	r2, r1
 800f16a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f174:	2b00      	cmp	r3, #0
 800f176:	d01a      	beq.n	800f1ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	685b      	ldr	r3, [r3, #4]
 800f17e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	430a      	orrs	r2, r1
 800f18c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f196:	d10a      	bne.n	800f1ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	430a      	orrs	r2, r1
 800f1ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d00a      	beq.n	800f1d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	430a      	orrs	r2, r1
 800f1ce:	605a      	str	r2, [r3, #4]
  }
}
 800f1d0:	bf00      	nop
 800f1d2:	370c      	adds	r7, #12
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr

0800f1dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b086      	sub	sp, #24
 800f1e0:	af02      	add	r7, sp, #8
 800f1e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800f1ea:	f7fb fc2f 	bl	800aa4c <HAL_GetTick>
 800f1ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	f003 0308 	and.w	r3, r3, #8
 800f1fa:	2b08      	cmp	r3, #8
 800f1fc:	d10e      	bne.n	800f21c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f1fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f202:	9300      	str	r3, [sp, #0]
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	2200      	movs	r2, #0
 800f208:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f000 f814 	bl	800f23a <UART_WaitOnFlagUntilTimeout>
 800f212:	4603      	mov	r3, r0
 800f214:	2b00      	cmp	r3, #0
 800f216:	d001      	beq.n	800f21c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f218:	2303      	movs	r3, #3
 800f21a:	e00a      	b.n	800f232 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2220      	movs	r2, #32
 800f220:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2220      	movs	r2, #32
 800f226:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2200      	movs	r2, #0
 800f22c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800f230:	2300      	movs	r3, #0
}
 800f232:	4618      	mov	r0, r3
 800f234:	3710      	adds	r7, #16
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}

0800f23a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800f23a:	b580      	push	{r7, lr}
 800f23c:	b084      	sub	sp, #16
 800f23e:	af00      	add	r7, sp, #0
 800f240:	60f8      	str	r0, [r7, #12]
 800f242:	60b9      	str	r1, [r7, #8]
 800f244:	603b      	str	r3, [r7, #0]
 800f246:	4613      	mov	r3, r2
 800f248:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f24a:	e02a      	b.n	800f2a2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f24c:	69bb      	ldr	r3, [r7, #24]
 800f24e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f252:	d026      	beq.n	800f2a2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f254:	f7fb fbfa 	bl	800aa4c <HAL_GetTick>
 800f258:	4602      	mov	r2, r0
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	1ad3      	subs	r3, r2, r3
 800f25e:	69ba      	ldr	r2, [r7, #24]
 800f260:	429a      	cmp	r2, r3
 800f262:	d302      	bcc.n	800f26a <UART_WaitOnFlagUntilTimeout+0x30>
 800f264:	69bb      	ldr	r3, [r7, #24]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d11b      	bne.n	800f2a2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	681a      	ldr	r2, [r3, #0]
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f278:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	689a      	ldr	r2, [r3, #8]
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	f022 0201 	bic.w	r2, r2, #1
 800f288:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	2220      	movs	r2, #32
 800f28e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	2220      	movs	r2, #32
 800f294:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	2200      	movs	r2, #0
 800f29a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800f29e:	2303      	movs	r3, #3
 800f2a0:	e00f      	b.n	800f2c2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	69da      	ldr	r2, [r3, #28]
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	4013      	ands	r3, r2
 800f2ac:	68ba      	ldr	r2, [r7, #8]
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	bf0c      	ite	eq
 800f2b2:	2301      	moveq	r3, #1
 800f2b4:	2300      	movne	r3, #0
 800f2b6:	b2db      	uxtb	r3, r3
 800f2b8:	461a      	mov	r2, r3
 800f2ba:	79fb      	ldrb	r3, [r7, #7]
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d0c5      	beq.n	800f24c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f2c0:	2300      	movs	r3, #0
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3710      	adds	r7, #16
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}

0800f2ca <SpectrogramColumn>:
 * @param      *pInSignal  points to the in-place input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Spectrogram column.
 * @return     None
 */
void SpectrogramColumn(SpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 800f2ca:	b580      	push	{r7, lr}
 800f2cc:	b08c      	sub	sp, #48	; 0x30
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	60f8      	str	r0, [r7, #12]
 800f2d2:	60b9      	str	r1, [r7, #8]
 800f2d4:	607a      	str	r2, [r7, #4]
  uint32_t frame_len = S->FrameLen;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	691b      	ldr	r3, [r3, #16]
 800f2da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t n_fft = S->FFTLen;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	695b      	ldr	r3, [r3, #20]
 800f2e0:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *scratch_buffer = S->pScratch;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	699b      	ldr	r3, [r3, #24]
 800f2e6:	623b      	str	r3, [r7, #32]
  float32_t first_energy;
  float32_t last_energy;

  /* In-place window application (on signal length, not entire n_fft) */
  /* @note: OK to typecast because hannWin content is not modified */
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	6899      	ldr	r1, [r3, #8]
 800f2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ee:	68ba      	ldr	r2, [r7, #8]
 800f2f0:	68b8      	ldr	r0, [r7, #8]
 800f2f2:	f7f8 fc69 	bl	8007bc8 <arm_mult_f32>

  /* Zero pad if signal frame length is shorter than n_fft */
  memset(&pInSignal[frame_len], 0, n_fft - frame_len);
 800f2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f8:	009b      	lsls	r3, r3, #2
 800f2fa:	68ba      	ldr	r2, [r7, #8]
 800f2fc:	18d0      	adds	r0, r2, r3
 800f2fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f302:	1ad3      	subs	r3, r2, r3
 800f304:	461a      	mov	r2, r3
 800f306:	2100      	movs	r1, #0
 800f308:	f001 fd38 	bl	8010d7c <memset>

  /* FFT */
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	6818      	ldr	r0, [r3, #0]
 800f310:	2300      	movs	r3, #0
 800f312:	6a3a      	ldr	r2, [r7, #32]
 800f314:	68b9      	ldr	r1, [r7, #8]
 800f316:	f7fb fa43 	bl	800a7a0 <arm_rfft_fast_f32>

  /* Power spectrum */
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 800f31a:	6a3b      	ldr	r3, [r7, #32]
 800f31c:	ed93 7a00 	vldr	s14, [r3]
 800f320:	6a3b      	ldr	r3, [r7, #32]
 800f322:	edd3 7a00 	vldr	s15, [r3]
 800f326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f32a:	edc7 7a07 	vstr	s15, [r7, #28]
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 800f32e:	6a3b      	ldr	r3, [r7, #32]
 800f330:	3304      	adds	r3, #4
 800f332:	ed93 7a00 	vldr	s14, [r3]
 800f336:	6a3b      	ldr	r3, [r7, #32]
 800f338:	3304      	adds	r3, #4
 800f33a:	edd3 7a00 	vldr	s15, [r3]
 800f33e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f342:	edc7 7a06 	vstr	s15, [r7, #24]
  pOutCol[0] = first_energy;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	69fa      	ldr	r2, [r7, #28]
 800f34a:	601a      	str	r2, [r3, #0]
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 800f34c:	6a3b      	ldr	r3, [r7, #32]
 800f34e:	f103 0008 	add.w	r0, r3, #8
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	1d19      	adds	r1, r3, #4
 800f356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f358:	085b      	lsrs	r3, r3, #1
 800f35a:	3b01      	subs	r3, #1
 800f35c:	461a      	mov	r2, r3
 800f35e:	f7f8 fd9a 	bl	8007e96 <arm_cmplx_mag_squared_f32>
  pOutCol[n_fft / 2] = last_energy;
 800f362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f364:	085b      	lsrs	r3, r3, #1
 800f366:	009b      	lsls	r3, r3, #2
 800f368:	687a      	ldr	r2, [r7, #4]
 800f36a:	4413      	add	r3, r2
 800f36c:	69ba      	ldr	r2, [r7, #24]
 800f36e:	601a      	str	r2, [r3, #0]

  /* Magnitude spectrum */
  if (S->Type == SPECTRUM_TYPE_MAGNITUDE)
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	791b      	ldrb	r3, [r3, #4]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d12b      	bne.n	800f3d0 <SpectrogramColumn+0x106>
  {
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 800f378:	2300      	movs	r3, #0
 800f37a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f37c:	e022      	b.n	800f3c4 <SpectrogramColumn+0xfa>
    {
      arm_sqrt_f32(pOutCol[i], &pOutCol[i]);
 800f37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f380:	009b      	lsls	r3, r3, #2
 800f382:	687a      	ldr	r2, [r7, #4]
 800f384:	4413      	add	r3, r2
 800f386:	681a      	ldr	r2, [r3, #0]
 800f388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38a:	009b      	lsls	r3, r3, #2
 800f38c:	6879      	ldr	r1, [r7, #4]
 800f38e:	440b      	add	r3, r1
 800f390:	617a      	str	r2, [r7, #20]
 800f392:	613b      	str	r3, [r7, #16]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800f394:	edd7 7a05 	vldr	s15, [r7, #20]
 800f398:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f39c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3a0:	db09      	blt.n	800f3b6 <SpectrogramColumn+0xec>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800f3a2:	ed97 0a05 	vldr	s0, [r7, #20]
 800f3a6:	f002 f80d 	bl	80113c4 <sqrtf>
 800f3aa:	eef0 7a40 	vmov.f32	s15, s0
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	edc3 7a00 	vstr	s15, [r3]
 800f3b4:	e003      	b.n	800f3be <SpectrogramColumn+0xf4>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	f04f 0200 	mov.w	r2, #0
 800f3bc:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 800f3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c6:	085b      	lsrs	r3, r3, #1
 800f3c8:	3301      	adds	r3, #1
 800f3ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d3d6      	bcc.n	800f37e <SpectrogramColumn+0xb4>
    }
  }
}
 800f3d0:	bf00      	nop
 800f3d2:	3730      	adds	r7, #48	; 0x30
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd80      	pop	{r7, pc}

0800f3d8 <LogMelSpectrogramColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Log-Mel Spectrogram column.
 * @return     None
 */
void LogMelSpectrogramColumn(LogMelSpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 800f3d8:	b590      	push	{r4, r7, lr}
 800f3da:	b08f      	sub	sp, #60	; 0x3c
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	60f8      	str	r0, [r7, #12]
 800f3e0:	60b9      	str	r1, [r7, #8]
 800f3e2:	607a      	str	r2, [r7, #4]
  uint32_t n_mels = S->MelSpectrogramConf->MelFilter->NumMels;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	685b      	ldr	r3, [r3, #4]
 800f3ea:	691b      	ldr	r3, [r3, #16]
 800f3ec:	623b      	str	r3, [r7, #32]
  float32_t top_dB = S->TopdB;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	68db      	ldr	r3, [r3, #12]
 800f3f2:	61fb      	str	r3, [r7, #28]
  float32_t ref = S->Ref;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	689b      	ldr	r3, [r3, #8]
 800f3f8:	61bb      	str	r3, [r7, #24]
  float32_t *tmp_buffer = S->MelSpectrogramConf->SpectrogramConf->pScratch;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	699b      	ldr	r3, [r3, #24]
 800f402:	617b      	str	r3, [r7, #20]

  SpectrogramColumn(S->MelSpectrogramConf->SpectrogramConf, pInSignal, tmp_buffer);
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	697a      	ldr	r2, [r7, #20]
 800f40c:	68b9      	ldr	r1, [r7, #8]
 800f40e:	4618      	mov	r0, r3
 800f410:	f7ff ff5b 	bl	800f2ca <SpectrogramColumn>

  /* Mel Filter Banks Application to power spectrum column */
  MelFilterbank(S->MelSpectrogramConf->MelFilter, tmp_buffer, pOutCol);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	687a      	ldr	r2, [r7, #4]
 800f41c:	6979      	ldr	r1, [r7, #20]
 800f41e:	4618      	mov	r0, r3
 800f420:	f000 fa48 	bl	800f8b4 <MelFilterbank>

  /* Scaling */
  for (uint32_t i = 0; i < n_mels; i++) {
 800f424:	2300      	movs	r3, #0
 800f426:	637b      	str	r3, [r7, #52]	; 0x34
 800f428:	e012      	b.n	800f450 <LogMelSpectrogramColumn+0x78>
    pOutCol[i] /= ref;
 800f42a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f42c:	009b      	lsls	r3, r3, #2
 800f42e:	687a      	ldr	r2, [r7, #4]
 800f430:	4413      	add	r3, r2
 800f432:	edd3 6a00 	vldr	s13, [r3]
 800f436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f438:	009b      	lsls	r3, r3, #2
 800f43a:	687a      	ldr	r2, [r7, #4]
 800f43c:	4413      	add	r3, r2
 800f43e:	ed97 7a06 	vldr	s14, [r7, #24]
 800f442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f446:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < n_mels; i++) {
 800f44a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f44c:	3301      	adds	r3, #1
 800f44e:	637b      	str	r3, [r7, #52]	; 0x34
 800f450:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f452:	6a3b      	ldr	r3, [r7, #32]
 800f454:	429a      	cmp	r2, r3
 800f456:	d3e8      	bcc.n	800f42a <LogMelSpectrogramColumn+0x52>
  }

  /* Avoid  log of zero or a negative number */
  for (uint32_t i = 0; i < n_mels; i++) {
 800f458:	2300      	movs	r3, #0
 800f45a:	633b      	str	r3, [r7, #48]	; 0x30
 800f45c:	e014      	b.n	800f488 <LogMelSpectrogramColumn+0xb0>
     if (pOutCol[i] <= 0.0f) {
 800f45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f460:	009b      	lsls	r3, r3, #2
 800f462:	687a      	ldr	r2, [r7, #4]
 800f464:	4413      	add	r3, r2
 800f466:	edd3 7a00 	vldr	s15, [r3]
 800f46a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f472:	d806      	bhi.n	800f482 <LogMelSpectrogramColumn+0xaa>
        pOutCol[i] = FLT_MIN;
 800f474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f476:	009b      	lsls	r3, r3, #2
 800f478:	687a      	ldr	r2, [r7, #4]
 800f47a:	4413      	add	r3, r2
 800f47c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800f480:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++) {
 800f482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f484:	3301      	adds	r3, #1
 800f486:	633b      	str	r3, [r7, #48]	; 0x30
 800f488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f48a:	6a3b      	ldr	r3, [r7, #32]
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d3e6      	bcc.n	800f45e <LogMelSpectrogramColumn+0x86>
     }
  }

  if (S->LogFormula == LOGMELSPECTROGRAM_SCALE_DB)
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	791b      	ldrb	r3, [r3, #4]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d14a      	bne.n	800f52e <LogMelSpectrogramColumn+0x156>
  {
    /* Convert power spectrogram to decibel */
    for (uint32_t i = 0; i < n_mels; i++) {
 800f498:	2300      	movs	r3, #0
 800f49a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f49c:	e018      	b.n	800f4d0 <LogMelSpectrogramColumn+0xf8>
      pOutCol[i] = 10.0f * log10f(pOutCol[i]);
 800f49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a0:	009b      	lsls	r3, r3, #2
 800f4a2:	687a      	ldr	r2, [r7, #4]
 800f4a4:	4413      	add	r3, r2
 800f4a6:	edd3 7a00 	vldr	s15, [r3]
 800f4aa:	eeb0 0a67 	vmov.f32	s0, s15
 800f4ae:	f001 fdaf 	bl	8011010 <log10f>
 800f4b2:	eeb0 7a40 	vmov.f32	s14, s0
 800f4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	687a      	ldr	r2, [r7, #4]
 800f4bc:	4413      	add	r3, r2
 800f4be:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800f4c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4c6:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < n_mels; i++) {
 800f4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f4d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4d2:	6a3b      	ldr	r3, [r7, #32]
 800f4d4:	429a      	cmp	r2, r3
 800f4d6:	d3e2      	bcc.n	800f49e <LogMelSpectrogramColumn+0xc6>
    }

    /* Threshold output to -top_dB dB */
    for (uint32_t i = 0; i < n_mels; i++) {
 800f4d8:	2300      	movs	r3, #0
 800f4da:	62bb      	str	r3, [r7, #40]	; 0x28
 800f4dc:	e022      	b.n	800f524 <LogMelSpectrogramColumn+0x14c>
      pOutCol[i] = (pOutCol[i] < -top_dB) ? (-top_dB) : (pOutCol[i]);
 800f4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e0:	009b      	lsls	r3, r3, #2
 800f4e2:	687a      	ldr	r2, [r7, #4]
 800f4e4:	4413      	add	r3, r2
 800f4e6:	ed93 7a00 	vldr	s14, [r3]
 800f4ea:	edd7 7a07 	vldr	s15, [r7, #28]
 800f4ee:	eef1 7a67 	vneg.f32	s15, s15
 800f4f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4fa:	d504      	bpl.n	800f506 <LogMelSpectrogramColumn+0x12e>
 800f4fc:	edd7 7a07 	vldr	s15, [r7, #28]
 800f500:	eef1 7a67 	vneg.f32	s15, s15
 800f504:	e005      	b.n	800f512 <LogMelSpectrogramColumn+0x13a>
 800f506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f508:	009b      	lsls	r3, r3, #2
 800f50a:	687a      	ldr	r2, [r7, #4]
 800f50c:	4413      	add	r3, r2
 800f50e:	edd3 7a00 	vldr	s15, [r3]
 800f512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f514:	009b      	lsls	r3, r3, #2
 800f516:	687a      	ldr	r2, [r7, #4]
 800f518:	4413      	add	r3, r2
 800f51a:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < n_mels; i++) {
 800f51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f520:	3301      	adds	r3, #1
 800f522:	62bb      	str	r3, [r7, #40]	; 0x28
 800f524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f526:	6a3b      	ldr	r3, [r7, #32]
 800f528:	429a      	cmp	r2, r3
 800f52a:	d3d8      	bcc.n	800f4de <LogMelSpectrogramColumn+0x106>
    for (uint32_t i = 0; i < n_mels; i++) {
      pOutCol[i] = logf(pOutCol[i]);
    }
  }

}
 800f52c:	e01b      	b.n	800f566 <LogMelSpectrogramColumn+0x18e>
    for (uint32_t i = 0; i < n_mels; i++) {
 800f52e:	2300      	movs	r3, #0
 800f530:	627b      	str	r3, [r7, #36]	; 0x24
 800f532:	e014      	b.n	800f55e <LogMelSpectrogramColumn+0x186>
      pOutCol[i] = logf(pOutCol[i]);
 800f534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f536:	009b      	lsls	r3, r3, #2
 800f538:	687a      	ldr	r2, [r7, #4]
 800f53a:	4413      	add	r3, r2
 800f53c:	edd3 7a00 	vldr	s15, [r3]
 800f540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f542:	009b      	lsls	r3, r3, #2
 800f544:	687a      	ldr	r2, [r7, #4]
 800f546:	18d4      	adds	r4, r2, r3
 800f548:	eeb0 0a67 	vmov.f32	s0, s15
 800f54c:	f001 fcea 	bl	8010f24 <logf>
 800f550:	eef0 7a40 	vmov.f32	s15, s0
 800f554:	edc4 7a00 	vstr	s15, [r4]
    for (uint32_t i = 0; i < n_mels; i++) {
 800f558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55a:	3301      	adds	r3, #1
 800f55c:	627b      	str	r3, [r7, #36]	; 0x24
 800f55e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f560:	6a3b      	ldr	r3, [r7, #32]
 800f562:	429a      	cmp	r2, r3
 800f564:	d3e6      	bcc.n	800f534 <LogMelSpectrogramColumn+0x15c>
}
 800f566:	bf00      	nop
 800f568:	373c      	adds	r7, #60	; 0x3c
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd90      	pop	{r4, r7, pc}

0800f56e <MelFilterbank_Init>:
 *
 * @param      *MelFilterStruct  The Mel Filter configuration structure.
 * @return none.
 */
void MelFilterbank_Init(MelFilterTypeDef *MelFilterStruct)
{
 800f56e:	b580      	push	{r7, lr}
 800f570:	b0a4      	sub	sp, #144	; 0x90
 800f572:	af00      	add	r7, sp, #0
 800f574:	6078      	str	r0, [r7, #4]
  uint32_t normalize = MelFilterStruct->Normalize;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f57a:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t mel_2_f = MelFilterStruct->Mel2F;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f580:	65fb      	str	r3, [r7, #92]	; 0x5c
  MelFormulaTypedef formula = MelFilterStruct->Formula;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f588:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  uint32_t *fft_bin_numbers_start = MelFilterStruct->pStartIndices;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t *fft_bin_numbers_stop = MelFilterStruct->pStopIndices;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	653b      	str	r3, [r7, #80]	; 0x50
  int32_t start_index;
  int32_t stop_index;
  float32_t *weights = MelFilterStruct->pCoefficients;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	689b      	ldr	r3, [r3, #8]
 800f59c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t *n_coefficients = &MelFilterStruct->CoefficientsLength;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	330c      	adds	r3, #12
 800f5a4:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t sr = MelFilterStruct->SampRate;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	699b      	ldr	r3, [r3, #24]
 800f5aa:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t n_mels = MelFilterStruct->NumMels;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	691b      	ldr	r3, [r3, #16]
 800f5b0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t n_fft = MelFilterStruct->FFTLen;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	695b      	ldr	r3, [r3, #20]
 800f5b6:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t f_min =  MelFilterStruct->FMin;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	69db      	ldr	r3, [r3, #28]
 800f5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t f_max =  MelFilterStruct->FMax;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	6a1b      	ldr	r3, [r3, #32]
 800f5c2:	63bb      	str	r3, [r7, #56]	; 0x38

  float32_t enorm;

  // Algorithm based on librosa implementation with memory constraints

  mel_min = MelScale(f_min, formula);
 800f5c4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800f5ce:	f000 f9c5 	bl	800f95c <MelScale>
 800f5d2:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
  mel_max = MelScale(f_max, formula);
 800f5d6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f5da:	4618      	mov	r0, r3
 800f5dc:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800f5e0:	f000 f9bc 	bl	800f95c <MelScale>
 800f5e4:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
  // Then, create mel_bin_centers = np.linspace(mel_min, mel_max, n_mels + 2) // + 2 to get boundaries
  mel_step = (mel_max - mel_min) / (float32_t) (n_mels - 1 + 2);
 800f5e8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800f5ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f5f0:	ee77 6a67 	vsub.f32	s13, s14, s15
 800f5f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5f6:	3301      	adds	r3, #1
 800f5f8:	ee07 3a90 	vmov	s15, r3
 800f5fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f604:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  /* Center frequencies of each FFT bin */
  // fftfreqs = librosa.fft_frequencies(sr=sr, n_fft=n_fft)
  //          = np.linspace(0, float(sr)/2), int(1 + n_fft//2), endpoint=True)
  //          = np.linspace(0, 8000, 513, endpoint=True) # With sr=16000, n_fft=1024
  // fftfreqs_step = (f_max - f_min) / (float32_t) (n_fft / 2);
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 800f608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f60a:	ee07 3a90 	vmov	s15, r3
 800f60e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f612:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800f616:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800f61a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f61c:	085b      	lsrs	r3, r3, #1
 800f61e:	ee07 3a90 	vmov	s15, r3
 800f622:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f62a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

  *n_coefficients = 0;
 800f62e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f630:	2200      	movs	r2, #0
 800f632:	601a      	str	r2, [r3, #0]
  /* Create filterbanks */
  // The first filterbank will start at the first point,
  // reach its peak at the second point, then return to zero at the 3rd point.
  // The second filterbank will start at the 2nd point, reach its max at the 3rd,
  // then be zero at the 4th etc. A formula for calculating these is as follows:
  for (uint32_t i = 0; i < n_mels; i++)
 800f634:	2300      	movs	r3, #0
 800f636:	66bb      	str	r3, [r7, #104]	; 0x68
 800f638:	e133      	b.n	800f8a2 <MelFilterbank_Init+0x334>
  {
    /* Create bin */
    if (mel_2_f != 0) {
 800f63a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d044      	beq.n	800f6ca <MelFilterbank_Init+0x15c>
      mel_f_lower = InverseMelScale(mel_step * i + mel_min, formula);
 800f640:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f642:	ee07 3a90 	vmov	s15, r3
 800f646:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f64a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f64e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f652:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f65a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f65e:	4618      	mov	r0, r3
 800f660:	eeb0 0a67 	vmov.f32	s0, s15
 800f664:	f000 f9ea 	bl	800fa3c <InverseMelScale>
 800f668:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
      mel_f_center = InverseMelScale(mel_step * (i + 1) + mel_min, formula);
 800f66c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f66e:	3301      	adds	r3, #1
 800f670:	ee07 3a90 	vmov	s15, r3
 800f674:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f678:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f67c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f680:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f684:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f688:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f68c:	4618      	mov	r0, r3
 800f68e:	eeb0 0a67 	vmov.f32	s0, s15
 800f692:	f000 f9d3 	bl	800fa3c <InverseMelScale>
 800f696:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
      mel_f_upper = InverseMelScale(mel_step * (i + 2) + mel_min, formula);
 800f69a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f69c:	3302      	adds	r3, #2
 800f69e:	ee07 3a90 	vmov	s15, r3
 800f6a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f6a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f6aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f6ae:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f6b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f6b6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	eeb0 0a67 	vmov.f32	s0, s15
 800f6c0:	f000 f9bc 	bl	800fa3c <InverseMelScale>
 800f6c4:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
 800f6c8:	e02e      	b.n	800f728 <MelFilterbank_Init+0x1ba>
    } else {
      mel_f_lower = mel_step * i + mel_min;
 800f6ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f6cc:	ee07 3a90 	vmov	s15, r3
 800f6d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f6d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f6d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6dc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f6e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f6e4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
      mel_f_center = mel_step * (i + 1) + mel_min;
 800f6e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	ee07 3a90 	vmov	s15, r3
 800f6f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f6f4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f6f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6fc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f700:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f704:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
      mel_f_upper = mel_step * (i + 2) + mel_min;
 800f708:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f70a:	3302      	adds	r3, #2
 800f70c:	ee07 3a90 	vmov	s15, r3
 800f710:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f714:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f71c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f720:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f724:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    /* Round frequencies to the nearest FFT bins */
    // Note: This could be used for future optimization but does not match when InverseMelScale is not used
    // fft_bin_numbers_start[i] = (uint32_t) (n_fft * mel_f_lower / sr) + 1;
    // fft_bin_numbers_stop[i] = (uint32_t) (n_fft * mel_f_upper / sr);

    fdiff_lower = mel_f_center - mel_f_lower;
 800f728:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800f72c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800f730:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f734:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    fdiff_upper = mel_f_upper - mel_f_center;
 800f738:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800f73c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800f740:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f744:	edc7 7a08 	vstr	s15, [r7, #32]

    start_index = -1;
 800f748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f74c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    stop_index = -1;
 800f750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    for (uint32_t j = 0; j < n_fft / 2; j++)
 800f758:	2300      	movs	r3, #0
 800f75a:	667b      	str	r3, [r7, #100]	; 0x64
 800f75c:	e098      	b.n	800f890 <MelFilterbank_Init+0x322>
    {
      /* Center frequency for FFT bin */
      // fftfreq = j * fftfreqs_step + f_min;
      if (mel_2_f != 0) {
 800f75e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f760:	2b00      	cmp	r3, #0
 800f762:	d00b      	beq.n	800f77c <MelFilterbank_Init+0x20e>
        fftfreq = j * fftfreqs_step;
 800f764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f766:	ee07 3a90 	vmov	s15, r3
 800f76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f76e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f772:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f776:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 800f77a:	e011      	b.n	800f7a0 <MelFilterbank_Init+0x232>
      } else {
        fftfreq = MelScale(j * fftfreqs_step, formula);
 800f77c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f77e:	ee07 3a90 	vmov	s15, r3
 800f782:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f786:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f78a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f78e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f792:	4618      	mov	r0, r3
 800f794:	eeb0 0a67 	vmov.f32	s0, s15
 800f798:	f000 f8e0 	bl	800f95c <MelScale>
 800f79c:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
      }

      ramp_lower = mel_f_lower - fftfreq;
 800f7a0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800f7a4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800f7a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7ac:	edc7 7a07 	vstr	s15, [r7, #28]
      ramp_upper = mel_f_upper - fftfreq;
 800f7b0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800f7b4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800f7b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7bc:	edc7 7a06 	vstr	s15, [r7, #24]
      /* Lower and upper slopes for current bin */
      lower = -ramp_lower / fdiff_lower;
 800f7c0:	edd7 7a07 	vldr	s15, [r7, #28]
 800f7c4:	eef1 6a67 	vneg.f32	s13, s15
 800f7c8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800f7cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f7d0:	edc7 7a05 	vstr	s15, [r7, #20]
      upper =  ramp_upper / fdiff_upper;
 800f7d4:	edd7 6a06 	vldr	s13, [r7, #24]
 800f7d8:	ed97 7a08 	vldr	s14, [r7, #32]
 800f7dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f7e0:	edc7 7a04 	vstr	s15, [r7, #16]

      // # .. then intersect them with each other and zero
      // weights[i] = np.maximum(0, np.minimum(lower, upper))
      if (lower < upper) min = lower;
 800f7e4:	ed97 7a05 	vldr	s14, [r7, #20]
 800f7e8:	edd7 7a04 	vldr	s15, [r7, #16]
 800f7ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7f4:	d502      	bpl.n	800f7fc <MelFilterbank_Init+0x28e>
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	673b      	str	r3, [r7, #112]	; 0x70
 800f7fa:	e001      	b.n	800f800 <MelFilterbank_Init+0x292>
      else min = upper;
 800f7fc:	693b      	ldr	r3, [r7, #16]
 800f7fe:	673b      	str	r3, [r7, #112]	; 0x70

      // Only store non-zero values indexed by start and stop indexes
      if (min > 0)
 800f800:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800f804:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f80c:	dd2f      	ble.n	800f86e <MelFilterbank_Init+0x300>
      {
        weight = min;
 800f80e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f810:	66fb      	str	r3, [r7, #108]	; 0x6c
        // At this point, matching with:
        // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=None,htk=False)

        if (normalize != 0)
 800f812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f814:	2b00      	cmp	r3, #0
 800f816:	d013      	beq.n	800f840 <MelFilterbank_Init+0x2d2>
          //     (area normalization).  Otherwise, leave all the triangles aiming for
          //     a peak value of 1.0
          // # Slaney-style mel is scaled to be approx constant energy per channel
          // enorm = 2.0 / (mel_f[2:n_mels+2] - mel_f[:n_mels])
          // weights *= enorm[:, np.newaxis]
          enorm = 2.0f / (mel_f_upper - mel_f_lower);
 800f818:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800f81c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800f820:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f824:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f82c:	edc7 7a03 	vstr	s15, [r7, #12]
          weight *= enorm;
 800f830:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800f834:	edd7 7a03 	vldr	s15, [r7, #12]
 800f838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f83c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          // At this point, should be matching with:
          // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=1,htk=False)
        }

        /* Store weight coefficient in Lookup table */
        *weights++ = weight;
 800f840:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f844:	1d1a      	adds	r2, r3, #4
 800f846:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800f84a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f84c:	601a      	str	r2, [r3, #0]
        if (start_index == -1) {
 800f84e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f856:	d102      	bne.n	800f85e <MelFilterbank_Init+0x2f0>
          start_index = j;
 800f858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f85a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
        stop_index = j;
 800f85e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f860:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        /* Increment coefficient counter */
        *n_coefficients = *n_coefficients + 1;
 800f864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	1c5a      	adds	r2, r3, #1
 800f86a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f86c:	601a      	str	r2, [r3, #0]
      }
      fft_bin_numbers_start[i] = start_index;
 800f86e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f870:	009b      	lsls	r3, r3, #2
 800f872:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f874:	4413      	add	r3, r2
 800f876:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f87a:	601a      	str	r2, [r3, #0]
      fft_bin_numbers_stop[i] = stop_index;
 800f87c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f87e:	009b      	lsls	r3, r3, #2
 800f880:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f882:	4413      	add	r3, r2
 800f884:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f888:	601a      	str	r2, [r3, #0]
    for (uint32_t j = 0; j < n_fft / 2; j++)
 800f88a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f88c:	3301      	adds	r3, #1
 800f88e:	667b      	str	r3, [r7, #100]	; 0x64
 800f890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f892:	085b      	lsrs	r3, r3, #1
 800f894:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f896:	429a      	cmp	r2, r3
 800f898:	f4ff af61 	bcc.w	800f75e <MelFilterbank_Init+0x1f0>
  for (uint32_t i = 0; i < n_mels; i++)
 800f89c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f89e:	3301      	adds	r3, #1
 800f8a0:	66bb      	str	r3, [r7, #104]	; 0x68
 800f8a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f8a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	f4ff aec7 	bcc.w	800f63a <MelFilterbank_Init+0xcc>
    }
  }
}
 800f8ac:	bf00      	nop
 800f8ae:	3790      	adds	r7, #144	; 0x90
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}

0800f8b4 <MelFilterbank>:
 * @param      *M          points to an instance of the floating-point MelFilterbank structure.
 * @param      *pSpectrCol points to the input spectrogram slice of length FFTLen / 2.
 * @param      *pMelCol    points to the output mel energies in each filterbank.
 */
void MelFilterbank(MelFilterTypeDef *M, float32_t *pSpectrCol, float32_t *pMelCol)
{
 800f8b4:	b480      	push	{r7}
 800f8b6:	b08d      	sub	sp, #52	; 0x34
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	60f8      	str	r0, [r7, #12]
 800f8bc:	60b9      	str	r1, [r7, #8]
 800f8be:	607a      	str	r2, [r7, #4]
  uint16_t start_idx;
  uint16_t stop_idx;
  uint32_t *pStart_idxs = M->pStartIndices;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	61fb      	str	r3, [r7, #28]
  uint32_t *pStop_idxs = M->pStopIndices;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	685b      	ldr	r3, [r3, #4]
 800f8ca:	61bb      	str	r3, [r7, #24]
  float32_t *pCoefs = M->pCoefficients;
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	689b      	ldr	r3, [r3, #8]
 800f8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t n_mels = M->NumMels;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	691b      	ldr	r3, [r3, #16]
 800f8d6:	617b      	str	r3, [r7, #20]
  float32_t sum;

  for (uint32_t i = 0; i < n_mels; i++)
 800f8d8:	2300      	movs	r3, #0
 800f8da:	627b      	str	r3, [r7, #36]	; 0x24
 800f8dc:	e034      	b.n	800f948 <MelFilterbank+0x94>
  {
    start_idx = pStart_idxs[i];
 800f8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e0:	009b      	lsls	r3, r3, #2
 800f8e2:	69fa      	ldr	r2, [r7, #28]
 800f8e4:	4413      	add	r3, r2
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	827b      	strh	r3, [r7, #18]
    stop_idx = pStop_idxs[i];
 800f8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ec:	009b      	lsls	r3, r3, #2
 800f8ee:	69ba      	ldr	r2, [r7, #24]
 800f8f0:	4413      	add	r3, r2
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	823b      	strh	r3, [r7, #16]
    sum = 0.0f;
 800f8f6:	f04f 0300 	mov.w	r3, #0
 800f8fa:	62bb      	str	r3, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 800f8fc:	8a7b      	ldrh	r3, [r7, #18]
 800f8fe:	623b      	str	r3, [r7, #32]
 800f900:	e015      	b.n	800f92e <MelFilterbank+0x7a>
    {
      sum += pSpectrCol[j] * (*pCoefs++);
 800f902:	6a3b      	ldr	r3, [r7, #32]
 800f904:	009b      	lsls	r3, r3, #2
 800f906:	68ba      	ldr	r2, [r7, #8]
 800f908:	4413      	add	r3, r2
 800f90a:	ed93 7a00 	vldr	s14, [r3]
 800f90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f910:	1d1a      	adds	r2, r3, #4
 800f912:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f914:	edd3 7a00 	vldr	s15, [r3]
 800f918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f91c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f920:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f924:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 800f928:	6a3b      	ldr	r3, [r7, #32]
 800f92a:	3301      	adds	r3, #1
 800f92c:	623b      	str	r3, [r7, #32]
 800f92e:	8a3b      	ldrh	r3, [r7, #16]
 800f930:	6a3a      	ldr	r2, [r7, #32]
 800f932:	429a      	cmp	r2, r3
 800f934:	d9e5      	bls.n	800f902 <MelFilterbank+0x4e>
    }
    pMelCol[i] = sum;
 800f936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f938:	009b      	lsls	r3, r3, #2
 800f93a:	687a      	ldr	r2, [r7, #4]
 800f93c:	4413      	add	r3, r2
 800f93e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f940:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++)
 800f942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f944:	3301      	adds	r3, #1
 800f946:	627b      	str	r3, [r7, #36]	; 0x24
 800f948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d3c6      	bcc.n	800f8de <MelFilterbank+0x2a>
  }
}
 800f950:	bf00      	nop
 800f952:	3734      	adds	r7, #52	; 0x34
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr

0800f95c <MelScale>:

/* Private functions ---------------------------------------------------------*/

// based on librosa mel_to_hz()
static __INLINE float MelScale(float freq, MelFormulaTypedef type)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b088      	sub	sp, #32
 800f960:	af00      	add	r7, sp, #0
 800f962:	ed87 0a01 	vstr	s0, [r7, #4]
 800f966:	4603      	mov	r3, r0
 800f968:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 800f96a:	78fb      	ldrb	r3, [r7, #3]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d042      	beq.n	800f9f6 <MelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 800f970:	f04f 0300 	mov.w	r3, #0
 800f974:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 800f976:	4b2c      	ldr	r3, [pc, #176]	; (800fa28 <MelScale+0xcc>)
 800f978:	617b      	str	r3, [r7, #20]
    float mels = (freq - f_min) / f_sp;
 800f97a:	ed97 7a01 	vldr	s14, [r7, #4]
 800f97e:	edd7 7a06 	vldr	s15, [r7, #24]
 800f982:	ee77 6a67 	vsub.f32	s13, s14, s15
 800f986:	ed97 7a05 	vldr	s14, [r7, #20]
 800f98a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f98e:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Fill in the log-scale part */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 800f992:	4b26      	ldr	r3, [pc, #152]	; (800fa2c <MelScale+0xd0>)
 800f994:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 800f996:	ed97 7a04 	vldr	s14, [r7, #16]
 800f99a:	edd7 7a06 	vldr	s15, [r7, #24]
 800f99e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800f9a2:	ed97 7a05 	vldr	s14, [r7, #20]
 800f9a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f9aa:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 800f9ae:	4b20      	ldr	r3, [pc, #128]	; (800fa30 <MelScale+0xd4>)
 800f9b0:	60bb      	str	r3, [r7, #8]

    if (freq >= min_log_hz)
 800f9b2:	ed97 7a01 	vldr	s14, [r7, #4]
 800f9b6:	edd7 7a04 	vldr	s15, [r7, #16]
 800f9ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f9be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9c2:	db15      	blt.n	800f9f0 <MelScale+0x94>
    {
      mels = min_log_mel + logf(freq / min_log_hz) / logstep;
 800f9c4:	ed97 7a01 	vldr	s14, [r7, #4]
 800f9c8:	edd7 7a04 	vldr	s15, [r7, #16]
 800f9cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f9d0:	eeb0 0a66 	vmov.f32	s0, s13
 800f9d4:	f001 faa6 	bl	8010f24 <logf>
 800f9d8:	eef0 6a40 	vmov.f32	s13, s0
 800f9dc:	ed97 7a02 	vldr	s14, [r7, #8]
 800f9e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f9e4:	ed97 7a03 	vldr	s14, [r7, #12]
 800f9e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f9ec:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return mels;
 800f9f0:	edd7 7a07 	vldr	s15, [r7, #28]
 800f9f4:	e013      	b.n	800fa1e <MelScale+0xc2>
  } else {
    /* HTK Formula */
    // The formula for converting from frequency to Mel scale is:
    // M(f) = 1127. * ln(1 + f / 700.)
    //      = 2595. * log10(1 + f / 700.)
    return 1127.0f * logf(1.0f + freq / 700.0f);
 800f9f6:	ed97 7a01 	vldr	s14, [r7, #4]
 800f9fa:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800fa34 <MelScale+0xd8>
 800f9fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fa02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fa06:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fa0a:	eeb0 0a67 	vmov.f32	s0, s15
 800fa0e:	f001 fa89 	bl	8010f24 <logf>
 800fa12:	eeb0 7a40 	vmov.f32	s14, s0
 800fa16:	eddf 7a08 	vldr	s15, [pc, #32]	; 800fa38 <MelScale+0xdc>
 800fa1a:	ee67 7a27 	vmul.f32	s15, s14, s15
  }
}
 800fa1e:	eeb0 0a67 	vmov.f32	s0, s15
 800fa22:	3720      	adds	r7, #32
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}
 800fa28:	42855555 	.word	0x42855555
 800fa2c:	447a0000 	.word	0x447a0000
 800fa30:	3d8ccdbb 	.word	0x3d8ccdbb
 800fa34:	442f0000 	.word	0x442f0000
 800fa38:	448ce000 	.word	0x448ce000

0800fa3c <InverseMelScale>:

// based on librosa hz_to_mel()
static __INLINE float InverseMelScale(float mel_freq, MelFormulaTypedef type)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b088      	sub	sp, #32
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	ed87 0a01 	vstr	s0, [r7, #4]
 800fa46:	4603      	mov	r3, r0
 800fa48:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 800fa4a:	78fb      	ldrb	r3, [r7, #3]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d042      	beq.n	800fad6 <InverseMelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 800fa50:	f04f 0300 	mov.w	r3, #0
 800fa54:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 800fa56:	4b2c      	ldr	r3, [pc, #176]	; (800fb08 <InverseMelScale+0xcc>)
 800fa58:	617b      	str	r3, [r7, #20]
    float freq = f_min + f_sp * mel_freq;
 800fa5a:	ed97 7a05 	vldr	s14, [r7, #20]
 800fa5e:	edd7 7a01 	vldr	s15, [r7, #4]
 800fa62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa66:	ed97 7a06 	vldr	s14, [r7, #24]
 800fa6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa6e:	edc7 7a07 	vstr	s15, [r7, #28]

    /* And now the nonlinear scale */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 800fa72:	4b26      	ldr	r3, [pc, #152]	; (800fb0c <InverseMelScale+0xd0>)
 800fa74:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 800fa76:	ed97 7a04 	vldr	s14, [r7, #16]
 800fa7a:	edd7 7a06 	vldr	s15, [r7, #24]
 800fa7e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800fa82:	ed97 7a05 	vldr	s14, [r7, #20]
 800fa86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa8a:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 800fa8e:	4b20      	ldr	r3, [pc, #128]	; (800fb10 <InverseMelScale+0xd4>)
 800fa90:	60bb      	str	r3, [r7, #8]

    if (mel_freq >= min_log_mel)
 800fa92:	ed97 7a01 	vldr	s14, [r7, #4]
 800fa96:	edd7 7a03 	vldr	s15, [r7, #12]
 800fa9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fa9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faa2:	db15      	blt.n	800fad0 <InverseMelScale+0x94>
    {
      // WARNING: Easy overflow with float32_t
      freq = min_log_hz * expf(logstep * (mel_freq - min_log_mel));
 800faa4:	ed97 7a01 	vldr	s14, [r7, #4]
 800faa8:	edd7 7a03 	vldr	s15, [r7, #12]
 800faac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fab0:	edd7 7a02 	vldr	s15, [r7, #8]
 800fab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fab8:	eeb0 0a67 	vmov.f32	s0, s15
 800fabc:	f001 f9b8 	bl	8010e30 <expf>
 800fac0:	eeb0 7a40 	vmov.f32	s14, s0
 800fac4:	edd7 7a04 	vldr	s15, [r7, #16]
 800fac8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800facc:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return freq;
 800fad0:	edd7 7a07 	vldr	s15, [r7, #28]
 800fad4:	e013      	b.n	800fafe <InverseMelScale+0xc2>
  } else {
    /* HTK Formula */
    return 700.0f * (expf(mel_freq / 1127.0f) - 1.0f);
 800fad6:	edd7 7a01 	vldr	s15, [r7, #4]
 800fada:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800fb14 <InverseMelScale+0xd8>
 800fade:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800fae2:	eeb0 0a66 	vmov.f32	s0, s13
 800fae6:	f001 f9a3 	bl	8010e30 <expf>
 800faea:	eeb0 7a40 	vmov.f32	s14, s0
 800faee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800faf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800faf6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800fb18 <InverseMelScale+0xdc>
 800fafa:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 800fafe:	eeb0 0a67 	vmov.f32	s0, s15
 800fb02:	3720      	adds	r7, #32
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}
 800fb08:	42855555 	.word	0x42855555
 800fb0c:	447a0000 	.word	0x447a0000
 800fb10:	3d8ccdbb 	.word	0x3d8ccdbb
 800fb14:	448ce000 	.word	0x448ce000
 800fb18:	442f0000 	.word	0x442f0000

0800fb1c <aiInit>:

/*
 * Init function to create and initialize a NN.
 */
int aiInit(const ai_u8* activations)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b08e      	sub	sp, #56	; 0x38
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
    ai_error err;

    /* 1 - Specific AI data structure to provide the references of the
     * activation/working memory chunk and the weights/bias parameters */
    const ai_network_params params = {
 800fb24:	4b26      	ldr	r3, [pc, #152]	; (800fbc0 <aiInit+0xa4>)
 800fb26:	60fb      	str	r3, [r7, #12]
 800fb28:	2301      	movs	r3, #1
 800fb2a:	823b      	strh	r3, [r7, #16]
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	827b      	strh	r3, [r7, #18]
 800fb30:	2301      	movs	r3, #1
 800fb32:	82bb      	strh	r3, [r7, #20]
 800fb34:	f642 4368 	movw	r3, #11368	; 0x2c68
 800fb38:	61bb      	str	r3, [r7, #24]
            AI_NETWORK_MULTITEST_DATA_WEIGHTS(ai_network_multitest_data_weights_get()),
 800fb3a:	f000 fec3 	bl	80108c4 <ai_network_multitest_data_weights_get>
 800fb3e:	4603      	mov	r3, r0
    const ai_network_params params = {
 800fb40:	61fb      	str	r3, [r7, #28]
 800fb42:	4b20      	ldr	r3, [pc, #128]	; (800fbc4 <aiInit+0xa8>)
 800fb44:	623b      	str	r3, [r7, #32]
 800fb46:	2301      	movs	r3, #1
 800fb48:	84bb      	strh	r3, [r7, #36]	; 0x24
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fb4e:	2301      	movs	r3, #1
 800fb50:	853b      	strh	r3, [r7, #40]	; 0x28
 800fb52:	4b1d      	ldr	r3, [pc, #116]	; (800fbc8 <aiInit+0xac>)
 800fb54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	633b      	str	r3, [r7, #48]	; 0x30
            AI_NETWORK_MULTITEST_DATA_ACTIVATIONS(activations)
    };

    /* 2 - Create an instance of the NN */
    err = ai_network_multitest_create(&network_multitest, AI_NETWORK_MULTITEST_DATA_CONFIG);
 800fb5a:	2100      	movs	r1, #0
 800fb5c:	481b      	ldr	r0, [pc, #108]	; (800fbcc <aiInit+0xb0>)
 800fb5e:	f000 fe4b 	bl	80107f8 <ai_network_multitest_create>
 800fb62:	4603      	mov	r3, r0
 800fb64:	637b      	str	r3, [r7, #52]	; 0x34
    if (err.type != AI_ERROR_NONE) {
 800fb66:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d002      	beq.n	800fb74 <aiInit+0x58>
	    return -1;
 800fb6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb72:	e020      	b.n	800fbb6 <aiInit+0x9a>
    }

    /* 3 - Initialize the NN - Ready to be used */
    if (!ai_network_multitest_init(network_multitest, &params)) {
 800fb74:	4b15      	ldr	r3, [pc, #84]	; (800fbcc <aiInit+0xb0>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	f107 020c 	add.w	r2, r7, #12
 800fb7c:	4611      	mov	r1, r2
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f000 fe5c 	bl	801083c <ai_network_multitest_init>
 800fb84:	4603      	mov	r3, r0
 800fb86:	f083 0301 	eor.w	r3, r3, #1
 800fb8a:	b2db      	uxtb	r3, r3
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d011      	beq.n	800fbb4 <aiInit+0x98>
        err = ai_network_multitest_get_error(network_multitest);
 800fb90:	4b0e      	ldr	r3, [pc, #56]	; (800fbcc <aiInit+0xb0>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	4618      	mov	r0, r3
 800fb96:	f000 fe23 	bl	80107e0 <ai_network_multitest_get_error>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	637b      	str	r3, [r7, #52]	; 0x34
        ai_network_multitest_destroy(network_multitest);
 800fb9e:	4b0b      	ldr	r3, [pc, #44]	; (800fbcc <aiInit+0xb0>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	4618      	mov	r0, r3
 800fba4:	f000 fe3e 	bl	8010824 <ai_network_multitest_destroy>
        network_multitest = AI_HANDLE_NULL;
 800fba8:	4b08      	ldr	r3, [pc, #32]	; (800fbcc <aiInit+0xb0>)
 800fbaa:	2200      	movs	r2, #0
 800fbac:	601a      	str	r2, [r3, #0]
	    return -2;
 800fbae:	f06f 0301 	mvn.w	r3, #1
 800fbb2:	e000      	b.n	800fbb6 <aiInit+0x9a>
    }

    return 0;
 800fbb4:	2300      	movs	r3, #0
}
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	3738      	adds	r7, #56	; 0x38
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}
 800fbbe:	bf00      	nop
 800fbc0:	40040440 	.word	0x40040440
 800fbc4:	00040440 	.word	0x00040440
 800fbc8:	00023280 	.word	0x00023280
 800fbcc:	20000980 	.word	0x20000980

0800fbd0 <aiRun>:

/*
 * Run function to execute an inference.
 */
int aiRun(const void *in_data, void *out_data)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b084      	sub	sp, #16
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	6039      	str	r1, [r7, #0]
    ai_i32 nbatch;
    ai_error err;

    /* Parameters checking */
    if (!in_data || !out_data || !network_multitest)
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d006      	beq.n	800fbee <aiRun+0x1e>
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d003      	beq.n	800fbee <aiRun+0x1e>
 800fbe6:	4b17      	ldr	r3, [pc, #92]	; (800fc44 <aiRun+0x74>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d102      	bne.n	800fbf4 <aiRun+0x24>
        return -1;
 800fbee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fbf2:	e022      	b.n	800fc3a <aiRun+0x6a>

    /* Initialize input/output buffer handlers */
    ai_input[0].n_batches = 1;
 800fbf4:	4b14      	ldr	r3, [pc, #80]	; (800fc48 <aiRun+0x78>)
 800fbf6:	2201      	movs	r2, #1
 800fbf8:	809a      	strh	r2, [r3, #4]
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 800fbfa:	4a13      	ldr	r2, [pc, #76]	; (800fc48 <aiRun+0x78>)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	6113      	str	r3, [r2, #16]
    ai_output[0].n_batches = 1;
 800fc00:	4b12      	ldr	r3, [pc, #72]	; (800fc4c <aiRun+0x7c>)
 800fc02:	2201      	movs	r2, #1
 800fc04:	809a      	strh	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 800fc06:	4a11      	ldr	r2, [pc, #68]	; (800fc4c <aiRun+0x7c>)
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	6113      	str	r3, [r2, #16]

    /* 2 - Perform the inference */
    nbatch = ai_network_multitest_run(network_multitest, &ai_input[0], &ai_output[0]);
 800fc0c:	4b0d      	ldr	r3, [pc, #52]	; (800fc44 <aiRun+0x74>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	4a0e      	ldr	r2, [pc, #56]	; (800fc4c <aiRun+0x7c>)
 800fc12:	490d      	ldr	r1, [pc, #52]	; (800fc48 <aiRun+0x78>)
 800fc14:	4618      	mov	r0, r3
 800fc16:	f000 fe44 	bl	80108a2 <ai_network_multitest_run>
 800fc1a:	60f8      	str	r0, [r7, #12]
    if (nbatch != 1) {
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	d00a      	beq.n	800fc38 <aiRun+0x68>
        err = ai_network_multitest_get_error(network_multitest);
 800fc22:	4b08      	ldr	r3, [pc, #32]	; (800fc44 <aiRun+0x74>)
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	4618      	mov	r0, r3
 800fc28:	f000 fdda 	bl	80107e0 <ai_network_multitest_get_error>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	60bb      	str	r3, [r7, #8]
        // ...
        return err.code;
 800fc30:	68bb      	ldr	r3, [r7, #8]
 800fc32:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800fc36:	e000      	b.n	800fc3a <aiRun+0x6a>
    }

    return 0;
 800fc38:	2300      	movs	r3, #0
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3710      	adds	r7, #16
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	20000980 	.word	0x20000980
 800fc48:	2000003c 	.word	0x2000003c
 800fc4c:	20000050 	.word	0x20000050

0800fc50 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	af00      	add	r7, sp, #0
    /* Activation/working buffer is allocated as a static memory chunk
     * (bss section) */
    AI_ALIGNED(4)
    static ai_u8 activations[AI_NETWORK_MULTITEST_DATA_ACTIVATIONS_SIZE];

    aiInit(activations);
 800fc54:	4802      	ldr	r0, [pc, #8]	; (800fc60 <MX_X_CUBE_AI_Init+0x10>)
 800fc56:	f7ff ff61 	bl	800fb1c <aiInit>
    /* USER CODE END 0 */
}
 800fc5a:	bf00      	nop
 800fc5c:	bd80      	pop	{r7, pc}
 800fc5e:	bf00      	nop
 800fc60:	20000984 	.word	0x20000984

0800fc64 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(ai_float *input, ai_float *output)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b084      	sub	sp, #16
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
 800fc6c:	6039      	str	r1, [r7, #0]
    /* USER CODE BEGIN 1 */
    int res;

        /* Perform the inference */
        res = aiRun(&input[0], &output[0]);
 800fc6e:	6839      	ldr	r1, [r7, #0]
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f7ff ffad 	bl	800fbd0 <aiRun>
 800fc76:	60f8      	str	r0, [r7, #12]
    /* USER CODE END 1 */
}
 800fc78:	bf00      	nop
 800fc7a:	3710      	adds	r7, #16
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}

0800fc80 <Spectro_Init>:

/*
 * @brief Initialization function of structs used with Middleware/ST/STM32_AI_AudioPreprocessing
 */
static void Spectro_Init(void)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	af00      	add	r7, sp, #0

	  // Initializing real fourier transform instance (RFFT) struct
	  arm_rfft_fast_init_f32(&rfft, n_fft);
 800fc84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800fc88:	482b      	ldr	r0, [pc, #172]	; (800fd38 <Spectro_Init+0xb8>)
 800fc8a:	f7fa fdb7 	bl	800a7fc <arm_rfft_fast_init_f32>

	  // Init Spectrogram struct
	  S.pRfft = &rfft;					         /*!< points to the real FFT instance */
 800fc8e:	4b2b      	ldr	r3, [pc, #172]	; (800fd3c <Spectro_Init+0xbc>)
 800fc90:	4a29      	ldr	r2, [pc, #164]	; (800fd38 <Spectro_Init+0xb8>)
 800fc92:	601a      	str	r2, [r3, #0]
	  S.Type = SPECTRUM_TYPE_POWER;         	 /*!< spectrum type */
 800fc94:	4b29      	ldr	r3, [pc, #164]	; (800fd3c <Spectro_Init+0xbc>)
 800fc96:	2201      	movs	r2, #1
 800fc98:	711a      	strb	r2, [r3, #4]
	  S.pWindow = (float32_t *) hannWin_2048;    /*!< points to the window function. The length must be equal to FrameLen. */
 800fc9a:	4b28      	ldr	r3, [pc, #160]	; (800fd3c <Spectro_Init+0xbc>)
 800fc9c:	4a28      	ldr	r2, [pc, #160]	; (800fd40 <Spectro_Init+0xc0>)
 800fc9e:	609a      	str	r2, [r3, #8]
	  S.SampRate = 44100;                        /*!< sampling rate of the input signal. */
 800fca0:	4b26      	ldr	r3, [pc, #152]	; (800fd3c <Spectro_Init+0xbc>)
 800fca2:	f64a 4244 	movw	r2, #44100	; 0xac44
 800fca6:	60da      	str	r2, [r3, #12]
	  S.FrameLen = buffersize;                   /*!< length of the input signal. */
 800fca8:	4b24      	ldr	r3, [pc, #144]	; (800fd3c <Spectro_Init+0xbc>)
 800fcaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fcae:	611a      	str	r2, [r3, #16]
	  S.FFTLen = n_fft;                     /*!< length of the real FFT. */
 800fcb0:	4b22      	ldr	r3, [pc, #136]	; (800fd3c <Spectro_Init+0xbc>)
 800fcb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fcb6:	615a      	str	r2, [r3, #20]
	  S.pScratch = (float32_t *) scratcher;					 /*!< point to the temporary calculation buffer of length FFTLen */
 800fcb8:	4b20      	ldr	r3, [pc, #128]	; (800fd3c <Spectro_Init+0xbc>)
 800fcba:	4a22      	ldr	r2, [pc, #136]	; (800fd44 <Spectro_Init+0xc4>)
 800fcbc:	619a      	str	r2, [r3, #24]

	  // Init Mel filter struct
	  M.pStartIndices = (uint32_t *) pMelFilterStartIndices;
 800fcbe:	4b22      	ldr	r3, [pc, #136]	; (800fd48 <Spectro_Init+0xc8>)
 800fcc0:	4a22      	ldr	r2, [pc, #136]	; (800fd4c <Spectro_Init+0xcc>)
 800fcc2:	601a      	str	r2, [r3, #0]
	  M.pStopIndices  = (uint32_t *) pMelFilterStopIndices;
 800fcc4:	4b20      	ldr	r3, [pc, #128]	; (800fd48 <Spectro_Init+0xc8>)
 800fcc6:	4a22      	ldr	r2, [pc, #136]	; (800fd50 <Spectro_Init+0xd0>)
 800fcc8:	605a      	str	r2, [r3, #4]
	  M.pCoefficients = (float32_t *) pMelFilterCoefs;
 800fcca:	4b1f      	ldr	r3, [pc, #124]	; (800fd48 <Spectro_Init+0xc8>)
 800fccc:	4a21      	ldr	r2, [pc, #132]	; (800fd54 <Spectro_Init+0xd4>)
 800fcce:	609a      	str	r2, [r3, #8]
	  M.NumMels   = 30;
 800fcd0:	4b1d      	ldr	r3, [pc, #116]	; (800fd48 <Spectro_Init+0xc8>)
 800fcd2:	221e      	movs	r2, #30
 800fcd4:	611a      	str	r2, [r3, #16]
	  M.FFTLen    = n_fft;
 800fcd6:	4b1c      	ldr	r3, [pc, #112]	; (800fd48 <Spectro_Init+0xc8>)
 800fcd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fcdc:	615a      	str	r2, [r3, #20]
	  M.SampRate  = 44100;
 800fcde:	4b1a      	ldr	r3, [pc, #104]	; (800fd48 <Spectro_Init+0xc8>)
 800fce0:	f64a 4244 	movw	r2, #44100	; 0xac44
 800fce4:	619a      	str	r2, [r3, #24]
	  M.FMin      = 0.0;
 800fce6:	4b18      	ldr	r3, [pc, #96]	; (800fd48 <Spectro_Init+0xc8>)
 800fce8:	f04f 0200 	mov.w	r2, #0
 800fcec:	61da      	str	r2, [r3, #28]
	  M.FMax      = 20000.0;
 800fcee:	4b16      	ldr	r3, [pc, #88]	; (800fd48 <Spectro_Init+0xc8>)
 800fcf0:	4a19      	ldr	r2, [pc, #100]	; (800fd58 <Spectro_Init+0xd8>)
 800fcf2:	621a      	str	r2, [r3, #32]
	  M.Formula   = MEL_SLANEY;
 800fcf4:	4b14      	ldr	r3, [pc, #80]	; (800fd48 <Spectro_Init+0xc8>)
 800fcf6:	2201      	movs	r2, #1
 800fcf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  M.Normalize = 1;
 800fcfc:	4b12      	ldr	r3, [pc, #72]	; (800fd48 <Spectro_Init+0xc8>)
 800fcfe:	2201      	movs	r2, #1
 800fd00:	629a      	str	r2, [r3, #40]	; 0x28
	  M.Mel2F     = 0;
 800fd02:	4b11      	ldr	r3, [pc, #68]	; (800fd48 <Spectro_Init+0xc8>)
 800fd04:	2200      	movs	r2, #0
 800fd06:	62da      	str	r2, [r3, #44]	; 0x2c
	  MelFilterbank_Init(&M);
 800fd08:	480f      	ldr	r0, [pc, #60]	; (800fd48 <Spectro_Init+0xc8>)
 800fd0a:	f7ff fc30 	bl	800f56e <MelFilterbank_Init>

	  // Init Mel Spectrogram struct
	  Mel.SpectrogramConf = &S;
 800fd0e:	4b13      	ldr	r3, [pc, #76]	; (800fd5c <Spectro_Init+0xdc>)
 800fd10:	4a0a      	ldr	r2, [pc, #40]	; (800fd3c <Spectro_Init+0xbc>)
 800fd12:	601a      	str	r2, [r3, #0]
	  Mel.MelFilter = &M;
 800fd14:	4b11      	ldr	r3, [pc, #68]	; (800fd5c <Spectro_Init+0xdc>)
 800fd16:	4a0c      	ldr	r2, [pc, #48]	; (800fd48 <Spectro_Init+0xc8>)
 800fd18:	605a      	str	r2, [r3, #4]

	  // Init LogMel Spectrogram struct
	  LogMel.MelSpectrogramConf = &Mel;
 800fd1a:	4b11      	ldr	r3, [pc, #68]	; (800fd60 <Spectro_Init+0xe0>)
 800fd1c:	4a0f      	ldr	r2, [pc, #60]	; (800fd5c <Spectro_Init+0xdc>)
 800fd1e:	601a      	str	r2, [r3, #0]
	  LogMel.LogFormula = LOGMELSPECTROGRAM_SCALE_DB;
 800fd20:	4b0f      	ldr	r3, [pc, #60]	; (800fd60 <Spectro_Init+0xe0>)
 800fd22:	2200      	movs	r2, #0
 800fd24:	711a      	strb	r2, [r3, #4]
	  LogMel.Ref = 1.0;
 800fd26:	4b0e      	ldr	r3, [pc, #56]	; (800fd60 <Spectro_Init+0xe0>)
 800fd28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800fd2c:	609a      	str	r2, [r3, #8]
	  LogMel.TopdB = 80.0;
 800fd2e:	4b0c      	ldr	r3, [pc, #48]	; (800fd60 <Spectro_Init+0xe0>)
 800fd30:	4a0c      	ldr	r2, [pc, #48]	; (800fd64 <Spectro_Init+0xe4>)
 800fd32:	60da      	str	r2, [r3, #12]
}
 800fd34:	bf00      	nop
 800fd36:	bd80      	pop	{r7, pc}
 800fd38:	20026fa8 	.word	0x20026fa8
 800fd3c:	20026fc0 	.word	0x20026fc0
 800fd40:	0802576c 	.word	0x0802576c
 800fd44:	2002cf40 	.word	0x2002cf40
 800fd48:	20026fdc 	.word	0x20026fdc
 800fd4c:	20027024 	.word	0x20027024
 800fd50:	2002709c 	.word	0x2002709c
 800fd54:	20027114 	.word	0x20027114
 800fd58:	469c4000 	.word	0x469c4000
 800fd5c:	2002700c 	.word	0x2002700c
 800fd60:	20027014 	.word	0x20027014
 800fd64:	42a00000 	.word	0x42a00000

0800fd68 <Spectrogram_Run>:
 * @brief Audio preprocessing function for creating LogMelSpectrograms
 * @param 	*input		points to audio input
 * @return 	None
 */
void Spectrogram_Run(float32_t *input)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b084      	sub	sp, #16
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]

	// Create spectrogram column
	LogMelSpectrogramColumn(&LogMel, input, (float32_t *) output);
 800fd70:	4a4f      	ldr	r2, [pc, #316]	; (800feb0 <Spectrogram_Run+0x148>)
 800fd72:	6879      	ldr	r1, [r7, #4]
 800fd74:	484f      	ldr	r0, [pc, #316]	; (800feb4 <Spectrogram_Run+0x14c>)
 800fd76:	f7ff fb2f 	bl	800f3d8 <LogMelSpectrogramColumn>

	// Reshape column
	for (uint32_t i = 0; i < nmels; i++) {
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	60fb      	str	r3, [r7, #12]
 800fd7e:	e014      	b.n	800fdaa <Spectrogram_Run+0x42>
	  aSpectrogram[i * 30 + columncounter] = output[i];
 800fd80:	68fa      	ldr	r2, [r7, #12]
 800fd82:	4613      	mov	r3, r2
 800fd84:	011b      	lsls	r3, r3, #4
 800fd86:	1a9b      	subs	r3, r3, r2
 800fd88:	005b      	lsls	r3, r3, #1
 800fd8a:	461a      	mov	r2, r3
 800fd8c:	4b4a      	ldr	r3, [pc, #296]	; (800feb8 <Spectrogram_Run+0x150>)
 800fd8e:	781b      	ldrb	r3, [r3, #0]
 800fd90:	4413      	add	r3, r2
 800fd92:	4947      	ldr	r1, [pc, #284]	; (800feb0 <Spectrogram_Run+0x148>)
 800fd94:	68fa      	ldr	r2, [r7, #12]
 800fd96:	0092      	lsls	r2, r2, #2
 800fd98:	440a      	add	r2, r1
 800fd9a:	6812      	ldr	r2, [r2, #0]
 800fd9c:	4947      	ldr	r1, [pc, #284]	; (800febc <Spectrogram_Run+0x154>)
 800fd9e:	009b      	lsls	r3, r3, #2
 800fda0:	440b      	add	r3, r1
 800fda2:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < nmels; i++) {
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	3301      	adds	r3, #1
 800fda8:	60fb      	str	r3, [r7, #12]
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	2b1d      	cmp	r3, #29
 800fdae:	d9e7      	bls.n	800fd80 <Spectrogram_Run+0x18>
	}
	columncounter++;
 800fdb0:	4b41      	ldr	r3, [pc, #260]	; (800feb8 <Spectrogram_Run+0x150>)
 800fdb2:	781b      	ldrb	r3, [r3, #0]
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	b2da      	uxtb	r2, r3
 800fdb8:	4b3f      	ldr	r3, [pc, #252]	; (800feb8 <Spectrogram_Run+0x150>)
 800fdba:	701a      	strb	r2, [r3, #0]

//	 When full: Implement AI inference
	if (columncounter == 30)
 800fdbc:	4b3e      	ldr	r3, [pc, #248]	; (800feb8 <Spectrogram_Run+0x150>)
 800fdbe:	781b      	ldrb	r3, [r3, #0]
 800fdc0:	2b1e      	cmp	r3, #30
 800fdc2:	d170      	bne.n	800fea6 <Spectrogram_Run+0x13e>
	{
		columncounter = 0;
 800fdc4:	4b3c      	ldr	r3, [pc, #240]	; (800feb8 <Spectrogram_Run+0x150>)
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	701a      	strb	r2, [r3, #0]
		AmpConverter((float32_t *) aSpectrogram);
 800fdca:	483c      	ldr	r0, [pc, #240]	; (800febc <Spectrogram_Run+0x154>)
 800fdcc:	f000 f890 	bl	800fef0 <AmpConverter>
		MX_X_CUBE_AI_Process((ai_float*)spectrogram, (ai_float*)dense_out);  // Calling function MX_X_CUBE_AI_Process(ai_float *input, ai_float *output)
 800fdd0:	493b      	ldr	r1, [pc, #236]	; (800fec0 <Spectrogram_Run+0x158>)
 800fdd2:	483c      	ldr	r0, [pc, #240]	; (800fec4 <Spectrogram_Run+0x15c>)
 800fdd4:	f7ff ff46 	bl	800fc64 <MX_X_CUBE_AI_Process>
		nncheck = 1;
 800fdd8:	4b3b      	ldr	r3, [pc, #236]	; (800fec8 <Spectrogram_Run+0x160>)
 800fdda:	2201      	movs	r2, #1
 800fddc:	701a      	strb	r2, [r3, #0]

		if (dense_out[0] > 0.5)
 800fdde:	4b38      	ldr	r3, [pc, #224]	; (800fec0 <Spectrogram_Run+0x158>)
 800fde0:	edd3 7a00 	vldr	s15, [r3]
 800fde4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800fde8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fdec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdf0:	dd0d      	ble.n	800fe0e <Spectrogram_Run+0xa6>
		{
			icketuta += 1;
 800fdf2:	4b36      	ldr	r3, [pc, #216]	; (800fecc <Spectrogram_Run+0x164>)
 800fdf4:	881b      	ldrh	r3, [r3, #0]
 800fdf6:	3301      	adds	r3, #1
 800fdf8:	b29a      	uxth	r2, r3
 800fdfa:	4b34      	ldr	r3, [pc, #208]	; (800fecc <Spectrogram_Run+0x164>)
 800fdfc:	801a      	strh	r2, [r3, #0]
			memcpy(a,"0",1);
 800fdfe:	4b34      	ldr	r3, [pc, #208]	; (800fed0 <Spectrogram_Run+0x168>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	2201      	movs	r2, #1
 800fe04:	4933      	ldr	r1, [pc, #204]	; (800fed4 <Spectrogram_Run+0x16c>)
 800fe06:	4618      	mov	r0, r3
 800fe08:	f000 ffad 	bl	8010d66 <memcpy>
 800fe0c:	e046      	b.n	800fe9c <Spectrogram_Run+0x134>
		} else if (dense_out[1] > 0.5)
 800fe0e:	4b2c      	ldr	r3, [pc, #176]	; (800fec0 <Spectrogram_Run+0x158>)
 800fe10:	edd3 7a01 	vldr	s15, [r3, #4]
 800fe14:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800fe18:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fe1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe20:	dd0d      	ble.n	800fe3e <Spectrogram_Run+0xd6>
		{
 			yaris += 1;
 800fe22:	4b2d      	ldr	r3, [pc, #180]	; (800fed8 <Spectrogram_Run+0x170>)
 800fe24:	881b      	ldrh	r3, [r3, #0]
 800fe26:	3301      	adds	r3, #1
 800fe28:	b29a      	uxth	r2, r3
 800fe2a:	4b2b      	ldr	r3, [pc, #172]	; (800fed8 <Spectrogram_Run+0x170>)
 800fe2c:	801a      	strh	r2, [r3, #0]
 			memcpy(a,"1",1);
 800fe2e:	4b28      	ldr	r3, [pc, #160]	; (800fed0 <Spectrogram_Run+0x168>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	2201      	movs	r2, #1
 800fe34:	4929      	ldr	r1, [pc, #164]	; (800fedc <Spectrogram_Run+0x174>)
 800fe36:	4618      	mov	r0, r3
 800fe38:	f000 ff95 	bl	8010d66 <memcpy>
 800fe3c:	e02e      	b.n	800fe9c <Spectrogram_Run+0x134>
		} else if (dense_out[2] > 0.5)
 800fe3e:	4b20      	ldr	r3, [pc, #128]	; (800fec0 <Spectrogram_Run+0x158>)
 800fe40:	edd3 7a02 	vldr	s15, [r3, #8]
 800fe44:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800fe48:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fe4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe50:	dd0d      	ble.n	800fe6e <Spectrogram_Run+0x106>
		{
			pling += 1;
 800fe52:	4b23      	ldr	r3, [pc, #140]	; (800fee0 <Spectrogram_Run+0x178>)
 800fe54:	881b      	ldrh	r3, [r3, #0]
 800fe56:	3301      	adds	r3, #1
 800fe58:	b29a      	uxth	r2, r3
 800fe5a:	4b21      	ldr	r3, [pc, #132]	; (800fee0 <Spectrogram_Run+0x178>)
 800fe5c:	801a      	strh	r2, [r3, #0]
			memcpy(a,"2",1);
 800fe5e:	4b1c      	ldr	r3, [pc, #112]	; (800fed0 <Spectrogram_Run+0x168>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	2201      	movs	r2, #1
 800fe64:	491f      	ldr	r1, [pc, #124]	; (800fee4 <Spectrogram_Run+0x17c>)
 800fe66:	4618      	mov	r0, r3
 800fe68:	f000 ff7d 	bl	8010d66 <memcpy>
 800fe6c:	e016      	b.n	800fe9c <Spectrogram_Run+0x134>
		} else if (dense_out[3] > 0.5)
 800fe6e:	4b14      	ldr	r3, [pc, #80]	; (800fec0 <Spectrogram_Run+0x158>)
 800fe70:	edd3 7a03 	vldr	s15, [r3, #12]
 800fe74:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800fe78:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fe7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe80:	dd0c      	ble.n	800fe9c <Spectrogram_Run+0x134>
		{
			tuta += 1;
 800fe82:	4b19      	ldr	r3, [pc, #100]	; (800fee8 <Spectrogram_Run+0x180>)
 800fe84:	881b      	ldrh	r3, [r3, #0]
 800fe86:	3301      	adds	r3, #1
 800fe88:	b29a      	uxth	r2, r3
 800fe8a:	4b17      	ldr	r3, [pc, #92]	; (800fee8 <Spectrogram_Run+0x180>)
 800fe8c:	801a      	strh	r2, [r3, #0]
			memcpy(a,"3",1);
 800fe8e:	4b10      	ldr	r3, [pc, #64]	; (800fed0 <Spectrogram_Run+0x168>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	2201      	movs	r2, #1
 800fe94:	4915      	ldr	r1, [pc, #84]	; (800feec <Spectrogram_Run+0x184>)
 800fe96:	4618      	mov	r0, r3
 800fe98:	f000 ff65 	bl	8010d66 <memcpy>
		}

		a++;
 800fe9c:	4b0c      	ldr	r3, [pc, #48]	; (800fed0 <Spectrogram_Run+0x168>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	3301      	adds	r3, #1
 800fea2:	4a0b      	ldr	r2, [pc, #44]	; (800fed0 <Spectrogram_Run+0x168>)
 800fea4:	6013      	str	r3, [r2, #0]
	}
}
 800fea6:	bf00      	nop
 800fea8:	3710      	adds	r7, #16
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	2002ce60 	.word	0x2002ce60
 800feb4:	20027014 	.word	0x20027014
 800feb8:	20023c04 	.word	0x20023c04
 800febc:	20023c08 	.word	0x20023c08
 800fec0:	20025828 	.word	0x20025828
 800fec4:	20024a18 	.word	0x20024a18
 800fec8:	2002efa8 	.word	0x2002efa8
 800fecc:	2002ced8 	.word	0x2002ced8
 800fed0:	20000064 	.word	0x20000064
 800fed4:	0801225c 	.word	0x0801225c
 800fed8:	2002ef42 	.word	0x2002ef42
 800fedc:	08012260 	.word	0x08012260
 800fee0:	2002ef40 	.word	0x2002ef40
 800fee4:	08012264 	.word	0x08012264
 800fee8:	2002ef44 	.word	0x2002ef44
 800feec:	08012268 	.word	0x08012268

0800fef0 <AmpConverter>:
 * @param 	*input		points vector with LogMelSpectrogram values
 * @return 	None
 */

static void AmpConverter(float32_t *input)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
 800fef6:	b082      	sub	sp, #8
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	4b84      	ldr	r3, [pc, #528]	; (801010c <AmpConverter+0x21c>)
 800fefc:	f241 0288 	movw	r2, #4232	; 0x1088
 800ff00:	443a      	add	r2, r7
 800ff02:	4413      	add	r3, r2
 800ff04:	6018      	str	r0, [r3, #0]
	float32_t min, max;
	uint32_t index;
	float32_t processed_vector[900];
	float32_t meanval[150] = {0};
 800ff06:	4b82      	ldr	r3, [pc, #520]	; (8010110 <AmpConverter+0x220>)
 800ff08:	f241 0288 	movw	r2, #4232	; 0x1088
 800ff0c:	443a      	add	r2, r7
 800ff0e:	4413      	add	r3, r2
 800ff10:	4618      	mov	r0, r3
 800ff12:	f44f 7316 	mov.w	r3, #600	; 0x258
 800ff16:	461a      	mov	r2, r3
 800ff18:	2100      	movs	r1, #0
 800ff1a:	f000 ff2f 	bl	8010d7c <memset>

	arm_max_f32(input,900,&max,&index);
 800ff1e:	f241 0374 	movw	r3, #4212	; 0x1074
 800ff22:	443b      	add	r3, r7
 800ff24:	f241 0278 	movw	r2, #4216	; 0x1078
 800ff28:	443a      	add	r2, r7
 800ff2a:	4878      	ldr	r0, [pc, #480]	; (801010c <AmpConverter+0x21c>)
 800ff2c:	f241 0188 	movw	r1, #4232	; 0x1088
 800ff30:	4439      	add	r1, r7
 800ff32:	4408      	add	r0, r1
 800ff34:	f44f 7161 	mov.w	r1, #900	; 0x384
 800ff38:	6800      	ldr	r0, [r0, #0]
 800ff3a:	f7f8 f890 	bl	800805e <arm_max_f32>
	max = -max;
 800ff3e:	f241 0378 	movw	r3, #4216	; 0x1078
 800ff42:	443b      	add	r3, r7
 800ff44:	edd3 7a00 	vldr	s15, [r3]
 800ff48:	eef1 7a67 	vneg.f32	s15, s15
 800ff4c:	f241 0378 	movw	r3, #4216	; 0x1078
 800ff50:	443b      	add	r3, r7
 800ff52:	edc3 7a00 	vstr	s15, [r3]
	arm_offset_f32(input,max,(float32_t *) processed_vector,900);
 800ff56:	f241 0378 	movw	r3, #4216	; 0x1078
 800ff5a:	443b      	add	r3, r7
 800ff5c:	edd3 7a00 	vldr	s15, [r3]
 800ff60:	f507 7119 	add.w	r1, r7, #612	; 0x264
 800ff64:	4b69      	ldr	r3, [pc, #420]	; (801010c <AmpConverter+0x21c>)
 800ff66:	f241 0288 	movw	r2, #4232	; 0x1088
 800ff6a:	443a      	add	r2, r7
 800ff6c:	4413      	add	r3, r2
 800ff6e:	f44f 7261 	mov.w	r2, #900	; 0x384
 800ff72:	eeb0 0a67 	vmov.f32	s0, s15
 800ff76:	6818      	ldr	r0, [r3, #0]
 800ff78:	f7f7 fea9 	bl	8007cce <arm_offset_f32>
	arm_min_f32((float32_t *) processed_vector,900,&min,&index);
 800ff7c:	f241 0374 	movw	r3, #4212	; 0x1074
 800ff80:	443b      	add	r3, r7
 800ff82:	f241 027c 	movw	r2, #4220	; 0x107c
 800ff86:	443a      	add	r2, r7
 800ff88:	f507 7019 	add.w	r0, r7, #612	; 0x264
 800ff8c:	f44f 7161 	mov.w	r1, #900	; 0x384
 800ff90:	f7f8 f8fb 	bl	800818a <arm_min_f32>
	float32_t scale = 1/min;
 800ff94:	f241 037c 	movw	r3, #4220	; 0x107c
 800ff98:	443b      	add	r3, r7
 800ff9a:	ed93 7a00 	vldr	s14, [r3]
 800ff9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ffa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ffa6:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800ffaa:	edc3 7a00 	vstr	s15, [r3]
	arm_scale_f32((float32_t *) processed_vector,scale,input,900);
 800ffae:	4b57      	ldr	r3, [pc, #348]	; (801010c <AmpConverter+0x21c>)
 800ffb0:	f241 0288 	movw	r2, #4232	; 0x1088
 800ffb4:	443a      	add	r2, r7
 800ffb6:	4413      	add	r3, r2
 800ffb8:	f507 7019 	add.w	r0, r7, #612	; 0x264
 800ffbc:	f44f 7261 	mov.w	r2, #900	; 0x384
 800ffc0:	6819      	ldr	r1, [r3, #0]
 800ffc2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800ffc6:	ed93 0a00 	vldr	s0, [r3]
 800ffca:	f7f7 fef2 	bl	8007db2 <arm_scale_f32>

	for (uint16_t t = 0; t < 150; t++)
 800ffce:	2300      	movs	r3, #0
 800ffd0:	f241 0286 	movw	r2, #4230	; 0x1086
 800ffd4:	443a      	add	r2, r7
 800ffd6:	8013      	strh	r3, [r2, #0]
 800ffd8:	e08a      	b.n	80100f0 <AmpConverter+0x200>
	{
		for (uint8_t a = 0; a < 6; a++)
 800ffda:	2300      	movs	r3, #0
 800ffdc:	f241 0285 	movw	r2, #4229	; 0x1085
 800ffe0:	443a      	add	r2, r7
 800ffe2:	7013      	strb	r3, [r2, #0]
 800ffe4:	e03c      	b.n	8010060 <AmpConverter+0x170>
		{
			meanval[t] += input[t*6 + a];
 800ffe6:	f241 0386 	movw	r3, #4230	; 0x1086
 800ffea:	443b      	add	r3, r7
 800ffec:	881a      	ldrh	r2, [r3, #0]
 800ffee:	4b48      	ldr	r3, [pc, #288]	; (8010110 <AmpConverter+0x220>)
 800fff0:	f241 0188 	movw	r1, #4232	; 0x1088
 800fff4:	4439      	add	r1, r7
 800fff6:	440b      	add	r3, r1
 800fff8:	0092      	lsls	r2, r2, #2
 800fffa:	4413      	add	r3, r2
 800fffc:	ed93 7a00 	vldr	s14, [r3]
 8010000:	f241 0386 	movw	r3, #4230	; 0x1086
 8010004:	443b      	add	r3, r7
 8010006:	881a      	ldrh	r2, [r3, #0]
 8010008:	4613      	mov	r3, r2
 801000a:	005b      	lsls	r3, r3, #1
 801000c:	4413      	add	r3, r2
 801000e:	005b      	lsls	r3, r3, #1
 8010010:	461a      	mov	r2, r3
 8010012:	f241 0385 	movw	r3, #4229	; 0x1085
 8010016:	443b      	add	r3, r7
 8010018:	781b      	ldrb	r3, [r3, #0]
 801001a:	4413      	add	r3, r2
 801001c:	009a      	lsls	r2, r3, #2
 801001e:	4b3b      	ldr	r3, [pc, #236]	; (801010c <AmpConverter+0x21c>)
 8010020:	f241 0188 	movw	r1, #4232	; 0x1088
 8010024:	4439      	add	r1, r7
 8010026:	440b      	add	r3, r1
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	4413      	add	r3, r2
 801002c:	edd3 7a00 	vldr	s15, [r3]
 8010030:	f241 0386 	movw	r3, #4230	; 0x1086
 8010034:	443b      	add	r3, r7
 8010036:	881a      	ldrh	r2, [r3, #0]
 8010038:	ee77 7a27 	vadd.f32	s15, s14, s15
 801003c:	4b34      	ldr	r3, [pc, #208]	; (8010110 <AmpConverter+0x220>)
 801003e:	f241 0188 	movw	r1, #4232	; 0x1088
 8010042:	4439      	add	r1, r7
 8010044:	440b      	add	r3, r1
 8010046:	0092      	lsls	r2, r2, #2
 8010048:	4413      	add	r3, r2
 801004a:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t a = 0; a < 6; a++)
 801004e:	f241 0385 	movw	r3, #4229	; 0x1085
 8010052:	443b      	add	r3, r7
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	3301      	adds	r3, #1
 8010058:	f241 0285 	movw	r2, #4229	; 0x1085
 801005c:	443a      	add	r2, r7
 801005e:	7013      	strb	r3, [r2, #0]
 8010060:	f241 0385 	movw	r3, #4229	; 0x1085
 8010064:	443b      	add	r3, r7
 8010066:	781b      	ldrb	r3, [r3, #0]
 8010068:	2b05      	cmp	r3, #5
 801006a:	d9bc      	bls.n	800ffe6 <AmpConverter+0xf6>
		}

		for (uint8_t a = 0; a < 6; a++)
 801006c:	2300      	movs	r3, #0
 801006e:	f241 0284 	movw	r2, #4228	; 0x1084
 8010072:	443a      	add	r2, r7
 8010074:	7013      	strb	r3, [r2, #0]
 8010076:	e02c      	b.n	80100d2 <AmpConverter+0x1e2>
		{
			spectrogram[t*6 + a] = meanval[t]/6;
 8010078:	f241 0386 	movw	r3, #4230	; 0x1086
 801007c:	443b      	add	r3, r7
 801007e:	881a      	ldrh	r2, [r3, #0]
 8010080:	4b23      	ldr	r3, [pc, #140]	; (8010110 <AmpConverter+0x220>)
 8010082:	f241 0188 	movw	r1, #4232	; 0x1088
 8010086:	4439      	add	r1, r7
 8010088:	440b      	add	r3, r1
 801008a:	0092      	lsls	r2, r2, #2
 801008c:	4413      	add	r3, r2
 801008e:	ed93 7a00 	vldr	s14, [r3]
 8010092:	f241 0386 	movw	r3, #4230	; 0x1086
 8010096:	443b      	add	r3, r7
 8010098:	881a      	ldrh	r2, [r3, #0]
 801009a:	4613      	mov	r3, r2
 801009c:	005b      	lsls	r3, r3, #1
 801009e:	4413      	add	r3, r2
 80100a0:	005b      	lsls	r3, r3, #1
 80100a2:	461a      	mov	r2, r3
 80100a4:	f241 0384 	movw	r3, #4228	; 0x1084
 80100a8:	443b      	add	r3, r7
 80100aa:	781b      	ldrb	r3, [r3, #0]
 80100ac:	4413      	add	r3, r2
 80100ae:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80100b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80100b6:	4a17      	ldr	r2, [pc, #92]	; (8010114 <AmpConverter+0x224>)
 80100b8:	009b      	lsls	r3, r3, #2
 80100ba:	4413      	add	r3, r2
 80100bc:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t a = 0; a < 6; a++)
 80100c0:	f241 0384 	movw	r3, #4228	; 0x1084
 80100c4:	443b      	add	r3, r7
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	3301      	adds	r3, #1
 80100ca:	f241 0284 	movw	r2, #4228	; 0x1084
 80100ce:	443a      	add	r2, r7
 80100d0:	7013      	strb	r3, [r2, #0]
 80100d2:	f241 0384 	movw	r3, #4228	; 0x1084
 80100d6:	443b      	add	r3, r7
 80100d8:	781b      	ldrb	r3, [r3, #0]
 80100da:	2b05      	cmp	r3, #5
 80100dc:	d9cc      	bls.n	8010078 <AmpConverter+0x188>
	for (uint16_t t = 0; t < 150; t++)
 80100de:	f241 0386 	movw	r3, #4230	; 0x1086
 80100e2:	443b      	add	r3, r7
 80100e4:	881b      	ldrh	r3, [r3, #0]
 80100e6:	3301      	adds	r3, #1
 80100e8:	f241 0286 	movw	r2, #4230	; 0x1086
 80100ec:	443a      	add	r2, r7
 80100ee:	8013      	strh	r3, [r2, #0]
 80100f0:	f241 0386 	movw	r3, #4230	; 0x1086
 80100f4:	443b      	add	r3, r7
 80100f6:	881b      	ldrh	r3, [r3, #0]
 80100f8:	2b95      	cmp	r3, #149	; 0x95
 80100fa:	f67f af6e 	bls.w	800ffda <AmpConverter+0xea>
		}
	}
}
 80100fe:	bf00      	nop
 8010100:	f507 5784 	add.w	r7, r7, #4224	; 0x1080
 8010104:	3708      	adds	r7, #8
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}
 801010a:	bf00      	nop
 801010c:	ffffef7c 	.word	0xffffef7c
 8010110:	ffffef84 	.word	0xffffef84
 8010114:	20024a18 	.word	0x20024a18

08010118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b082      	sub	sp, #8
 801011c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801011e:	f7fa fc43 	bl	800a9a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010122:	f000 f84f 	bl	80101c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010126:	f000 fa27 	bl	8010578 <MX_GPIO_Init>
  MX_DMA_Init();
 801012a:	f000 fa07 	bl	801053c <MX_DMA_Init>
  MX_CRC_Init();
 801012e:	f000 f8e9 	bl	8010304 <MX_CRC_Init>
  MX_SAI2_Init();
 8010132:	f000 f909 	bl	8010348 <MX_SAI2_Init>
  MX_TIM3_Init();
 8010136:	f000 f961 	bl	80103fc <MX_TIM3_Init>
  MX_UART7_Init();
 801013a:	f000 f9cf 	bl	80104dc <MX_UART7_Init>
  MX_X_CUBE_AI_Init();
 801013e:	f7ff fd87 	bl	800fc50 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */

  // Initialize audio input with BSP
  BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, 44100, 16, 1);
 8010142:	2301      	movs	r3, #1
 8010144:	2210      	movs	r2, #16
 8010146:	f64a 4144 	movw	r1, #44100	; 0xac44
 801014a:	f44f 7000 	mov.w	r0, #512	; 0x200
 801014e:	f7f7 fa93 	bl	8007678 <BSP_AUDIO_IN_InitEx>
  BSP_AUDIO_IN_Record(pInput, buffersize);
 8010152:	4b17      	ldr	r3, [pc, #92]	; (80101b0 <main+0x98>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801015a:	4618      	mov	r0, r3
 801015c:	f7f7 faf8 	bl	8007750 <BSP_AUDIO_IN_Record>

  // Initializing spectrogram
  Spectro_Init();
 8010160:	f7ff fd8e 	bl	800fc80 <Spectro_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		 // Copy input memory to processing buffer
	  memcpy(&processbuffer[0],&input[0],buffersize);
 8010164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010168:	4912      	ldr	r1, [pc, #72]	; (80101b4 <main+0x9c>)
 801016a:	4813      	ldr	r0, [pc, #76]	; (80101b8 <main+0xa0>)
 801016c:	f000 fdfb 	bl	8010d66 <memcpy>

	 // Convert uint16_t to float32 for use with CMSIS
	  for (uint16_t c = 0; c < buffersize; c++)
 8010170:	2300      	movs	r3, #0
 8010172:	80fb      	strh	r3, [r7, #6]
 8010174:	e010      	b.n	8010198 <main+0x80>
	  {
		  fftbuf[c] = (float32_t)processbuffer[c];
 8010176:	88fb      	ldrh	r3, [r7, #6]
 8010178:	4a0f      	ldr	r2, [pc, #60]	; (80101b8 <main+0xa0>)
 801017a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801017e:	88fb      	ldrh	r3, [r7, #6]
 8010180:	ee07 2a90 	vmov	s15, r2
 8010184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010188:	4a0c      	ldr	r2, [pc, #48]	; (80101bc <main+0xa4>)
 801018a:	009b      	lsls	r3, r3, #2
 801018c:	4413      	add	r3, r2
 801018e:	edc3 7a00 	vstr	s15, [r3]
	  for (uint16_t c = 0; c < buffersize; c++)
 8010192:	88fb      	ldrh	r3, [r7, #6]
 8010194:	3301      	adds	r3, #1
 8010196:	80fb      	strh	r3, [r7, #6]
 8010198:	88fb      	ldrh	r3, [r7, #6]
 801019a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801019e:	d3ea      	bcc.n	8010176 <main+0x5e>
	  }

	  Spectrogram_Run((float32_t *) fftbuf);
 80101a0:	4806      	ldr	r0, [pc, #24]	; (80101bc <main+0xa4>)
 80101a2:	f7ff fde1 	bl	800fd68 <Spectrogram_Run>
	  check = 1;
 80101a6:	4b06      	ldr	r3, [pc, #24]	; (80101c0 <main+0xa8>)
 80101a8:	2201      	movs	r2, #1
 80101aa:	701a      	strb	r2, [r3, #0]
	  memcpy(&processbuffer[0],&input[0],buffersize);
 80101ac:	e7da      	b.n	8010164 <main+0x4c>
 80101ae:	bf00      	nop
 80101b0:	20000068 	.word	0x20000068
 80101b4:	20028c7c 	.word	0x20028c7c
 80101b8:	20029c7c 	.word	0x20029c7c
 80101bc:	2002ac7c 	.word	0x2002ac7c
 80101c0:	2002cc7c 	.word	0x2002cc7c

080101c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b0b4      	sub	sp, #208	; 0xd0
 80101c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80101ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80101ce:	2230      	movs	r2, #48	; 0x30
 80101d0:	2100      	movs	r1, #0
 80101d2:	4618      	mov	r0, r3
 80101d4:	f000 fdd2 	bl	8010d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80101d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80101dc:	2200      	movs	r2, #0
 80101de:	601a      	str	r2, [r3, #0]
 80101e0:	605a      	str	r2, [r3, #4]
 80101e2:	609a      	str	r2, [r3, #8]
 80101e4:	60da      	str	r2, [r3, #12]
 80101e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80101e8:	f107 0308 	add.w	r3, r7, #8
 80101ec:	2284      	movs	r2, #132	; 0x84
 80101ee:	2100      	movs	r1, #0
 80101f0:	4618      	mov	r0, r3
 80101f2:	f000 fdc3 	bl	8010d7c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80101f6:	4b40      	ldr	r3, [pc, #256]	; (80102f8 <SystemClock_Config+0x134>)
 80101f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101fa:	4a3f      	ldr	r2, [pc, #252]	; (80102f8 <SystemClock_Config+0x134>)
 80101fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010200:	6413      	str	r3, [r2, #64]	; 0x40
 8010202:	4b3d      	ldr	r3, [pc, #244]	; (80102f8 <SystemClock_Config+0x134>)
 8010204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801020a:	607b      	str	r3, [r7, #4]
 801020c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801020e:	4b3b      	ldr	r3, [pc, #236]	; (80102fc <SystemClock_Config+0x138>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	4a3a      	ldr	r2, [pc, #232]	; (80102fc <SystemClock_Config+0x138>)
 8010214:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010218:	6013      	str	r3, [r2, #0]
 801021a:	4b38      	ldr	r3, [pc, #224]	; (80102fc <SystemClock_Config+0x138>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010222:	603b      	str	r3, [r7, #0]
 8010224:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8010226:	2302      	movs	r3, #2
 8010228:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801022c:	2301      	movs	r3, #1
 801022e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8010232:	2310      	movs	r3, #16
 8010234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010238:	2302      	movs	r3, #2
 801023a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 801023e:	2300      	movs	r3, #0
 8010240:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8010244:	2308      	movs	r3, #8
 8010246:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 801024a:	23d8      	movs	r3, #216	; 0xd8
 801024c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8010250:	2302      	movs	r3, #2
 8010252:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8010256:	2302      	movs	r3, #2
 8010258:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801025c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010260:	4618      	mov	r0, r3
 8010262:	f7fc fa21 	bl	800c6a8 <HAL_RCC_OscConfig>
 8010266:	4603      	mov	r3, r0
 8010268:	2b00      	cmp	r3, #0
 801026a:	d001      	beq.n	8010270 <SystemClock_Config+0xac>
  {
    Error_Handler();
 801026c:	f000 f9b4 	bl	80105d8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8010270:	f7fc f9ca 	bl	800c608 <HAL_PWREx_EnableOverDrive>
 8010274:	4603      	mov	r3, r0
 8010276:	2b00      	cmp	r3, #0
 8010278:	d001      	beq.n	801027e <SystemClock_Config+0xba>
  {
    Error_Handler();
 801027a:	f000 f9ad 	bl	80105d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801027e:	230f      	movs	r3, #15
 8010280:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010284:	2302      	movs	r3, #2
 8010286:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801028a:	2300      	movs	r3, #0
 801028c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8010290:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8010294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8010298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801029c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80102a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80102a4:	2107      	movs	r1, #7
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7fc fc6e 	bl	800cb88 <HAL_RCC_ClockConfig>
 80102ac:	4603      	mov	r3, r0
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d001      	beq.n	80102b6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80102b2:	f000 f991 	bl	80105d8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_SAI2;
 80102b6:	4b12      	ldr	r3, [pc, #72]	; (8010300 <SystemClock_Config+0x13c>)
 80102b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80102ba:	2332      	movs	r3, #50	; 0x32
 80102bc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80102be:	2302      	movs	r3, #2
 80102c0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80102c2:	2302      	movs	r3, #2
 80102c4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80102c6:	2300      	movs	r3, #0
 80102c8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80102ca:	2301      	movs	r3, #1
 80102cc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80102ce:	2300      	movs	r3, #0
 80102d0:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80102d2:	2300      	movs	r3, #0
 80102d4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80102d6:	2300      	movs	r3, #0
 80102d8:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80102da:	f107 0308 	add.w	r3, r7, #8
 80102de:	4618      	mov	r0, r3
 80102e0:	f7fc fe20 	bl	800cf24 <HAL_RCCEx_PeriphCLKConfig>
 80102e4:	4603      	mov	r3, r0
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d001      	beq.n	80102ee <SystemClock_Config+0x12a>
  {
    Error_Handler();
 80102ea:	f000 f975 	bl	80105d8 <Error_Handler>
  }
}
 80102ee:	bf00      	nop
 80102f0:	37d0      	adds	r7, #208	; 0xd0
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}
 80102f6:	bf00      	nop
 80102f8:	40023800 	.word	0x40023800
 80102fc:	40007000 	.word	0x40007000
 8010300:	00101000 	.word	0x00101000

08010304 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8010308:	4b0d      	ldr	r3, [pc, #52]	; (8010340 <MX_CRC_Init+0x3c>)
 801030a:	4a0e      	ldr	r2, [pc, #56]	; (8010344 <MX_CRC_Init+0x40>)
 801030c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 801030e:	4b0c      	ldr	r3, [pc, #48]	; (8010340 <MX_CRC_Init+0x3c>)
 8010310:	2200      	movs	r2, #0
 8010312:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8010314:	4b0a      	ldr	r3, [pc, #40]	; (8010340 <MX_CRC_Init+0x3c>)
 8010316:	2200      	movs	r2, #0
 8010318:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 801031a:	4b09      	ldr	r3, [pc, #36]	; (8010340 <MX_CRC_Init+0x3c>)
 801031c:	2200      	movs	r2, #0
 801031e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8010320:	4b07      	ldr	r3, [pc, #28]	; (8010340 <MX_CRC_Init+0x3c>)
 8010322:	2200      	movs	r2, #0
 8010324:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8010326:	4b06      	ldr	r3, [pc, #24]	; (8010340 <MX_CRC_Init+0x3c>)
 8010328:	2201      	movs	r2, #1
 801032a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 801032c:	4804      	ldr	r0, [pc, #16]	; (8010340 <MX_CRC_Init+0x3c>)
 801032e:	f7fa fccd 	bl	800accc <HAL_CRC_Init>
 8010332:	4603      	mov	r3, r0
 8010334:	2b00      	cmp	r3, #0
 8010336:	d001      	beq.n	801033c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8010338:	f000 f94e 	bl	80105d8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 801033c:	bf00      	nop
 801033e:	bd80      	pop	{r7, pc}
 8010340:	2002cedc 	.word	0x2002cedc
 8010344:	40023000 	.word	0x40023000

08010348 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 801034c:	4b28      	ldr	r3, [pc, #160]	; (80103f0 <MX_SAI2_Init+0xa8>)
 801034e:	4a29      	ldr	r2, [pc, #164]	; (80103f4 <MX_SAI2_Init+0xac>)
 8010350:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8010352:	4b27      	ldr	r3, [pc, #156]	; (80103f0 <MX_SAI2_Init+0xa8>)
 8010354:	2200      	movs	r2, #0
 8010356:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8010358:	4b25      	ldr	r3, [pc, #148]	; (80103f0 <MX_SAI2_Init+0xa8>)
 801035a:	2200      	movs	r2, #0
 801035c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 801035e:	4b24      	ldr	r3, [pc, #144]	; (80103f0 <MX_SAI2_Init+0xa8>)
 8010360:	2240      	movs	r2, #64	; 0x40
 8010362:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8010364:	4b22      	ldr	r3, [pc, #136]	; (80103f0 <MX_SAI2_Init+0xa8>)
 8010366:	2200      	movs	r2, #0
 8010368:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 801036a:	4b21      	ldr	r3, [pc, #132]	; (80103f0 <MX_SAI2_Init+0xa8>)
 801036c:	2200      	movs	r2, #0
 801036e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8010370:	4b1f      	ldr	r3, [pc, #124]	; (80103f0 <MX_SAI2_Init+0xa8>)
 8010372:	2200      	movs	r2, #0
 8010374:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8010376:	4b1e      	ldr	r3, [pc, #120]	; (80103f0 <MX_SAI2_Init+0xa8>)
 8010378:	2200      	movs	r2, #0
 801037a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 801037c:	4b1c      	ldr	r3, [pc, #112]	; (80103f0 <MX_SAI2_Init+0xa8>)
 801037e:	2200      	movs	r2, #0
 8010380:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8010382:	4b1b      	ldr	r3, [pc, #108]	; (80103f0 <MX_SAI2_Init+0xa8>)
 8010384:	2200      	movs	r2, #0
 8010386:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8010388:	4b19      	ldr	r3, [pc, #100]	; (80103f0 <MX_SAI2_Init+0xa8>)
 801038a:	4a1b      	ldr	r2, [pc, #108]	; (80103f8 <MX_SAI2_Init+0xb0>)
 801038c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 801038e:	4b18      	ldr	r3, [pc, #96]	; (80103f0 <MX_SAI2_Init+0xa8>)
 8010390:	2200      	movs	r2, #0
 8010392:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8010394:	4b16      	ldr	r3, [pc, #88]	; (80103f0 <MX_SAI2_Init+0xa8>)
 8010396:	2200      	movs	r2, #0
 8010398:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 801039a:	4b15      	ldr	r3, [pc, #84]	; (80103f0 <MX_SAI2_Init+0xa8>)
 801039c:	2200      	movs	r2, #0
 801039e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80103a0:	4b13      	ldr	r3, [pc, #76]	; (80103f0 <MX_SAI2_Init+0xa8>)
 80103a2:	2200      	movs	r2, #0
 80103a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80103a6:	4b12      	ldr	r3, [pc, #72]	; (80103f0 <MX_SAI2_Init+0xa8>)
 80103a8:	2208      	movs	r2, #8
 80103aa:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80103ac:	4b10      	ldr	r3, [pc, #64]	; (80103f0 <MX_SAI2_Init+0xa8>)
 80103ae:	2201      	movs	r2, #1
 80103b0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80103b2:	4b0f      	ldr	r3, [pc, #60]	; (80103f0 <MX_SAI2_Init+0xa8>)
 80103b4:	2200      	movs	r2, #0
 80103b6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80103b8:	4b0d      	ldr	r3, [pc, #52]	; (80103f0 <MX_SAI2_Init+0xa8>)
 80103ba:	2200      	movs	r2, #0
 80103bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80103be:	4b0c      	ldr	r3, [pc, #48]	; (80103f0 <MX_SAI2_Init+0xa8>)
 80103c0:	2200      	movs	r2, #0
 80103c2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80103c4:	4b0a      	ldr	r3, [pc, #40]	; (80103f0 <MX_SAI2_Init+0xa8>)
 80103c6:	2200      	movs	r2, #0
 80103c8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80103ca:	4b09      	ldr	r3, [pc, #36]	; (80103f0 <MX_SAI2_Init+0xa8>)
 80103cc:	2200      	movs	r2, #0
 80103ce:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80103d0:	4b07      	ldr	r3, [pc, #28]	; (80103f0 <MX_SAI2_Init+0xa8>)
 80103d2:	2201      	movs	r2, #1
 80103d4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80103d6:	4b06      	ldr	r3, [pc, #24]	; (80103f0 <MX_SAI2_Init+0xa8>)
 80103d8:	2200      	movs	r2, #0
 80103da:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80103dc:	4804      	ldr	r0, [pc, #16]	; (80103f0 <MX_SAI2_Init+0xa8>)
 80103de:	f7fd fbcf 	bl	800db80 <HAL_SAI_Init>
 80103e2:	4603      	mov	r3, r0
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d001      	beq.n	80103ec <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80103e8:	f000 f8f6 	bl	80105d8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80103ec:	bf00      	nop
 80103ee:	bd80      	pop	{r7, pc}
 80103f0:	2002cddc 	.word	0x2002cddc
 80103f4:	40015c04 	.word	0x40015c04
 80103f8:	0002ee00 	.word	0x0002ee00

080103fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b08c      	sub	sp, #48	; 0x30
 8010400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8010402:	f107 0320 	add.w	r3, r7, #32
 8010406:	2200      	movs	r2, #0
 8010408:	601a      	str	r2, [r3, #0]
 801040a:	605a      	str	r2, [r3, #4]
 801040c:	609a      	str	r2, [r3, #8]
 801040e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010410:	f107 0314 	add.w	r3, r7, #20
 8010414:	2200      	movs	r2, #0
 8010416:	601a      	str	r2, [r3, #0]
 8010418:	605a      	str	r2, [r3, #4]
 801041a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 801041c:	1d3b      	adds	r3, r7, #4
 801041e:	2200      	movs	r2, #0
 8010420:	601a      	str	r2, [r3, #0]
 8010422:	605a      	str	r2, [r3, #4]
 8010424:	609a      	str	r2, [r3, #8]
 8010426:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8010428:	4b2a      	ldr	r3, [pc, #168]	; (80104d4 <MX_TIM3_Init+0xd8>)
 801042a:	4a2b      	ldr	r2, [pc, #172]	; (80104d8 <MX_TIM3_Init+0xdc>)
 801042c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 801042e:	4b29      	ldr	r3, [pc, #164]	; (80104d4 <MX_TIM3_Init+0xd8>)
 8010430:	2200      	movs	r2, #0
 8010432:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010434:	4b27      	ldr	r3, [pc, #156]	; (80104d4 <MX_TIM3_Init+0xd8>)
 8010436:	2200      	movs	r2, #0
 8010438:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 801043a:	4b26      	ldr	r3, [pc, #152]	; (80104d4 <MX_TIM3_Init+0xd8>)
 801043c:	2200      	movs	r2, #0
 801043e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010440:	4b24      	ldr	r3, [pc, #144]	; (80104d4 <MX_TIM3_Init+0xd8>)
 8010442:	2200      	movs	r2, #0
 8010444:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010446:	4b23      	ldr	r3, [pc, #140]	; (80104d4 <MX_TIM3_Init+0xd8>)
 8010448:	2200      	movs	r2, #0
 801044a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801044c:	4821      	ldr	r0, [pc, #132]	; (80104d4 <MX_TIM3_Init+0xd8>)
 801044e:	f7fd feba 	bl	800e1c6 <HAL_TIM_Base_Init>
 8010452:	4603      	mov	r3, r0
 8010454:	2b00      	cmp	r3, #0
 8010456:	d001      	beq.n	801045c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8010458:	f000 f8be 	bl	80105d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801045c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010460:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8010462:	f107 0320 	add.w	r3, r7, #32
 8010466:	4619      	mov	r1, r3
 8010468:	481a      	ldr	r0, [pc, #104]	; (80104d4 <MX_TIM3_Init+0xd8>)
 801046a:	f7fd ffa9 	bl	800e3c0 <HAL_TIM_ConfigClockSource>
 801046e:	4603      	mov	r3, r0
 8010470:	2b00      	cmp	r3, #0
 8010472:	d001      	beq.n	8010478 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8010474:	f000 f8b0 	bl	80105d8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8010478:	4816      	ldr	r0, [pc, #88]	; (80104d4 <MX_TIM3_Init+0xd8>)
 801047a:	f7fd fecf 	bl	800e21c <HAL_TIM_IC_Init>
 801047e:	4603      	mov	r3, r0
 8010480:	2b00      	cmp	r3, #0
 8010482:	d001      	beq.n	8010488 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8010484:	f000 f8a8 	bl	80105d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010488:	2300      	movs	r3, #0
 801048a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801048c:	2300      	movs	r3, #0
 801048e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8010490:	f107 0314 	add.w	r3, r7, #20
 8010494:	4619      	mov	r1, r3
 8010496:	480f      	ldr	r0, [pc, #60]	; (80104d4 <MX_TIM3_Init+0xd8>)
 8010498:	f7fe fab0 	bl	800e9fc <HAL_TIMEx_MasterConfigSynchronization>
 801049c:	4603      	mov	r3, r0
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d001      	beq.n	80104a6 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80104a2:	f000 f899 	bl	80105d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80104a6:	2300      	movs	r3, #0
 80104a8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80104aa:	2301      	movs	r3, #1
 80104ac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80104ae:	2300      	movs	r3, #0
 80104b0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80104b2:	2300      	movs	r3, #0
 80104b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80104b6:	1d3b      	adds	r3, r7, #4
 80104b8:	2200      	movs	r2, #0
 80104ba:	4619      	mov	r1, r3
 80104bc:	4805      	ldr	r0, [pc, #20]	; (80104d4 <MX_TIM3_Init+0xd8>)
 80104be:	f7fd fee2 	bl	800e286 <HAL_TIM_IC_ConfigChannel>
 80104c2:	4603      	mov	r3, r0
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d001      	beq.n	80104cc <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80104c8:	f000 f886 	bl	80105d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80104cc:	bf00      	nop
 80104ce:	3730      	adds	r7, #48	; 0x30
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	2002cf00 	.word	0x2002cf00
 80104d8:	40000400 	.word	0x40000400

080104dc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80104e0:	4b14      	ldr	r3, [pc, #80]	; (8010534 <MX_UART7_Init+0x58>)
 80104e2:	4a15      	ldr	r2, [pc, #84]	; (8010538 <MX_UART7_Init+0x5c>)
 80104e4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80104e6:	4b13      	ldr	r3, [pc, #76]	; (8010534 <MX_UART7_Init+0x58>)
 80104e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80104ec:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80104ee:	4b11      	ldr	r3, [pc, #68]	; (8010534 <MX_UART7_Init+0x58>)
 80104f0:	2200      	movs	r2, #0
 80104f2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80104f4:	4b0f      	ldr	r3, [pc, #60]	; (8010534 <MX_UART7_Init+0x58>)
 80104f6:	2200      	movs	r2, #0
 80104f8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80104fa:	4b0e      	ldr	r3, [pc, #56]	; (8010534 <MX_UART7_Init+0x58>)
 80104fc:	2200      	movs	r2, #0
 80104fe:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8010500:	4b0c      	ldr	r3, [pc, #48]	; (8010534 <MX_UART7_Init+0x58>)
 8010502:	220c      	movs	r2, #12
 8010504:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010506:	4b0b      	ldr	r3, [pc, #44]	; (8010534 <MX_UART7_Init+0x58>)
 8010508:	2200      	movs	r2, #0
 801050a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 801050c:	4b09      	ldr	r3, [pc, #36]	; (8010534 <MX_UART7_Init+0x58>)
 801050e:	2200      	movs	r2, #0
 8010510:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8010512:	4b08      	ldr	r3, [pc, #32]	; (8010534 <MX_UART7_Init+0x58>)
 8010514:	2200      	movs	r2, #0
 8010516:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8010518:	4b06      	ldr	r3, [pc, #24]	; (8010534 <MX_UART7_Init+0x58>)
 801051a:	2200      	movs	r2, #0
 801051c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 801051e:	4805      	ldr	r0, [pc, #20]	; (8010534 <MX_UART7_Init+0x58>)
 8010520:	f7fe fac8 	bl	800eab4 <HAL_UART_Init>
 8010524:	4603      	mov	r3, r0
 8010526:	2b00      	cmp	r3, #0
 8010528:	d001      	beq.n	801052e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 801052a:	f000 f855 	bl	80105d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 801052e:	bf00      	nop
 8010530:	bd80      	pop	{r7, pc}
 8010532:	bf00      	nop
 8010534:	2002cd5c 	.word	0x2002cd5c
 8010538:	40007800 	.word	0x40007800

0801053c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b082      	sub	sp, #8
 8010540:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8010542:	4b0c      	ldr	r3, [pc, #48]	; (8010574 <MX_DMA_Init+0x38>)
 8010544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010546:	4a0b      	ldr	r2, [pc, #44]	; (8010574 <MX_DMA_Init+0x38>)
 8010548:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801054c:	6313      	str	r3, [r2, #48]	; 0x30
 801054e:	4b09      	ldr	r3, [pc, #36]	; (8010574 <MX_DMA_Init+0x38>)
 8010550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010556:	607b      	str	r3, [r7, #4]
 8010558:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 801055a:	2200      	movs	r2, #0
 801055c:	2100      	movs	r1, #0
 801055e:	203c      	movs	r0, #60	; 0x3c
 8010560:	f7fa fb7d 	bl	800ac5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8010564:	203c      	movs	r0, #60	; 0x3c
 8010566:	f7fa fb96 	bl	800ac96 <HAL_NVIC_EnableIRQ>

}
 801056a:	bf00      	nop
 801056c:	3708      	adds	r7, #8
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}
 8010572:	bf00      	nop
 8010574:	40023800 	.word	0x40023800

08010578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8010578:	b480      	push	{r7}
 801057a:	b085      	sub	sp, #20
 801057c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801057e:	4b15      	ldr	r3, [pc, #84]	; (80105d4 <MX_GPIO_Init+0x5c>)
 8010580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010582:	4a14      	ldr	r2, [pc, #80]	; (80105d4 <MX_GPIO_Init+0x5c>)
 8010584:	f043 0302 	orr.w	r3, r3, #2
 8010588:	6313      	str	r3, [r2, #48]	; 0x30
 801058a:	4b12      	ldr	r3, [pc, #72]	; (80105d4 <MX_GPIO_Init+0x5c>)
 801058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801058e:	f003 0302 	and.w	r3, r3, #2
 8010592:	60fb      	str	r3, [r7, #12]
 8010594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8010596:	4b0f      	ldr	r3, [pc, #60]	; (80105d4 <MX_GPIO_Init+0x5c>)
 8010598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801059a:	4a0e      	ldr	r2, [pc, #56]	; (80105d4 <MX_GPIO_Init+0x5c>)
 801059c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80105a0:	6313      	str	r3, [r2, #48]	; 0x30
 80105a2:	4b0c      	ldr	r3, [pc, #48]	; (80105d4 <MX_GPIO_Init+0x5c>)
 80105a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105aa:	60bb      	str	r3, [r7, #8]
 80105ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80105ae:	4b09      	ldr	r3, [pc, #36]	; (80105d4 <MX_GPIO_Init+0x5c>)
 80105b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105b2:	4a08      	ldr	r2, [pc, #32]	; (80105d4 <MX_GPIO_Init+0x5c>)
 80105b4:	f043 0320 	orr.w	r3, r3, #32
 80105b8:	6313      	str	r3, [r2, #48]	; 0x30
 80105ba:	4b06      	ldr	r3, [pc, #24]	; (80105d4 <MX_GPIO_Init+0x5c>)
 80105bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105be:	f003 0320 	and.w	r3, r3, #32
 80105c2:	607b      	str	r3, [r7, #4]
 80105c4:	687b      	ldr	r3, [r7, #4]

}
 80105c6:	bf00      	nop
 80105c8:	3714      	adds	r7, #20
 80105ca:	46bd      	mov	sp, r7
 80105cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d0:	4770      	bx	lr
 80105d2:	bf00      	nop
 80105d4:	40023800 	.word	0x40023800

080105d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80105d8:	b480      	push	{r7}
 80105da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80105dc:	bf00      	nop
 80105de:	46bd      	mov	sp, r7
 80105e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e4:	4770      	bx	lr
	...

080105e8 <network_multitest_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_multitest_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 80105e8:	b480      	push	{r7}
 80105ea:	b085      	sub	sp, #20
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	691b      	ldr	r3, [r3, #16]
 80105f6:	3303      	adds	r3, #3
 80105f8:	f023 0303 	bic.w	r3, r3, #3
 80105fc:	60fb      	str	r3, [r7, #12]
  AI_ASSERT( activations )

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 80105fe:	4b22      	ldr	r3, [pc, #136]	; (8010688 <network_multitest_configure_activations+0xa0>)
 8010600:	2200      	movs	r2, #0
 8010602:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8010604:	4b20      	ldr	r3, [pc, #128]	; (8010688 <network_multitest_configure_activations+0xa0>)
 8010606:	2200      	movs	r2, #0
 8010608:	60da      	str	r2, [r3, #12]
    dense_25_output_array.data = AI_PTR(activations + 0);
 801060a:	4a20      	ldr	r2, [pc, #128]	; (801068c <network_multitest_configure_activations+0xa4>)
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	6093      	str	r3, [r2, #8]
    dense_25_output_array.data_start = AI_PTR(activations + 0);
 8010610:	4a1e      	ldr	r2, [pc, #120]	; (801068c <network_multitest_configure_activations+0xa4>)
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	60d3      	str	r3, [r2, #12]
    dense_26_output_array.data = AI_PTR(activations + 72000);
 8010616:	68fa      	ldr	r2, [r7, #12]
 8010618:	4b1d      	ldr	r3, [pc, #116]	; (8010690 <network_multitest_configure_activations+0xa8>)
 801061a:	4413      	add	r3, r2
 801061c:	4a1d      	ldr	r2, [pc, #116]	; (8010694 <network_multitest_configure_activations+0xac>)
 801061e:	6093      	str	r3, [r2, #8]
    dense_26_output_array.data_start = AI_PTR(activations + 72000);
 8010620:	68fa      	ldr	r2, [r7, #12]
 8010622:	4b1b      	ldr	r3, [pc, #108]	; (8010690 <network_multitest_configure_activations+0xa8>)
 8010624:	4413      	add	r3, r2
 8010626:	4a1b      	ldr	r2, [pc, #108]	; (8010694 <network_multitest_configure_activations+0xac>)
 8010628:	60d3      	str	r3, [r2, #12]
    max_pooling2d_23_output_array.data = AI_PTR(activations + 0);
 801062a:	4a1b      	ldr	r2, [pc, #108]	; (8010698 <network_multitest_configure_activations+0xb0>)
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	6093      	str	r3, [r2, #8]
    max_pooling2d_23_output_array.data_start = AI_PTR(activations + 0);
 8010630:	4a19      	ldr	r2, [pc, #100]	; (8010698 <network_multitest_configure_activations+0xb0>)
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	60d3      	str	r3, [r2, #12]
    dense_27_output_array.data = AI_PTR(activations + 18000);
 8010636:	68fa      	ldr	r2, [r7, #12]
 8010638:	f244 6350 	movw	r3, #18000	; 0x4650
 801063c:	4413      	add	r3, r2
 801063e:	4a17      	ldr	r2, [pc, #92]	; (801069c <network_multitest_configure_activations+0xb4>)
 8010640:	6093      	str	r3, [r2, #8]
    dense_27_output_array.data_start = AI_PTR(activations + 18000);
 8010642:	68fa      	ldr	r2, [r7, #12]
 8010644:	f244 6350 	movw	r3, #18000	; 0x4650
 8010648:	4413      	add	r3, r2
 801064a:	4a14      	ldr	r2, [pc, #80]	; (801069c <network_multitest_configure_activations+0xb4>)
 801064c:	60d3      	str	r3, [r2, #12]
    max_pooling2d_24_output_array.data = AI_PTR(activations + 0);
 801064e:	4a14      	ldr	r2, [pc, #80]	; (80106a0 <network_multitest_configure_activations+0xb8>)
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	6093      	str	r3, [r2, #8]
    max_pooling2d_24_output_array.data_start = AI_PTR(activations + 0);
 8010654:	4a12      	ldr	r2, [pc, #72]	; (80106a0 <network_multitest_configure_activations+0xb8>)
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	60d3      	str	r3, [r2, #12]
    dense_28_output_array.data = AI_PTR(activations + 3920);
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	f503 6375 	add.w	r3, r3, #3920	; 0xf50
 8010660:	4a10      	ldr	r2, [pc, #64]	; (80106a4 <network_multitest_configure_activations+0xbc>)
 8010662:	6093      	str	r3, [r2, #8]
    dense_28_output_array.data_start = AI_PTR(activations + 3920);
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	f503 6375 	add.w	r3, r3, #3920	; 0xf50
 801066a:	4a0e      	ldr	r2, [pc, #56]	; (80106a4 <network_multitest_configure_activations+0xbc>)
 801066c:	60d3      	str	r3, [r2, #12]
    dense_28_nl_output_array.data = AI_PTR(NULL);
 801066e:	4b0e      	ldr	r3, [pc, #56]	; (80106a8 <network_multitest_configure_activations+0xc0>)
 8010670:	2200      	movs	r2, #0
 8010672:	609a      	str	r2, [r3, #8]
    dense_28_nl_output_array.data_start = AI_PTR(NULL);
 8010674:	4b0c      	ldr	r3, [pc, #48]	; (80106a8 <network_multitest_configure_activations+0xc0>)
 8010676:	2200      	movs	r2, #0
 8010678:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 801067a:	2301      	movs	r3, #1
}
 801067c:	4618      	mov	r0, r3
 801067e:	3714      	adds	r7, #20
 8010680:	46bd      	mov	sp, r7
 8010682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010686:	4770      	bx	lr
 8010688:	2000013c 	.word	0x2000013c
 801068c:	2000014c 	.word	0x2000014c
 8010690:	00011940 	.word	0x00011940
 8010694:	2000015c 	.word	0x2000015c
 8010698:	2000016c 	.word	0x2000016c
 801069c:	2000017c 	.word	0x2000017c
 80106a0:	2000018c 	.word	0x2000018c
 80106a4:	2000019c 	.word	0x2000019c
 80106a8:	200001ac 	.word	0x200001ac

080106ac <network_multitest_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_multitest_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 80106ac:	b480      	push	{r7}
 80106ae:	b085      	sub	sp, #20
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
 80106b4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	691b      	ldr	r3, [r3, #16]
 80106ba:	60fb      	str	r3, [r7, #12]
  AI_ASSERT( weights )

  {
    /* Updating weights (byte) offsets */
    dense_28_bias_array.format |= AI_FMT_FLAG_CONST;
 80106bc:	4b40      	ldr	r3, [pc, #256]	; (80107c0 <network_multitest_configure_weights+0x114>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80106c4:	4a3e      	ldr	r2, [pc, #248]	; (80107c0 <network_multitest_configure_weights+0x114>)
 80106c6:	6013      	str	r3, [r2, #0]
    dense_28_bias_array.data = AI_PTR(weights + 11360);
 80106c8:	68fa      	ldr	r2, [r7, #12]
 80106ca:	f642 4360 	movw	r3, #11360	; 0x2c60
 80106ce:	4413      	add	r3, r2
 80106d0:	4a3b      	ldr	r2, [pc, #236]	; (80107c0 <network_multitest_configure_weights+0x114>)
 80106d2:	6093      	str	r3, [r2, #8]
    dense_28_bias_array.data_start = AI_PTR(weights + 11360);
 80106d4:	68fa      	ldr	r2, [r7, #12]
 80106d6:	f642 4360 	movw	r3, #11360	; 0x2c60
 80106da:	4413      	add	r3, r2
 80106dc:	4a38      	ldr	r2, [pc, #224]	; (80107c0 <network_multitest_configure_weights+0x114>)
 80106de:	60d3      	str	r3, [r2, #12]
  dense_28_weights_array.format |= AI_FMT_FLAG_CONST;
 80106e0:	4b38      	ldr	r3, [pc, #224]	; (80107c4 <network_multitest_configure_weights+0x118>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80106e8:	4a36      	ldr	r2, [pc, #216]	; (80107c4 <network_multitest_configure_weights+0x118>)
 80106ea:	6013      	str	r3, [r2, #0]
    dense_28_weights_array.data = AI_PTR(weights + 3520);
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
 80106f2:	4a34      	ldr	r2, [pc, #208]	; (80107c4 <network_multitest_configure_weights+0x118>)
 80106f4:	6093      	str	r3, [r2, #8]
    dense_28_weights_array.data_start = AI_PTR(weights + 3520);
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
 80106fc:	4a31      	ldr	r2, [pc, #196]	; (80107c4 <network_multitest_configure_weights+0x118>)
 80106fe:	60d3      	str	r3, [r2, #12]
  dense_27_bias_array.format |= AI_FMT_FLAG_CONST;
 8010700:	4b31      	ldr	r3, [pc, #196]	; (80107c8 <network_multitest_configure_weights+0x11c>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010708:	4a2f      	ldr	r2, [pc, #188]	; (80107c8 <network_multitest_configure_weights+0x11c>)
 801070a:	6013      	str	r3, [r2, #0]
    dense_27_bias_array.data = AI_PTR(weights + 3440);
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	f503 6357 	add.w	r3, r3, #3440	; 0xd70
 8010712:	4a2d      	ldr	r2, [pc, #180]	; (80107c8 <network_multitest_configure_weights+0x11c>)
 8010714:	6093      	str	r3, [r2, #8]
    dense_27_bias_array.data_start = AI_PTR(weights + 3440);
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	f503 6357 	add.w	r3, r3, #3440	; 0xd70
 801071c:	4a2a      	ldr	r2, [pc, #168]	; (80107c8 <network_multitest_configure_weights+0x11c>)
 801071e:	60d3      	str	r3, [r2, #12]
  dense_27_weights_array.format |= AI_FMT_FLAG_CONST;
 8010720:	4b2a      	ldr	r3, [pc, #168]	; (80107cc <network_multitest_configure_weights+0x120>)
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010728:	4a28      	ldr	r2, [pc, #160]	; (80107cc <network_multitest_configure_weights+0x120>)
 801072a:	6013      	str	r3, [r2, #0]
    dense_27_weights_array.data = AI_PTR(weights + 1840);
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 8010732:	4a26      	ldr	r2, [pc, #152]	; (80107cc <network_multitest_configure_weights+0x120>)
 8010734:	6093      	str	r3, [r2, #8]
    dense_27_weights_array.data_start = AI_PTR(weights + 1840);
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 801073c:	4a23      	ldr	r2, [pc, #140]	; (80107cc <network_multitest_configure_weights+0x120>)
 801073e:	60d3      	str	r3, [r2, #12]
  dense_26_bias_array.format |= AI_FMT_FLAG_CONST;
 8010740:	4b23      	ldr	r3, [pc, #140]	; (80107d0 <network_multitest_configure_weights+0x124>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010748:	4a21      	ldr	r2, [pc, #132]	; (80107d0 <network_multitest_configure_weights+0x124>)
 801074a:	6013      	str	r3, [r2, #0]
    dense_26_bias_array.data = AI_PTR(weights + 1760);
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 8010752:	4a1f      	ldr	r2, [pc, #124]	; (80107d0 <network_multitest_configure_weights+0x124>)
 8010754:	6093      	str	r3, [r2, #8]
    dense_26_bias_array.data_start = AI_PTR(weights + 1760);
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 801075c:	4a1c      	ldr	r2, [pc, #112]	; (80107d0 <network_multitest_configure_weights+0x124>)
 801075e:	60d3      	str	r3, [r2, #12]
  dense_26_weights_array.format |= AI_FMT_FLAG_CONST;
 8010760:	4b1c      	ldr	r3, [pc, #112]	; (80107d4 <network_multitest_configure_weights+0x128>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010768:	4a1a      	ldr	r2, [pc, #104]	; (80107d4 <network_multitest_configure_weights+0x128>)
 801076a:	6013      	str	r3, [r2, #0]
    dense_26_weights_array.data = AI_PTR(weights + 160);
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	33a0      	adds	r3, #160	; 0xa0
 8010770:	4a18      	ldr	r2, [pc, #96]	; (80107d4 <network_multitest_configure_weights+0x128>)
 8010772:	6093      	str	r3, [r2, #8]
    dense_26_weights_array.data_start = AI_PTR(weights + 160);
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	33a0      	adds	r3, #160	; 0xa0
 8010778:	4a16      	ldr	r2, [pc, #88]	; (80107d4 <network_multitest_configure_weights+0x128>)
 801077a:	60d3      	str	r3, [r2, #12]
  dense_25_bias_array.format |= AI_FMT_FLAG_CONST;
 801077c:	4b16      	ldr	r3, [pc, #88]	; (80107d8 <network_multitest_configure_weights+0x12c>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010784:	4a14      	ldr	r2, [pc, #80]	; (80107d8 <network_multitest_configure_weights+0x12c>)
 8010786:	6013      	str	r3, [r2, #0]
    dense_25_bias_array.data = AI_PTR(weights + 80);
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	3350      	adds	r3, #80	; 0x50
 801078c:	4a12      	ldr	r2, [pc, #72]	; (80107d8 <network_multitest_configure_weights+0x12c>)
 801078e:	6093      	str	r3, [r2, #8]
    dense_25_bias_array.data_start = AI_PTR(weights + 80);
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	3350      	adds	r3, #80	; 0x50
 8010794:	4a10      	ldr	r2, [pc, #64]	; (80107d8 <network_multitest_configure_weights+0x12c>)
 8010796:	60d3      	str	r3, [r2, #12]
  dense_25_weights_array.format |= AI_FMT_FLAG_CONST;
 8010798:	4b10      	ldr	r3, [pc, #64]	; (80107dc <network_multitest_configure_weights+0x130>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80107a0:	4a0e      	ldr	r2, [pc, #56]	; (80107dc <network_multitest_configure_weights+0x130>)
 80107a2:	6013      	str	r3, [r2, #0]
    dense_25_weights_array.data = AI_PTR(weights + 0);
 80107a4:	4a0d      	ldr	r2, [pc, #52]	; (80107dc <network_multitest_configure_weights+0x130>)
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	6093      	str	r3, [r2, #8]
    dense_25_weights_array.data_start = AI_PTR(weights + 0);
 80107aa:	4a0c      	ldr	r2, [pc, #48]	; (80107dc <network_multitest_configure_weights+0x130>)
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	60d3      	str	r3, [r2, #12]
  
  }

  return true;
 80107b0:	2301      	movs	r3, #1
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	3714      	adds	r7, #20
 80107b6:	46bd      	mov	sp, r7
 80107b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107bc:	4770      	bx	lr
 80107be:	bf00      	nop
 80107c0:	200000bc 	.word	0x200000bc
 80107c4:	200000cc 	.word	0x200000cc
 80107c8:	200000dc 	.word	0x200000dc
 80107cc:	200000ec 	.word	0x200000ec
 80107d0:	200000fc 	.word	0x200000fc
 80107d4:	2000010c 	.word	0x2000010c
 80107d8:	2000011c 	.word	0x2000011c
 80107dc:	2000012c 	.word	0x2000012c

080107e0 <ai_network_multitest_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_multitest_get_error(ai_handle network)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80107e8:	6878      	ldr	r0, [r7, #4]
 80107ea:	f7f0 f915 	bl	8000a18 <ai_platform_network_get_error>
 80107ee:	4603      	mov	r3, r0
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	3708      	adds	r7, #8
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}

080107f8 <ai_network_multitest_create>:

AI_API_ENTRY
ai_error ai_network_multitest_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b084      	sub	sp, #16
 80107fc:	af02      	add	r7, sp, #8
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8010802:	2300      	movs	r3, #0
 8010804:	9301      	str	r3, [sp, #4]
 8010806:	2303      	movs	r3, #3
 8010808:	9300      	str	r3, [sp, #0]
 801080a:	2301      	movs	r3, #1
 801080c:	4a04      	ldr	r2, [pc, #16]	; (8010820 <ai_network_multitest_create+0x28>)
 801080e:	6839      	ldr	r1, [r7, #0]
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f7f0 fa0c 	bl	8000c2e <ai_platform_network_create>
 8010816:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8010818:	4618      	mov	r0, r3
 801081a:	3708      	adds	r7, #8
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}
 8010820:	2000006c 	.word	0x2000006c

08010824 <ai_network_multitest_destroy>:

AI_API_ENTRY
ai_handle ai_network_multitest_destroy(ai_handle network)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b082      	sub	sp, #8
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f7f0 fa35 	bl	8000c9c <ai_platform_network_destroy>
 8010832:	4603      	mov	r3, r0
}
 8010834:	4618      	mov	r0, r3
 8010836:	3708      	adds	r7, #8
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}

0801083c <ai_network_multitest_init>:

AI_API_ENTRY
ai_bool ai_network_multitest_init(
  ai_handle network, const ai_network_params* params)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b084      	sub	sp, #16
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
 8010844:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8010846:	6839      	ldr	r1, [r7, #0]
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f7f0 fa81 	bl	8000d50 <ai_platform_network_init>
 801084e:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d101      	bne.n	801085a <ai_network_multitest_init+0x1e>
 8010856:	2300      	movs	r3, #0
 8010858:	e01f      	b.n	801089a <ai_network_multitest_init+0x5e>

  ai_bool ok = true;
 801085a:	2301      	movs	r3, #1
 801085c:	72fb      	strb	r3, [r7, #11]
  ok &= network_multitest_configure_weights(net_ctx, &params->params);
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	4619      	mov	r1, r3
 8010862:	68f8      	ldr	r0, [r7, #12]
 8010864:	f7ff ff22 	bl	80106ac <network_multitest_configure_weights>
 8010868:	4603      	mov	r3, r0
 801086a:	461a      	mov	r2, r3
 801086c:	7afb      	ldrb	r3, [r7, #11]
 801086e:	4013      	ands	r3, r2
 8010870:	2b00      	cmp	r3, #0
 8010872:	bf14      	ite	ne
 8010874:	2301      	movne	r3, #1
 8010876:	2300      	moveq	r3, #0
 8010878:	72fb      	strb	r3, [r7, #11]
  ok &= network_multitest_configure_activations(net_ctx, &params->activations);
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	3314      	adds	r3, #20
 801087e:	4619      	mov	r1, r3
 8010880:	68f8      	ldr	r0, [r7, #12]
 8010882:	f7ff feb1 	bl	80105e8 <network_multitest_configure_activations>
 8010886:	4603      	mov	r3, r0
 8010888:	461a      	mov	r2, r3
 801088a:	7afb      	ldrb	r3, [r7, #11]
 801088c:	4013      	ands	r3, r2
 801088e:	2b00      	cmp	r3, #0
 8010890:	bf14      	ite	ne
 8010892:	2301      	movne	r3, #1
 8010894:	2300      	moveq	r3, #0
 8010896:	72fb      	strb	r3, [r7, #11]

  return ok;
 8010898:	7afb      	ldrb	r3, [r7, #11]
}
 801089a:	4618      	mov	r0, r3
 801089c:	3710      	adds	r7, #16
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd80      	pop	{r7, pc}

080108a2 <ai_network_multitest_run>:


AI_API_ENTRY
ai_i32 ai_network_multitest_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80108a2:	b580      	push	{r7, lr}
 80108a4:	b084      	sub	sp, #16
 80108a6:	af00      	add	r7, sp, #0
 80108a8:	60f8      	str	r0, [r7, #12]
 80108aa:	60b9      	str	r1, [r7, #8]
 80108ac:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80108ae:	687a      	ldr	r2, [r7, #4]
 80108b0:	68b9      	ldr	r1, [r7, #8]
 80108b2:	68f8      	ldr	r0, [r7, #12]
 80108b4:	f7f0 fad6 	bl	8000e64 <ai_platform_network_process>
 80108b8:	4603      	mov	r3, r0
}
 80108ba:	4618      	mov	r0, r3
 80108bc:	3710      	adds	r7, #16
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}
	...

080108c4 <ai_network_multitest_data_weights_get>:
#include "network_multitest_data.h"

ai_handle ai_network_multitest_data_weights_get(void)
{
 80108c4:	b480      	push	{r7}
 80108c6:	af00      	add	r7, sp, #0
    0x27, 0xef, 0x93, 0xbd, 0x92, 0xca, 0x17, 0x3c, 0x69, 0xb8,
    0x89, 0xba, 0xa1, 0xf1, 0xb2, 0x3d, 0x8a, 0xc3, 0xf6,
    0x3b, 0xeb, 0x23, 0x99, 0x3d, 0xcf, 0x22, 0x99, 0xbd
  };

  return AI_HANDLE_PTR(s_network_multitest_weights);
 80108c8:	4b02      	ldr	r3, [pc, #8]	; (80108d4 <ai_network_multitest_data_weights_get+0x10>)
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	46bd      	mov	sp, r7
 80108ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d2:	4770      	bx	lr
 80108d4:	080277a4 	.word	0x080277a4

080108d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80108d8:	b480      	push	{r7}
 80108da:	b083      	sub	sp, #12
 80108dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80108de:	4b0f      	ldr	r3, [pc, #60]	; (801091c <HAL_MspInit+0x44>)
 80108e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108e2:	4a0e      	ldr	r2, [pc, #56]	; (801091c <HAL_MspInit+0x44>)
 80108e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80108e8:	6413      	str	r3, [r2, #64]	; 0x40
 80108ea:	4b0c      	ldr	r3, [pc, #48]	; (801091c <HAL_MspInit+0x44>)
 80108ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80108f2:	607b      	str	r3, [r7, #4]
 80108f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80108f6:	4b09      	ldr	r3, [pc, #36]	; (801091c <HAL_MspInit+0x44>)
 80108f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108fa:	4a08      	ldr	r2, [pc, #32]	; (801091c <HAL_MspInit+0x44>)
 80108fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010900:	6453      	str	r3, [r2, #68]	; 0x44
 8010902:	4b06      	ldr	r3, [pc, #24]	; (801091c <HAL_MspInit+0x44>)
 8010904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801090a:	603b      	str	r3, [r7, #0]
 801090c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801090e:	bf00      	nop
 8010910:	370c      	adds	r7, #12
 8010912:	46bd      	mov	sp, r7
 8010914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010918:	4770      	bx	lr
 801091a:	bf00      	nop
 801091c:	40023800 	.word	0x40023800

08010920 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8010920:	b480      	push	{r7}
 8010922:	b085      	sub	sp, #20
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	4a0a      	ldr	r2, [pc, #40]	; (8010958 <HAL_CRC_MspInit+0x38>)
 801092e:	4293      	cmp	r3, r2
 8010930:	d10b      	bne.n	801094a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8010932:	4b0a      	ldr	r3, [pc, #40]	; (801095c <HAL_CRC_MspInit+0x3c>)
 8010934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010936:	4a09      	ldr	r2, [pc, #36]	; (801095c <HAL_CRC_MspInit+0x3c>)
 8010938:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801093c:	6313      	str	r3, [r2, #48]	; 0x30
 801093e:	4b07      	ldr	r3, [pc, #28]	; (801095c <HAL_CRC_MspInit+0x3c>)
 8010940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010946:	60fb      	str	r3, [r7, #12]
 8010948:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 801094a:	bf00      	nop
 801094c:	3714      	adds	r7, #20
 801094e:	46bd      	mov	sp, r7
 8010950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010954:	4770      	bx	lr
 8010956:	bf00      	nop
 8010958:	40023000 	.word	0x40023000
 801095c:	40023800 	.word	0x40023800

08010960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b08a      	sub	sp, #40	; 0x28
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010968:	f107 0314 	add.w	r3, r7, #20
 801096c:	2200      	movs	r2, #0
 801096e:	601a      	str	r2, [r3, #0]
 8010970:	605a      	str	r2, [r3, #4]
 8010972:	609a      	str	r2, [r3, #8]
 8010974:	60da      	str	r2, [r3, #12]
 8010976:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	4a17      	ldr	r2, [pc, #92]	; (80109dc <HAL_TIM_Base_MspInit+0x7c>)
 801097e:	4293      	cmp	r3, r2
 8010980:	d127      	bne.n	80109d2 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8010982:	4b17      	ldr	r3, [pc, #92]	; (80109e0 <HAL_TIM_Base_MspInit+0x80>)
 8010984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010986:	4a16      	ldr	r2, [pc, #88]	; (80109e0 <HAL_TIM_Base_MspInit+0x80>)
 8010988:	f043 0302 	orr.w	r3, r3, #2
 801098c:	6413      	str	r3, [r2, #64]	; 0x40
 801098e:	4b14      	ldr	r3, [pc, #80]	; (80109e0 <HAL_TIM_Base_MspInit+0x80>)
 8010990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010992:	f003 0302 	and.w	r3, r3, #2
 8010996:	613b      	str	r3, [r7, #16]
 8010998:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801099a:	4b11      	ldr	r3, [pc, #68]	; (80109e0 <HAL_TIM_Base_MspInit+0x80>)
 801099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801099e:	4a10      	ldr	r2, [pc, #64]	; (80109e0 <HAL_TIM_Base_MspInit+0x80>)
 80109a0:	f043 0302 	orr.w	r3, r3, #2
 80109a4:	6313      	str	r3, [r2, #48]	; 0x30
 80109a6:	4b0e      	ldr	r3, [pc, #56]	; (80109e0 <HAL_TIM_Base_MspInit+0x80>)
 80109a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109aa:	f003 0302 	and.w	r3, r3, #2
 80109ae:	60fb      	str	r3, [r7, #12]
 80109b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80109b2:	2310      	movs	r3, #16
 80109b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80109b6:	2302      	movs	r3, #2
 80109b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80109ba:	2300      	movs	r3, #0
 80109bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80109be:	2300      	movs	r3, #0
 80109c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80109c2:	2302      	movs	r3, #2
 80109c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80109c6:	f107 0314 	add.w	r3, r7, #20
 80109ca:	4619      	mov	r1, r3
 80109cc:	4805      	ldr	r0, [pc, #20]	; (80109e4 <HAL_TIM_Base_MspInit+0x84>)
 80109ce:	f7fa fe3b 	bl	800b648 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80109d2:	bf00      	nop
 80109d4:	3728      	adds	r7, #40	; 0x28
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}
 80109da:	bf00      	nop
 80109dc:	40000400 	.word	0x40000400
 80109e0:	40023800 	.word	0x40023800
 80109e4:	40020400 	.word	0x40020400

080109e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b08a      	sub	sp, #40	; 0x28
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80109f0:	f107 0314 	add.w	r3, r7, #20
 80109f4:	2200      	movs	r2, #0
 80109f6:	601a      	str	r2, [r3, #0]
 80109f8:	605a      	str	r2, [r3, #4]
 80109fa:	609a      	str	r2, [r3, #8]
 80109fc:	60da      	str	r2, [r3, #12]
 80109fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	4a17      	ldr	r2, [pc, #92]	; (8010a64 <HAL_UART_MspInit+0x7c>)
 8010a06:	4293      	cmp	r3, r2
 8010a08:	d127      	bne.n	8010a5a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8010a0a:	4b17      	ldr	r3, [pc, #92]	; (8010a68 <HAL_UART_MspInit+0x80>)
 8010a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a0e:	4a16      	ldr	r2, [pc, #88]	; (8010a68 <HAL_UART_MspInit+0x80>)
 8010a10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010a14:	6413      	str	r3, [r2, #64]	; 0x40
 8010a16:	4b14      	ldr	r3, [pc, #80]	; (8010a68 <HAL_UART_MspInit+0x80>)
 8010a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010a1e:	613b      	str	r3, [r7, #16]
 8010a20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8010a22:	4b11      	ldr	r3, [pc, #68]	; (8010a68 <HAL_UART_MspInit+0x80>)
 8010a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a26:	4a10      	ldr	r2, [pc, #64]	; (8010a68 <HAL_UART_MspInit+0x80>)
 8010a28:	f043 0320 	orr.w	r3, r3, #32
 8010a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8010a2e:	4b0e      	ldr	r3, [pc, #56]	; (8010a68 <HAL_UART_MspInit+0x80>)
 8010a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a32:	f003 0320 	and.w	r3, r3, #32
 8010a36:	60fb      	str	r3, [r7, #12]
 8010a38:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration    
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8010a3a:	23c0      	movs	r3, #192	; 0xc0
 8010a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a3e:	2302      	movs	r3, #2
 8010a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a42:	2300      	movs	r3, #0
 8010a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010a46:	2303      	movs	r3, #3
 8010a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8010a4a:	2308      	movs	r3, #8
 8010a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8010a4e:	f107 0314 	add.w	r3, r7, #20
 8010a52:	4619      	mov	r1, r3
 8010a54:	4805      	ldr	r0, [pc, #20]	; (8010a6c <HAL_UART_MspInit+0x84>)
 8010a56:	f7fa fdf7 	bl	800b648 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8010a5a:	bf00      	nop
 8010a5c:	3728      	adds	r7, #40	; 0x28
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}
 8010a62:	bf00      	nop
 8010a64:	40007800 	.word	0x40007800
 8010a68:	40023800 	.word	0x40023800
 8010a6c:	40021400 	.word	0x40021400

08010a70 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_a;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b088      	sub	sp, #32
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	4a30      	ldr	r2, [pc, #192]	; (8010b40 <HAL_SAI_MspInit+0xd0>)
 8010a7e:	4293      	cmp	r3, r2
 8010a80:	d15a      	bne.n	8010b38 <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8010a82:	4b30      	ldr	r3, [pc, #192]	; (8010b44 <HAL_SAI_MspInit+0xd4>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d10b      	bne.n	8010aa2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8010a8a:	4b2f      	ldr	r3, [pc, #188]	; (8010b48 <HAL_SAI_MspInit+0xd8>)
 8010a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a8e:	4a2e      	ldr	r2, [pc, #184]	; (8010b48 <HAL_SAI_MspInit+0xd8>)
 8010a90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010a94:	6453      	str	r3, [r2, #68]	; 0x44
 8010a96:	4b2c      	ldr	r3, [pc, #176]	; (8010b48 <HAL_SAI_MspInit+0xd8>)
 8010a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010a9e:	60bb      	str	r3, [r7, #8]
 8010aa0:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8010aa2:	4b28      	ldr	r3, [pc, #160]	; (8010b44 <HAL_SAI_MspInit+0xd4>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	3301      	adds	r3, #1
 8010aa8:	4a26      	ldr	r2, [pc, #152]	; (8010b44 <HAL_SAI_MspInit+0xd4>)
 8010aaa:	6013      	str	r3, [r2, #0]
    /**SAI2_A_Block_A GPIO Configuration    
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 8010aac:	23e0      	movs	r3, #224	; 0xe0
 8010aae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ab0:	2302      	movs	r3, #2
 8010ab2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8010abc:	230a      	movs	r3, #10
 8010abe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8010ac0:	f107 030c 	add.w	r3, r7, #12
 8010ac4:	4619      	mov	r1, r3
 8010ac6:	4821      	ldr	r0, [pc, #132]	; (8010b4c <HAL_SAI_MspInit+0xdc>)
 8010ac8:	f7fa fdbe 	bl	800b648 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
    
    hdma_sai2_a.Instance = DMA2_Stream4;
 8010acc:	4b20      	ldr	r3, [pc, #128]	; (8010b50 <HAL_SAI_MspInit+0xe0>)
 8010ace:	4a21      	ldr	r2, [pc, #132]	; (8010b54 <HAL_SAI_MspInit+0xe4>)
 8010ad0:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8010ad2:	4b1f      	ldr	r3, [pc, #124]	; (8010b50 <HAL_SAI_MspInit+0xe0>)
 8010ad4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8010ad8:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010ada:	4b1d      	ldr	r3, [pc, #116]	; (8010b50 <HAL_SAI_MspInit+0xe0>)
 8010adc:	2240      	movs	r2, #64	; 0x40
 8010ade:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8010ae0:	4b1b      	ldr	r3, [pc, #108]	; (8010b50 <HAL_SAI_MspInit+0xe0>)
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8010ae6:	4b1a      	ldr	r3, [pc, #104]	; (8010b50 <HAL_SAI_MspInit+0xe0>)
 8010ae8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010aec:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8010aee:	4b18      	ldr	r3, [pc, #96]	; (8010b50 <HAL_SAI_MspInit+0xe0>)
 8010af0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010af4:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8010af6:	4b16      	ldr	r3, [pc, #88]	; (8010b50 <HAL_SAI_MspInit+0xe0>)
 8010af8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8010afc:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_NORMAL;
 8010afe:	4b14      	ldr	r3, [pc, #80]	; (8010b50 <HAL_SAI_MspInit+0xe0>)
 8010b00:	2200      	movs	r2, #0
 8010b02:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8010b04:	4b12      	ldr	r3, [pc, #72]	; (8010b50 <HAL_SAI_MspInit+0xe0>)
 8010b06:	2200      	movs	r2, #0
 8010b08:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8010b0a:	4b11      	ldr	r3, [pc, #68]	; (8010b50 <HAL_SAI_MspInit+0xe0>)
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8010b10:	480f      	ldr	r0, [pc, #60]	; (8010b50 <HAL_SAI_MspInit+0xe0>)
 8010b12:	f7fa f9c5 	bl	800aea0 <HAL_DMA_Init>
 8010b16:	4603      	mov	r3, r0
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d001      	beq.n	8010b20 <HAL_SAI_MspInit+0xb0>
    {
      Error_Handler();
 8010b1c:	f7ff fd5c 	bl	80105d8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	4a0b      	ldr	r2, [pc, #44]	; (8010b50 <HAL_SAI_MspInit+0xe0>)
 8010b24:	671a      	str	r2, [r3, #112]	; 0x70
 8010b26:	4a0a      	ldr	r2, [pc, #40]	; (8010b50 <HAL_SAI_MspInit+0xe0>)
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	4a08      	ldr	r2, [pc, #32]	; (8010b50 <HAL_SAI_MspInit+0xe0>)
 8010b30:	66da      	str	r2, [r3, #108]	; 0x6c
 8010b32:	4a07      	ldr	r2, [pc, #28]	; (8010b50 <HAL_SAI_MspInit+0xe0>)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8010b38:	bf00      	nop
 8010b3a:	3720      	adds	r7, #32
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}
 8010b40:	40015c04 	.word	0x40015c04
 8010b44:	2002cd10 	.word	0x2002cd10
 8010b48:	40023800 	.word	0x40023800
 8010b4c:	40022000 	.word	0x40022000
 8010b50:	2002ef48 	.word	0x2002ef48
 8010b54:	40026470 	.word	0x40026470

08010b58 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b082      	sub	sp, #8
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]

/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	4a11      	ldr	r2, [pc, #68]	; (8010bac <HAL_SAI_MspDeInit+0x54>)
 8010b66:	4293      	cmp	r3, r2
 8010b68:	d11c      	bne.n	8010ba4 <HAL_SAI_MspDeInit+0x4c>
    {
    SAI2_client --;
 8010b6a:	4b11      	ldr	r3, [pc, #68]	; (8010bb0 <HAL_SAI_MspDeInit+0x58>)
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	3b01      	subs	r3, #1
 8010b70:	4a0f      	ldr	r2, [pc, #60]	; (8010bb0 <HAL_SAI_MspDeInit+0x58>)
 8010b72:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 8010b74:	4b0e      	ldr	r3, [pc, #56]	; (8010bb0 <HAL_SAI_MspDeInit+0x58>)
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d105      	bne.n	8010b88 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */ 
       __HAL_RCC_SAI2_CLK_DISABLE();
 8010b7c:	4b0d      	ldr	r3, [pc, #52]	; (8010bb4 <HAL_SAI_MspDeInit+0x5c>)
 8010b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b80:	4a0c      	ldr	r2, [pc, #48]	; (8010bb4 <HAL_SAI_MspDeInit+0x5c>)
 8010b82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010b86:	6453      	str	r3, [r2, #68]	; 0x44
    /**SAI2_A_Block_A GPIO Configuration    
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    HAL_GPIO_DeInit(GPIOI, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6);
 8010b88:	21e0      	movs	r1, #224	; 0xe0
 8010b8a:	480b      	ldr	r0, [pc, #44]	; (8010bb8 <HAL_SAI_MspDeInit+0x60>)
 8010b8c:	f7fa ff06 	bl	800b99c <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(hsai->hdmarx);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b94:	4618      	mov	r0, r3
 8010b96:	f7fa fa31 	bl	800affc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f7fa fa2c 	bl	800affc <HAL_DMA_DeInit>
    }
}
 8010ba4:	bf00      	nop
 8010ba6:	3708      	adds	r7, #8
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}
 8010bac:	40015c04 	.word	0x40015c04
 8010bb0:	2002cd10 	.word	0x2002cd10
 8010bb4:	40023800 	.word	0x40023800
 8010bb8:	40022000 	.word	0x40022000

08010bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010bbc:	b480      	push	{r7}
 8010bbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8010bc0:	bf00      	nop
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc8:	4770      	bx	lr

08010bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010bca:	b480      	push	{r7}
 8010bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010bce:	e7fe      	b.n	8010bce <HardFault_Handler+0x4>

08010bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010bd4:	e7fe      	b.n	8010bd4 <MemManage_Handler+0x4>

08010bd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010bd6:	b480      	push	{r7}
 8010bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010bda:	e7fe      	b.n	8010bda <BusFault_Handler+0x4>

08010bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010bdc:	b480      	push	{r7}
 8010bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010be0:	e7fe      	b.n	8010be0 <UsageFault_Handler+0x4>

08010be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010be2:	b480      	push	{r7}
 8010be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010be6:	bf00      	nop
 8010be8:	46bd      	mov	sp, r7
 8010bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bee:	4770      	bx	lr

08010bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010bf0:	b480      	push	{r7}
 8010bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010bf4:	bf00      	nop
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfc:	4770      	bx	lr

08010bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010bfe:	b480      	push	{r7}
 8010c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010c02:	bf00      	nop
 8010c04:	46bd      	mov	sp, r7
 8010c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0a:	4770      	bx	lr

08010c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010c10:	f7f9 ff08 	bl	800aa24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010c14:	bf00      	nop
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8010c1c:	4802      	ldr	r0, [pc, #8]	; (8010c28 <DMA2_Stream4_IRQHandler+0x10>)
 8010c1e:	f7fa faab 	bl	800b178 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8010c22:	bf00      	nop
 8010c24:	bd80      	pop	{r7, pc}
 8010c26:	bf00      	nop
 8010c28:	2002ef48 	.word	0x2002ef48

08010c2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010c2c:	b480      	push	{r7}
 8010c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010c30:	4b15      	ldr	r3, [pc, #84]	; (8010c88 <SystemInit+0x5c>)
 8010c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010c36:	4a14      	ldr	r2, [pc, #80]	; (8010c88 <SystemInit+0x5c>)
 8010c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8010c40:	4b12      	ldr	r3, [pc, #72]	; (8010c8c <SystemInit+0x60>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	4a11      	ldr	r2, [pc, #68]	; (8010c8c <SystemInit+0x60>)
 8010c46:	f043 0301 	orr.w	r3, r3, #1
 8010c4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8010c4c:	4b0f      	ldr	r3, [pc, #60]	; (8010c8c <SystemInit+0x60>)
 8010c4e:	2200      	movs	r2, #0
 8010c50:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8010c52:	4b0e      	ldr	r3, [pc, #56]	; (8010c8c <SystemInit+0x60>)
 8010c54:	681a      	ldr	r2, [r3, #0]
 8010c56:	490d      	ldr	r1, [pc, #52]	; (8010c8c <SystemInit+0x60>)
 8010c58:	4b0d      	ldr	r3, [pc, #52]	; (8010c90 <SystemInit+0x64>)
 8010c5a:	4013      	ands	r3, r2
 8010c5c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8010c5e:	4b0b      	ldr	r3, [pc, #44]	; (8010c8c <SystemInit+0x60>)
 8010c60:	4a0c      	ldr	r2, [pc, #48]	; (8010c94 <SystemInit+0x68>)
 8010c62:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8010c64:	4b09      	ldr	r3, [pc, #36]	; (8010c8c <SystemInit+0x60>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	4a08      	ldr	r2, [pc, #32]	; (8010c8c <SystemInit+0x60>)
 8010c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010c6e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8010c70:	4b06      	ldr	r3, [pc, #24]	; (8010c8c <SystemInit+0x60>)
 8010c72:	2200      	movs	r2, #0
 8010c74:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010c76:	4b04      	ldr	r3, [pc, #16]	; (8010c88 <SystemInit+0x5c>)
 8010c78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010c7c:	609a      	str	r2, [r3, #8]
#endif
}
 8010c7e:	bf00      	nop
 8010c80:	46bd      	mov	sp, r7
 8010c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c86:	4770      	bx	lr
 8010c88:	e000ed00 	.word	0xe000ed00
 8010c8c:	40023800 	.word	0x40023800
 8010c90:	fef6ffff 	.word	0xfef6ffff
 8010c94:	24003010 	.word	0x24003010

08010c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8010c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010cd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010c9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010c9e:	e003      	b.n	8010ca8 <LoopCopyDataInit>

08010ca0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010ca0:	4b0c      	ldr	r3, [pc, #48]	; (8010cd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010ca2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010ca4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010ca6:	3104      	adds	r1, #4

08010ca8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010ca8:	480b      	ldr	r0, [pc, #44]	; (8010cd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010caa:	4b0c      	ldr	r3, [pc, #48]	; (8010cdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010cac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010cae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010cb0:	d3f6      	bcc.n	8010ca0 <CopyDataInit>
  ldr  r2, =_sbss
 8010cb2:	4a0b      	ldr	r2, [pc, #44]	; (8010ce0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010cb4:	e002      	b.n	8010cbc <LoopFillZerobss>

08010cb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010cb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010cb8:	f842 3b04 	str.w	r3, [r2], #4

08010cbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010cbc:	4b09      	ldr	r3, [pc, #36]	; (8010ce4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010cbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010cc0:	d3f9      	bcc.n	8010cb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8010cc2:	f7ff ffb3 	bl	8010c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010cc6:	f000 f81b 	bl	8010d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010cca:	f7ff fa25 	bl	8010118 <main>
  bx  lr    
 8010cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8010cd0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8010cd4:	0802a488 	.word	0x0802a488
  ldr  r0, =_sdata
 8010cd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010cdc:	20000748 	.word	0x20000748
  ldr  r2, =_sbss
 8010ce0:	20000748 	.word	0x20000748
  ldr  r3, = _ebss
 8010ce4:	2002efac 	.word	0x2002efac

08010ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010ce8:	e7fe      	b.n	8010ce8 <ADC_IRQHandler>

08010cea <__aeabi_memclr>:
 8010cea:	2200      	movs	r2, #0
 8010cec:	f7f4 b8dc 	b.w	8004ea8 <__aeabi_memset>

08010cf0 <__aeabi_memcpy>:
 8010cf0:	f000 b839 	b.w	8010d66 <memcpy>

08010cf4 <__errno>:
 8010cf4:	4b01      	ldr	r3, [pc, #4]	; (8010cfc <__errno+0x8>)
 8010cf6:	6818      	ldr	r0, [r3, #0]
 8010cf8:	4770      	bx	lr
 8010cfa:	bf00      	nop
 8010cfc:	200006e0 	.word	0x200006e0

08010d00 <__libc_init_array>:
 8010d00:	b570      	push	{r4, r5, r6, lr}
 8010d02:	4e0d      	ldr	r6, [pc, #52]	; (8010d38 <__libc_init_array+0x38>)
 8010d04:	4c0d      	ldr	r4, [pc, #52]	; (8010d3c <__libc_init_array+0x3c>)
 8010d06:	1ba4      	subs	r4, r4, r6
 8010d08:	10a4      	asrs	r4, r4, #2
 8010d0a:	2500      	movs	r5, #0
 8010d0c:	42a5      	cmp	r5, r4
 8010d0e:	d109      	bne.n	8010d24 <__libc_init_array+0x24>
 8010d10:	4e0b      	ldr	r6, [pc, #44]	; (8010d40 <__libc_init_array+0x40>)
 8010d12:	4c0c      	ldr	r4, [pc, #48]	; (8010d44 <__libc_init_array+0x44>)
 8010d14:	f001 fa96 	bl	8012244 <_init>
 8010d18:	1ba4      	subs	r4, r4, r6
 8010d1a:	10a4      	asrs	r4, r4, #2
 8010d1c:	2500      	movs	r5, #0
 8010d1e:	42a5      	cmp	r5, r4
 8010d20:	d105      	bne.n	8010d2e <__libc_init_array+0x2e>
 8010d22:	bd70      	pop	{r4, r5, r6, pc}
 8010d24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010d28:	4798      	blx	r3
 8010d2a:	3501      	adds	r5, #1
 8010d2c:	e7ee      	b.n	8010d0c <__libc_init_array+0xc>
 8010d2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010d32:	4798      	blx	r3
 8010d34:	3501      	adds	r5, #1
 8010d36:	e7f2      	b.n	8010d1e <__libc_init_array+0x1e>
 8010d38:	0802a480 	.word	0x0802a480
 8010d3c:	0802a480 	.word	0x0802a480
 8010d40:	0802a480 	.word	0x0802a480
 8010d44:	0802a484 	.word	0x0802a484

08010d48 <memcmp>:
 8010d48:	b530      	push	{r4, r5, lr}
 8010d4a:	2400      	movs	r4, #0
 8010d4c:	42a2      	cmp	r2, r4
 8010d4e:	d101      	bne.n	8010d54 <memcmp+0xc>
 8010d50:	2000      	movs	r0, #0
 8010d52:	e007      	b.n	8010d64 <memcmp+0x1c>
 8010d54:	5d03      	ldrb	r3, [r0, r4]
 8010d56:	3401      	adds	r4, #1
 8010d58:	190d      	adds	r5, r1, r4
 8010d5a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8010d5e:	42ab      	cmp	r3, r5
 8010d60:	d0f4      	beq.n	8010d4c <memcmp+0x4>
 8010d62:	1b58      	subs	r0, r3, r5
 8010d64:	bd30      	pop	{r4, r5, pc}

08010d66 <memcpy>:
 8010d66:	b510      	push	{r4, lr}
 8010d68:	1e43      	subs	r3, r0, #1
 8010d6a:	440a      	add	r2, r1
 8010d6c:	4291      	cmp	r1, r2
 8010d6e:	d100      	bne.n	8010d72 <memcpy+0xc>
 8010d70:	bd10      	pop	{r4, pc}
 8010d72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d7a:	e7f7      	b.n	8010d6c <memcpy+0x6>

08010d7c <memset>:
 8010d7c:	4402      	add	r2, r0
 8010d7e:	4603      	mov	r3, r0
 8010d80:	4293      	cmp	r3, r2
 8010d82:	d100      	bne.n	8010d86 <memset+0xa>
 8010d84:	4770      	bx	lr
 8010d86:	f803 1b01 	strb.w	r1, [r3], #1
 8010d8a:	e7f9      	b.n	8010d80 <memset+0x4>

08010d8c <tanhf>:
 8010d8c:	b510      	push	{r4, lr}
 8010d8e:	ee10 4a10 	vmov	r4, s0
 8010d92:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010d96:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010d9a:	ed2d 8b02 	vpush	{d8}
 8010d9e:	eef0 7a40 	vmov.f32	s15, s0
 8010da2:	db0c      	blt.n	8010dbe <tanhf+0x32>
 8010da4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010da8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8010dac:	2c00      	cmp	r4, #0
 8010dae:	bfac      	ite	ge
 8010db0:	ee30 0a07 	vaddge.f32	s0, s0, s14
 8010db4:	ee30 0a47 	vsublt.f32	s0, s0, s14
 8010db8:	ecbd 8b02 	vpop	{d8}
 8010dbc:	bd10      	pop	{r4, pc}
 8010dbe:	4a1b      	ldr	r2, [pc, #108]	; (8010e2c <tanhf+0xa0>)
 8010dc0:	4293      	cmp	r3, r2
 8010dc2:	dc30      	bgt.n	8010e26 <tanhf+0x9a>
 8010dc4:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8010dc8:	da06      	bge.n	8010dd8 <tanhf+0x4c>
 8010dca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010dce:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010dd2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010dd6:	e7ef      	b.n	8010db8 <tanhf+0x2c>
 8010dd8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8010ddc:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8010de0:	db12      	blt.n	8010e08 <tanhf+0x7c>
 8010de2:	f001 f951 	bl	8012088 <fabsf>
 8010de6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010dea:	f001 f821 	bl	8011e30 <expm1f>
 8010dee:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010df2:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8010df6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010dfa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010dfe:	2c00      	cmp	r4, #0
 8010e00:	bfb8      	it	lt
 8010e02:	eeb1 0a40 	vneglt.f32	s0, s0
 8010e06:	e7d7      	b.n	8010db8 <tanhf+0x2c>
 8010e08:	f001 f93e 	bl	8012088 <fabsf>
 8010e0c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8010e10:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010e14:	f001 f80c 	bl	8011e30 <expm1f>
 8010e18:	ee70 7a08 	vadd.f32	s15, s0, s16
 8010e1c:	eeb1 7a40 	vneg.f32	s14, s0
 8010e20:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8010e24:	e7eb      	b.n	8010dfe <tanhf+0x72>
 8010e26:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010e2a:	e7e8      	b.n	8010dfe <tanhf+0x72>
 8010e2c:	41afffff 	.word	0x41afffff

08010e30 <expf>:
 8010e30:	b530      	push	{r4, r5, lr}
 8010e32:	ed2d 8b02 	vpush	{d8}
 8010e36:	4d35      	ldr	r5, [pc, #212]	; (8010f0c <expf+0xdc>)
 8010e38:	b08b      	sub	sp, #44	; 0x2c
 8010e3a:	eeb0 8a40 	vmov.f32	s16, s0
 8010e3e:	f000 fb11 	bl	8011464 <__ieee754_expf>
 8010e42:	f995 3000 	ldrsb.w	r3, [r5]
 8010e46:	3301      	adds	r3, #1
 8010e48:	ee10 4a10 	vmov	r4, s0
 8010e4c:	d030      	beq.n	8010eb0 <expf+0x80>
 8010e4e:	eeb0 0a48 	vmov.f32	s0, s16
 8010e52:	f001 f920 	bl	8012096 <finitef>
 8010e56:	b358      	cbz	r0, 8010eb0 <expf+0x80>
 8010e58:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8010f10 <expf+0xe0>
 8010e5c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e64:	dd35      	ble.n	8010ed2 <expf+0xa2>
 8010e66:	2303      	movs	r3, #3
 8010e68:	9300      	str	r3, [sp, #0]
 8010e6a:	4b2a      	ldr	r3, [pc, #168]	; (8010f14 <expf+0xe4>)
 8010e6c:	9301      	str	r3, [sp, #4]
 8010e6e:	ee18 0a10 	vmov	r0, s16
 8010e72:	2300      	movs	r3, #0
 8010e74:	9308      	str	r3, [sp, #32]
 8010e76:	f7f4 f9c9 	bl	800520c <__aeabi_f2d>
 8010e7a:	f995 3000 	ldrsb.w	r3, [r5]
 8010e7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010e82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e86:	b9cb      	cbnz	r3, 8010ebc <expf+0x8c>
 8010e88:	4b23      	ldr	r3, [pc, #140]	; (8010f18 <expf+0xe8>)
 8010e8a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010e8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010e92:	4668      	mov	r0, sp
 8010e94:	f000 ffc1 	bl	8011e1a <matherr>
 8010e98:	b1b0      	cbz	r0, 8010ec8 <expf+0x98>
 8010e9a:	9b08      	ldr	r3, [sp, #32]
 8010e9c:	b11b      	cbz	r3, 8010ea6 <expf+0x76>
 8010e9e:	f7ff ff29 	bl	8010cf4 <__errno>
 8010ea2:	9b08      	ldr	r3, [sp, #32]
 8010ea4:	6003      	str	r3, [r0, #0]
 8010ea6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010eaa:	f7f4 fc19 	bl	80056e0 <__aeabi_d2f>
 8010eae:	4604      	mov	r4, r0
 8010eb0:	ee00 4a10 	vmov	s0, r4
 8010eb4:	b00b      	add	sp, #44	; 0x2c
 8010eb6:	ecbd 8b02 	vpop	{d8}
 8010eba:	bd30      	pop	{r4, r5, pc}
 8010ebc:	4917      	ldr	r1, [pc, #92]	; (8010f1c <expf+0xec>)
 8010ebe:	2000      	movs	r0, #0
 8010ec0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010ec4:	2b02      	cmp	r3, #2
 8010ec6:	d1e4      	bne.n	8010e92 <expf+0x62>
 8010ec8:	f7ff ff14 	bl	8010cf4 <__errno>
 8010ecc:	2322      	movs	r3, #34	; 0x22
 8010ece:	6003      	str	r3, [r0, #0]
 8010ed0:	e7e3      	b.n	8010e9a <expf+0x6a>
 8010ed2:	eddf 7a13 	vldr	s15, [pc, #76]	; 8010f20 <expf+0xf0>
 8010ed6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ede:	d5e7      	bpl.n	8010eb0 <expf+0x80>
 8010ee0:	2304      	movs	r3, #4
 8010ee2:	9300      	str	r3, [sp, #0]
 8010ee4:	4b0b      	ldr	r3, [pc, #44]	; (8010f14 <expf+0xe4>)
 8010ee6:	9301      	str	r3, [sp, #4]
 8010ee8:	ee18 0a10 	vmov	r0, s16
 8010eec:	2300      	movs	r3, #0
 8010eee:	9308      	str	r3, [sp, #32]
 8010ef0:	f7f4 f98c 	bl	800520c <__aeabi_f2d>
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010efc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010f00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f04:	f995 3000 	ldrsb.w	r3, [r5]
 8010f08:	e7dc      	b.n	8010ec4 <expf+0x94>
 8010f0a:	bf00      	nop
 8010f0c:	20000744 	.word	0x20000744
 8010f10:	42b17180 	.word	0x42b17180
 8010f14:	0802a424 	.word	0x0802a424
 8010f18:	47efffff 	.word	0x47efffff
 8010f1c:	7ff00000 	.word	0x7ff00000
 8010f20:	c2cff1b5 	.word	0xc2cff1b5

08010f24 <logf>:
 8010f24:	b510      	push	{r4, lr}
 8010f26:	ed2d 8b02 	vpush	{d8}
 8010f2a:	b08a      	sub	sp, #40	; 0x28
 8010f2c:	eeb0 8a40 	vmov.f32	s16, s0
 8010f30:	f000 fb6c 	bl	801160c <__ieee754_logf>
 8010f34:	4b31      	ldr	r3, [pc, #196]	; (8010ffc <logf+0xd8>)
 8010f36:	f993 4000 	ldrsb.w	r4, [r3]
 8010f3a:	1c63      	adds	r3, r4, #1
 8010f3c:	d059      	beq.n	8010ff2 <logf+0xce>
 8010f3e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f46:	d654      	bvs.n	8010ff2 <logf+0xce>
 8010f48:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f50:	dc4f      	bgt.n	8010ff2 <logf+0xce>
 8010f52:	4b2b      	ldr	r3, [pc, #172]	; (8011000 <logf+0xdc>)
 8010f54:	9301      	str	r3, [sp, #4]
 8010f56:	ee18 0a10 	vmov	r0, s16
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	9308      	str	r3, [sp, #32]
 8010f5e:	f7f4 f955 	bl	800520c <__aeabi_f2d>
 8010f62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010f66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f6a:	b994      	cbnz	r4, 8010f92 <logf+0x6e>
 8010f6c:	4b25      	ldr	r3, [pc, #148]	; (8011004 <logf+0xe0>)
 8010f6e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010f72:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010f7e:	d025      	beq.n	8010fcc <logf+0xa8>
 8010f80:	2301      	movs	r3, #1
 8010f82:	2c02      	cmp	r4, #2
 8010f84:	9300      	str	r3, [sp, #0]
 8010f86:	d116      	bne.n	8010fb6 <logf+0x92>
 8010f88:	f7ff feb4 	bl	8010cf4 <__errno>
 8010f8c:	2321      	movs	r3, #33	; 0x21
 8010f8e:	6003      	str	r3, [r0, #0]
 8010f90:	e016      	b.n	8010fc0 <logf+0x9c>
 8010f92:	4b1d      	ldr	r3, [pc, #116]	; (8011008 <logf+0xe4>)
 8010f94:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010f98:	2200      	movs	r2, #0
 8010f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010fa2:	d1ed      	bne.n	8010f80 <logf+0x5c>
 8010fa4:	2302      	movs	r3, #2
 8010fa6:	429c      	cmp	r4, r3
 8010fa8:	9300      	str	r3, [sp, #0]
 8010faa:	d111      	bne.n	8010fd0 <logf+0xac>
 8010fac:	f7ff fea2 	bl	8010cf4 <__errno>
 8010fb0:	2322      	movs	r3, #34	; 0x22
 8010fb2:	6003      	str	r3, [r0, #0]
 8010fb4:	e011      	b.n	8010fda <logf+0xb6>
 8010fb6:	4668      	mov	r0, sp
 8010fb8:	f000 ff2f 	bl	8011e1a <matherr>
 8010fbc:	2800      	cmp	r0, #0
 8010fbe:	d0e3      	beq.n	8010f88 <logf+0x64>
 8010fc0:	4812      	ldr	r0, [pc, #72]	; (801100c <logf+0xe8>)
 8010fc2:	f000 ff2d 	bl	8011e20 <nan>
 8010fc6:	ed8d 0b06 	vstr	d0, [sp, #24]
 8010fca:	e006      	b.n	8010fda <logf+0xb6>
 8010fcc:	2302      	movs	r3, #2
 8010fce:	9300      	str	r3, [sp, #0]
 8010fd0:	4668      	mov	r0, sp
 8010fd2:	f000 ff22 	bl	8011e1a <matherr>
 8010fd6:	2800      	cmp	r0, #0
 8010fd8:	d0e8      	beq.n	8010fac <logf+0x88>
 8010fda:	9b08      	ldr	r3, [sp, #32]
 8010fdc:	b11b      	cbz	r3, 8010fe6 <logf+0xc2>
 8010fde:	f7ff fe89 	bl	8010cf4 <__errno>
 8010fe2:	9b08      	ldr	r3, [sp, #32]
 8010fe4:	6003      	str	r3, [r0, #0]
 8010fe6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010fea:	f7f4 fb79 	bl	80056e0 <__aeabi_d2f>
 8010fee:	ee00 0a10 	vmov	s0, r0
 8010ff2:	b00a      	add	sp, #40	; 0x28
 8010ff4:	ecbd 8b02 	vpop	{d8}
 8010ff8:	bd10      	pop	{r4, pc}
 8010ffa:	bf00      	nop
 8010ffc:	20000744 	.word	0x20000744
 8011000:	0802a429 	.word	0x0802a429
 8011004:	c7efffff 	.word	0xc7efffff
 8011008:	fff00000 	.word	0xfff00000
 801100c:	0802a434 	.word	0x0802a434

08011010 <log10f>:
 8011010:	b510      	push	{r4, lr}
 8011012:	ed2d 8b02 	vpush	{d8}
 8011016:	b08a      	sub	sp, #40	; 0x28
 8011018:	eeb0 8a40 	vmov.f32	s16, s0
 801101c:	f000 fbe4 	bl	80117e8 <__ieee754_log10f>
 8011020:	4b31      	ldr	r3, [pc, #196]	; (80110e8 <log10f+0xd8>)
 8011022:	f993 4000 	ldrsb.w	r4, [r3]
 8011026:	1c63      	adds	r3, r4, #1
 8011028:	d059      	beq.n	80110de <log10f+0xce>
 801102a:	eeb4 8a48 	vcmp.f32	s16, s16
 801102e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011032:	d654      	bvs.n	80110de <log10f+0xce>
 8011034:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801103c:	d84f      	bhi.n	80110de <log10f+0xce>
 801103e:	4b2b      	ldr	r3, [pc, #172]	; (80110ec <log10f+0xdc>)
 8011040:	9301      	str	r3, [sp, #4]
 8011042:	ee18 0a10 	vmov	r0, s16
 8011046:	2300      	movs	r3, #0
 8011048:	9308      	str	r3, [sp, #32]
 801104a:	f7f4 f8df 	bl	800520c <__aeabi_f2d>
 801104e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011052:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011056:	b994      	cbnz	r4, 801107e <log10f+0x6e>
 8011058:	4b25      	ldr	r3, [pc, #148]	; (80110f0 <log10f+0xe0>)
 801105a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801105e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011066:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801106a:	d025      	beq.n	80110b8 <log10f+0xa8>
 801106c:	2301      	movs	r3, #1
 801106e:	2c02      	cmp	r4, #2
 8011070:	9300      	str	r3, [sp, #0]
 8011072:	d116      	bne.n	80110a2 <log10f+0x92>
 8011074:	f7ff fe3e 	bl	8010cf4 <__errno>
 8011078:	2321      	movs	r3, #33	; 0x21
 801107a:	6003      	str	r3, [r0, #0]
 801107c:	e016      	b.n	80110ac <log10f+0x9c>
 801107e:	4b1d      	ldr	r3, [pc, #116]	; (80110f4 <log10f+0xe4>)
 8011080:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011084:	2200      	movs	r2, #0
 8011086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801108a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801108e:	d1ed      	bne.n	801106c <log10f+0x5c>
 8011090:	2302      	movs	r3, #2
 8011092:	429c      	cmp	r4, r3
 8011094:	9300      	str	r3, [sp, #0]
 8011096:	d111      	bne.n	80110bc <log10f+0xac>
 8011098:	f7ff fe2c 	bl	8010cf4 <__errno>
 801109c:	2322      	movs	r3, #34	; 0x22
 801109e:	6003      	str	r3, [r0, #0]
 80110a0:	e011      	b.n	80110c6 <log10f+0xb6>
 80110a2:	4668      	mov	r0, sp
 80110a4:	f000 feb9 	bl	8011e1a <matherr>
 80110a8:	2800      	cmp	r0, #0
 80110aa:	d0e3      	beq.n	8011074 <log10f+0x64>
 80110ac:	4812      	ldr	r0, [pc, #72]	; (80110f8 <log10f+0xe8>)
 80110ae:	f000 feb7 	bl	8011e20 <nan>
 80110b2:	ed8d 0b06 	vstr	d0, [sp, #24]
 80110b6:	e006      	b.n	80110c6 <log10f+0xb6>
 80110b8:	2302      	movs	r3, #2
 80110ba:	9300      	str	r3, [sp, #0]
 80110bc:	4668      	mov	r0, sp
 80110be:	f000 feac 	bl	8011e1a <matherr>
 80110c2:	2800      	cmp	r0, #0
 80110c4:	d0e8      	beq.n	8011098 <log10f+0x88>
 80110c6:	9b08      	ldr	r3, [sp, #32]
 80110c8:	b11b      	cbz	r3, 80110d2 <log10f+0xc2>
 80110ca:	f7ff fe13 	bl	8010cf4 <__errno>
 80110ce:	9b08      	ldr	r3, [sp, #32]
 80110d0:	6003      	str	r3, [r0, #0]
 80110d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80110d6:	f7f4 fb03 	bl	80056e0 <__aeabi_d2f>
 80110da:	ee00 0a10 	vmov	s0, r0
 80110de:	b00a      	add	sp, #40	; 0x28
 80110e0:	ecbd 8b02 	vpop	{d8}
 80110e4:	bd10      	pop	{r4, pc}
 80110e6:	bf00      	nop
 80110e8:	20000744 	.word	0x20000744
 80110ec:	0802a42e 	.word	0x0802a42e
 80110f0:	c7efffff 	.word	0xc7efffff
 80110f4:	fff00000 	.word	0xfff00000
 80110f8:	0802a434 	.word	0x0802a434

080110fc <powf>:
 80110fc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8011100:	ed2d 8b04 	vpush	{d8-d9}
 8011104:	4ca7      	ldr	r4, [pc, #668]	; (80113a4 <powf+0x2a8>)
 8011106:	b08a      	sub	sp, #40	; 0x28
 8011108:	eef0 8a40 	vmov.f32	s17, s0
 801110c:	eeb0 8a60 	vmov.f32	s16, s1
 8011110:	f000 fbc0 	bl	8011894 <__ieee754_powf>
 8011114:	f994 5000 	ldrsb.w	r5, [r4]
 8011118:	1c6b      	adds	r3, r5, #1
 801111a:	eeb0 9a40 	vmov.f32	s18, s0
 801111e:	4626      	mov	r6, r4
 8011120:	d05f      	beq.n	80111e2 <powf+0xe6>
 8011122:	eeb4 8a48 	vcmp.f32	s16, s16
 8011126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801112a:	d65a      	bvs.n	80111e2 <powf+0xe6>
 801112c:	eef4 8a68 	vcmp.f32	s17, s17
 8011130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011134:	d721      	bvc.n	801117a <powf+0x7e>
 8011136:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801113a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801113e:	d150      	bne.n	80111e2 <powf+0xe6>
 8011140:	2301      	movs	r3, #1
 8011142:	9300      	str	r3, [sp, #0]
 8011144:	4b98      	ldr	r3, [pc, #608]	; (80113a8 <powf+0x2ac>)
 8011146:	9301      	str	r3, [sp, #4]
 8011148:	ee18 0a90 	vmov	r0, s17
 801114c:	2300      	movs	r3, #0
 801114e:	9308      	str	r3, [sp, #32]
 8011150:	f7f4 f85c 	bl	800520c <__aeabi_f2d>
 8011154:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011158:	ee18 0a10 	vmov	r0, s16
 801115c:	f7f4 f856 	bl	800520c <__aeabi_f2d>
 8011160:	4b92      	ldr	r3, [pc, #584]	; (80113ac <powf+0x2b0>)
 8011162:	2200      	movs	r2, #0
 8011164:	2d02      	cmp	r5, #2
 8011166:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801116a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801116e:	d032      	beq.n	80111d6 <powf+0xda>
 8011170:	4668      	mov	r0, sp
 8011172:	f000 fe52 	bl	8011e1a <matherr>
 8011176:	bb40      	cbnz	r0, 80111ca <powf+0xce>
 8011178:	e065      	b.n	8011246 <powf+0x14a>
 801117a:	eddf 9a8d 	vldr	s19, [pc, #564]	; 80113b0 <powf+0x2b4>
 801117e:	eef4 8a69 	vcmp.f32	s17, s19
 8011182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011186:	d163      	bne.n	8011250 <powf+0x154>
 8011188:	eeb4 8a69 	vcmp.f32	s16, s19
 801118c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011190:	d12e      	bne.n	80111f0 <powf+0xf4>
 8011192:	2301      	movs	r3, #1
 8011194:	9300      	str	r3, [sp, #0]
 8011196:	4b84      	ldr	r3, [pc, #528]	; (80113a8 <powf+0x2ac>)
 8011198:	9301      	str	r3, [sp, #4]
 801119a:	ee18 0a90 	vmov	r0, s17
 801119e:	2300      	movs	r3, #0
 80111a0:	9308      	str	r3, [sp, #32]
 80111a2:	f7f4 f833 	bl	800520c <__aeabi_f2d>
 80111a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111aa:	ee18 0a10 	vmov	r0, s16
 80111ae:	f7f4 f82d 	bl	800520c <__aeabi_f2d>
 80111b2:	2200      	movs	r2, #0
 80111b4:	2300      	movs	r3, #0
 80111b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80111ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80111be:	2d00      	cmp	r5, #0
 80111c0:	d0d6      	beq.n	8011170 <powf+0x74>
 80111c2:	4b7a      	ldr	r3, [pc, #488]	; (80113ac <powf+0x2b0>)
 80111c4:	2200      	movs	r2, #0
 80111c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80111ca:	9b08      	ldr	r3, [sp, #32]
 80111cc:	b11b      	cbz	r3, 80111d6 <powf+0xda>
 80111ce:	f7ff fd91 	bl	8010cf4 <__errno>
 80111d2:	9b08      	ldr	r3, [sp, #32]
 80111d4:	6003      	str	r3, [r0, #0]
 80111d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80111da:	f7f4 fa81 	bl	80056e0 <__aeabi_d2f>
 80111de:	ee09 0a10 	vmov	s18, r0
 80111e2:	eeb0 0a49 	vmov.f32	s0, s18
 80111e6:	b00a      	add	sp, #40	; 0x28
 80111e8:	ecbd 8b04 	vpop	{d8-d9}
 80111ec:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80111f0:	eeb0 0a48 	vmov.f32	s0, s16
 80111f4:	f000 ff4f 	bl	8012096 <finitef>
 80111f8:	2800      	cmp	r0, #0
 80111fa:	d0f2      	beq.n	80111e2 <powf+0xe6>
 80111fc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011204:	d5ed      	bpl.n	80111e2 <powf+0xe6>
 8011206:	2301      	movs	r3, #1
 8011208:	9300      	str	r3, [sp, #0]
 801120a:	4b67      	ldr	r3, [pc, #412]	; (80113a8 <powf+0x2ac>)
 801120c:	9301      	str	r3, [sp, #4]
 801120e:	ee18 0a90 	vmov	r0, s17
 8011212:	2300      	movs	r3, #0
 8011214:	9308      	str	r3, [sp, #32]
 8011216:	f7f3 fff9 	bl	800520c <__aeabi_f2d>
 801121a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801121e:	ee18 0a10 	vmov	r0, s16
 8011222:	f7f3 fff3 	bl	800520c <__aeabi_f2d>
 8011226:	f994 3000 	ldrsb.w	r3, [r4]
 801122a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801122e:	b923      	cbnz	r3, 801123a <powf+0x13e>
 8011230:	2200      	movs	r2, #0
 8011232:	2300      	movs	r3, #0
 8011234:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011238:	e79a      	b.n	8011170 <powf+0x74>
 801123a:	495e      	ldr	r1, [pc, #376]	; (80113b4 <powf+0x2b8>)
 801123c:	2000      	movs	r0, #0
 801123e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011242:	2b02      	cmp	r3, #2
 8011244:	d194      	bne.n	8011170 <powf+0x74>
 8011246:	f7ff fd55 	bl	8010cf4 <__errno>
 801124a:	2321      	movs	r3, #33	; 0x21
 801124c:	6003      	str	r3, [r0, #0]
 801124e:	e7bc      	b.n	80111ca <powf+0xce>
 8011250:	f000 ff21 	bl	8012096 <finitef>
 8011254:	4605      	mov	r5, r0
 8011256:	2800      	cmp	r0, #0
 8011258:	d173      	bne.n	8011342 <powf+0x246>
 801125a:	eeb0 0a68 	vmov.f32	s0, s17
 801125e:	f000 ff1a 	bl	8012096 <finitef>
 8011262:	2800      	cmp	r0, #0
 8011264:	d06d      	beq.n	8011342 <powf+0x246>
 8011266:	eeb0 0a48 	vmov.f32	s0, s16
 801126a:	f000 ff14 	bl	8012096 <finitef>
 801126e:	2800      	cmp	r0, #0
 8011270:	d067      	beq.n	8011342 <powf+0x246>
 8011272:	ee18 0a90 	vmov	r0, s17
 8011276:	f7f3 ffc9 	bl	800520c <__aeabi_f2d>
 801127a:	4680      	mov	r8, r0
 801127c:	ee18 0a10 	vmov	r0, s16
 8011280:	4689      	mov	r9, r1
 8011282:	f7f3 ffc3 	bl	800520c <__aeabi_f2d>
 8011286:	eeb4 9a49 	vcmp.f32	s18, s18
 801128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801128e:	f994 4000 	ldrsb.w	r4, [r4]
 8011292:	4b45      	ldr	r3, [pc, #276]	; (80113a8 <powf+0x2ac>)
 8011294:	d713      	bvc.n	80112be <powf+0x1c2>
 8011296:	2201      	movs	r2, #1
 8011298:	e9cd 2300 	strd	r2, r3, [sp]
 801129c:	9508      	str	r5, [sp, #32]
 801129e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80112a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80112a6:	2c00      	cmp	r4, #0
 80112a8:	d0c2      	beq.n	8011230 <powf+0x134>
 80112aa:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 80112ae:	ee17 0a90 	vmov	r0, s15
 80112b2:	f7f3 ffab 	bl	800520c <__aeabi_f2d>
 80112b6:	2c02      	cmp	r4, #2
 80112b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80112bc:	e7c2      	b.n	8011244 <powf+0x148>
 80112be:	2203      	movs	r2, #3
 80112c0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80112c4:	e9cd 2300 	strd	r2, r3, [sp]
 80112c8:	9508      	str	r5, [sp, #32]
 80112ca:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80112ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80112d2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80112d6:	b9fc      	cbnz	r4, 8011318 <powf+0x21c>
 80112d8:	4b37      	ldr	r3, [pc, #220]	; (80113b8 <powf+0x2bc>)
 80112da:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80112de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80112e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80112ea:	d553      	bpl.n	8011394 <powf+0x298>
 80112ec:	eeb0 0a48 	vmov.f32	s0, s16
 80112f0:	f000 fee2 	bl	80120b8 <rintf>
 80112f4:	eeb4 0a48 	vcmp.f32	s0, s16
 80112f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112fc:	d004      	beq.n	8011308 <powf+0x20c>
 80112fe:	4b2f      	ldr	r3, [pc, #188]	; (80113bc <powf+0x2c0>)
 8011300:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011304:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011308:	f996 3000 	ldrsb.w	r3, [r6]
 801130c:	2b02      	cmp	r3, #2
 801130e:	d141      	bne.n	8011394 <powf+0x298>
 8011310:	f7ff fcf0 	bl	8010cf4 <__errno>
 8011314:	2322      	movs	r3, #34	; 0x22
 8011316:	e799      	b.n	801124c <powf+0x150>
 8011318:	4b29      	ldr	r3, [pc, #164]	; (80113c0 <powf+0x2c4>)
 801131a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801131e:	2200      	movs	r2, #0
 8011320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011324:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011328:	d5ee      	bpl.n	8011308 <powf+0x20c>
 801132a:	eeb0 0a48 	vmov.f32	s0, s16
 801132e:	f000 fec3 	bl	80120b8 <rintf>
 8011332:	eeb4 0a48 	vcmp.f32	s0, s16
 8011336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801133a:	d0e5      	beq.n	8011308 <powf+0x20c>
 801133c:	2200      	movs	r2, #0
 801133e:	4b1d      	ldr	r3, [pc, #116]	; (80113b4 <powf+0x2b8>)
 8011340:	e7e0      	b.n	8011304 <powf+0x208>
 8011342:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8011346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801134a:	f47f af4a 	bne.w	80111e2 <powf+0xe6>
 801134e:	eeb0 0a68 	vmov.f32	s0, s17
 8011352:	f000 fea0 	bl	8012096 <finitef>
 8011356:	2800      	cmp	r0, #0
 8011358:	f43f af43 	beq.w	80111e2 <powf+0xe6>
 801135c:	eeb0 0a48 	vmov.f32	s0, s16
 8011360:	f000 fe99 	bl	8012096 <finitef>
 8011364:	2800      	cmp	r0, #0
 8011366:	f43f af3c 	beq.w	80111e2 <powf+0xe6>
 801136a:	2304      	movs	r3, #4
 801136c:	9300      	str	r3, [sp, #0]
 801136e:	4b0e      	ldr	r3, [pc, #56]	; (80113a8 <powf+0x2ac>)
 8011370:	9301      	str	r3, [sp, #4]
 8011372:	ee18 0a90 	vmov	r0, s17
 8011376:	2300      	movs	r3, #0
 8011378:	9308      	str	r3, [sp, #32]
 801137a:	f7f3 ff47 	bl	800520c <__aeabi_f2d>
 801137e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011382:	ee18 0a10 	vmov	r0, s16
 8011386:	f7f3 ff41 	bl	800520c <__aeabi_f2d>
 801138a:	2200      	movs	r2, #0
 801138c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011390:	2300      	movs	r3, #0
 8011392:	e7b7      	b.n	8011304 <powf+0x208>
 8011394:	4668      	mov	r0, sp
 8011396:	f000 fd40 	bl	8011e1a <matherr>
 801139a:	2800      	cmp	r0, #0
 801139c:	f47f af15 	bne.w	80111ca <powf+0xce>
 80113a0:	e7b6      	b.n	8011310 <powf+0x214>
 80113a2:	bf00      	nop
 80113a4:	20000744 	.word	0x20000744
 80113a8:	0802a435 	.word	0x0802a435
 80113ac:	3ff00000 	.word	0x3ff00000
 80113b0:	00000000 	.word	0x00000000
 80113b4:	fff00000 	.word	0xfff00000
 80113b8:	47efffff 	.word	0x47efffff
 80113bc:	c7efffff 	.word	0xc7efffff
 80113c0:	7ff00000 	.word	0x7ff00000

080113c4 <sqrtf>:
 80113c4:	b510      	push	{r4, lr}
 80113c6:	ed2d 8b02 	vpush	{d8}
 80113ca:	b08a      	sub	sp, #40	; 0x28
 80113cc:	eeb0 8a40 	vmov.f32	s16, s0
 80113d0:	f000 fd20 	bl	8011e14 <__ieee754_sqrtf>
 80113d4:	4b21      	ldr	r3, [pc, #132]	; (801145c <sqrtf+0x98>)
 80113d6:	f993 4000 	ldrsb.w	r4, [r3]
 80113da:	1c63      	adds	r3, r4, #1
 80113dc:	d02c      	beq.n	8011438 <sqrtf+0x74>
 80113de:	eeb4 8a48 	vcmp.f32	s16, s16
 80113e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113e6:	d627      	bvs.n	8011438 <sqrtf+0x74>
 80113e8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80113ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113f0:	d522      	bpl.n	8011438 <sqrtf+0x74>
 80113f2:	2301      	movs	r3, #1
 80113f4:	9300      	str	r3, [sp, #0]
 80113f6:	4b1a      	ldr	r3, [pc, #104]	; (8011460 <sqrtf+0x9c>)
 80113f8:	9301      	str	r3, [sp, #4]
 80113fa:	ee18 0a10 	vmov	r0, s16
 80113fe:	2300      	movs	r3, #0
 8011400:	9308      	str	r3, [sp, #32]
 8011402:	f7f3 ff03 	bl	800520c <__aeabi_f2d>
 8011406:	2200      	movs	r2, #0
 8011408:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801140c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011410:	2300      	movs	r3, #0
 8011412:	b9ac      	cbnz	r4, 8011440 <sqrtf+0x7c>
 8011414:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011418:	4668      	mov	r0, sp
 801141a:	f000 fcfe 	bl	8011e1a <matherr>
 801141e:	b1b8      	cbz	r0, 8011450 <sqrtf+0x8c>
 8011420:	9b08      	ldr	r3, [sp, #32]
 8011422:	b11b      	cbz	r3, 801142c <sqrtf+0x68>
 8011424:	f7ff fc66 	bl	8010cf4 <__errno>
 8011428:	9b08      	ldr	r3, [sp, #32]
 801142a:	6003      	str	r3, [r0, #0]
 801142c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011430:	f7f4 f956 	bl	80056e0 <__aeabi_d2f>
 8011434:	ee00 0a10 	vmov	s0, r0
 8011438:	b00a      	add	sp, #40	; 0x28
 801143a:	ecbd 8b02 	vpop	{d8}
 801143e:	bd10      	pop	{r4, pc}
 8011440:	4610      	mov	r0, r2
 8011442:	4619      	mov	r1, r3
 8011444:	f7f4 f864 	bl	8005510 <__aeabi_ddiv>
 8011448:	2c02      	cmp	r4, #2
 801144a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801144e:	d1e3      	bne.n	8011418 <sqrtf+0x54>
 8011450:	f7ff fc50 	bl	8010cf4 <__errno>
 8011454:	2321      	movs	r3, #33	; 0x21
 8011456:	6003      	str	r3, [r0, #0]
 8011458:	e7e2      	b.n	8011420 <sqrtf+0x5c>
 801145a:	bf00      	nop
 801145c:	20000744 	.word	0x20000744
 8011460:	0802a43a 	.word	0x0802a43a

08011464 <__ieee754_expf>:
 8011464:	ee10 2a10 	vmov	r2, s0
 8011468:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801146c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011470:	d902      	bls.n	8011478 <__ieee754_expf+0x14>
 8011472:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011476:	4770      	bx	lr
 8011478:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 801147c:	d106      	bne.n	801148c <__ieee754_expf+0x28>
 801147e:	eddf 7a51 	vldr	s15, [pc, #324]	; 80115c4 <__ieee754_expf+0x160>
 8011482:	2b00      	cmp	r3, #0
 8011484:	bf18      	it	ne
 8011486:	eeb0 0a67 	vmovne.f32	s0, s15
 801148a:	4770      	bx	lr
 801148c:	484e      	ldr	r0, [pc, #312]	; (80115c8 <__ieee754_expf+0x164>)
 801148e:	4282      	cmp	r2, r0
 8011490:	dd04      	ble.n	801149c <__ieee754_expf+0x38>
 8011492:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80115cc <__ieee754_expf+0x168>
 8011496:	ee20 0a00 	vmul.f32	s0, s0, s0
 801149a:	4770      	bx	lr
 801149c:	2a00      	cmp	r2, #0
 801149e:	da03      	bge.n	80114a8 <__ieee754_expf+0x44>
 80114a0:	4a4b      	ldr	r2, [pc, #300]	; (80115d0 <__ieee754_expf+0x16c>)
 80114a2:	4291      	cmp	r1, r2
 80114a4:	f200 808a 	bhi.w	80115bc <__ieee754_expf+0x158>
 80114a8:	4a4a      	ldr	r2, [pc, #296]	; (80115d4 <__ieee754_expf+0x170>)
 80114aa:	4291      	cmp	r1, r2
 80114ac:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80114b0:	d954      	bls.n	801155c <__ieee754_expf+0xf8>
 80114b2:	4a49      	ldr	r2, [pc, #292]	; (80115d8 <__ieee754_expf+0x174>)
 80114b4:	4291      	cmp	r1, r2
 80114b6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80114ba:	d836      	bhi.n	801152a <__ieee754_expf+0xc6>
 80114bc:	4947      	ldr	r1, [pc, #284]	; (80115dc <__ieee754_expf+0x178>)
 80114be:	4411      	add	r1, r2
 80114c0:	ed91 7a00 	vldr	s14, [r1]
 80114c4:	4946      	ldr	r1, [pc, #280]	; (80115e0 <__ieee754_expf+0x17c>)
 80114c6:	440a      	add	r2, r1
 80114c8:	edd2 7a00 	vldr	s15, [r2]
 80114cc:	ee30 7a47 	vsub.f32	s14, s0, s14
 80114d0:	f1c3 0201 	rsb	r2, r3, #1
 80114d4:	1ad2      	subs	r2, r2, r3
 80114d6:	ee37 0a67 	vsub.f32	s0, s14, s15
 80114da:	ee60 6a00 	vmul.f32	s13, s0, s0
 80114de:	eddf 5a41 	vldr	s11, [pc, #260]	; 80115e4 <__ieee754_expf+0x180>
 80114e2:	ed9f 5a41 	vldr	s10, [pc, #260]	; 80115e8 <__ieee754_expf+0x184>
 80114e6:	eea6 5aa5 	vfma.f32	s10, s13, s11
 80114ea:	eddf 5a40 	vldr	s11, [pc, #256]	; 80115ec <__ieee754_expf+0x188>
 80114ee:	eee5 5a26 	vfma.f32	s11, s10, s13
 80114f2:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 80115f0 <__ieee754_expf+0x18c>
 80114f6:	eea5 5aa6 	vfma.f32	s10, s11, s13
 80114fa:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80115f4 <__ieee754_expf+0x190>
 80114fe:	eee5 5a26 	vfma.f32	s11, s10, s13
 8011502:	eeb0 5a40 	vmov.f32	s10, s0
 8011506:	eea5 5ae6 	vfms.f32	s10, s11, s13
 801150a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801150e:	eef0 6a45 	vmov.f32	s13, s10
 8011512:	ee20 5a05 	vmul.f32	s10, s0, s10
 8011516:	bb92      	cbnz	r2, 801157e <__ieee754_expf+0x11a>
 8011518:	ee76 6ae5 	vsub.f32	s13, s13, s11
 801151c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8011520:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011524:	ee36 0a40 	vsub.f32	s0, s12, s0
 8011528:	4770      	bx	lr
 801152a:	4b33      	ldr	r3, [pc, #204]	; (80115f8 <__ieee754_expf+0x194>)
 801152c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80115fc <__ieee754_expf+0x198>
 8011530:	4413      	add	r3, r2
 8011532:	edd3 7a00 	vldr	s15, [r3]
 8011536:	eee0 7a07 	vfma.f32	s15, s0, s14
 801153a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8011600 <__ieee754_expf+0x19c>
 801153e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011542:	ee17 2a90 	vmov	r2, s15
 8011546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801154a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801154e:	eeb0 7a40 	vmov.f32	s14, s0
 8011552:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8011604 <__ieee754_expf+0x1a0>
 8011556:	ee67 7a80 	vmul.f32	s15, s15, s0
 801155a:	e7bc      	b.n	80114d6 <__ieee754_expf+0x72>
 801155c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8011560:	d20b      	bcs.n	801157a <__ieee754_expf+0x116>
 8011562:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80115cc <__ieee754_expf+0x168>
 8011566:	ee70 6a26 	vadd.f32	s13, s0, s13
 801156a:	eef4 6ac6 	vcmpe.f32	s13, s12
 801156e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011572:	dd02      	ble.n	801157a <__ieee754_expf+0x116>
 8011574:	ee30 0a06 	vadd.f32	s0, s0, s12
 8011578:	4770      	bx	lr
 801157a:	2200      	movs	r2, #0
 801157c:	e7ad      	b.n	80114da <__ieee754_expf+0x76>
 801157e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8011582:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8011586:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801158a:	bfb8      	it	lt
 801158c:	3264      	addlt	r2, #100	; 0x64
 801158e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011592:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8011596:	ee76 7a40 	vsub.f32	s15, s12, s0
 801159a:	ee17 3a90 	vmov	r3, s15
 801159e:	bfab      	itete	ge
 80115a0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80115a4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80115a8:	ee00 3a10 	vmovge	s0, r3
 80115ac:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8011608 <__ieee754_expf+0x1a4>
 80115b0:	bfbc      	itt	lt
 80115b2:	ee00 3a10 	vmovlt	s0, r3
 80115b6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80115ba:	4770      	bx	lr
 80115bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80115c4 <__ieee754_expf+0x160>
 80115c0:	4770      	bx	lr
 80115c2:	bf00      	nop
 80115c4:	00000000 	.word	0x00000000
 80115c8:	42b17217 	.word	0x42b17217
 80115cc:	7149f2ca 	.word	0x7149f2ca
 80115d0:	42cff1b5 	.word	0x42cff1b5
 80115d4:	3eb17218 	.word	0x3eb17218
 80115d8:	3f851591 	.word	0x3f851591
 80115dc:	0802a448 	.word	0x0802a448
 80115e0:	0802a450 	.word	0x0802a450
 80115e4:	3331bb4c 	.word	0x3331bb4c
 80115e8:	b5ddea0e 	.word	0xb5ddea0e
 80115ec:	388ab355 	.word	0x388ab355
 80115f0:	bb360b61 	.word	0xbb360b61
 80115f4:	3e2aaaab 	.word	0x3e2aaaab
 80115f8:	0802a440 	.word	0x0802a440
 80115fc:	3fb8aa3b 	.word	0x3fb8aa3b
 8011600:	3f317180 	.word	0x3f317180
 8011604:	3717f7d1 	.word	0x3717f7d1
 8011608:	0d800000 	.word	0x0d800000

0801160c <__ieee754_logf>:
 801160c:	ee10 3a10 	vmov	r3, s0
 8011610:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8011614:	d106      	bne.n	8011624 <__ieee754_logf+0x18>
 8011616:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80117ac <__ieee754_logf+0x1a0>
 801161a:	eddf 7a65 	vldr	s15, [pc, #404]	; 80117b0 <__ieee754_logf+0x1a4>
 801161e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8011622:	4770      	bx	lr
 8011624:	2b00      	cmp	r3, #0
 8011626:	da02      	bge.n	801162e <__ieee754_logf+0x22>
 8011628:	ee30 7a40 	vsub.f32	s14, s0, s0
 801162c:	e7f5      	b.n	801161a <__ieee754_logf+0xe>
 801162e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011632:	db02      	blt.n	801163a <__ieee754_logf+0x2e>
 8011634:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011638:	4770      	bx	lr
 801163a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801163e:	bfbf      	itttt	lt
 8011640:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 80117b4 <__ieee754_logf+0x1a8>
 8011644:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8011648:	f06f 0118 	mvnlt.w	r1, #24
 801164c:	ee17 3a90 	vmovlt	r3, s15
 8011650:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8011654:	bfa8      	it	ge
 8011656:	2100      	movge	r1, #0
 8011658:	3a7f      	subs	r2, #127	; 0x7f
 801165a:	440a      	add	r2, r1
 801165c:	4956      	ldr	r1, [pc, #344]	; (80117b8 <__ieee754_logf+0x1ac>)
 801165e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011662:	4419      	add	r1, r3
 8011664:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8011668:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 801166c:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8011670:	4319      	orrs	r1, r3
 8011672:	ee07 1a90 	vmov	s15, r1
 8011676:	f103 010f 	add.w	r1, r3, #15
 801167a:	f3c1 0116 	ubfx	r1, r1, #0, #23
 801167e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011682:	290f      	cmp	r1, #15
 8011684:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011688:	dc31      	bgt.n	80116ee <__ieee754_logf+0xe2>
 801168a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011692:	d10f      	bne.n	80116b4 <__ieee754_logf+0xa8>
 8011694:	2a00      	cmp	r2, #0
 8011696:	f000 8085 	beq.w	80117a4 <__ieee754_logf+0x198>
 801169a:	ee07 2a90 	vmov	s15, r2
 801169e:	ed9f 0a47 	vldr	s0, [pc, #284]	; 80117bc <__ieee754_logf+0x1b0>
 80116a2:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80117c0 <__ieee754_logf+0x1b4>
 80116a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80116aa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80116ae:	eea7 0a87 	vfma.f32	s0, s15, s14
 80116b2:	4770      	bx	lr
 80116b4:	eddf 7a43 	vldr	s15, [pc, #268]	; 80117c4 <__ieee754_logf+0x1b8>
 80116b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80116bc:	eea0 7a67 	vfms.f32	s14, s0, s15
 80116c0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80116c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80116c8:	b912      	cbnz	r2, 80116d0 <__ieee754_logf+0xc4>
 80116ca:	ee30 0a47 	vsub.f32	s0, s0, s14
 80116ce:	4770      	bx	lr
 80116d0:	ee07 2a90 	vmov	s15, r2
 80116d4:	eddf 6a39 	vldr	s13, [pc, #228]	; 80117bc <__ieee754_logf+0x1b0>
 80116d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80116dc:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80116e0:	ee37 0a40 	vsub.f32	s0, s14, s0
 80116e4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80117c0 <__ieee754_logf+0x1b4>
 80116e8:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80116ec:	4770      	bx	lr
 80116ee:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80116f2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80116f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80117c8 <__ieee754_logf+0x1bc>
 80116fa:	eddf 4a34 	vldr	s9, [pc, #208]	; 80117cc <__ieee754_logf+0x1c0>
 80116fe:	4934      	ldr	r1, [pc, #208]	; (80117d0 <__ieee754_logf+0x1c4>)
 8011700:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8011704:	4419      	add	r1, r3
 8011706:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 801170a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801170e:	430b      	orrs	r3, r1
 8011710:	2b00      	cmp	r3, #0
 8011712:	ee07 2a90 	vmov	s15, r2
 8011716:	ee26 5a06 	vmul.f32	s10, s12, s12
 801171a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801171e:	ee25 7a05 	vmul.f32	s14, s10, s10
 8011722:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80117d4 <__ieee754_logf+0x1c8>
 8011726:	eee7 7a25 	vfma.f32	s15, s14, s11
 801172a:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80117d8 <__ieee754_logf+0x1cc>
 801172e:	eee7 5a87 	vfma.f32	s11, s15, s14
 8011732:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80117dc <__ieee754_logf+0x1d0>
 8011736:	eee7 7a24 	vfma.f32	s15, s14, s9
 801173a:	eddf 4a29 	vldr	s9, [pc, #164]	; 80117e0 <__ieee754_logf+0x1d4>
 801173e:	eee7 4a87 	vfma.f32	s9, s15, s14
 8011742:	eddf 7a28 	vldr	s15, [pc, #160]	; 80117e4 <__ieee754_logf+0x1d8>
 8011746:	eee4 7a87 	vfma.f32	s15, s9, s14
 801174a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801174e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011752:	dd1c      	ble.n	801178e <__ieee754_logf+0x182>
 8011754:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011758:	ee20 7a07 	vmul.f32	s14, s0, s14
 801175c:	ee27 7a00 	vmul.f32	s14, s14, s0
 8011760:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011764:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011768:	b922      	cbnz	r2, 8011774 <__ieee754_logf+0x168>
 801176a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801176e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011772:	4770      	bx	lr
 8011774:	ed9f 6a11 	vldr	s12, [pc, #68]	; 80117bc <__ieee754_logf+0x1b0>
 8011778:	eee6 7a86 	vfma.f32	s15, s13, s12
 801177c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011780:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011784:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80117c0 <__ieee754_logf+0x1b4>
 8011788:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801178c:	4770      	bx	lr
 801178e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011792:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011796:	2a00      	cmp	r2, #0
 8011798:	d0e9      	beq.n	801176e <__ieee754_logf+0x162>
 801179a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80117bc <__ieee754_logf+0x1b0>
 801179e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80117a2:	e7ed      	b.n	8011780 <__ieee754_logf+0x174>
 80117a4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80117b0 <__ieee754_logf+0x1a4>
 80117a8:	4770      	bx	lr
 80117aa:	bf00      	nop
 80117ac:	cc000000 	.word	0xcc000000
 80117b0:	00000000 	.word	0x00000000
 80117b4:	4c000000 	.word	0x4c000000
 80117b8:	004afb20 	.word	0x004afb20
 80117bc:	3717f7d1 	.word	0x3717f7d1
 80117c0:	3f317180 	.word	0x3f317180
 80117c4:	3eaaaaab 	.word	0x3eaaaaab
 80117c8:	3e1cd04f 	.word	0x3e1cd04f
 80117cc:	3e178897 	.word	0x3e178897
 80117d0:	ffcf5c30 	.word	0xffcf5c30
 80117d4:	3e638e29 	.word	0x3e638e29
 80117d8:	3ecccccd 	.word	0x3ecccccd
 80117dc:	3e3a3325 	.word	0x3e3a3325
 80117e0:	3e924925 	.word	0x3e924925
 80117e4:	3f2aaaab 	.word	0x3f2aaaab

080117e8 <__ieee754_log10f>:
 80117e8:	b508      	push	{r3, lr}
 80117ea:	ee10 2a10 	vmov	r2, s0
 80117ee:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80117f2:	ed2d 8b02 	vpush	{d8}
 80117f6:	d108      	bne.n	801180a <__ieee754_log10f+0x22>
 80117f8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801187c <__ieee754_log10f+0x94>
 80117fc:	eddf 7a20 	vldr	s15, [pc, #128]	; 8011880 <__ieee754_log10f+0x98>
 8011800:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8011804:	ecbd 8b02 	vpop	{d8}
 8011808:	bd08      	pop	{r3, pc}
 801180a:	2a00      	cmp	r2, #0
 801180c:	da02      	bge.n	8011814 <__ieee754_log10f+0x2c>
 801180e:	ee30 7a40 	vsub.f32	s14, s0, s0
 8011812:	e7f3      	b.n	80117fc <__ieee754_log10f+0x14>
 8011814:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011818:	db02      	blt.n	8011820 <__ieee754_log10f+0x38>
 801181a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801181e:	e7f1      	b.n	8011804 <__ieee754_log10f+0x1c>
 8011820:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8011824:	bfbf      	itttt	lt
 8011826:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 8011884 <__ieee754_log10f+0x9c>
 801182a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801182e:	f06f 0118 	mvnlt.w	r1, #24
 8011832:	ee17 2a90 	vmovlt	r2, s15
 8011836:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801183a:	bfa8      	it	ge
 801183c:	2100      	movge	r1, #0
 801183e:	3b7f      	subs	r3, #127	; 0x7f
 8011840:	440b      	add	r3, r1
 8011842:	0fd9      	lsrs	r1, r3, #31
 8011844:	440b      	add	r3, r1
 8011846:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801184a:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 801184e:	ee07 3a90 	vmov	s15, r3
 8011852:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 8011856:	ee00 3a10 	vmov	s0, r3
 801185a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801185e:	f7ff fed5 	bl	801160c <__ieee754_logf>
 8011862:	eddf 7a09 	vldr	s15, [pc, #36]	; 8011888 <__ieee754_log10f+0xa0>
 8011866:	ee20 0a27 	vmul.f32	s0, s0, s15
 801186a:	eddf 7a08 	vldr	s15, [pc, #32]	; 801188c <__ieee754_log10f+0xa4>
 801186e:	eea8 0a27 	vfma.f32	s0, s16, s15
 8011872:	eddf 7a07 	vldr	s15, [pc, #28]	; 8011890 <__ieee754_log10f+0xa8>
 8011876:	eea8 0a27 	vfma.f32	s0, s16, s15
 801187a:	e7c3      	b.n	8011804 <__ieee754_log10f+0x1c>
 801187c:	cc000000 	.word	0xcc000000
 8011880:	00000000 	.word	0x00000000
 8011884:	4c000000 	.word	0x4c000000
 8011888:	3ede5bd9 	.word	0x3ede5bd9
 801188c:	355427db 	.word	0x355427db
 8011890:	3e9a2080 	.word	0x3e9a2080

08011894 <__ieee754_powf>:
 8011894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011898:	ee10 5a90 	vmov	r5, s1
 801189c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80118a0:	ed2d 8b02 	vpush	{d8}
 80118a4:	eeb0 8a40 	vmov.f32	s16, s0
 80118a8:	eef0 8a60 	vmov.f32	s17, s1
 80118ac:	f000 8293 	beq.w	8011dd6 <__ieee754_powf+0x542>
 80118b0:	ee10 8a10 	vmov	r8, s0
 80118b4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80118b8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80118bc:	dc06      	bgt.n	80118cc <__ieee754_powf+0x38>
 80118be:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80118c2:	dd0a      	ble.n	80118da <__ieee754_powf+0x46>
 80118c4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80118c8:	f000 8285 	beq.w	8011dd6 <__ieee754_powf+0x542>
 80118cc:	ecbd 8b02 	vpop	{d8}
 80118d0:	48d9      	ldr	r0, [pc, #868]	; (8011c38 <__ieee754_powf+0x3a4>)
 80118d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118d6:	f000 bbe9 	b.w	80120ac <nanf>
 80118da:	f1b8 0f00 	cmp.w	r8, #0
 80118de:	da1d      	bge.n	801191c <__ieee754_powf+0x88>
 80118e0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80118e4:	da2c      	bge.n	8011940 <__ieee754_powf+0xac>
 80118e6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80118ea:	db30      	blt.n	801194e <__ieee754_powf+0xba>
 80118ec:	15fb      	asrs	r3, r7, #23
 80118ee:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80118f2:	fa47 f603 	asr.w	r6, r7, r3
 80118f6:	fa06 f303 	lsl.w	r3, r6, r3
 80118fa:	42bb      	cmp	r3, r7
 80118fc:	d127      	bne.n	801194e <__ieee754_powf+0xba>
 80118fe:	f006 0601 	and.w	r6, r6, #1
 8011902:	f1c6 0602 	rsb	r6, r6, #2
 8011906:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801190a:	d122      	bne.n	8011952 <__ieee754_powf+0xbe>
 801190c:	2d00      	cmp	r5, #0
 801190e:	f280 8268 	bge.w	8011de2 <__ieee754_powf+0x54e>
 8011912:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011916:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801191a:	e00d      	b.n	8011938 <__ieee754_powf+0xa4>
 801191c:	2600      	movs	r6, #0
 801191e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8011922:	d1f0      	bne.n	8011906 <__ieee754_powf+0x72>
 8011924:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8011928:	f000 8255 	beq.w	8011dd6 <__ieee754_powf+0x542>
 801192c:	dd0a      	ble.n	8011944 <__ieee754_powf+0xb0>
 801192e:	2d00      	cmp	r5, #0
 8011930:	f280 8254 	bge.w	8011ddc <__ieee754_powf+0x548>
 8011934:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8011c3c <__ieee754_powf+0x3a8>
 8011938:	ecbd 8b02 	vpop	{d8}
 801193c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011940:	2602      	movs	r6, #2
 8011942:	e7ec      	b.n	801191e <__ieee754_powf+0x8a>
 8011944:	2d00      	cmp	r5, #0
 8011946:	daf5      	bge.n	8011934 <__ieee754_powf+0xa0>
 8011948:	eeb1 0a68 	vneg.f32	s0, s17
 801194c:	e7f4      	b.n	8011938 <__ieee754_powf+0xa4>
 801194e:	2600      	movs	r6, #0
 8011950:	e7d9      	b.n	8011906 <__ieee754_powf+0x72>
 8011952:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8011956:	d102      	bne.n	801195e <__ieee754_powf+0xca>
 8011958:	ee28 0a08 	vmul.f32	s0, s16, s16
 801195c:	e7ec      	b.n	8011938 <__ieee754_powf+0xa4>
 801195e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8011962:	eeb0 0a48 	vmov.f32	s0, s16
 8011966:	d108      	bne.n	801197a <__ieee754_powf+0xe6>
 8011968:	f1b8 0f00 	cmp.w	r8, #0
 801196c:	db05      	blt.n	801197a <__ieee754_powf+0xe6>
 801196e:	ecbd 8b02 	vpop	{d8}
 8011972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011976:	f000 ba4d 	b.w	8011e14 <__ieee754_sqrtf>
 801197a:	f000 fb85 	bl	8012088 <fabsf>
 801197e:	b124      	cbz	r4, 801198a <__ieee754_powf+0xf6>
 8011980:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8011984:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8011988:	d117      	bne.n	80119ba <__ieee754_powf+0x126>
 801198a:	2d00      	cmp	r5, #0
 801198c:	bfbc      	itt	lt
 801198e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8011992:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8011996:	f1b8 0f00 	cmp.w	r8, #0
 801199a:	dacd      	bge.n	8011938 <__ieee754_powf+0xa4>
 801199c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80119a0:	ea54 0306 	orrs.w	r3, r4, r6
 80119a4:	d104      	bne.n	80119b0 <__ieee754_powf+0x11c>
 80119a6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80119aa:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80119ae:	e7c3      	b.n	8011938 <__ieee754_powf+0xa4>
 80119b0:	2e01      	cmp	r6, #1
 80119b2:	d1c1      	bne.n	8011938 <__ieee754_powf+0xa4>
 80119b4:	eeb1 0a40 	vneg.f32	s0, s0
 80119b8:	e7be      	b.n	8011938 <__ieee754_powf+0xa4>
 80119ba:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80119be:	3801      	subs	r0, #1
 80119c0:	ea56 0300 	orrs.w	r3, r6, r0
 80119c4:	d104      	bne.n	80119d0 <__ieee754_powf+0x13c>
 80119c6:	ee38 8a48 	vsub.f32	s16, s16, s16
 80119ca:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80119ce:	e7b3      	b.n	8011938 <__ieee754_powf+0xa4>
 80119d0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80119d4:	dd6d      	ble.n	8011ab2 <__ieee754_powf+0x21e>
 80119d6:	4b9a      	ldr	r3, [pc, #616]	; (8011c40 <__ieee754_powf+0x3ac>)
 80119d8:	429c      	cmp	r4, r3
 80119da:	dc06      	bgt.n	80119ea <__ieee754_powf+0x156>
 80119dc:	2d00      	cmp	r5, #0
 80119de:	daa9      	bge.n	8011934 <__ieee754_powf+0xa0>
 80119e0:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8011c44 <__ieee754_powf+0x3b0>
 80119e4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80119e8:	e7a6      	b.n	8011938 <__ieee754_powf+0xa4>
 80119ea:	4b97      	ldr	r3, [pc, #604]	; (8011c48 <__ieee754_powf+0x3b4>)
 80119ec:	429c      	cmp	r4, r3
 80119ee:	dd02      	ble.n	80119f6 <__ieee754_powf+0x162>
 80119f0:	2d00      	cmp	r5, #0
 80119f2:	dcf5      	bgt.n	80119e0 <__ieee754_powf+0x14c>
 80119f4:	e79e      	b.n	8011934 <__ieee754_powf+0xa0>
 80119f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80119fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80119fe:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8011c4c <__ieee754_powf+0x3b8>
 8011a02:	eef1 6a40 	vneg.f32	s13, s0
 8011a06:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8011a0a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011a0e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011a12:	eee7 7a40 	vfms.f32	s15, s14, s0
 8011a16:	ee60 0a00 	vmul.f32	s1, s0, s0
 8011a1a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8011c50 <__ieee754_powf+0x3bc>
 8011a1e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8011a22:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8011c54 <__ieee754_powf+0x3c0>
 8011a26:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8011a2a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011a2e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8011c58 <__ieee754_powf+0x3c4>
 8011a32:	eeb0 6a67 	vmov.f32	s12, s15
 8011a36:	eea0 6a07 	vfma.f32	s12, s0, s14
 8011a3a:	ee16 3a10 	vmov	r3, s12
 8011a3e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011a42:	f023 030f 	bic.w	r3, r3, #15
 8011a46:	ee00 3a90 	vmov	s1, r3
 8011a4a:	eee6 0a87 	vfma.f32	s1, s13, s14
 8011a4e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8011a52:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8011a56:	f025 050f 	bic.w	r5, r5, #15
 8011a5a:	ee07 5a10 	vmov	s14, r5
 8011a5e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8011a62:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8011a66:	ee07 3a90 	vmov	s15, r3
 8011a6a:	eee7 0a27 	vfma.f32	s1, s14, s15
 8011a6e:	3e01      	subs	r6, #1
 8011a70:	ea56 0200 	orrs.w	r2, r6, r0
 8011a74:	ee07 5a10 	vmov	s14, r5
 8011a78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011a7c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8011a80:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8011a84:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8011a88:	ee17 4a10 	vmov	r4, s14
 8011a8c:	bf08      	it	eq
 8011a8e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8011a92:	2c00      	cmp	r4, #0
 8011a94:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011a98:	f340 8184 	ble.w	8011da4 <__ieee754_powf+0x510>
 8011a9c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8011aa0:	f340 80fc 	ble.w	8011c9c <__ieee754_powf+0x408>
 8011aa4:	eddf 7a67 	vldr	s15, [pc, #412]	; 8011c44 <__ieee754_powf+0x3b0>
 8011aa8:	ee28 0a27 	vmul.f32	s0, s16, s15
 8011aac:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011ab0:	e742      	b.n	8011938 <__ieee754_powf+0xa4>
 8011ab2:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8011ab6:	bfbf      	itttt	lt
 8011ab8:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8011c5c <__ieee754_powf+0x3c8>
 8011abc:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8011ac0:	f06f 0217 	mvnlt.w	r2, #23
 8011ac4:	ee17 4a90 	vmovlt	r4, s15
 8011ac8:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8011acc:	bfa8      	it	ge
 8011ace:	2200      	movge	r2, #0
 8011ad0:	3b7f      	subs	r3, #127	; 0x7f
 8011ad2:	4413      	add	r3, r2
 8011ad4:	4a62      	ldr	r2, [pc, #392]	; (8011c60 <__ieee754_powf+0x3cc>)
 8011ad6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8011ada:	4294      	cmp	r4, r2
 8011adc:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8011ae0:	dd06      	ble.n	8011af0 <__ieee754_powf+0x25c>
 8011ae2:	4a60      	ldr	r2, [pc, #384]	; (8011c64 <__ieee754_powf+0x3d0>)
 8011ae4:	4294      	cmp	r4, r2
 8011ae6:	f340 80a5 	ble.w	8011c34 <__ieee754_powf+0x3a0>
 8011aea:	3301      	adds	r3, #1
 8011aec:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8011af0:	2400      	movs	r4, #0
 8011af2:	4a5d      	ldr	r2, [pc, #372]	; (8011c68 <__ieee754_powf+0x3d4>)
 8011af4:	00a7      	lsls	r7, r4, #2
 8011af6:	443a      	add	r2, r7
 8011af8:	ee07 1a90 	vmov	s15, r1
 8011afc:	ed92 7a00 	vldr	s14, [r2]
 8011b00:	4a5a      	ldr	r2, [pc, #360]	; (8011c6c <__ieee754_powf+0x3d8>)
 8011b02:	ee37 6a27 	vadd.f32	s12, s14, s15
 8011b06:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8011b0a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8011b0e:	1049      	asrs	r1, r1, #1
 8011b10:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8011b14:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8011b18:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8011b1c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8011b20:	ee06 1a10 	vmov	s12, r1
 8011b24:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8011b28:	ee14 ca90 	vmov	ip, s9
 8011b2c:	ea02 0c0c 	and.w	ip, r2, ip
 8011b30:	ee05 ca10 	vmov	s10, ip
 8011b34:	eeb1 4a45 	vneg.f32	s8, s10
 8011b38:	eee4 5a06 	vfma.f32	s11, s8, s12
 8011b3c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8011b40:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8011c70 <__ieee754_powf+0x3dc>
 8011b44:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8011b48:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8011b4c:	eee4 5a06 	vfma.f32	s11, s8, s12
 8011b50:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8011b54:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8011b58:	eddf 5a46 	vldr	s11, [pc, #280]	; 8011c74 <__ieee754_powf+0x3e0>
 8011b5c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8011b60:	eddf 5a45 	vldr	s11, [pc, #276]	; 8011c78 <__ieee754_powf+0x3e4>
 8011b64:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011b68:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8011c4c <__ieee754_powf+0x3b8>
 8011b6c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8011b70:	eddf 5a42 	vldr	s11, [pc, #264]	; 8011c7c <__ieee754_powf+0x3e8>
 8011b74:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011b78:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8011c80 <__ieee754_powf+0x3ec>
 8011b7c:	ee75 6a24 	vadd.f32	s13, s10, s9
 8011b80:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8011b84:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011b88:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8011b8c:	eef0 7a65 	vmov.f32	s15, s11
 8011b90:	eee3 6a87 	vfma.f32	s13, s7, s14
 8011b94:	eee5 7a05 	vfma.f32	s15, s10, s10
 8011b98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011b9c:	ee17 1a90 	vmov	r1, s15
 8011ba0:	4011      	ands	r1, r2
 8011ba2:	ee07 1a90 	vmov	s15, r1
 8011ba6:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8011baa:	eddf 5a36 	vldr	s11, [pc, #216]	; 8011c84 <__ieee754_powf+0x3f0>
 8011bae:	eea4 7a05 	vfma.f32	s14, s8, s10
 8011bb2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011bb6:	ee27 7a24 	vmul.f32	s14, s14, s9
 8011bba:	eea7 7a86 	vfma.f32	s14, s15, s12
 8011bbe:	eeb0 6a47 	vmov.f32	s12, s14
 8011bc2:	eea5 6a27 	vfma.f32	s12, s10, s15
 8011bc6:	ee16 1a10 	vmov	r1, s12
 8011bca:	4011      	ands	r1, r2
 8011bcc:	ee06 1a90 	vmov	s13, r1
 8011bd0:	eee4 6a27 	vfma.f32	s13, s8, s15
 8011bd4:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8011c88 <__ieee754_powf+0x3f4>
 8011bd8:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011bdc:	ee06 1a10 	vmov	s12, r1
 8011be0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011be4:	eddf 7a29 	vldr	s15, [pc, #164]	; 8011c8c <__ieee754_powf+0x3f8>
 8011be8:	4929      	ldr	r1, [pc, #164]	; (8011c90 <__ieee754_powf+0x3fc>)
 8011bea:	eea6 7a27 	vfma.f32	s14, s12, s15
 8011bee:	4439      	add	r1, r7
 8011bf0:	edd1 7a00 	vldr	s15, [r1]
 8011bf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011bf8:	ee07 3a90 	vmov	s15, r3
 8011bfc:	eef0 0a47 	vmov.f32	s1, s14
 8011c00:	4b24      	ldr	r3, [pc, #144]	; (8011c94 <__ieee754_powf+0x400>)
 8011c02:	eee6 0a25 	vfma.f32	s1, s12, s11
 8011c06:	443b      	add	r3, r7
 8011c08:	ed93 5a00 	vldr	s10, [r3]
 8011c0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011c10:	ee70 0a85 	vadd.f32	s1, s1, s10
 8011c14:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8011c18:	ee17 3a90 	vmov	r3, s15
 8011c1c:	4013      	ands	r3, r2
 8011c1e:	ee07 3a90 	vmov	s15, r3
 8011c22:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011c26:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8011c2a:	eee6 7a65 	vfms.f32	s15, s12, s11
 8011c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011c32:	e70e      	b.n	8011a52 <__ieee754_powf+0x1be>
 8011c34:	2401      	movs	r4, #1
 8011c36:	e75c      	b.n	8011af2 <__ieee754_powf+0x25e>
 8011c38:	0802a434 	.word	0x0802a434
 8011c3c:	00000000 	.word	0x00000000
 8011c40:	3f7ffff7 	.word	0x3f7ffff7
 8011c44:	7149f2ca 	.word	0x7149f2ca
 8011c48:	3f800007 	.word	0x3f800007
 8011c4c:	3eaaaaab 	.word	0x3eaaaaab
 8011c50:	36eca570 	.word	0x36eca570
 8011c54:	3fb8aa3b 	.word	0x3fb8aa3b
 8011c58:	3fb8aa00 	.word	0x3fb8aa00
 8011c5c:	4b800000 	.word	0x4b800000
 8011c60:	001cc471 	.word	0x001cc471
 8011c64:	005db3d6 	.word	0x005db3d6
 8011c68:	0802a458 	.word	0x0802a458
 8011c6c:	fffff000 	.word	0xfffff000
 8011c70:	3e6c3255 	.word	0x3e6c3255
 8011c74:	3e53f142 	.word	0x3e53f142
 8011c78:	3e8ba305 	.word	0x3e8ba305
 8011c7c:	3edb6db7 	.word	0x3edb6db7
 8011c80:	3f19999a 	.word	0x3f19999a
 8011c84:	3f763800 	.word	0x3f763800
 8011c88:	3f76384f 	.word	0x3f76384f
 8011c8c:	369dc3a0 	.word	0x369dc3a0
 8011c90:	0802a468 	.word	0x0802a468
 8011c94:	0802a460 	.word	0x0802a460
 8011c98:	3338aa3c 	.word	0x3338aa3c
 8011c9c:	f040 8092 	bne.w	8011dc4 <__ieee754_powf+0x530>
 8011ca0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8011c98 <__ieee754_powf+0x404>
 8011ca4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011ca8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8011cac:	eef4 6ac7 	vcmpe.f32	s13, s14
 8011cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cb4:	f73f aef6 	bgt.w	8011aa4 <__ieee754_powf+0x210>
 8011cb8:	15db      	asrs	r3, r3, #23
 8011cba:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8011cbe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011cc2:	4103      	asrs	r3, r0
 8011cc4:	4423      	add	r3, r4
 8011cc6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011cca:	4947      	ldr	r1, [pc, #284]	; (8011de8 <__ieee754_powf+0x554>)
 8011ccc:	3a7f      	subs	r2, #127	; 0x7f
 8011cce:	4111      	asrs	r1, r2
 8011cd0:	ea23 0101 	bic.w	r1, r3, r1
 8011cd4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8011cd8:	ee07 1a10 	vmov	s14, r1
 8011cdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8011ce0:	f1c2 0217 	rsb	r2, r2, #23
 8011ce4:	4110      	asrs	r0, r2
 8011ce6:	2c00      	cmp	r4, #0
 8011ce8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011cec:	bfb8      	it	lt
 8011cee:	4240      	neglt	r0, r0
 8011cf0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8011cf4:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8011dec <__ieee754_powf+0x558>
 8011cf8:	ee17 3a10 	vmov	r3, s14
 8011cfc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011d00:	f023 030f 	bic.w	r3, r3, #15
 8011d04:	ee07 3a10 	vmov	s14, r3
 8011d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011d0c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8011d10:	eddf 7a37 	vldr	s15, [pc, #220]	; 8011df0 <__ieee754_powf+0x55c>
 8011d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011d18:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8011d1c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8011df4 <__ieee754_powf+0x560>
 8011d20:	eeb0 0a67 	vmov.f32	s0, s15
 8011d24:	eea7 0a26 	vfma.f32	s0, s14, s13
 8011d28:	eeb0 6a40 	vmov.f32	s12, s0
 8011d2c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8011d30:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011d34:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011d38:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8011df8 <__ieee754_powf+0x564>
 8011d3c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8011dfc <__ieee754_powf+0x568>
 8011d40:	eea7 6a26 	vfma.f32	s12, s14, s13
 8011d44:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8011e00 <__ieee754_powf+0x56c>
 8011d48:	eee6 6a07 	vfma.f32	s13, s12, s14
 8011d4c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8011e04 <__ieee754_powf+0x570>
 8011d50:	eea6 6a87 	vfma.f32	s12, s13, s14
 8011d54:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8011e08 <__ieee754_powf+0x574>
 8011d58:	eee6 6a07 	vfma.f32	s13, s12, s14
 8011d5c:	eeb0 6a40 	vmov.f32	s12, s0
 8011d60:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8011d64:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011d68:	eeb0 7a46 	vmov.f32	s14, s12
 8011d6c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8011d70:	ee20 6a06 	vmul.f32	s12, s0, s12
 8011d74:	eee0 7a27 	vfma.f32	s15, s0, s15
 8011d78:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8011d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011d80:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011d84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011d88:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011d8c:	ee10 3a10 	vmov	r3, s0
 8011d90:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8011d94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011d98:	da1a      	bge.n	8011dd0 <__ieee754_powf+0x53c>
 8011d9a:	f000 f9e7 	bl	801216c <scalbnf>
 8011d9e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8011da2:	e5c9      	b.n	8011938 <__ieee754_powf+0xa4>
 8011da4:	4a19      	ldr	r2, [pc, #100]	; (8011e0c <__ieee754_powf+0x578>)
 8011da6:	4293      	cmp	r3, r2
 8011da8:	dd02      	ble.n	8011db0 <__ieee754_powf+0x51c>
 8011daa:	eddf 7a19 	vldr	s15, [pc, #100]	; 8011e10 <__ieee754_powf+0x57c>
 8011dae:	e67b      	b.n	8011aa8 <__ieee754_powf+0x214>
 8011db0:	d108      	bne.n	8011dc4 <__ieee754_powf+0x530>
 8011db2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011db6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8011dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dbe:	f6ff af7b 	blt.w	8011cb8 <__ieee754_powf+0x424>
 8011dc2:	e7f2      	b.n	8011daa <__ieee754_powf+0x516>
 8011dc4:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8011dc8:	f73f af76 	bgt.w	8011cb8 <__ieee754_powf+0x424>
 8011dcc:	2000      	movs	r0, #0
 8011dce:	e78f      	b.n	8011cf0 <__ieee754_powf+0x45c>
 8011dd0:	ee00 3a10 	vmov	s0, r3
 8011dd4:	e7e3      	b.n	8011d9e <__ieee754_powf+0x50a>
 8011dd6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011dda:	e5ad      	b.n	8011938 <__ieee754_powf+0xa4>
 8011ddc:	eeb0 0a68 	vmov.f32	s0, s17
 8011de0:	e5aa      	b.n	8011938 <__ieee754_powf+0xa4>
 8011de2:	eeb0 0a48 	vmov.f32	s0, s16
 8011de6:	e5a7      	b.n	8011938 <__ieee754_powf+0xa4>
 8011de8:	007fffff 	.word	0x007fffff
 8011dec:	3f317218 	.word	0x3f317218
 8011df0:	35bfbe8c 	.word	0x35bfbe8c
 8011df4:	3f317200 	.word	0x3f317200
 8011df8:	3331bb4c 	.word	0x3331bb4c
 8011dfc:	b5ddea0e 	.word	0xb5ddea0e
 8011e00:	388ab355 	.word	0x388ab355
 8011e04:	bb360b61 	.word	0xbb360b61
 8011e08:	3e2aaaab 	.word	0x3e2aaaab
 8011e0c:	43160000 	.word	0x43160000
 8011e10:	0da24260 	.word	0x0da24260

08011e14 <__ieee754_sqrtf>:
 8011e14:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011e18:	4770      	bx	lr

08011e1a <matherr>:
 8011e1a:	2000      	movs	r0, #0
 8011e1c:	4770      	bx	lr
	...

08011e20 <nan>:
 8011e20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011e28 <nan+0x8>
 8011e24:	4770      	bx	lr
 8011e26:	bf00      	nop
 8011e28:	00000000 	.word	0x00000000
 8011e2c:	7ff80000 	.word	0x7ff80000

08011e30 <expm1f>:
 8011e30:	ee10 2a10 	vmov	r2, s0
 8011e34:	4985      	ldr	r1, [pc, #532]	; (801204c <expm1f+0x21c>)
 8011e36:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8011e3a:	428b      	cmp	r3, r1
 8011e3c:	d924      	bls.n	8011e88 <expm1f+0x58>
 8011e3e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011e42:	d902      	bls.n	8011e4a <expm1f+0x1a>
 8011e44:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011e48:	4770      	bx	lr
 8011e4a:	d106      	bne.n	8011e5a <expm1f+0x2a>
 8011e4c:	2a00      	cmp	r2, #0
 8011e4e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8011e52:	bfb8      	it	lt
 8011e54:	eeb0 0a67 	vmovlt.f32	s0, s15
 8011e58:	4770      	bx	lr
 8011e5a:	2a00      	cmp	r2, #0
 8011e5c:	db08      	blt.n	8011e70 <expm1f+0x40>
 8011e5e:	4a7c      	ldr	r2, [pc, #496]	; (8012050 <expm1f+0x220>)
 8011e60:	4293      	cmp	r3, r2
 8011e62:	f240 80eb 	bls.w	801203c <expm1f+0x20c>
 8011e66:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8012054 <expm1f+0x224>
 8011e6a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011e6e:	4770      	bx	lr
 8011e70:	eddf 7a79 	vldr	s15, [pc, #484]	; 8012058 <expm1f+0x228>
 8011e74:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011e78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e80:	d554      	bpl.n	8011f2c <expm1f+0xfc>
 8011e82:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8011e86:	4770      	bx	lr
 8011e88:	4974      	ldr	r1, [pc, #464]	; (801205c <expm1f+0x22c>)
 8011e8a:	428b      	cmp	r3, r1
 8011e8c:	d96d      	bls.n	8011f6a <expm1f+0x13a>
 8011e8e:	4974      	ldr	r1, [pc, #464]	; (8012060 <expm1f+0x230>)
 8011e90:	428b      	cmp	r3, r1
 8011e92:	d84b      	bhi.n	8011f2c <expm1f+0xfc>
 8011e94:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8012064 <expm1f+0x234>
 8011e98:	2a00      	cmp	r2, #0
 8011e9a:	bfa7      	ittee	ge
 8011e9c:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8011ea0:	eddf 7a71 	vldrge	s15, [pc, #452]	; 8012068 <expm1f+0x238>
 8011ea4:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 801206c <expm1f+0x23c>
 8011ea8:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8011eac:	bfac      	ite	ge
 8011eae:	2301      	movge	r3, #1
 8011eb0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011eb4:	ee37 0a67 	vsub.f32	s0, s14, s15
 8011eb8:	ee37 7a40 	vsub.f32	s14, s14, s0
 8011ebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ec0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8011ec4:	ee20 5a25 	vmul.f32	s10, s0, s11
 8011ec8:	eddf 6a69 	vldr	s13, [pc, #420]	; 8012070 <expm1f+0x240>
 8011ecc:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8012074 <expm1f+0x244>
 8011ed0:	ee20 7a05 	vmul.f32	s14, s0, s10
 8011ed4:	eea7 6a26 	vfma.f32	s12, s14, s13
 8011ed8:	eddf 6a67 	vldr	s13, [pc, #412]	; 8012078 <expm1f+0x248>
 8011edc:	eee6 6a07 	vfma.f32	s13, s12, s14
 8011ee0:	ed9f 6a66 	vldr	s12, [pc, #408]	; 801207c <expm1f+0x24c>
 8011ee4:	eea6 6a87 	vfma.f32	s12, s13, s14
 8011ee8:	eddf 6a65 	vldr	s13, [pc, #404]	; 8012080 <expm1f+0x250>
 8011eec:	eee6 6a07 	vfma.f32	s13, s12, s14
 8011ef0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8011ef4:	eef0 4a46 	vmov.f32	s9, s12
 8011ef8:	eee6 4a87 	vfma.f32	s9, s13, s14
 8011efc:	eef0 6a64 	vmov.f32	s13, s9
 8011f00:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8011f04:	eee5 4a66 	vfms.f32	s9, s10, s13
 8011f08:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8011f0c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8011f10:	eee0 6a64 	vfms.f32	s13, s0, s9
 8011f14:	eef0 4a66 	vmov.f32	s9, s13
 8011f18:	eec5 6a24 	vdiv.f32	s13, s10, s9
 8011f1c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011f20:	bb8b      	cbnz	r3, 8011f86 <expm1f+0x156>
 8011f22:	eef0 7a47 	vmov.f32	s15, s14
 8011f26:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8011f2a:	e027      	b.n	8011f7c <expm1f+0x14c>
 8011f2c:	eddf 7a55 	vldr	s15, [pc, #340]	; 8012084 <expm1f+0x254>
 8011f30:	2a00      	cmp	r2, #0
 8011f32:	ee20 7a27 	vmul.f32	s14, s0, s15
 8011f36:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011f3a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8011f3e:	bfa8      	it	ge
 8011f40:	eef0 7a66 	vmovge.f32	s15, s13
 8011f44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011f48:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8012064 <expm1f+0x234>
 8011f4c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8012068 <expm1f+0x238>
 8011f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f54:	ee17 3a90 	vmov	r3, s15
 8011f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f5c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011f60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011f64:	eeb0 7a40 	vmov.f32	s14, s0
 8011f68:	e7a4      	b.n	8011eb4 <expm1f+0x84>
 8011f6a:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8011f6e:	d208      	bcs.n	8011f82 <expm1f+0x152>
 8011f70:	eddf 7a38 	vldr	s15, [pc, #224]	; 8012054 <expm1f+0x224>
 8011f74:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011f78:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8011f7c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011f80:	4770      	bx	lr
 8011f82:	2300      	movs	r3, #0
 8011f84:	e79c      	b.n	8011ec0 <expm1f+0x90>
 8011f86:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011f8a:	1c5a      	adds	r2, r3, #1
 8011f8c:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8011f90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011f94:	d106      	bne.n	8011fa4 <expm1f+0x174>
 8011f96:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011f9a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8011f9e:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8011fa2:	4770      	bx	lr
 8011fa4:	2b01      	cmp	r3, #1
 8011fa6:	d118      	bne.n	8011fda <expm1f+0x1aa>
 8011fa8:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8011fac:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8011fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fb4:	bf41      	itttt	mi
 8011fb6:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8011fba:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 8011fbe:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 8011fc2:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 8011fc6:	bf5f      	itttt	pl
 8011fc8:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 8011fcc:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 8011fd0:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 8011fd4:	eeb0 0a46 	vmovpl.f32	s0, s12
 8011fd8:	4770      	bx	lr
 8011fda:	1c5a      	adds	r2, r3, #1
 8011fdc:	2a39      	cmp	r2, #57	; 0x39
 8011fde:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8011fe2:	d90b      	bls.n	8011ffc <expm1f+0x1cc>
 8011fe4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011fe8:	ee36 0a40 	vsub.f32	s0, s12, s0
 8011fec:	ee10 3a10 	vmov	r3, s0
 8011ff0:	440b      	add	r3, r1
 8011ff2:	ee00 3a10 	vmov	s0, r3
 8011ff6:	ee30 0a46 	vsub.f32	s0, s0, s12
 8011ffa:	4770      	bx	lr
 8011ffc:	2b16      	cmp	r3, #22
 8011ffe:	dc11      	bgt.n	8012024 <expm1f+0x1f4>
 8012000:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012004:	fa42 f303 	asr.w	r3, r2, r3
 8012008:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 801200c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8012010:	ee07 3a90 	vmov	s15, r3
 8012014:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8012018:	ee10 3a10 	vmov	r3, s0
 801201c:	440b      	add	r3, r1
 801201e:	ee00 3a10 	vmov	s0, r3
 8012022:	4770      	bx	lr
 8012024:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8012028:	05db      	lsls	r3, r3, #23
 801202a:	ee07 3a10 	vmov	s14, r3
 801202e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012032:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012036:	ee30 0a06 	vadd.f32	s0, s0, s12
 801203a:	e7ed      	b.n	8012018 <expm1f+0x1e8>
 801203c:	eddf 7a11 	vldr	s15, [pc, #68]	; 8012084 <expm1f+0x254>
 8012040:	ee20 7a27 	vmul.f32	s14, s0, s15
 8012044:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012048:	e77c      	b.n	8011f44 <expm1f+0x114>
 801204a:	bf00      	nop
 801204c:	4195b843 	.word	0x4195b843
 8012050:	42b17217 	.word	0x42b17217
 8012054:	7149f2ca 	.word	0x7149f2ca
 8012058:	0da24260 	.word	0x0da24260
 801205c:	3eb17218 	.word	0x3eb17218
 8012060:	3f851591 	.word	0x3f851591
 8012064:	3f317180 	.word	0x3f317180
 8012068:	3717f7d1 	.word	0x3717f7d1
 801206c:	b717f7d1 	.word	0xb717f7d1
 8012070:	b457edbb 	.word	0xb457edbb
 8012074:	36867e54 	.word	0x36867e54
 8012078:	b8a670cd 	.word	0xb8a670cd
 801207c:	3ad00d01 	.word	0x3ad00d01
 8012080:	bd088889 	.word	0xbd088889
 8012084:	3fb8aa3b 	.word	0x3fb8aa3b

08012088 <fabsf>:
 8012088:	ee10 3a10 	vmov	r3, s0
 801208c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012090:	ee00 3a10 	vmov	s0, r3
 8012094:	4770      	bx	lr

08012096 <finitef>:
 8012096:	ee10 3a10 	vmov	r3, s0
 801209a:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 801209e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80120a2:	bfac      	ite	ge
 80120a4:	2000      	movge	r0, #0
 80120a6:	2001      	movlt	r0, #1
 80120a8:	4770      	bx	lr
	...

080120ac <nanf>:
 80120ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80120b4 <nanf+0x8>
 80120b0:	4770      	bx	lr
 80120b2:	bf00      	nop
 80120b4:	7fc00000 	.word	0x7fc00000

080120b8 <rintf>:
 80120b8:	b513      	push	{r0, r1, r4, lr}
 80120ba:	ee10 1a10 	vmov	r1, s0
 80120be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80120c2:	0ddc      	lsrs	r4, r3, #23
 80120c4:	3c7f      	subs	r4, #127	; 0x7f
 80120c6:	2c16      	cmp	r4, #22
 80120c8:	dc46      	bgt.n	8012158 <rintf+0xa0>
 80120ca:	b32b      	cbz	r3, 8012118 <rintf+0x60>
 80120cc:	2c00      	cmp	r4, #0
 80120ce:	ee10 2a10 	vmov	r2, s0
 80120d2:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 80120d6:	da21      	bge.n	801211c <rintf+0x64>
 80120d8:	f3c1 0316 	ubfx	r3, r1, #0, #23
 80120dc:	425b      	negs	r3, r3
 80120de:	4a21      	ldr	r2, [pc, #132]	; (8012164 <rintf+0xac>)
 80120e0:	0a5b      	lsrs	r3, r3, #9
 80120e2:	0d09      	lsrs	r1, r1, #20
 80120e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80120e8:	0509      	lsls	r1, r1, #20
 80120ea:	430b      	orrs	r3, r1
 80120ec:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80120f0:	ee07 3a90 	vmov	s15, r3
 80120f4:	edd2 6a00 	vldr	s13, [r2]
 80120f8:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80120fc:	ed8d 7a01 	vstr	s14, [sp, #4]
 8012100:	eddd 7a01 	vldr	s15, [sp, #4]
 8012104:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012108:	ee17 3a90 	vmov	r3, s15
 801210c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012110:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8012114:	ee00 3a10 	vmov	s0, r3
 8012118:	b002      	add	sp, #8
 801211a:	bd10      	pop	{r4, pc}
 801211c:	4b12      	ldr	r3, [pc, #72]	; (8012168 <rintf+0xb0>)
 801211e:	4123      	asrs	r3, r4
 8012120:	4219      	tst	r1, r3
 8012122:	d0f9      	beq.n	8012118 <rintf+0x60>
 8012124:	085b      	lsrs	r3, r3, #1
 8012126:	4219      	tst	r1, r3
 8012128:	d006      	beq.n	8012138 <rintf+0x80>
 801212a:	ea21 0203 	bic.w	r2, r1, r3
 801212e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012132:	fa43 f404 	asr.w	r4, r3, r4
 8012136:	4322      	orrs	r2, r4
 8012138:	4b0a      	ldr	r3, [pc, #40]	; (8012164 <rintf+0xac>)
 801213a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801213e:	ed90 7a00 	vldr	s14, [r0]
 8012142:	ee07 2a90 	vmov	s15, r2
 8012146:	ee77 7a27 	vadd.f32	s15, s14, s15
 801214a:	edcd 7a01 	vstr	s15, [sp, #4]
 801214e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8012152:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012156:	e7df      	b.n	8012118 <rintf+0x60>
 8012158:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801215c:	d3dc      	bcc.n	8012118 <rintf+0x60>
 801215e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012162:	e7d9      	b.n	8012118 <rintf+0x60>
 8012164:	0802a470 	.word	0x0802a470
 8012168:	007fffff 	.word	0x007fffff

0801216c <scalbnf>:
 801216c:	b508      	push	{r3, lr}
 801216e:	ee10 2a10 	vmov	r2, s0
 8012172:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8012176:	ed2d 8b02 	vpush	{d8}
 801217a:	eef0 0a40 	vmov.f32	s1, s0
 801217e:	d004      	beq.n	801218a <scalbnf+0x1e>
 8012180:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012184:	d306      	bcc.n	8012194 <scalbnf+0x28>
 8012186:	ee70 0a00 	vadd.f32	s1, s0, s0
 801218a:	ecbd 8b02 	vpop	{d8}
 801218e:	eeb0 0a60 	vmov.f32	s0, s1
 8012192:	bd08      	pop	{r3, pc}
 8012194:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012198:	d21c      	bcs.n	80121d4 <scalbnf+0x68>
 801219a:	4b1f      	ldr	r3, [pc, #124]	; (8012218 <scalbnf+0xac>)
 801219c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801221c <scalbnf+0xb0>
 80121a0:	4298      	cmp	r0, r3
 80121a2:	ee60 0a27 	vmul.f32	s1, s0, s15
 80121a6:	db10      	blt.n	80121ca <scalbnf+0x5e>
 80121a8:	ee10 2a90 	vmov	r2, s1
 80121ac:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80121b0:	3b19      	subs	r3, #25
 80121b2:	4403      	add	r3, r0
 80121b4:	2bfe      	cmp	r3, #254	; 0xfe
 80121b6:	dd0f      	ble.n	80121d8 <scalbnf+0x6c>
 80121b8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8012220 <scalbnf+0xb4>
 80121bc:	eeb0 0a48 	vmov.f32	s0, s16
 80121c0:	f000 f834 	bl	801222c <copysignf>
 80121c4:	ee60 0a08 	vmul.f32	s1, s0, s16
 80121c8:	e7df      	b.n	801218a <scalbnf+0x1e>
 80121ca:	eddf 7a16 	vldr	s15, [pc, #88]	; 8012224 <scalbnf+0xb8>
 80121ce:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80121d2:	e7da      	b.n	801218a <scalbnf+0x1e>
 80121d4:	0ddb      	lsrs	r3, r3, #23
 80121d6:	e7ec      	b.n	80121b2 <scalbnf+0x46>
 80121d8:	2b00      	cmp	r3, #0
 80121da:	dd06      	ble.n	80121ea <scalbnf+0x7e>
 80121dc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80121e0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80121e4:	ee00 3a90 	vmov	s1, r3
 80121e8:	e7cf      	b.n	801218a <scalbnf+0x1e>
 80121ea:	f113 0f16 	cmn.w	r3, #22
 80121ee:	da06      	bge.n	80121fe <scalbnf+0x92>
 80121f0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80121f4:	4298      	cmp	r0, r3
 80121f6:	dcdf      	bgt.n	80121b8 <scalbnf+0x4c>
 80121f8:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8012224 <scalbnf+0xb8>
 80121fc:	e7de      	b.n	80121bc <scalbnf+0x50>
 80121fe:	3319      	adds	r3, #25
 8012200:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8012204:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8012208:	eddf 7a07 	vldr	s15, [pc, #28]	; 8012228 <scalbnf+0xbc>
 801220c:	ee07 3a10 	vmov	s14, r3
 8012210:	ee67 0a27 	vmul.f32	s1, s14, s15
 8012214:	e7b9      	b.n	801218a <scalbnf+0x1e>
 8012216:	bf00      	nop
 8012218:	ffff3cb0 	.word	0xffff3cb0
 801221c:	4c000000 	.word	0x4c000000
 8012220:	7149f2ca 	.word	0x7149f2ca
 8012224:	0da24260 	.word	0x0da24260
 8012228:	33000000 	.word	0x33000000

0801222c <copysignf>:
 801222c:	ee10 3a10 	vmov	r3, s0
 8012230:	ee10 2a90 	vmov	r2, s1
 8012234:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012238:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801223c:	4313      	orrs	r3, r2
 801223e:	ee00 3a10 	vmov	s0, r3
 8012242:	4770      	bx	lr

08012244 <_init>:
 8012244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012246:	bf00      	nop
 8012248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801224a:	bc08      	pop	{r3}
 801224c:	469e      	mov	lr, r3
 801224e:	4770      	bx	lr

08012250 <_fini>:
 8012250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012252:	bf00      	nop
 8012254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012256:	bc08      	pop	{r3}
 8012258:	469e      	mov	lr, r3
 801225a:	4770      	bx	lr
